
memory_game.elf:     file format elf32-littlenios2
memory_game.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00040244

Program Header:
    LOAD off    0x00001000 vaddr 0x00040000 paddr 0x00040000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00040020 paddr 0x00040020 align 2**12
         filesz 0x00012dd8 memsz 0x00012dd8 flags r-x
    LOAD off    0x00013df8 vaddr 0x00052df8 paddr 0x00054c9c align 2**12
         filesz 0x00001ea4 memsz 0x00001ea4 flags rw-
    LOAD off    0x00016b40 vaddr 0x00056b40 paddr 0x00056b40 align 2**12
         filesz 0x00000000 memsz 0x00000334 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00040000  00040000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00040020  00040020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00012434  00040244  00040244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000780  00052678  00052678  00013678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001ea4  00052df8  00054c9c  00013df8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000334  00056b40  00056b40  00016b40  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2 00000000  00056e74  00056e74  00015c9c  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00015c9c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00001208  00000000  00000000  00015cc0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002f1d4  00000000  00000000  00016ec8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000ba9b  00000000  00000000  0004609c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000dfbd  00000000  00000000  00051b37  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002b40  00000000  00000000  0005faf4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000044ce  00000000  00000000  00062634  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001892a  00000000  00000000  00066b02  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  0007f42c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001a58  00000000  00000000  0007f490  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00084c8e  2**0
                  CONTENTS, READONLY
 18 .cpu          00000008  00000000  00000000  00084c91  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00084c99  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00084c9a  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  00084c9b  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  00084ca4  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  00084cad  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000c  00000000  00000000  00084cb6  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000007  00000000  00000000  00084cc2  2**0
                  CONTENTS, READONLY
 26 .jdi          00005749  00000000  00000000  00084cc9  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00043b73  00000000  00000000  0008a412  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00040000 l    d  .entry	00000000 .entry
00040020 l    d  .exceptions	00000000 .exceptions
00040244 l    d  .text	00000000 .text
00052678 l    d  .rodata	00000000 .rodata
00052df8 l    d  .rwdata	00000000 .rwdata
00056b40 l    d  .bss	00000000 .bss
00056e74 l    d  .onchip_memory2	00000000 .onchip_memory2
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../memory_game_bsp//obj/HAL/src/crt0.o
0004028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 btnLed.c
00056b40 l     O .bss	00000004 leds_status
000402d4 l     F .text	0000005c btnLed_handle_button_interrupts
00000000 l    df *ABS*	00000000 fsm.c
00040494 l     F .text	00000100 fsm_mainMenu
00040594 l     F .text	00000030 fsm_game
000405c4 l     F .text	00000100 fsm_settings
000406c4 l     F .text	0000011c fsm_highscores
00000000 l    df *ABS*	00000000 game.c
00056ba8 l     O .bss	00000190 correct_sequence
00056b50 l     O .bss	00000004 correct_sequence_len
00056b54 l     O .bss	00000004 user_sequence_len
00040908 l     F .text	00000038 game_isEndOfSequence
00040940 l     F .text	000000d4 game_isCorrectInput
00040a14 l     F .text	00000088 game_appendNewTask
00040a9c l     F .text	0000026c game_displayCorrectSequence
00040d08 l     F .text	000000ec game_displayGameStart
00040df4 l     F .text	0000013c game_displayGameOver
00040f30 l     F .text	00000034 game_init
00040f64 l     F .text	00000050 game_over
00000000 l    df *ABS*	00000000 highscore.c
00056d38 l     O .bss	00000014 highscore_list
00000000 l    df *ABS*	00000000 lcd.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 menu.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fseeko.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fwrite.c
00000000 l    df *ABS*	00000000 impure.c
00053078 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 refill.c
00042dcc l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcat.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 time.c
00000000 l    df *ABS*	00000000 vfprintf.c
000528b6 l     O .rodata	00000010 zeroes.4404
0004555c l     F .text	000000bc __sbprintf
000528c6 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 dtoa.c
00045820 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00047350 l     F .text	00000008 __fp_unlock
00047364 l     F .text	0000019c __sinit.part.1
00047500 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 gettimeofdayr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 locale.c
000538c4 l     O .rwdata	00000020 lc_ctype_charset
000538a4 l     O .rwdata	00000020 lc_message_charset
000538e4 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
000528f4 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
00049e98 l     F .text	000000fc __sprint_r.part.0
00052a28 l     O .rodata	00000010 blanks.4348
00052a18 l     O .rodata	00000010 zeroes.4349
0004b424 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0004ed68 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0004ee74 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0004eea0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_gettod.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0004f420 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0004f500 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0004f5ec l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
0004f7c0 l     F .text	0000003c alt_get_errno
0004f7fc l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_read.c
0004fa14 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00054c88 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0004fe34 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0004ff68 l     F .text	00000034 alt_dev_reg
00053ac4 l     O .rwdata	00001060 jtag_uart
00054b24 l     O .rwdata	00000120 lcd_display
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00050258 l     F .text	0000020c altera_avalon_jtag_uart_irq
00050464 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207.c
00054c94 l     O .rwdata	00000004 colstart
00050a9c l     F .text	000000b8 lcd_write_command
00050b54 l     F .text	000000d8 lcd_write_data
00050c2c l     F .text	000000d0 lcd_clear_screen
00050cfc l     F .text	000001ec lcd_repaint_screen
00050ee8 l     F .text	000000cc lcd_scroll_up
00050fb4 l     F .text	000002ac lcd_handle_escape
00051738 l     F .text	000000ac alt_lcd_16207_timeout
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207_fd.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00051c44 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000520f0 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 ctype_.c
00052c76 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00056ba4 g     O .bss	00000004 alt_instruction_exception_handler
0004960c g     F .text	00000074 _mprec_log10
000496f8 g     F .text	0000008c __any_on
00048270 g     F .text	00000054 _isatty_r
00052900 g     O .rodata	00000028 __mprec_tinytens
0004f6fc g     F .text	0000007c alt_main
000431d0 g     F .text	00000090 strcpy
00042c7c g     F .text	000000c0 _puts_r
00056d74 g     O .bss	00000100 alt_irq
000483a0 g     F .text	00000060 _lseek_r
00054c9c g       *ABS*	00000000 __flash_rwdata_start
000476f0 g     F .text	000000ac __sflags
0004d894 g     F .text	00000088 .hidden __eqdf2
00048214 g     F .text	0000005c _gettimeofday_r
00056e74 g       *ABS*	00000000 __alt_heap_start
00041614 g     F .text	000000a4 menu_about
00042c40 g     F .text	0000003c printf
0004ba08 g     F .text	0000009c _wcrtomb_r
000430e8 g     F .text	0000005c __sseek
000476a0 g     F .text	00000010 __sinit
0004b8b0 g     F .text	00000140 __swbuf_r
00056b4c g     O .bss	00000004 lcd
000482c4 g     F .text	0000007c _setlocale_r
00047508 g     F .text	00000068 __sfmoreglue
0004f79c g     F .text	00000024 __malloc_unlock
00053038 g     O .rwdata	00000010 highscores_page
0004862c g     F .text	0000015c memmove
00047688 g     F .text	00000018 _cleanup
00048788 g     F .text	000000a8 _Balloc
0004d91c g     F .text	000000dc .hidden __gtdf2
00052230 g     F .text	00000024 altera_nios2_gen2_irq_init
000407e0 g     F .text	0000006c fsm
00040000 g     F .entry	0000001c __reset
00056b44 g     O .bss	00000004 edge_capture
00040020 g       *ABS*	00000000 __flash_exceptions_start
00041f64 g     F .text	0000005c _fstat_r
00056b60 g     O .bss	00000004 errno
00043064 g     F .text	00000008 __seofread
00056b94 g     O .bss	00000004 alt_argv
0005cc44 g       *ABS*	00000000 _gp
0004fe04 g     F .text	00000030 usleep
000410b8 g     F .text	000000fc highscore_update
000411b4 g     F .text	000000b0 highscore_display
00053944 g     O .rwdata	00000180 alt_fd_list
00052ff0 g     O .rwdata	00000038 difficulty_page_items
00051de4 g     F .text	00000090 alt_find_dev
000484e4 g     F .text	00000148 memcpy
00041088 g     F .text	00000030 game_set_hard_difficulty
00047358 g     F .text	0000000c _cleanup_r
0004eb80 g     F .text	000000dc .hidden __floatsidf
000521b4 g     F .text	0000007c alt_io_redirect
0004d9f8 g     F .text	000000f4 .hidden __ltdf2
00052678 g       *ABS*	00000000 __DTOR_END__
00042d3c g     F .text	00000014 puts
00052054 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00049d48 g     F .text	00000074 __fpclassifyd
00049568 g     F .text	000000a4 __ratio
0004b408 g     F .text	0000001c __vfiprintf_internal
0005065c g     F .text	0000021c altera_avalon_jtag_uart_read
00042c10 g     F .text	00000030 _printf_r
000418d0 g     F .text	00000064 .hidden __udivsi3
0004f45c g     F .text	000000a4 isatty
00052950 g     O .rodata	000000c8 __mprec_tens
00048340 g     F .text	0000000c __locale_charset
00056b7c g     O .bss	00000008 alt_timezone
00052254 g     F .text	00000090 alt_icache_flush
00056b6c g     O .bss	00000004 __malloc_top_pad
00054c64 g     O .rwdata	00000004 __mb_cur_max
00048370 g     F .text	0000000c _localeconv_r
00048b94 g     F .text	0000003c __i2b
00047bd0 g     F .text	000004bc __sfvwrite_r
00042fbc g     F .text	00000054 _sbrk_r
00049784 g     F .text	00000060 _read_r
00054c7c g     O .rwdata	00000004 alt_max_fd
0004b5a4 g     F .text	000000f0 _fclose_r
00047320 g     F .text	00000030 fflush
00056b68 g     O .bss	00000004 __malloc_max_sbrked_mem
0004c700 g     F .text	000008ac .hidden __adddf3
00052ed8 g     O .rwdata	00000054 settings_page_items
00049310 g     F .text	0000010c __b2d
00053068 g     O .rwdata	00000010 difficulty_page
0004c1c8 g     F .text	00000538 .hidden __umoddi3
0004f628 g     F .text	000000d4 lseek
00054c54 g     O .rwdata	00000004 _global_impure_ptr
000497e4 g     F .text	00000564 _realloc_r
00056e74 g       *ABS*	00000000 __bss_end
0004f330 g     F .text	000000f0 alt_iic_isr_register
0004fcfc g     F .text	00000108 alt_tick
00040460 g     F .text	00000034 btnLed_clear_all_leds
0004bc50 g     F .text	00000578 .hidden __udivdi3
0004b80c g     F .text	00000024 _fputwc_r
000413a4 g     F .text	00000048 lcd_clear
00052928 g     O .rodata	00000028 __mprec_bigtens
00048978 g     F .text	00000104 __s2b
0004ec5c g     F .text	000000a8 .hidden __floatunsidf
00049050 g     F .text	00000060 __mcmp
000476c0 g     F .text	00000018 __fp_lock_all
0004f2e4 g     F .text	0000004c alt_ic_irq_enabled
00056b48 g     O .bss	00000004 state
0004fc60 g     F .text	0000009c alt_alarm_stop
00041454 g     F .text	000000ac menu_displayPage
00056b8c g     O .bss	00000004 alt_irq_active
00041b04 g     F .text	00000444 _fseeko_r
00053058 g     O .rwdata	00000010 about_page
000400fc g     F .exceptions	000000d4 alt_irq_handler
0005391c g     O .rwdata	00000028 alt_dev_null
00040fb4 g     F .text	000000a4 game_play
00051bfc g     F .text	00000048 alt_dcache_flush_all
00048a7c g     F .text	00000068 __hi0bits
0004eb00 g     F .text	00000080 .hidden __fixdfsi
00054c9c g       *ABS*	00000000 __ram_rwdata_end
00041264 g     F .text	000000cc highscore_reset
00054c74 g     O .rwdata	00000008 alt_dev_list
0004fe70 g     F .text	000000f8 write
00052df8 g       *ABS*	00000000 __ram_rodata_end
0004eedc g     F .text	000000b0 fstat
00041ac0 g     F .text	00000024 fprintf
0004d9f8 g     F .text	000000f4 .hidden __ledf2
0004314c g     F .text	00000084 strcat
00053048 g     O .rwdata	00000010 settings_page
00048dc8 g     F .text	00000140 __pow5mult
00049fac g     F .text	0000145c ___vfiprintf_internal_r
00056b78 g     O .bss	00000004 __nlocale_changed
00041934 g     F .text	00000058 .hidden __umodsi3
00052df8 g     O .rwdata	00000054 main_page_items
000416b8 g     F .text	00000120 menu_change_difficulty
00056e74 g       *ABS*	00000000 end
00051260 g     F .text	000004d8 altera_avalon_lcd_16207_write
00041f48 g     F .text	0000001c fseeko
00041ae8 g     F .text	0000001c fseek
00050198 g     F .text	000000c0 altera_avalon_jtag_uart_init
000401d0 g     F .exceptions	00000074 alt_instruction_exception_entry
00052678 g       *ABS*	00000000 __CTOR_LIST__
00072000 g       *ABS*	00000000 __alt_stack_pointer
0004ed04 g     F .text	00000064 .hidden __clzsi2
00050878 g     F .text	00000224 altera_avalon_jtag_uart_write
000476b0 g     F .text	00000004 __sfp_lock_acquire
00048400 g     F .text	000000e4 memchr
00043348 g     F .text	000021f8 ___vfprintf_internal_r
000478c0 g     F .text	00000310 _free_r
00053028 g     O .rwdata	00000010 main_page
0004834c g     F .text	00000010 __locale_mb_cur_max
000524c4 g     F .text	00000180 __call_exitprocs
00054c44 g     O .rwdata	00000008 easy
00056b74 g     O .bss	00000004 __mlocale_changed
00054c5c g     O .rwdata	00000004 __malloc_sbrk_base
00040244 g     F .text	0000004c _start
00056b9c g     O .bss	00000004 _alt_tick_rate
0004084c g     F .text	000000bc game_getUserInput
00042d68 g     F .text	00000064 rand
00048f08 g     F .text	00000148 __lshift
00056ba0 g     O .bss	00000004 _alt_nticks
0004fa50 g     F .text	000000fc read
0004ffd4 g     F .text	00000060 alt_sys_init
00042bb0 g     F .text	00000060 _open_r
000523ac g     F .text	00000118 __register_exitproc
00048bd0 g     F .text	000001f8 __multiply
00041330 g     F .text	00000074 lcd_print
00050504 g     F .text	00000068 altera_avalon_jtag_uart_close
00052df8 g       *ABS*	00000000 __ram_rwdata_start
00052678 g       *ABS*	00000000 __ram_rodata_start
00056d4c g     O .bss	00000028 __malloc_current_mallinfo
0004941c g     F .text	0000014c __d2b
000402b0 g     F .text	00000024 btnLed_reset_edge_capture
00050034 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00051f7c g     F .text	000000a4 alt_get_fd
00051aa4 g     F .text	00000158 alt_busy_sleep
000457cc g     F .text	00000054 _close_r
00052330 g     F .text	0000007c memcmp
000500f4 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00056e74 g       *ABS*	00000000 __alt_stack_base
00050144 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00041fc0 g     F .text	000000cc _fwrite_r
00052e4c g     O .rwdata	0000008c highscores_page_items
00045678 g     F .text	00000154 __swsetup_r
0004cfac g     F .text	000008e8 .hidden __divdf3
00047570 g     F .text	00000118 __sfp
00049680 g     F .text	00000078 __copybits
0005349c g     O .rwdata	00000408 __malloc_av_
000476bc g     F .text	00000004 __sinit_lock_release
0004daec g     F .text	00000718 .hidden __muldf3
00043010 g     F .text	00000054 __sread
000403a4 g     F .text	00000034 btnLed_set_sevenseg
00051e74 g     F .text	00000108 alt_find_file
00051c80 g     F .text	000000a4 alt_dev_llist_insert
0004f778 g     F .text	00000024 __malloc_lock
00041a98 g     F .text	00000028 _fprintf_r
0004fbb0 g     F .text	000000b0 sbrk
000472c4 g     F .text	0000005c _fflush_r
00041500 g     F .text	00000114 menu_scrollPage
0004b4e0 g     F .text	000000c4 _calloc_r
0004ef8c g     F .text	000001f4 gettimeofday
00041a80 g     F .text	00000018 fopen
00056b40 g       *ABS*	00000000 __bss_start
00042a88 g     F .text	00000128 memset
000413ec g     F .text	00000068 main
00056b98 g     O .bss	00000004 alt_envp
00056b64 g     O .bss	00000004 __malloc_max_total_mem
00050094 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0004b9f0 g     F .text	00000018 __swbuf
00042d50 g     F .text	00000018 srand
000517e4 g     F .text	00000134 altera_avalon_lcd_16207_init
00043144 g     F .text	00000008 __sclose
00072000 g       *ABS*	00000000 __alt_heap_limit
0004b694 g     F .text	00000014 fclose
00045a20 g     F .text	00001688 _dtoa_r
0004227c g     F .text	0000080c _malloc_r
0004bb64 g     F .text	00000030 __ascii_wctomb
000432f8 g     F .text	00000050 time
00054c80 g     O .rwdata	00000004 alt_errno
0004808c g     F .text	000000c4 _fwalk
000417d8 g     F .text	00000084 .hidden __divsi3
0004779c g     F .text	00000124 _malloc_trim_r
00052678 g       *ABS*	00000000 __CTOR_END__
00049dbc g     F .text	000000dc strcmp
00052678 g       *ABS*	00000000 __flash_rodata_start
00040330 g     F .text	00000074 btnLed_init
00052678 g       *ABS*	00000000 __DTOR_LIST__
0004d894 g     F .text	00000088 .hidden __nedf2
0004ff9c g     F .text	00000038 alt_irq_init
0004fb4c g     F .text	00000064 alt_release_fd
00052a38 g     O .rodata	00000100 .hidden __clz_tab
00056b70 g     O .bss	00000004 _PathLocale
000522e4 g     F .text	00000014 atexit
00045618 g     F .text	00000060 _write_r
0004837c g     F .text	00000018 setlocale
00054c58 g     O .rwdata	00000004 _impure_ptr
00056b90 g     O .bss	00000004 alt_argc
000470a8 g     F .text	0000021c __sflush_r
00051d84 g     F .text	00000060 _do_dtors
00048368 g     F .text	00000008 __locale_cjk_lang
00041ae4 g     F .text	00000004 _fseek_r
00042de8 g     F .text	000001d4 __srefill_r
00040020 g       .exceptions	00000000 alt_irq_entry
000492ac g     F .text	00000064 __ulp
000476d8 g     F .text	00000018 __fp_unlock_all
00051918 g     F .text	00000060 altera_avalon_lcd_16207_write_fd
00054c6c g     O .rwdata	00000008 alt_fs_list
00052f2c g     O .rwdata	000000c4 about_page_items
00056b84 g     O .bss	00000008 alt_resettime
00040020 g       *ABS*	00000000 __ram_exceptions_start
00048394 g     F .text	0000000c localeconv
00040000 g       *ABS*	00000000 __alt_mem_onchip_memory2
00040424 g     F .text	0000003c btnLed_set_all_red_leds
00054c4c g     O .rwdata	00000008 hard
0004f180 g     F .text	00000050 alt_ic_isr_register
0004208c g     F .text	00000034 fwrite
00054c9c g       *ABS*	00000000 _edata
00040290 g     F .text	00000020 btnLed_get_edge_capture
00056e74 g       *ABS*	00000000 _end
0004b6a8 g     F .text	00000164 __fputwc
00040244 g       *ABS*	00000000 __ram_exceptions_end
0005056c g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0004f258 g     F .text	0000008c alt_ic_irq_disable
0004306c g     F .text	0000007c __swrite
00054c60 g     O .rwdata	00000004 __malloc_trim_threshold
0004835c g     F .text	0000000c __locale_msgcharset
000522f8 g     F .text	00000038 exit
00048150 g     F .text	000000c4 _fwalk_reent
00041058 g     F .text	00000030 game_set_easy_difficulty
000490b0 g     F .text	000001fc __mdiff
000403d8 g     F .text	0000004c btnLed_set_led
0004185c g     F .text	00000074 .hidden __modsi3
00054c98 g     O .rwdata	00000004 __ctype_ptr__
00072000 g       *ABS*	00000000 __alt_data_end
00040020 g     F .exceptions	00000000 alt_exception
00056b58 g     O .bss	00000008 difficulty
000476b4 g     F .text	00000004 __sfp_lock_release
00052b75 g     O .rodata	00000101 _ctype_
0004198c g     F .text	000000f4 _fopen_r
00052644 g     F .text	00000034 _exit
00051978 g     F .text	0000012c alt_alarm_start
0004bbf0 g     F .text	00000060 .hidden __muldi3
000420c0 g     F .text	000001bc __smakebuf_r
00043260 g     F .text	00000098 strlen
0004f8c0 g     F .text	00000154 open
0004d91c g     F .text	000000dc .hidden __gedf2
00054c68 g     O .rwdata	00000004 __wctomb
00049f94 g     F .text	00000018 __sprint_r
00052020 g     F .text	00000034 alt_icache_flush_all
00054c84 g     O .rwdata	00000004 alt_priority_mask
0004f1d0 g     F .text	00000088 alt_ic_irq_enable
00045540 g     F .text	0000001c __vfprintf_internal
0004bb94 g     F .text	0000005c _wctomb_r
0004e204 g     F .text	000008fc .hidden __subdf3
00048ae4 g     F .text	000000b0 __lo0bits
00054c8c g     O .rwdata	00000008 alt_alarm_list
00051d24 g     F .text	00000060 _do_ctors
0004baa4 g     F .text	000000c0 wcrtomb
0004eda4 g     F .text	000000d0 close
0004f568 g     F .text	00000084 alt_load
0004b830 g     F .text	00000080 fputwc
000476b8 g     F .text	00000004 __sinit_lock_acquire
00048858 g     F .text	00000120 __multadd
00048830 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00040000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   40000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   40004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   40008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   4000c:	00bffd16 	blt	zero,r2,40004 <__alt_data_end+0xfffce004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   40010:	00400134 	movhi	at,4
    ori r1, r1, %lo(_start)
   40014:	08409114 	ori	at,at,580
    jmp r1
   40018:	0800683a 	jmp	at
   4001c:	00000000 	call	0 <__alt_mem_onchip_memory2-0x40000>

Disassembly of section .exceptions:

00040020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   40020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   40024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   40028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   4002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   40030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   40034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   40038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   4003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   40040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   40044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   40048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   4004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   40050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   40054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   40058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   4005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   40060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   40064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   40068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   4006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   40070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   40074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   40078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   4007c:	10000326 	beq	r2,zero,4008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   40080:	20000226 	beq	r4,zero,4008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   40084:	00400fc0 	call	400fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   40088:	00000706 	br	400a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   4008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   40090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   40094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   40098:	00401d00 	call	401d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   4009c:	1000021e 	bne	r2,zero,400a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   400a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   400a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   400a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   400ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   400b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   400b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   400b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   400bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   400c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   400c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   400c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   400cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   400d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   400d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   400d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   400dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   400e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   400e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   400e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   400ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   400f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   400f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   400f8:	ef80083a 	eret

000400fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   400fc:	defff904 	addi	sp,sp,-28
   40100:	dfc00615 	stw	ra,24(sp)
   40104:	df000515 	stw	fp,20(sp)
   40108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   4010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   40110:	0005313a 	rdctl	r2,ipending
   40114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   40118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   4011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   40120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   40124:	00800044 	movi	r2,1
   40128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   4012c:	e0fffb17 	ldw	r3,-20(fp)
   40130:	e0bffc17 	ldw	r2,-16(fp)
   40134:	1884703a 	and	r2,r3,r2
   40138:	10001426 	beq	r2,zero,4018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   4013c:	00800174 	movhi	r2,5
   40140:	109b5d04 	addi	r2,r2,28020
   40144:	e0fffd17 	ldw	r3,-12(fp)
   40148:	180690fa 	slli	r3,r3,3
   4014c:	10c5883a 	add	r2,r2,r3
   40150:	10c00017 	ldw	r3,0(r2)
   40154:	00800174 	movhi	r2,5
   40158:	109b5d04 	addi	r2,r2,28020
   4015c:	e13ffd17 	ldw	r4,-12(fp)
   40160:	200890fa 	slli	r4,r4,3
   40164:	1105883a 	add	r2,r2,r4
   40168:	10800104 	addi	r2,r2,4
   4016c:	10800017 	ldw	r2,0(r2)
   40170:	1009883a 	mov	r4,r2
   40174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   40178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   4017c:	0005313a 	rdctl	r2,ipending
   40180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   40184:	e0bfff17 	ldw	r2,-4(fp)
   40188:	00000706 	br	401a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   4018c:	e0bffc17 	ldw	r2,-16(fp)
   40190:	1085883a 	add	r2,r2,r2
   40194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   40198:	e0bffd17 	ldw	r2,-12(fp)
   4019c:	10800044 	addi	r2,r2,1
   401a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   401a4:	003fe106 	br	4012c <__alt_data_end+0xfffce12c>

    active = alt_irq_pending ();
   401a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   401ac:	e0bffb17 	ldw	r2,-20(fp)
   401b0:	103fdb1e 	bne	r2,zero,40120 <__alt_data_end+0xfffce120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   401b4:	0001883a 	nop
}
   401b8:	0001883a 	nop
   401bc:	e037883a 	mov	sp,fp
   401c0:	dfc00117 	ldw	ra,4(sp)
   401c4:	df000017 	ldw	fp,0(sp)
   401c8:	dec00204 	addi	sp,sp,8
   401cc:	f800283a 	ret

000401d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   401d0:	defffb04 	addi	sp,sp,-20
   401d4:	dfc00415 	stw	ra,16(sp)
   401d8:	df000315 	stw	fp,12(sp)
   401dc:	df000304 	addi	fp,sp,12
   401e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
   401e4:	000531fa 	rdctl	r2,exception
   401e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
   401ec:	e0bffd17 	ldw	r2,-12(fp)
   401f0:	10801f0c 	andi	r2,r2,124
   401f4:	1004d0ba 	srli	r2,r2,2
   401f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
   401fc:	0005333a 	rdctl	r2,badaddr
   40200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   40204:	d0a7d817 	ldw	r2,-24736(gp)
   40208:	10000726 	beq	r2,zero,40228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   4020c:	d0a7d817 	ldw	r2,-24736(gp)
   40210:	e0fffd17 	ldw	r3,-12(fp)
   40214:	e1bffe17 	ldw	r6,-8(fp)
   40218:	e17fff17 	ldw	r5,-4(fp)
   4021c:	1809883a 	mov	r4,r3
   40220:	103ee83a 	callr	r2
   40224:	00000206 	br	40230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   40228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   4022c:	0005883a 	mov	r2,zero
}
   40230:	e037883a 	mov	sp,fp
   40234:	dfc00117 	ldw	ra,4(sp)
   40238:	df000017 	ldw	fp,0(sp)
   4023c:	dec00204 	addi	sp,sp,8
   40240:	f800283a 	ret

Disassembly of section .text:

00040244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   40244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
   40248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   4024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
   40250:	00bffd16 	blt	zero,r2,40248 <__alt_data_end+0xfffce248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   40254:	06c001f4 	movhi	sp,7
    ori sp, sp, %lo(__alt_stack_pointer)
   40258:	dec80014 	ori	sp,sp,8192
    movhi gp, %hi(_gp)
   4025c:	06800174 	movhi	gp,5
    ori gp, gp, %lo(_gp)
   40260:	d6b31114 	ori	gp,gp,52292
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   40264:	00800174 	movhi	r2,5
    ori r2, r2, %lo(__bss_start)
   40268:	109ad014 	ori	r2,r2,27456

    movhi r3, %hi(__bss_end)
   4026c:	00c00174 	movhi	r3,5
    ori r3, r3, %lo(__bss_end)
   40270:	18db9d14 	ori	r3,r3,28276

    beq r2, r3, 1f
   40274:	10c00326 	beq	r2,r3,40284 <_start+0x40>

0:
    stw zero, (r2)
   40278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   4027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   40280:	10fffd36 	bltu	r2,r3,40278 <__alt_data_end+0xfffce278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   40284:	004f5680 	call	4f568 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   40288:	004f6fc0 	call	4f6fc <alt_main>

0004028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   4028c:	003fff06 	br	4028c <__alt_data_end+0xfffce28c>

00040290 <btnLed_get_edge_capture>:

// A variable to hold the value of the button pio edge capture register
volatile int edge_capture;

/* Function to get the value of the edge_capture variable */
int btnLed_get_edge_capture(void) {
   40290:	deffff04 	addi	sp,sp,-4
   40294:	df000015 	stw	fp,0(sp)
   40298:	d839883a 	mov	fp,sp
    return edge_capture;
   4029c:	d0a7c017 	ldw	r2,-24832(gp)
}
   402a0:	e037883a 	mov	sp,fp
   402a4:	df000017 	ldw	fp,0(sp)
   402a8:	dec00104 	addi	sp,sp,4
   402ac:	f800283a 	ret

000402b0 <btnLed_reset_edge_capture>:

/* Function to set the value of the edge_capture variable */
void btnLed_reset_edge_capture() {
   402b0:	deffff04 	addi	sp,sp,-4
   402b4:	df000015 	stw	fp,0(sp)
   402b8:	d839883a 	mov	fp,sp
    edge_capture = 0;
   402bc:	d027c015 	stw	zero,-24832(gp)
}
   402c0:	0001883a 	nop
   402c4:	e037883a 	mov	sp,fp
   402c8:	df000017 	ldw	fp,0(sp)
   402cc:	dec00104 	addi	sp,sp,4
   402d0:	f800283a 	ret

000402d4 <btnLed_handle_button_interrupts>:

static void btnLed_handle_button_interrupts(void* context) {
   402d4:	defffd04 	addi	sp,sp,-12
   402d8:	df000215 	stw	fp,8(sp)
   402dc:	df000204 	addi	fp,sp,8
   402e0:	e13fff15 	stw	r4,-4(fp)
    /* Cast context to edge_capture's type. It is important that this be
     * declared volatile to avoid unwanted compiler optimization.
     */
    volatile int* edge_capture_ptr = (volatile int*) context;
   402e4:	e0bfff17 	ldw	r2,-4(fp)
   402e8:	e0bffe15 	stw	r2,-8(fp)
    /* Store the value in the Button's edge capture register in *context. */
    *edge_capture_ptr = IORD_ALTERA_AVALON_PIO_EDGE_CAP(BUTTON_PIO_BASE);
   402ec:	00800234 	movhi	r2,8
   402f0:	10840704 	addi	r2,r2,4124
   402f4:	10c00037 	ldwio	r3,0(r2)
   402f8:	e0bffe17 	ldw	r2,-8(fp)
   402fc:	10c00015 	stw	r3,0(r2)
    /* Reset the Button's edge capture register. */
    IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTON_PIO_BASE, 0);
   40300:	0007883a 	mov	r3,zero
   40304:	00800234 	movhi	r2,8
   40308:	10840704 	addi	r2,r2,4124
   4030c:	10c00035 	stwio	r3,0(r2)
    /*
     * Read the PIO to delay ISR exit. This is done to prevent a spurious
     * interrupt in systems with high processor -> pio latency and fast
     * interrupts.
     */
    IORD_ALTERA_AVALON_PIO_EDGE_CAP(BUTTON_PIO_BASE);
   40310:	00800234 	movhi	r2,8
   40314:	10840704 	addi	r2,r2,4124
   40318:	10800037 	ldwio	r2,0(r2)
}
   4031c:	0001883a 	nop
   40320:	e037883a 	mov	sp,fp
   40324:	df000017 	ldw	fp,0(sp)
   40328:	dec00104 	addi	sp,sp,4
   4032c:	f800283a 	ret

00040330 <btnLed_init>:


/* Initialize the button_pio. */
void btnLed_init()
{
   40330:	defffc04 	addi	sp,sp,-16
   40334:	dfc00315 	stw	ra,12(sp)
   40338:	df000215 	stw	fp,8(sp)
   4033c:	df000204 	addi	fp,sp,8
    /* Recast the edge_capture pointer to match the alt_irq_register() function
     * prototype. */
    void* edge_capture_ptr = (void*) &edge_capture;
   40340:	d0a7c004 	addi	r2,gp,-24832
   40344:	e0bfff15 	stw	r2,-4(fp)
    /* Enable all 4 button interrupts. */
    IOWR_ALTERA_AVALON_PIO_IRQ_MASK(BUTTON_PIO_BASE, 0xf);
   40348:	00c003c4 	movi	r3,15
   4034c:	00800234 	movhi	r2,8
   40350:	10840604 	addi	r2,r2,4120
   40354:	10c00035 	stwio	r3,0(r2)
    /* Reset the edge capture register. */
    IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTON_PIO_BASE, 0x0);
   40358:	0007883a 	mov	r3,zero
   4035c:	00800234 	movhi	r2,8
   40360:	10840704 	addi	r2,r2,4124
   40364:	10c00035 	stwio	r3,0(r2)
    /* Register the interrupt handler. */

    alt_ic_isr_register(BUTTON_PIO_IRQ_INTERRUPT_CONTROLLER_ID, BUTTON_PIO_IRQ,
   40368:	d8000015 	stw	zero,0(sp)
   4036c:	e1ffff17 	ldw	r7,-4(fp)
   40370:	01800134 	movhi	r6,4
   40374:	3180b504 	addi	r6,r6,724
   40378:	01400044 	movi	r5,1
   4037c:	0009883a 	mov	r4,zero
   40380:	004f1800 	call	4f180 <alt_ic_isr_register>
      btnLed_handle_button_interrupts, edge_capture_ptr, 0x0);
    
    btnLed_set_sevenseg(0);
   40384:	0009883a 	mov	r4,zero
   40388:	00403a40 	call	403a4 <btnLed_set_sevenseg>
}
   4038c:	0001883a 	nop
   40390:	e037883a 	mov	sp,fp
   40394:	dfc00117 	ldw	ra,4(sp)
   40398:	df000017 	ldw	fp,0(sp)
   4039c:	dec00204 	addi	sp,sp,8
   403a0:	f800283a 	ret

000403a4 <btnLed_set_sevenseg>:

/* Output a value on the 7-segment display (hex) */
void btnLed_set_sevenseg(int value) {
   403a4:	defffe04 	addi	sp,sp,-8
   403a8:	df000115 	stw	fp,4(sp)
   403ac:	df000104 	addi	fp,sp,4
   403b0:	e13fff15 	stw	r4,-4(fp)
  IOWR_ALTERA_AVALON_PIO_DATA(SEVEN_SEG_PIO_BASE, value);
   403b4:	00800234 	movhi	r2,8
   403b8:	10840004 	addi	r2,r2,4096
   403bc:	e0ffff17 	ldw	r3,-4(fp)
   403c0:	10c00035 	stwio	r3,0(r2)
}
   403c4:	0001883a 	nop
   403c8:	e037883a 	mov	sp,fp
   403cc:	df000017 	ldw	fp,0(sp)
   403d0:	dec00104 	addi	sp,sp,4
   403d4:	f800283a 	ret

000403d8 <btnLed_set_led>:

void btnLed_set_led(int led_nr) {
   403d8:	defffe04 	addi	sp,sp,-8
   403dc:	df000115 	stw	fp,4(sp)
   403e0:	df000104 	addi	fp,sp,4
   403e4:	e13fff15 	stw	r4,-4(fp)
  leds_status |= 1 << led_nr;
   403e8:	00c00044 	movi	r3,1
   403ec:	e0bfff17 	ldw	r2,-4(fp)
   403f0:	1886983a 	sll	r3,r3,r2
   403f4:	d0a7bf17 	ldw	r2,-24836(gp)
   403f8:	1884b03a 	or	r2,r3,r2
   403fc:	d0a7bf15 	stw	r2,-24836(gp)
  IOWR_ALTERA_AVALON_PIO_DATA(LED_PIO_BASE, leds_status);
   40400:	d0e7bf17 	ldw	r3,-24836(gp)
   40404:	00800234 	movhi	r2,8
   40408:	10840804 	addi	r2,r2,4128
   4040c:	10c00035 	stwio	r3,0(r2)
}
   40410:	0001883a 	nop
   40414:	e037883a 	mov	sp,fp
   40418:	df000017 	ldw	fp,0(sp)
   4041c:	dec00104 	addi	sp,sp,4
   40420:	f800283a 	ret

00040424 <btnLed_set_all_red_leds>:

void btnLed_set_all_red_leds() {
   40424:	deffff04 	addi	sp,sp,-4
   40428:	df000015 	stw	fp,0(sp)
   4042c:	d839883a 	mov	fp,sp
  leds_status = 0x1FFFF00;
   40430:	00808034 	movhi	r2,512
   40434:	10bfc004 	addi	r2,r2,-256
   40438:	d0a7bf15 	stw	r2,-24836(gp)
  IOWR_ALTERA_AVALON_PIO_DATA(LED_PIO_BASE, leds_status);
   4043c:	d0e7bf17 	ldw	r3,-24836(gp)
   40440:	00800234 	movhi	r2,8
   40444:	10840804 	addi	r2,r2,4128
   40448:	10c00035 	stwio	r3,0(r2)
}
   4044c:	0001883a 	nop
   40450:	e037883a 	mov	sp,fp
   40454:	df000017 	ldw	fp,0(sp)
   40458:	dec00104 	addi	sp,sp,4
   4045c:	f800283a 	ret

00040460 <btnLed_clear_all_leds>:

void btnLed_clear_all_leds() {
   40460:	deffff04 	addi	sp,sp,-4
   40464:	df000015 	stw	fp,0(sp)
   40468:	d839883a 	mov	fp,sp
  leds_status = 0;
   4046c:	d027bf15 	stw	zero,-24836(gp)
  IOWR_ALTERA_AVALON_PIO_DATA(LED_PIO_BASE, leds_status);
   40470:	d0e7bf17 	ldw	r3,-24836(gp)
   40474:	00800234 	movhi	r2,8
   40478:	10840804 	addi	r2,r2,4128
   4047c:	10c00035 	stwio	r3,0(r2)
}
   40480:	0001883a 	nop
   40484:	e037883a 	mov	sp,fp
   40488:	df000017 	ldw	fp,0(sp)
   4048c:	dec00104 	addi	sp,sp,4
   40490:	f800283a 	ret

00040494 <fsm_mainMenu>:
#include "fsm.h"


STATE state = MAIN_MENU;

static void fsm_mainMenu() {
   40494:	defffd04 	addi	sp,sp,-12
   40498:	dfc00215 	stw	ra,8(sp)
   4049c:	df000115 	stw	fp,4(sp)
   404a0:	df000104 	addi	fp,sp,4
  menu_displayPage(main_page);
   404a4:	00800174 	movhi	r2,5
   404a8:	108c0a04 	addi	r2,r2,12328
   404ac:	11000017 	ldw	r4,0(r2)
   404b0:	11400117 	ldw	r5,4(r2)
   404b4:	11800217 	ldw	r6,8(r2)
   404b8:	11c00317 	ldw	r7,12(r2)
   404bc:	00414540 	call	41454 <menu_displayPage>
  USERINPUT input = game_getUserInput();
   404c0:	004084c0 	call	4084c <game_getUserInput>
   404c4:	e0bfff15 	stw	r2,-4(fp)
  switch(input) {
   404c8:	e0bfff17 	ldw	r2,-4(fp)
   404cc:	10c000a0 	cmpeqi	r3,r2,2
   404d0:	18000f1e 	bne	r3,zero,40510 <fsm_mainMenu+0x7c>
   404d4:	10c000e8 	cmpgeui	r3,r2,3
   404d8:	1800031e 	bne	r3,zero,404e8 <fsm_mainMenu+0x54>
   404dc:	10800060 	cmpeqi	r2,r2,1
   404e0:	1000061e 	bne	r2,zero,404fc <fsm_mainMenu+0x68>
      break;
    case BTN_GREEN_ENTER:
      state = main_page.items[main_page.lcd_line0_index].enter_state;
      break;
  }
}
   404e4:	00002506 	br	4057c <fsm_mainMenu+0xe8>
STATE state = MAIN_MENU;

static void fsm_mainMenu() {
  menu_displayPage(main_page);
  USERINPUT input = game_getUserInput();
  switch(input) {
   404e8:	10c000e0 	cmpeqi	r3,r2,3
   404ec:	18000d1e 	bne	r3,zero,40524 <fsm_mainMenu+0x90>
   404f0:	10800120 	cmpeqi	r2,r2,4
   404f4:	1000161e 	bne	r2,zero,40550 <fsm_mainMenu+0xbc>
      break;
    case BTN_GREEN_ENTER:
      state = main_page.items[main_page.lcd_line0_index].enter_state;
      break;
  }
}
   404f8:	00002006 	br	4057c <fsm_mainMenu+0xe8>
static void fsm_mainMenu() {
  menu_displayPage(main_page);
  USERINPUT input = game_getUserInput();
  switch(input) {
    case BTN_WHITE_UP:
      menu_scrollPage(&main_page, BTN_WHITE_UP);
   404fc:	01400044 	movi	r5,1
   40500:	01000174 	movhi	r4,5
   40504:	210c0a04 	addi	r4,r4,12328
   40508:	00415000 	call	41500 <menu_scrollPage>
      break;
   4050c:	00001b06 	br	4057c <fsm_mainMenu+0xe8>
    case BTN_YELLOW_DOWN:
      menu_scrollPage(&main_page, BTN_YELLOW_DOWN);
   40510:	01400084 	movi	r5,2
   40514:	01000174 	movhi	r4,5
   40518:	210c0a04 	addi	r4,r4,12328
   4051c:	00415000 	call	41500 <menu_scrollPage>
      break;
   40520:	00001606 	br	4057c <fsm_mainMenu+0xe8>
    case BTN_RED_BACK:
      state = main_page.items[main_page.lcd_line0_index].exit_state;
   40524:	00800174 	movhi	r2,5
   40528:	108c0a04 	addi	r2,r2,12328
   4052c:	10c00117 	ldw	r3,4(r2)
   40530:	00800174 	movhi	r2,5
   40534:	108c0a04 	addi	r2,r2,12328
   40538:	10800217 	ldw	r2,8(r2)
   4053c:	10800724 	muli	r2,r2,28
   40540:	1885883a 	add	r2,r3,r2
   40544:	10800517 	ldw	r2,20(r2)
   40548:	d0a7c115 	stw	r2,-24828(gp)
      break;
   4054c:	00000b06 	br	4057c <fsm_mainMenu+0xe8>
    case BTN_GREEN_ENTER:
      state = main_page.items[main_page.lcd_line0_index].enter_state;
   40550:	00800174 	movhi	r2,5
   40554:	108c0a04 	addi	r2,r2,12328
   40558:	10c00117 	ldw	r3,4(r2)
   4055c:	00800174 	movhi	r2,5
   40560:	108c0a04 	addi	r2,r2,12328
   40564:	10800217 	ldw	r2,8(r2)
   40568:	10800724 	muli	r2,r2,28
   4056c:	1885883a 	add	r2,r3,r2
   40570:	10800617 	ldw	r2,24(r2)
   40574:	d0a7c115 	stw	r2,-24828(gp)
      break;
   40578:	0001883a 	nop
  }
}
   4057c:	0001883a 	nop
   40580:	e037883a 	mov	sp,fp
   40584:	dfc00117 	ldw	ra,4(sp)
   40588:	df000017 	ldw	fp,0(sp)
   4058c:	dec00204 	addi	sp,sp,8
   40590:	f800283a 	ret

00040594 <fsm_game>:

static void fsm_game() {
   40594:	defffe04 	addi	sp,sp,-8
   40598:	dfc00115 	stw	ra,4(sp)
   4059c:	df000015 	stw	fp,0(sp)
   405a0:	d839883a 	mov	fp,sp
  game_play();
   405a4:	0040fb40 	call	40fb4 <game_play>
  state = MAIN_MENU;
   405a8:	d027c115 	stw	zero,-24828(gp)
}
   405ac:	0001883a 	nop
   405b0:	e037883a 	mov	sp,fp
   405b4:	dfc00117 	ldw	ra,4(sp)
   405b8:	df000017 	ldw	fp,0(sp)
   405bc:	dec00204 	addi	sp,sp,8
   405c0:	f800283a 	ret

000405c4 <fsm_settings>:

static void fsm_settings() {
   405c4:	defffd04 	addi	sp,sp,-12
   405c8:	dfc00215 	stw	ra,8(sp)
   405cc:	df000115 	stw	fp,4(sp)
   405d0:	df000104 	addi	fp,sp,4
  menu_displayPage(settings_page);
   405d4:	00800174 	movhi	r2,5
   405d8:	108c1204 	addi	r2,r2,12360
   405dc:	11000017 	ldw	r4,0(r2)
   405e0:	11400117 	ldw	r5,4(r2)
   405e4:	11800217 	ldw	r6,8(r2)
   405e8:	11c00317 	ldw	r7,12(r2)
   405ec:	00414540 	call	41454 <menu_displayPage>
  USERINPUT input = game_getUserInput();
   405f0:	004084c0 	call	4084c <game_getUserInput>
   405f4:	e0bfff15 	stw	r2,-4(fp)
  switch(input) {
   405f8:	e0bfff17 	ldw	r2,-4(fp)
   405fc:	10c000a0 	cmpeqi	r3,r2,2
   40600:	18000f1e 	bne	r3,zero,40640 <fsm_settings+0x7c>
   40604:	10c000e8 	cmpgeui	r3,r2,3
   40608:	1800031e 	bne	r3,zero,40618 <fsm_settings+0x54>
   4060c:	10800060 	cmpeqi	r2,r2,1
   40610:	1000061e 	bne	r2,zero,4062c <fsm_settings+0x68>
      break;
    case BTN_GREEN_ENTER:
      settings_page.items[settings_page.lcd_line0_index].function();
      break;
  }
}
   40614:	00002506 	br	406ac <fsm_settings+0xe8>
}

static void fsm_settings() {
  menu_displayPage(settings_page);
  USERINPUT input = game_getUserInput();
  switch(input) {
   40618:	10c000e0 	cmpeqi	r3,r2,3
   4061c:	18000d1e 	bne	r3,zero,40654 <fsm_settings+0x90>
   40620:	10800120 	cmpeqi	r2,r2,4
   40624:	1000161e 	bne	r2,zero,40680 <fsm_settings+0xbc>
      break;
    case BTN_GREEN_ENTER:
      settings_page.items[settings_page.lcd_line0_index].function();
      break;
  }
}
   40628:	00002006 	br	406ac <fsm_settings+0xe8>
static void fsm_settings() {
  menu_displayPage(settings_page);
  USERINPUT input = game_getUserInput();
  switch(input) {
    case BTN_WHITE_UP:
      menu_scrollPage(&settings_page, BTN_WHITE_UP);
   4062c:	01400044 	movi	r5,1
   40630:	01000174 	movhi	r4,5
   40634:	210c1204 	addi	r4,r4,12360
   40638:	00415000 	call	41500 <menu_scrollPage>
      break;
   4063c:	00001b06 	br	406ac <fsm_settings+0xe8>
    case BTN_YELLOW_DOWN:
      menu_scrollPage(&settings_page, BTN_YELLOW_DOWN);
   40640:	01400084 	movi	r5,2
   40644:	01000174 	movhi	r4,5
   40648:	210c1204 	addi	r4,r4,12360
   4064c:	00415000 	call	41500 <menu_scrollPage>
      break;
   40650:	00001606 	br	406ac <fsm_settings+0xe8>
    case BTN_RED_BACK:
      state = settings_page.items[settings_page.lcd_line0_index].exit_state;
   40654:	00800174 	movhi	r2,5
   40658:	108c1204 	addi	r2,r2,12360
   4065c:	10c00117 	ldw	r3,4(r2)
   40660:	00800174 	movhi	r2,5
   40664:	108c1204 	addi	r2,r2,12360
   40668:	10800217 	ldw	r2,8(r2)
   4066c:	10800724 	muli	r2,r2,28
   40670:	1885883a 	add	r2,r3,r2
   40674:	10800517 	ldw	r2,20(r2)
   40678:	d0a7c115 	stw	r2,-24828(gp)
      break;
   4067c:	00000b06 	br	406ac <fsm_settings+0xe8>
    case BTN_GREEN_ENTER:
      settings_page.items[settings_page.lcd_line0_index].function();
   40680:	00800174 	movhi	r2,5
   40684:	108c1204 	addi	r2,r2,12360
   40688:	10c00117 	ldw	r3,4(r2)
   4068c:	00800174 	movhi	r2,5
   40690:	108c1204 	addi	r2,r2,12360
   40694:	10800217 	ldw	r2,8(r2)
   40698:	10800724 	muli	r2,r2,28
   4069c:	1885883a 	add	r2,r3,r2
   406a0:	10800417 	ldw	r2,16(r2)
   406a4:	103ee83a 	callr	r2
      break;
   406a8:	0001883a 	nop
  }
}
   406ac:	0001883a 	nop
   406b0:	e037883a 	mov	sp,fp
   406b4:	dfc00117 	ldw	ra,4(sp)
   406b8:	df000017 	ldw	fp,0(sp)
   406bc:	dec00204 	addi	sp,sp,8
   406c0:	f800283a 	ret

000406c4 <fsm_highscores>:

static void fsm_highscores() {
   406c4:	defffd04 	addi	sp,sp,-12
   406c8:	dfc00215 	stw	ra,8(sp)
   406cc:	df000115 	stw	fp,4(sp)
   406d0:	df000104 	addi	fp,sp,4
  menu_displayPage(highscores_page);
   406d4:	00800174 	movhi	r2,5
   406d8:	108c0e04 	addi	r2,r2,12344
   406dc:	11000017 	ldw	r4,0(r2)
   406e0:	11400117 	ldw	r5,4(r2)
   406e4:	11800217 	ldw	r6,8(r2)
   406e8:	11c00317 	ldw	r7,12(r2)
   406ec:	00414540 	call	41454 <menu_displayPage>
  highscore_display(highscores_page);
   406f0:	00800174 	movhi	r2,5
   406f4:	108c0e04 	addi	r2,r2,12344
   406f8:	11000017 	ldw	r4,0(r2)
   406fc:	11400117 	ldw	r5,4(r2)
   40700:	11800217 	ldw	r6,8(r2)
   40704:	11c00317 	ldw	r7,12(r2)
   40708:	00411b40 	call	411b4 <highscore_display>
  USERINPUT input = game_getUserInput();
   4070c:	004084c0 	call	4084c <game_getUserInput>
   40710:	e0bfff15 	stw	r2,-4(fp)
  switch(input) {
   40714:	e0bfff17 	ldw	r2,-4(fp)
   40718:	10c000a0 	cmpeqi	r3,r2,2
   4071c:	18000f1e 	bne	r3,zero,4075c <fsm_highscores+0x98>
   40720:	10c000e8 	cmpgeui	r3,r2,3
   40724:	1800031e 	bne	r3,zero,40734 <fsm_highscores+0x70>
   40728:	10800060 	cmpeqi	r2,r2,1
   4072c:	1000061e 	bne	r2,zero,40748 <fsm_highscores+0x84>
      break;
    case BTN_GREEN_ENTER:
      state = highscores_page.items[highscores_page.lcd_line0_index].enter_state; 
      break;
  }
}
   40730:	00002506 	br	407c8 <fsm_highscores+0x104>

static void fsm_highscores() {
  menu_displayPage(highscores_page);
  highscore_display(highscores_page);
  USERINPUT input = game_getUserInput();
  switch(input) {
   40734:	10c000e0 	cmpeqi	r3,r2,3
   40738:	18000d1e 	bne	r3,zero,40770 <fsm_highscores+0xac>
   4073c:	10800120 	cmpeqi	r2,r2,4
   40740:	1000161e 	bne	r2,zero,4079c <fsm_highscores+0xd8>
      break;
    case BTN_GREEN_ENTER:
      state = highscores_page.items[highscores_page.lcd_line0_index].enter_state; 
      break;
  }
}
   40744:	00002006 	br	407c8 <fsm_highscores+0x104>
  menu_displayPage(highscores_page);
  highscore_display(highscores_page);
  USERINPUT input = game_getUserInput();
  switch(input) {
    case BTN_WHITE_UP:
      menu_scrollPage(&highscores_page, BTN_WHITE_UP);
   40748:	01400044 	movi	r5,1
   4074c:	01000174 	movhi	r4,5
   40750:	210c0e04 	addi	r4,r4,12344
   40754:	00415000 	call	41500 <menu_scrollPage>
      break;
   40758:	00001b06 	br	407c8 <fsm_highscores+0x104>
    case BTN_YELLOW_DOWN:
      menu_scrollPage(&highscores_page, BTN_YELLOW_DOWN);
   4075c:	01400084 	movi	r5,2
   40760:	01000174 	movhi	r4,5
   40764:	210c0e04 	addi	r4,r4,12344
   40768:	00415000 	call	41500 <menu_scrollPage>
      break;
   4076c:	00001606 	br	407c8 <fsm_highscores+0x104>
    case BTN_RED_BACK:
      state = highscores_page.items[highscores_page.lcd_line0_index].exit_state;  
   40770:	00800174 	movhi	r2,5
   40774:	108c0e04 	addi	r2,r2,12344
   40778:	10c00117 	ldw	r3,4(r2)
   4077c:	00800174 	movhi	r2,5
   40780:	108c0e04 	addi	r2,r2,12344
   40784:	10800217 	ldw	r2,8(r2)
   40788:	10800724 	muli	r2,r2,28
   4078c:	1885883a 	add	r2,r3,r2
   40790:	10800517 	ldw	r2,20(r2)
   40794:	d0a7c115 	stw	r2,-24828(gp)
      break;
   40798:	00000b06 	br	407c8 <fsm_highscores+0x104>
    case BTN_GREEN_ENTER:
      state = highscores_page.items[highscores_page.lcd_line0_index].enter_state; 
   4079c:	00800174 	movhi	r2,5
   407a0:	108c0e04 	addi	r2,r2,12344
   407a4:	10c00117 	ldw	r3,4(r2)
   407a8:	00800174 	movhi	r2,5
   407ac:	108c0e04 	addi	r2,r2,12344
   407b0:	10800217 	ldw	r2,8(r2)
   407b4:	10800724 	muli	r2,r2,28
   407b8:	1885883a 	add	r2,r3,r2
   407bc:	10800617 	ldw	r2,24(r2)
   407c0:	d0a7c115 	stw	r2,-24828(gp)
      break;
   407c4:	0001883a 	nop
  }
}
   407c8:	0001883a 	nop
   407cc:	e037883a 	mov	sp,fp
   407d0:	dfc00117 	ldw	ra,4(sp)
   407d4:	df000017 	ldw	fp,0(sp)
   407d8:	dec00204 	addi	sp,sp,8
   407dc:	f800283a 	ret

000407e0 <fsm>:

void fsm() {
   407e0:	defffe04 	addi	sp,sp,-8
   407e4:	dfc00115 	stw	ra,4(sp)
   407e8:	df000015 	stw	fp,0(sp)
   407ec:	d839883a 	mov	fp,sp
  switch(state) {
   407f0:	d0a7c117 	ldw	r2,-24828(gp)
   407f4:	10c00060 	cmpeqi	r3,r2,1
   407f8:	1800081e 	bne	r3,zero,4081c <fsm+0x3c>
   407fc:	0080052e 	bgeu	zero,r2,40814 <fsm+0x34>
   40800:	10c000a0 	cmpeqi	r3,r2,2
   40804:	1800071e 	bne	r3,zero,40824 <fsm+0x44>
   40808:	108000e0 	cmpeqi	r2,r2,3
   4080c:	1000071e 	bne	r2,zero,4082c <fsm+0x4c>
      break;
    case HIGHSCORES:
      fsm_highscores();
      break;
  }
   40810:	00000806 	br	40834 <fsm+0x54>
}

void fsm() {
  switch(state) {
    case MAIN_MENU:
      fsm_mainMenu();
   40814:	00404940 	call	40494 <fsm_mainMenu>
      break;
   40818:	00000606 	br	40834 <fsm+0x54>
    case PLAY:
      fsm_game();
   4081c:	00405940 	call	40594 <fsm_game>
      break;
   40820:	00000406 	br	40834 <fsm+0x54>
    case SETTINGS:
      fsm_settings();
   40824:	00405c40 	call	405c4 <fsm_settings>
      break;
   40828:	00000206 	br	40834 <fsm+0x54>
    case HIGHSCORES:
      fsm_highscores();
   4082c:	00406c40 	call	406c4 <fsm_highscores>
      break;
   40830:	0001883a 	nop
  }
   40834:	0001883a 	nop
   40838:	e037883a 	mov	sp,fp
   4083c:	dfc00117 	ldw	ra,4(sp)
   40840:	df000017 	ldw	fp,0(sp)
   40844:	dec00204 	addi	sp,sp,8
   40848:	f800283a 	ret

0004084c <game_getUserInput>:
difficulty_t easy = {EASY, TASK_CNT_EASY};
difficulty_t hard = {HARD, TASK_CNT_HARD};

difficulty_t difficulty;

USERINPUT game_getUserInput() {
   4084c:	defffd04 	addi	sp,sp,-12
   40850:	dfc00215 	stw	ra,8(sp)
   40854:	df000115 	stw	fp,4(sp)
   40858:	df000104 	addi	fp,sp,4
  btnLed_reset_edge_capture();
   4085c:	00402b00 	call	402b0 <btnLed_reset_edge_capture>
  while (!btnLed_get_edge_capture()) {}
   40860:	0001883a 	nop
   40864:	00402900 	call	40290 <btnLed_get_edge_capture>
   40868:	103ffe26 	beq	r2,zero,40864 <__alt_data_end+0xfffce864>
  USERINPUT user_input;
  switch (btnLed_get_edge_capture()) {
   4086c:	00402900 	call	40290 <btnLed_get_edge_capture>
   40870:	10c000a0 	cmpeqi	r3,r2,2
   40874:	18000d1e 	bne	r3,zero,408ac <game_getUserInput+0x60>
   40878:	10c000c8 	cmpgei	r3,r2,3
   4087c:	1800031e 	bne	r3,zero,4088c <game_getUserInput+0x40>
   40880:	10800060 	cmpeqi	r2,r2,1
   40884:	1000061e 	bne	r2,zero,408a0 <game_getUserInput+0x54>
   40888:	00001106 	br	408d0 <game_getUserInput+0x84>
   4088c:	10c00120 	cmpeqi	r3,r2,4
   40890:	1800091e 	bne	r3,zero,408b8 <game_getUserInput+0x6c>
   40894:	10800220 	cmpeqi	r2,r2,8
   40898:	10000a1e 	bne	r2,zero,408c4 <game_getUserInput+0x78>
   4089c:	00000c06 	br	408d0 <game_getUserInput+0x84>
	  case 0x1:
		  user_input = BTN_GREEN_ENTER;
   408a0:	00800104 	movi	r2,4
   408a4:	e0bfff15 	stw	r2,-4(fp)
		  break;
   408a8:	00000c06 	br	408dc <game_getUserInput+0x90>
	  case 0x2:
		  user_input = BTN_RED_BACK;
   408ac:	008000c4 	movi	r2,3
   408b0:	e0bfff15 	stw	r2,-4(fp)
		  break;
   408b4:	00000906 	br	408dc <game_getUserInput+0x90>
	  case 0x4:
		  user_input = BTN_YELLOW_DOWN;
   408b8:	00800084 	movi	r2,2
   408bc:	e0bfff15 	stw	r2,-4(fp)
		  break;
   408c0:	00000606 	br	408dc <game_getUserInput+0x90>
	  case 0x8:
		  user_input = BTN_WHITE_UP;
   408c4:	00800044 	movi	r2,1
   408c8:	e0bfff15 	stw	r2,-4(fp)
		  break;
   408cc:	00000306 	br	408dc <game_getUserInput+0x90>
	  default:
		  printf( "Error: Button press UNKNOWN!!\n");
   408d0:	01000174 	movhi	r4,5
   408d4:	21099e04 	addi	r4,r4,9848
   408d8:	0042d3c0 	call	42d3c <puts>
  }
  btnLed_reset_edge_capture();
   408dc:	00402b00 	call	402b0 <btnLed_reset_edge_capture>
  printf("New user input: %d\n", user_input);
   408e0:	e17fff17 	ldw	r5,-4(fp)
   408e4:	01000174 	movhi	r4,5
   408e8:	2109a604 	addi	r4,r4,9880
   408ec:	0042c400 	call	42c40 <printf>
  return user_input;
   408f0:	e0bfff17 	ldw	r2,-4(fp)
}
   408f4:	e037883a 	mov	sp,fp
   408f8:	dfc00117 	ldw	ra,4(sp)
   408fc:	df000017 	ldw	fp,0(sp)
   40900:	dec00204 	addi	sp,sp,8
   40904:	f800283a 	ret

00040908 <game_isEndOfSequence>:

static bool game_isEndOfSequence() {
   40908:	deffff04 	addi	sp,sp,-4
   4090c:	df000015 	stw	fp,0(sp)
   40910:	d839883a 	mov	fp,sp
  if (user_sequence_len == correct_sequence_len) {
   40914:	d0e7c417 	ldw	r3,-24816(gp)
   40918:	d0a7c317 	ldw	r2,-24820(gp)
   4091c:	1880031e 	bne	r3,r2,4092c <game_isEndOfSequence+0x24>
    //tone(PIN_BUZZER, 1000, 100);
    user_sequence_len = 0;
   40920:	d027c415 	stw	zero,-24816(gp)
    return true;
   40924:	00800044 	movi	r2,1
   40928:	00000106 	br	40930 <game_isEndOfSequence+0x28>
  } else {
    return false;
   4092c:	0005883a 	mov	r2,zero
  }
}
   40930:	e037883a 	mov	sp,fp
   40934:	df000017 	ldw	fp,0(sp)
   40938:	dec00104 	addi	sp,sp,4
   4093c:	f800283a 	ret

00040940 <game_isCorrectInput>:

static bool game_isCorrectInput(USERINPUT input) {
   40940:	defffd04 	addi	sp,sp,-12
   40944:	df000215 	stw	fp,8(sp)
   40948:	df000204 	addi	fp,sp,8
   4094c:	e13fff15 	stw	r4,-4(fp)
  bool isCorrect = false;
   40950:	e03ffe05 	stb	zero,-8(fp)
  if (difficulty.difficulty == HARD) {
   40954:	d0a7c517 	ldw	r2,-24812(gp)
   40958:	10800058 	cmpnei	r2,r2,1
   4095c:	10001a1e 	bne	r2,zero,409c8 <game_isCorrectInput+0x88>
    if (input == correct_sequence[user_sequence_len-1]) {
   40960:	d0a7c417 	ldw	r2,-24816(gp)
   40964:	10ffffc4 	addi	r3,r2,-1
   40968:	00800174 	movhi	r2,5
   4096c:	109aea04 	addi	r2,r2,27560
   40970:	18c7883a 	add	r3,r3,r3
   40974:	18c7883a 	add	r3,r3,r3
   40978:	10c5883a 	add	r2,r2,r3
   4097c:	10c00017 	ldw	r3,0(r2)
   40980:	e0bfff17 	ldw	r2,-4(fp)
   40984:	1880021e 	bne	r3,r2,40990 <game_isCorrectInput+0x50>
      isCorrect = true;
   40988:	00800044 	movi	r2,1
   4098c:	e0bffe05 	stb	r2,-8(fp)
    } 
    if ((input + 4) == correct_sequence[user_sequence_len-1]) {
   40990:	e0bfff17 	ldw	r2,-4(fp)
   40994:	11000104 	addi	r4,r2,4
   40998:	d0a7c417 	ldw	r2,-24816(gp)
   4099c:	10ffffc4 	addi	r3,r2,-1
   409a0:	00800174 	movhi	r2,5
   409a4:	109aea04 	addi	r2,r2,27560
   409a8:	18c7883a 	add	r3,r3,r3
   409ac:	18c7883a 	add	r3,r3,r3
   409b0:	10c5883a 	add	r2,r2,r3
   409b4:	10800017 	ldw	r2,0(r2)
   409b8:	2080111e 	bne	r4,r2,40a00 <game_isCorrectInput+0xc0>
      isCorrect = true;
   409bc:	00800044 	movi	r2,1
   409c0:	e0bffe05 	stb	r2,-8(fp)
   409c4:	00000e06 	br	40a00 <game_isCorrectInput+0xc0>
    }
  } else if (difficulty.difficulty == EASY) {
   409c8:	d0a7c517 	ldw	r2,-24812(gp)
   409cc:	10000c1e 	bne	r2,zero,40a00 <game_isCorrectInput+0xc0>
    if (input == correct_sequence[user_sequence_len-1]) {
   409d0:	d0a7c417 	ldw	r2,-24816(gp)
   409d4:	10ffffc4 	addi	r3,r2,-1
   409d8:	00800174 	movhi	r2,5
   409dc:	109aea04 	addi	r2,r2,27560
   409e0:	18c7883a 	add	r3,r3,r3
   409e4:	18c7883a 	add	r3,r3,r3
   409e8:	10c5883a 	add	r2,r2,r3
   409ec:	10c00017 	ldw	r3,0(r2)
   409f0:	e0bfff17 	ldw	r2,-4(fp)
   409f4:	1880021e 	bne	r3,r2,40a00 <game_isCorrectInput+0xc0>
      isCorrect = true;
   409f8:	00800044 	movi	r2,1
   409fc:	e0bffe05 	stb	r2,-8(fp)
    }
  }
  return isCorrect;
   40a00:	e0bffe03 	ldbu	r2,-8(fp)
}
   40a04:	e037883a 	mov	sp,fp
   40a08:	df000017 	ldw	fp,0(sp)
   40a0c:	dec00104 	addi	sp,sp,4
   40a10:	f800283a 	ret

00040a14 <game_appendNewTask>:

static void game_appendNewTask() {
   40a14:	defffd04 	addi	sp,sp,-12
   40a18:	dfc00215 	stw	ra,8(sp)
   40a1c:	df000115 	stw	fp,4(sp)
   40a20:	df000104 	addi	fp,sp,4
  correct_sequence_len++;
   40a24:	d0a7c317 	ldw	r2,-24820(gp)
   40a28:	10800044 	addi	r2,r2,1
   40a2c:	d0a7c315 	stw	r2,-24820(gp)
  TASK task = rand() % difficulty.number_of_tasks + 1;
   40a30:	0042d680 	call	42d68 <rand>
   40a34:	1007883a 	mov	r3,r2
   40a38:	d0a7c617 	ldw	r2,-24808(gp)
   40a3c:	100b883a 	mov	r5,r2
   40a40:	1809883a 	mov	r4,r3
   40a44:	004185c0 	call	4185c <__modsi3>
   40a48:	10800044 	addi	r2,r2,1
   40a4c:	e0bfff15 	stw	r2,-4(fp)
  printf("Appending new task %d\n", task);
   40a50:	e17fff17 	ldw	r5,-4(fp)
   40a54:	01000174 	movhi	r4,5
   40a58:	2109ab04 	addi	r4,r4,9900
   40a5c:	0042c400 	call	42c40 <printf>
  correct_sequence[correct_sequence_len-1] = task;
   40a60:	d0a7c317 	ldw	r2,-24820(gp)
   40a64:	10ffffc4 	addi	r3,r2,-1
   40a68:	00800174 	movhi	r2,5
   40a6c:	109aea04 	addi	r2,r2,27560
   40a70:	18c7883a 	add	r3,r3,r3
   40a74:	18c7883a 	add	r3,r3,r3
   40a78:	10c5883a 	add	r2,r2,r3
   40a7c:	e0ffff17 	ldw	r3,-4(fp)
   40a80:	10c00015 	stw	r3,0(r2)
}
   40a84:	0001883a 	nop
   40a88:	e037883a 	mov	sp,fp
   40a8c:	dfc00117 	ldw	ra,4(sp)
   40a90:	df000017 	ldw	fp,0(sp)
   40a94:	dec00204 	addi	sp,sp,8
   40a98:	f800283a 	ret

00040a9c <game_displayCorrectSequence>:

static void game_displayCorrectSequence() {
   40a9c:	defffc04 	addi	sp,sp,-16
   40aa0:	dfc00315 	stw	ra,12(sp)
   40aa4:	df000215 	stw	fp,8(sp)
   40aa8:	df000204 	addi	fp,sp,8
  lcd_clear();
   40aac:	00413a40 	call	413a4 <lcd_clear>
  lcd_print(1,1, "Remember the");
   40ab0:	01800174 	movhi	r6,5
   40ab4:	3189b104 	addi	r6,r6,9924
   40ab8:	01400044 	movi	r5,1
   40abc:	01000044 	movi	r4,1
   40ac0:	00413300 	call	41330 <lcd_print>
  lcd_print(2,1, "sequence: ");
   40ac4:	01800174 	movhi	r6,5
   40ac8:	3189b504 	addi	r6,r6,9940
   40acc:	01400044 	movi	r5,1
   40ad0:	01000084 	movi	r4,2
   40ad4:	00413300 	call	41330 <lcd_print>
  usleep(1000000);
   40ad8:	010003f4 	movhi	r4,15
   40adc:	21109004 	addi	r4,r4,16960
   40ae0:	004fe040 	call	4fe04 <usleep>
  lcd_clear();
   40ae4:	00413a40 	call	413a4 <lcd_clear>
  for (int i = 0; i < correct_sequence_len; i++) {
   40ae8:	e03ffe15 	stw	zero,-8(fp)
   40aec:	00007306 	br	40cbc <game_displayCorrectSequence+0x220>
    TASK task = correct_sequence[i];
   40af0:	00800174 	movhi	r2,5
   40af4:	109aea04 	addi	r2,r2,27560
   40af8:	e0fffe17 	ldw	r3,-8(fp)
   40afc:	18c7883a 	add	r3,r3,r3
   40b00:	18c7883a 	add	r3,r3,r3
   40b04:	10c5883a 	add	r2,r2,r3
   40b08:	10800017 	ldw	r2,0(r2)
   40b0c:	e0bfff15 	stw	r2,-4(fp)
    if (difficulty.difficulty == EASY) {
   40b10:	d0a7c517 	ldw	r2,-24812(gp)
   40b14:	1000191e 	bne	r2,zero,40b7c <game_displayCorrectSequence+0xe0>
      switch (task) {
   40b18:	e0bfff17 	ldw	r2,-4(fp)
   40b1c:	10c000a0 	cmpeqi	r3,r2,2
   40b20:	18000d1e 	bne	r3,zero,40b58 <game_displayCorrectSequence+0xbc>
   40b24:	10c000e8 	cmpgeui	r3,r2,3
   40b28:	1800031e 	bne	r3,zero,40b38 <game_displayCorrectSequence+0x9c>
   40b2c:	10800060 	cmpeqi	r2,r2,1
   40b30:	1000061e 	bne	r2,zero,40b4c <game_displayCorrectSequence+0xb0>
          break;
        case GREEN:
          btnLed_set_led(0);
          break;
        default:
          break;
   40b34:	00005a06 	br	40ca0 <game_displayCorrectSequence+0x204>
  usleep(1000000);
  lcd_clear();
  for (int i = 0; i < correct_sequence_len; i++) {
    TASK task = correct_sequence[i];
    if (difficulty.difficulty == EASY) {
      switch (task) {
   40b38:	10c000e0 	cmpeqi	r3,r2,3
   40b3c:	1800091e 	bne	r3,zero,40b64 <game_displayCorrectSequence+0xc8>
   40b40:	10800120 	cmpeqi	r2,r2,4
   40b44:	10000a1e 	bne	r2,zero,40b70 <game_displayCorrectSequence+0xd4>
          break;
        case GREEN:
          btnLed_set_led(0);
          break;
        default:
          break;
   40b48:	00005506 	br	40ca0 <game_displayCorrectSequence+0x204>
  for (int i = 0; i < correct_sequence_len; i++) {
    TASK task = correct_sequence[i];
    if (difficulty.difficulty == EASY) {
      switch (task) {
        case WHITE:
          btnLed_set_led(6);
   40b4c:	01000184 	movi	r4,6
   40b50:	00403d80 	call	403d8 <btnLed_set_led>
          break;
   40b54:	00005206 	br	40ca0 <game_displayCorrectSequence+0x204>
        case YELLOW:
          btnLed_set_led(4);
   40b58:	01000104 	movi	r4,4
   40b5c:	00403d80 	call	403d8 <btnLed_set_led>
          break;
   40b60:	00004f06 	br	40ca0 <game_displayCorrectSequence+0x204>
        case RED:
          btnLed_set_led(2);
   40b64:	01000084 	movi	r4,2
   40b68:	00403d80 	call	403d8 <btnLed_set_led>
          break;
   40b6c:	00004c06 	br	40ca0 <game_displayCorrectSequence+0x204>
        case GREEN:
          btnLed_set_led(0);
   40b70:	0009883a 	mov	r4,zero
   40b74:	00403d80 	call	403d8 <btnLed_set_led>
          break;
   40b78:	00004906 	br	40ca0 <game_displayCorrectSequence+0x204>
        default:
          break;
      }
    } else if (difficulty.difficulty == HARD) {
   40b7c:	d0a7c517 	ldw	r2,-24812(gp)
   40b80:	10800058 	cmpnei	r2,r2,1
   40b84:	1000461e 	bne	r2,zero,40ca0 <game_displayCorrectSequence+0x204>
      switch (task) {
   40b88:	e0bfff17 	ldw	r2,-4(fp)
   40b8c:	10800268 	cmpgeui	r2,r2,9
   40b90:	1000401e 	bne	r2,zero,40c94 <game_displayCorrectSequence+0x1f8>
   40b94:	e0bfff17 	ldw	r2,-4(fp)
   40b98:	100690ba 	slli	r3,r2,2
   40b9c:	00800134 	movhi	r2,4
   40ba0:	1082ec04 	addi	r2,r2,2992
   40ba4:	1885883a 	add	r2,r3,r2
   40ba8:	10800017 	ldw	r2,0(r2)
   40bac:	1000683a 	jmp	r2
   40bb0:	00040c94 	movui	zero,4146
   40bb4:	00040bd4 	movui	zero,4143
   40bb8:	00040bec 	andhi	zero,zero,4143
   40bbc:	00040c04 	movi	zero,4144
   40bc0:	00040c1c 	xori	zero,zero,4144
   40bc4:	00040c34 	movhi	zero,4144
   40bc8:	00040c4c 	andi	zero,zero,4145
   40bcc:	00040c64 	muli	zero,zero,4145
   40bd0:	00040c7c 	xorhi	zero,zero,4145
        case WHITE:
          lcd_print(1,1, "White");
   40bd4:	01800174 	movhi	r6,5
   40bd8:	3189b804 	addi	r6,r6,9952
   40bdc:	01400044 	movi	r5,1
   40be0:	01000044 	movi	r4,1
   40be4:	00413300 	call	41330 <lcd_print>
          break;
   40be8:	00002a06 	br	40c94 <game_displayCorrectSequence+0x1f8>
        case YELLOW:
          lcd_print(1,1, "Yellow");
   40bec:	01800174 	movhi	r6,5
   40bf0:	3189ba04 	addi	r6,r6,9960
   40bf4:	01400044 	movi	r5,1
   40bf8:	01000044 	movi	r4,1
   40bfc:	00413300 	call	41330 <lcd_print>
          break;
   40c00:	00002406 	br	40c94 <game_displayCorrectSequence+0x1f8>
        case RED:
          lcd_print(1,1, "Red");
   40c04:	01800174 	movhi	r6,5
   40c08:	3189bc04 	addi	r6,r6,9968
   40c0c:	01400044 	movi	r5,1
   40c10:	01000044 	movi	r4,1
   40c14:	00413300 	call	41330 <lcd_print>
          break;
   40c18:	00001e06 	br	40c94 <game_displayCorrectSequence+0x1f8>
        case GREEN:
          lcd_print(1,1, "Green");
   40c1c:	01800174 	movhi	r6,5
   40c20:	3189bd04 	addi	r6,r6,9972
   40c24:	01400044 	movi	r5,1
   40c28:	01000044 	movi	r4,1
   40c2c:	00413300 	call	41330 <lcd_print>
          break;
   40c30:	00001806 	br	40c94 <game_displayCorrectSequence+0x1f8>
        case UP:
          lcd_print(1,1, "Up");
   40c34:	01800174 	movhi	r6,5
   40c38:	3189bf04 	addi	r6,r6,9980
   40c3c:	01400044 	movi	r5,1
   40c40:	01000044 	movi	r4,1
   40c44:	00413300 	call	41330 <lcd_print>
        break;
   40c48:	00001206 	br	40c94 <game_displayCorrectSequence+0x1f8>
        case DOWN:
          lcd_print(1,1, "Down");
   40c4c:	01800174 	movhi	r6,5
   40c50:	3189c004 	addi	r6,r6,9984
   40c54:	01400044 	movi	r5,1
   40c58:	01000044 	movi	r4,1
   40c5c:	00413300 	call	41330 <lcd_print>
          break;
   40c60:	00000c06 	br	40c94 <game_displayCorrectSequence+0x1f8>
        case LEFT:
          lcd_print(1,1, "Left");
   40c64:	01800174 	movhi	r6,5
   40c68:	3189c204 	addi	r6,r6,9992
   40c6c:	01400044 	movi	r5,1
   40c70:	01000044 	movi	r4,1
   40c74:	00413300 	call	41330 <lcd_print>
          break;
   40c78:	00000606 	br	40c94 <game_displayCorrectSequence+0x1f8>
        case RIGHT:
          lcd_print(1,1, "Right");
   40c7c:	01800174 	movhi	r6,5
   40c80:	3189c404 	addi	r6,r6,10000
   40c84:	01400044 	movi	r5,1
   40c88:	01000044 	movi	r4,1
   40c8c:	00413300 	call	41330 <lcd_print>
          break;
   40c90:	0001883a 	nop
      }
      usleep(500000);
   40c94:	01000234 	movhi	r4,8
   40c98:	21284804 	addi	r4,r4,-24288
   40c9c:	004fe040 	call	4fe04 <usleep>
    }
    usleep(500000);
   40ca0:	01000234 	movhi	r4,8
   40ca4:	21284804 	addi	r4,r4,-24288
   40ca8:	004fe040 	call	4fe04 <usleep>
    btnLed_clear_all_leds();
   40cac:	00404600 	call	40460 <btnLed_clear_all_leds>
  lcd_clear();
  lcd_print(1,1, "Remember the");
  lcd_print(2,1, "sequence: ");
  usleep(1000000);
  lcd_clear();
  for (int i = 0; i < correct_sequence_len; i++) {
   40cb0:	e0bffe17 	ldw	r2,-8(fp)
   40cb4:	10800044 	addi	r2,r2,1
   40cb8:	e0bffe15 	stw	r2,-8(fp)
   40cbc:	d0a7c317 	ldw	r2,-24820(gp)
   40cc0:	e0fffe17 	ldw	r3,-8(fp)
   40cc4:	18bf8a16 	blt	r3,r2,40af0 <__alt_data_end+0xfffceaf0>
      usleep(500000);
    }
    usleep(500000);
    btnLed_clear_all_leds();
  }
  lcd_print(1,1, "Enter the");
   40cc8:	01800174 	movhi	r6,5
   40ccc:	3189c604 	addi	r6,r6,10008
   40cd0:	01400044 	movi	r5,1
   40cd4:	01000044 	movi	r4,1
   40cd8:	00413300 	call	41330 <lcd_print>
  lcd_print(2,1, "sequence:");
   40cdc:	01800174 	movhi	r6,5
   40ce0:	3189c904 	addi	r6,r6,10020
   40ce4:	01400044 	movi	r5,1
   40ce8:	01000084 	movi	r4,2
   40cec:	00413300 	call	41330 <lcd_print>
}
   40cf0:	0001883a 	nop
   40cf4:	e037883a 	mov	sp,fp
   40cf8:	dfc00117 	ldw	ra,4(sp)
   40cfc:	df000017 	ldw	fp,0(sp)
   40d00:	dec00204 	addi	sp,sp,8
   40d04:	f800283a 	ret

00040d08 <game_displayGameStart>:

static void game_displayGameStart() {
   40d08:	defffb04 	addi	sp,sp,-20
   40d0c:	dfc00415 	stw	ra,16(sp)
   40d10:	df000315 	stw	fp,12(sp)
   40d14:	df000304 	addi	fp,sp,12
  lcd_clear();
   40d18:	00413a40 	call	413a4 <lcd_clear>
  lcd_print(1,1, "**Memory Game**");
   40d1c:	01800174 	movhi	r6,5
   40d20:	3189cc04 	addi	r6,r6,10032
   40d24:	01400044 	movi	r5,1
   40d28:	01000044 	movi	r4,1
   40d2c:	00413300 	call	41330 <lcd_print>
    for (int i = 0; i < 5; i++) {
   40d30:	e03ffd15 	stw	zero,-12(fp)
   40d34:	00001d06 	br	40dac <game_displayGameStart+0xa4>
      for (int j = 0; j < 8; j++) {
   40d38:	e03ffe15 	stw	zero,-8(fp)
   40d3c:	00000806 	br	40d60 <game_displayGameStart+0x58>
        btnLed_clear_all_leds();
   40d40:	00404600 	call	40460 <btnLed_clear_all_leds>
        btnLed_set_led(j);
   40d44:	e13ffe17 	ldw	r4,-8(fp)
   40d48:	00403d80 	call	403d8 <btnLed_set_led>
        usleep(50000);
   40d4c:	0130d414 	movui	r4,50000
   40d50:	004fe040 	call	4fe04 <usleep>

static void game_displayGameStart() {
  lcd_clear();
  lcd_print(1,1, "**Memory Game**");
    for (int i = 0; i < 5; i++) {
      for (int j = 0; j < 8; j++) {
   40d54:	e0bffe17 	ldw	r2,-8(fp)
   40d58:	10800044 	addi	r2,r2,1
   40d5c:	e0bffe15 	stw	r2,-8(fp)
   40d60:	e0bffe17 	ldw	r2,-8(fp)
   40d64:	10800210 	cmplti	r2,r2,8
   40d68:	103ff51e 	bne	r2,zero,40d40 <__alt_data_end+0xfffced40>
        btnLed_clear_all_leds();
        btnLed_set_led(j);
        usleep(50000);
      }
      for (int j = 6; j > 0; j--) {
   40d6c:	00800184 	movi	r2,6
   40d70:	e0bfff15 	stw	r2,-4(fp)
   40d74:	00000806 	br	40d98 <game_displayGameStart+0x90>
        btnLed_clear_all_leds();
   40d78:	00404600 	call	40460 <btnLed_clear_all_leds>
        btnLed_set_led(j);
   40d7c:	e13fff17 	ldw	r4,-4(fp)
   40d80:	00403d80 	call	403d8 <btnLed_set_led>
        usleep(50000);
   40d84:	0130d414 	movui	r4,50000
   40d88:	004fe040 	call	4fe04 <usleep>
      for (int j = 0; j < 8; j++) {
        btnLed_clear_all_leds();
        btnLed_set_led(j);
        usleep(50000);
      }
      for (int j = 6; j > 0; j--) {
   40d8c:	e0bfff17 	ldw	r2,-4(fp)
   40d90:	10bfffc4 	addi	r2,r2,-1
   40d94:	e0bfff15 	stw	r2,-4(fp)
   40d98:	e0bfff17 	ldw	r2,-4(fp)
   40d9c:	00bff616 	blt	zero,r2,40d78 <__alt_data_end+0xfffced78>
}

static void game_displayGameStart() {
  lcd_clear();
  lcd_print(1,1, "**Memory Game**");
    for (int i = 0; i < 5; i++) {
   40da0:	e0bffd17 	ldw	r2,-12(fp)
   40da4:	10800044 	addi	r2,r2,1
   40da8:	e0bffd15 	stw	r2,-12(fp)
   40dac:	e0bffd17 	ldw	r2,-12(fp)
   40db0:	10800150 	cmplti	r2,r2,5
   40db4:	103fe01e 	bne	r2,zero,40d38 <__alt_data_end+0xfffced38>
        btnLed_clear_all_leds();
        btnLed_set_led(j);
        usleep(50000);
      }
  }
  btnLed_clear_all_leds();
   40db8:	00404600 	call	40460 <btnLed_clear_all_leds>
  lcd_print(1,1, "Pay attention!");
   40dbc:	01800174 	movhi	r6,5
   40dc0:	3189d004 	addi	r6,r6,10048
   40dc4:	01400044 	movi	r5,1
   40dc8:	01000044 	movi	r4,1
   40dcc:	00413300 	call	41330 <lcd_print>
  usleep(1000000);
   40dd0:	010003f4 	movhi	r4,15
   40dd4:	21109004 	addi	r4,r4,16960
   40dd8:	004fe040 	call	4fe04 <usleep>
}
   40ddc:	0001883a 	nop
   40de0:	e037883a 	mov	sp,fp
   40de4:	dfc00117 	ldw	ra,4(sp)
   40de8:	df000017 	ldw	fp,0(sp)
   40dec:	dec00204 	addi	sp,sp,8
   40df0:	f800283a 	ret

00040df4 <game_displayGameOver>:

static void game_displayGameOver(int new_highscore_entry) {
   40df4:	defffb04 	addi	sp,sp,-20
   40df8:	dfc00415 	stw	ra,16(sp)
   40dfc:	df000315 	stw	fp,12(sp)
   40e00:	df000304 	addi	fp,sp,12
   40e04:	e13fff15 	stw	r4,-4(fp)
  lcd_clear();
   40e08:	00413a40 	call	413a4 <lcd_clear>
  lcd_print(1,1, "Game Over :(");
   40e0c:	01800174 	movhi	r6,5
   40e10:	3189d404 	addi	r6,r6,10064
   40e14:	01400044 	movi	r5,1
   40e18:	01000044 	movi	r4,1
   40e1c:	00413300 	call	41330 <lcd_print>
  for (int i = 0; i < 6; i++) {
   40e20:	e03ffe15 	stw	zero,-8(fp)
   40e24:	00000b06 	br	40e54 <game_displayGameOver+0x60>
	  btnLed_set_all_red_leds();
   40e28:	00404240 	call	40424 <btnLed_set_all_red_leds>
	  usleep(200000);
   40e2c:	010000f4 	movhi	r4,3
   40e30:	21035004 	addi	r4,r4,3392
   40e34:	004fe040 	call	4fe04 <usleep>
	  btnLed_clear_all_leds();    
   40e38:	00404600 	call	40460 <btnLed_clear_all_leds>
    usleep(200000);
   40e3c:	010000f4 	movhi	r4,3
   40e40:	21035004 	addi	r4,r4,3392
   40e44:	004fe040 	call	4fe04 <usleep>
}

static void game_displayGameOver(int new_highscore_entry) {
  lcd_clear();
  lcd_print(1,1, "Game Over :(");
  for (int i = 0; i < 6; i++) {
   40e48:	e0bffe17 	ldw	r2,-8(fp)
   40e4c:	10800044 	addi	r2,r2,1
   40e50:	e0bffe15 	stw	r2,-8(fp)
   40e54:	e0bffe17 	ldw	r2,-8(fp)
   40e58:	10800190 	cmplti	r2,r2,6
   40e5c:	103ff21e 	bne	r2,zero,40e28 <__alt_data_end+0xfffcee28>
	  btnLed_set_all_red_leds();
	  usleep(200000);
	  btnLed_clear_all_leds();    
    usleep(200000);
  }
  LCD_PRINTF(lcd, "%c%s\n", ESC, ESC_CLEAR_ALL);
   40e60:	d0a7c217 	ldw	r2,-24824(gp)
   40e64:	01c00174 	movhi	r7,5
   40e68:	39c9d804 	addi	r7,r7,10080
   40e6c:	018006c4 	movi	r6,27
   40e70:	01400174 	movhi	r5,5
   40e74:	2949d904 	addi	r5,r5,10084
   40e78:	1009883a 	mov	r4,r2
   40e7c:	0041ac00 	call	41ac0 <fprintf>
  LCD_PRINTF(lcd, "%c%sScore: %d\n", ESC, ESC_ROW1_COL1, correct_sequence_len-1);
   40e80:	d0e7c217 	ldw	r3,-24824(gp)
   40e84:	d0a7c317 	ldw	r2,-24820(gp)
   40e88:	10bfffc4 	addi	r2,r2,-1
   40e8c:	d8800015 	stw	r2,0(sp)
   40e90:	01c00174 	movhi	r7,5
   40e94:	39c9db04 	addi	r7,r7,10092
   40e98:	018006c4 	movi	r6,27
   40e9c:	01400174 	movhi	r5,5
   40ea0:	2949dd04 	addi	r5,r5,10100
   40ea4:	1809883a 	mov	r4,r3
   40ea8:	0041ac00 	call	41ac0 <fprintf>
  usleep(3000000);
   40eac:	01000bb4 	movhi	r4,46
   40eb0:	2131b004 	addi	r4,r4,-14656
   40eb4:	004fe040 	call	4fe04 <usleep>
  if (new_highscore_entry) {
   40eb8:	e0bfff17 	ldw	r2,-4(fp)
   40ebc:	10001626 	beq	r2,zero,40f18 <game_displayGameOver+0x124>
    LCD_PRINTF(lcd, "%c%s\n", ESC, ESC_CLEAR_ALL);
   40ec0:	d0a7c217 	ldw	r2,-24824(gp)
   40ec4:	01c00174 	movhi	r7,5
   40ec8:	39c9d804 	addi	r7,r7,10080
   40ecc:	018006c4 	movi	r6,27
   40ed0:	01400174 	movhi	r5,5
   40ed4:	2949d904 	addi	r5,r5,10084
   40ed8:	1009883a 	mov	r4,r2
   40edc:	0041ac00 	call	41ac0 <fprintf>
    LCD_PRINTF(lcd, "%c%sNew highscore \n", ESC, ESC_ROW1_COL1);
   40ee0:	d0a7c217 	ldw	r2,-24824(gp)
   40ee4:	01c00174 	movhi	r7,5
   40ee8:	39c9db04 	addi	r7,r7,10092
   40eec:	018006c4 	movi	r6,27
   40ef0:	01400174 	movhi	r5,5
   40ef4:	2949e104 	addi	r5,r5,10116
   40ef8:	1009883a 	mov	r4,r2
   40efc:	0041ac00 	call	41ac0 <fprintf>
    LCD_PRINTF(lcd, "entry: %d\n", new_highscore_entry);
   40f00:	d0a7c217 	ldw	r2,-24824(gp)
   40f04:	e1bfff17 	ldw	r6,-4(fp)
   40f08:	01400174 	movhi	r5,5
   40f0c:	2949e604 	addi	r5,r5,10136
   40f10:	1009883a 	mov	r4,r2
   40f14:	0041ac00 	call	41ac0 <fprintf>
  }
}
   40f18:	0001883a 	nop
   40f1c:	e037883a 	mov	sp,fp
   40f20:	dfc00117 	ldw	ra,4(sp)
   40f24:	df000017 	ldw	fp,0(sp)
   40f28:	dec00204 	addi	sp,sp,8
   40f2c:	f800283a 	ret

00040f30 <game_init>:

static void game_init() {
   40f30:	defffe04 	addi	sp,sp,-8
   40f34:	dfc00115 	stw	ra,4(sp)
   40f38:	df000015 	stw	fp,0(sp)
   40f3c:	d839883a 	mov	fp,sp
  correct_sequence_len = 0;
   40f40:	d027c315 	stw	zero,-24820(gp)
  user_sequence_len = 0;
   40f44:	d027c415 	stw	zero,-24816(gp)
  game_displayGameStart();
   40f48:	0040d080 	call	40d08 <game_displayGameStart>
}
   40f4c:	0001883a 	nop
   40f50:	e037883a 	mov	sp,fp
   40f54:	dfc00117 	ldw	ra,4(sp)
   40f58:	df000017 	ldw	fp,0(sp)
   40f5c:	dec00204 	addi	sp,sp,8
   40f60:	f800283a 	ret

00040f64 <game_over>:

static void game_over() {
   40f64:	defffd04 	addi	sp,sp,-12
   40f68:	dfc00215 	stw	ra,8(sp)
   40f6c:	df000115 	stw	fp,4(sp)
   40f70:	df000104 	addi	fp,sp,4
  int new_highscore_entry = highscore_update(correct_sequence_len-1);
   40f74:	d0a7c317 	ldw	r2,-24820(gp)
   40f78:	10bfffc4 	addi	r2,r2,-1
   40f7c:	1009883a 	mov	r4,r2
   40f80:	00410b80 	call	410b8 <highscore_update>
   40f84:	e0bfff15 	stw	r2,-4(fp)
  game_displayGameOver(new_highscore_entry);
   40f88:	e13fff17 	ldw	r4,-4(fp)
   40f8c:	0040df40 	call	40df4 <game_displayGameOver>
  game_getUserInput(); // push any button to continue
   40f90:	004084c0 	call	4084c <game_getUserInput>
  btnLed_set_sevenseg(0);
   40f94:	0009883a 	mov	r4,zero
   40f98:	00403a40 	call	403a4 <btnLed_set_sevenseg>
}
   40f9c:	0001883a 	nop
   40fa0:	e037883a 	mov	sp,fp
   40fa4:	dfc00117 	ldw	ra,4(sp)
   40fa8:	df000017 	ldw	fp,0(sp)
   40fac:	dec00204 	addi	sp,sp,8
   40fb0:	f800283a 	ret

00040fb4 <game_play>:

void game_play() {
   40fb4:	defffc04 	addi	sp,sp,-16
   40fb8:	dfc00315 	stw	ra,12(sp)
   40fbc:	df000215 	stw	fp,8(sp)
   40fc0:	df000204 	addi	fp,sp,8
  game_init();
   40fc4:	0040f300 	call	40f30 <game_init>
  bool game_over_flag = false;
   40fc8:	e03ffe05 	stb	zero,-8(fp)
  while (!game_over_flag) {
   40fcc:	00001706 	br	4102c <game_play+0x78>
    btnLed_set_sevenseg(correct_sequence_len);
   40fd0:	d0a7c317 	ldw	r2,-24820(gp)
   40fd4:	1009883a 	mov	r4,r2
   40fd8:	00403a40 	call	403a4 <btnLed_set_sevenseg>
    game_appendNewTask();
   40fdc:	0040a140 	call	40a14 <game_appendNewTask>
    game_displayCorrectSequence();
   40fe0:	0040a9c0 	call	40a9c <game_displayCorrectSequence>
    while (!game_isEndOfSequence()) {
   40fe4:	00000d06 	br	4101c <game_play+0x68>
      USERINPUT new_input = game_getUserInput();
   40fe8:	004084c0 	call	4084c <game_getUserInput>
   40fec:	e0bfff15 	stw	r2,-4(fp)
      user_sequence_len++;
   40ff0:	d0a7c417 	ldw	r2,-24816(gp)
   40ff4:	10800044 	addi	r2,r2,1
   40ff8:	d0a7c415 	stw	r2,-24816(gp)
      if (!game_isCorrectInput(new_input)) {
   40ffc:	e13fff17 	ldw	r4,-4(fp)
   41000:	00409400 	call	40940 <game_isCorrectInput>
   41004:	1080005c 	xori	r2,r2,1
   41008:	10803fcc 	andi	r2,r2,255
   4100c:	10000326 	beq	r2,zero,4101c <game_play+0x68>
        game_over_flag = true;
   41010:	00800044 	movi	r2,1
   41014:	e0bffe05 	stb	r2,-8(fp)
        break;
   41018:	00000406 	br	4102c <game_play+0x78>
  bool game_over_flag = false;
  while (!game_over_flag) {
    btnLed_set_sevenseg(correct_sequence_len);
    game_appendNewTask();
    game_displayCorrectSequence();
    while (!game_isEndOfSequence()) {
   4101c:	00409080 	call	40908 <game_isEndOfSequence>
   41020:	1080005c 	xori	r2,r2,1
   41024:	10803fcc 	andi	r2,r2,255
   41028:	103fef1e 	bne	r2,zero,40fe8 <__alt_data_end+0xfffcefe8>
}

void game_play() {
  game_init();
  bool game_over_flag = false;
  while (!game_over_flag) {
   4102c:	e0bffe03 	ldbu	r2,-8(fp)
   41030:	1080005c 	xori	r2,r2,1
   41034:	10803fcc 	andi	r2,r2,255
   41038:	103fe51e 	bne	r2,zero,40fd0 <__alt_data_end+0xfffcefd0>
        game_over_flag = true;
        break;
      }
    }
  }
  game_over();
   4103c:	0040f640 	call	40f64 <game_over>
}
   41040:	0001883a 	nop
   41044:	e037883a 	mov	sp,fp
   41048:	dfc00117 	ldw	ra,4(sp)
   4104c:	df000017 	ldw	fp,0(sp)
   41050:	dec00204 	addi	sp,sp,8
   41054:	f800283a 	ret

00041058 <game_set_easy_difficulty>:

void game_set_easy_difficulty() {
   41058:	deffff04 	addi	sp,sp,-4
   4105c:	df000015 	stw	fp,0(sp)
   41060:	d839883a 	mov	fp,sp
  difficulty = easy;
   41064:	d0a00017 	ldw	r2,-32768(gp)
   41068:	d0a7c515 	stw	r2,-24812(gp)
   4106c:	d0a00117 	ldw	r2,-32764(gp)
   41070:	d0a7c615 	stw	r2,-24808(gp)
}
   41074:	0001883a 	nop
   41078:	e037883a 	mov	sp,fp
   4107c:	df000017 	ldw	fp,0(sp)
   41080:	dec00104 	addi	sp,sp,4
   41084:	f800283a 	ret

00041088 <game_set_hard_difficulty>:

void game_set_hard_difficulty() {
   41088:	deffff04 	addi	sp,sp,-4
   4108c:	df000015 	stw	fp,0(sp)
   41090:	d839883a 	mov	fp,sp
  difficulty = hard;
   41094:	d0a00217 	ldw	r2,-32760(gp)
   41098:	d0a7c515 	stw	r2,-24812(gp)
   4109c:	d0a00317 	ldw	r2,-32756(gp)
   410a0:	d0a7c615 	stw	r2,-24808(gp)
}
   410a4:	0001883a 	nop
   410a8:	e037883a 	mov	sp,fp
   410ac:	df000017 	ldw	fp,0(sp)
   410b0:	dec00104 	addi	sp,sp,4
   410b4:	f800283a 	ret

000410b8 <highscore_update>:
#define HIGHSCORES_CNT 5

static int highscore_list[HIGHSCORES_CNT] = {0,0,0,0,0};

/* Check if new score is new highscore, and update highscore list */
int highscore_update(int new_score) {
   410b8:	defffb04 	addi	sp,sp,-20
   410bc:	df000415 	stw	fp,16(sp)
   410c0:	df000404 	addi	fp,sp,16
   410c4:	e13fff15 	stw	r4,-4(fp)
	int new_highscore_entry = 0;
   410c8:	e03ffc15 	stw	zero,-16(fp)
	for (int i = 0; i < HIGHSCORES_CNT; i++) {
   410cc:	e03ffd15 	stw	zero,-12(fp)
   410d0:	00003006 	br	41194 <highscore_update+0xdc>
		if (new_score > highscore_list[i]) {
   410d4:	00800174 	movhi	r2,5
   410d8:	109b4e04 	addi	r2,r2,27960
   410dc:	e0fffd17 	ldw	r3,-12(fp)
   410e0:	18c7883a 	add	r3,r3,r3
   410e4:	18c7883a 	add	r3,r3,r3
   410e8:	10c5883a 	add	r2,r2,r3
   410ec:	10c00017 	ldw	r3,0(r2)
   410f0:	e0bfff17 	ldw	r2,-4(fp)
   410f4:	1880240e 	bge	r3,r2,41188 <highscore_update+0xd0>
			for (int j = HIGHSCORES_CNT-1; j > i; j--) {
   410f8:	00800104 	movi	r2,4
   410fc:	e0bffe15 	stw	r2,-8(fp)
   41100:	00001206 	br	4114c <highscore_update+0x94>
				highscore_list[j] = highscore_list[j-1];
   41104:	e0bffe17 	ldw	r2,-8(fp)
   41108:	10ffffc4 	addi	r3,r2,-1
   4110c:	00800174 	movhi	r2,5
   41110:	109b4e04 	addi	r2,r2,27960
   41114:	18c7883a 	add	r3,r3,r3
   41118:	18c7883a 	add	r3,r3,r3
   4111c:	10c5883a 	add	r2,r2,r3
   41120:	11000017 	ldw	r4,0(r2)
   41124:	00800174 	movhi	r2,5
   41128:	109b4e04 	addi	r2,r2,27960
   4112c:	e0fffe17 	ldw	r3,-8(fp)
   41130:	18c7883a 	add	r3,r3,r3
   41134:	18c7883a 	add	r3,r3,r3
   41138:	10c5883a 	add	r2,r2,r3
   4113c:	11000015 	stw	r4,0(r2)
/* Check if new score is new highscore, and update highscore list */
int highscore_update(int new_score) {
	int new_highscore_entry = 0;
	for (int i = 0; i < HIGHSCORES_CNT; i++) {
		if (new_score > highscore_list[i]) {
			for (int j = HIGHSCORES_CNT-1; j > i; j--) {
   41140:	e0bffe17 	ldw	r2,-8(fp)
   41144:	10bfffc4 	addi	r2,r2,-1
   41148:	e0bffe15 	stw	r2,-8(fp)
   4114c:	e0bffe17 	ldw	r2,-8(fp)
   41150:	e0fffd17 	ldw	r3,-12(fp)
   41154:	18bfeb16 	blt	r3,r2,41104 <__alt_data_end+0xfffcf104>
				highscore_list[j] = highscore_list[j-1];
			}
			highscore_list[i] = new_score;
   41158:	00800174 	movhi	r2,5
   4115c:	109b4e04 	addi	r2,r2,27960
   41160:	e0fffd17 	ldw	r3,-12(fp)
   41164:	18c7883a 	add	r3,r3,r3
   41168:	18c7883a 	add	r3,r3,r3
   4116c:	10c5883a 	add	r2,r2,r3
   41170:	e0ffff17 	ldw	r3,-4(fp)
   41174:	10c00015 	stw	r3,0(r2)
			new_highscore_entry = i+1;
   41178:	e0bffd17 	ldw	r2,-12(fp)
   4117c:	10800044 	addi	r2,r2,1
   41180:	e0bffc15 	stw	r2,-16(fp)
			break;
   41184:	00000606 	br	411a0 <highscore_update+0xe8>
static int highscore_list[HIGHSCORES_CNT] = {0,0,0,0,0};

/* Check if new score is new highscore, and update highscore list */
int highscore_update(int new_score) {
	int new_highscore_entry = 0;
	for (int i = 0; i < HIGHSCORES_CNT; i++) {
   41188:	e0bffd17 	ldw	r2,-12(fp)
   4118c:	10800044 	addi	r2,r2,1
   41190:	e0bffd15 	stw	r2,-12(fp)
   41194:	e0bffd17 	ldw	r2,-12(fp)
   41198:	10800150 	cmplti	r2,r2,5
   4119c:	103fcd1e 	bne	r2,zero,410d4 <__alt_data_end+0xfffcf0d4>
			highscore_list[i] = new_score;
			new_highscore_entry = i+1;
			break;
		}
	}
	return new_highscore_entry;
   411a0:	e0bffc17 	ldw	r2,-16(fp)
}
   411a4:	e037883a 	mov	sp,fp
   411a8:	df000017 	ldw	fp,0(sp)
   411ac:	dec00104 	addi	sp,sp,4
   411b0:	f800283a 	ret

000411b4 <highscore_display>:

void highscore_display(page p) {
   411b4:	defff904 	addi	sp,sp,-28
   411b8:	dfc00615 	stw	ra,24(sp)
   411bc:	df000515 	stw	fp,20(sp)
   411c0:	df000504 	addi	fp,sp,20
   411c4:	e13ffc15 	stw	r4,-16(fp)
   411c8:	e17ffd15 	stw	r5,-12(fp)
   411cc:	e1bffe15 	stw	r6,-8(fp)
   411d0:	e1ffff15 	stw	r7,-4(fp)
	//LCD_PRINTF(lcd, "%c%s\n", ESC, ESC_CLEAR_ALL);
	LCD_PRINTF(lcd, "%c%s%d\n", ESC, ESC_ROW1_COL13, highscore_list[p.lcd_line0_index]);
   411d4:	d127c217 	ldw	r4,-24824(gp)
   411d8:	e0fffe17 	ldw	r3,-8(fp)
   411dc:	00800174 	movhi	r2,5
   411e0:	109b4e04 	addi	r2,r2,27960
   411e4:	18c7883a 	add	r3,r3,r3
   411e8:	18c7883a 	add	r3,r3,r3
   411ec:	10c5883a 	add	r2,r2,r3
   411f0:	10800017 	ldw	r2,0(r2)
   411f4:	d8800015 	stw	r2,0(sp)
   411f8:	01c00174 	movhi	r7,5
   411fc:	39c9e904 	addi	r7,r7,10148
   41200:	018006c4 	movi	r6,27
   41204:	01400174 	movhi	r5,5
   41208:	2949eb04 	addi	r5,r5,10156
   4120c:	0041ac00 	call	41ac0 <fprintf>
	LCD_PRINTF(lcd, "%c%s%d\n", ESC, ESC_ROW2_COL13, highscore_list[p.lcd_line1_index]);
   41210:	d127c217 	ldw	r4,-24824(gp)
   41214:	e0ffff17 	ldw	r3,-4(fp)
   41218:	00800174 	movhi	r2,5
   4121c:	109b4e04 	addi	r2,r2,27960
   41220:	18c7883a 	add	r3,r3,r3
   41224:	18c7883a 	add	r3,r3,r3
   41228:	10c5883a 	add	r2,r2,r3
   4122c:	10800017 	ldw	r2,0(r2)
   41230:	d8800015 	stw	r2,0(sp)
   41234:	01c00174 	movhi	r7,5
   41238:	39c9ed04 	addi	r7,r7,10164
   4123c:	018006c4 	movi	r6,27
   41240:	01400174 	movhi	r5,5
   41244:	2949eb04 	addi	r5,r5,10156
   41248:	0041ac00 	call	41ac0 <fprintf>
}
   4124c:	0001883a 	nop
   41250:	e037883a 	mov	sp,fp
   41254:	dfc00117 	ldw	ra,4(sp)
   41258:	df000017 	ldw	fp,0(sp)
   4125c:	dec00204 	addi	sp,sp,8
   41260:	f800283a 	ret

00041264 <highscore_reset>:

void highscore_reset() {
   41264:	defffd04 	addi	sp,sp,-12
   41268:	dfc00215 	stw	ra,8(sp)
   4126c:	df000115 	stw	fp,4(sp)
   41270:	df000104 	addi	fp,sp,4
	for (int i = 0; i < HIGHSCORES_CNT; i++) {
   41274:	e03fff15 	stw	zero,-4(fp)
   41278:	00000a06 	br	412a4 <highscore_reset+0x40>
		highscore_list[i] = 0;
   4127c:	00800174 	movhi	r2,5
   41280:	109b4e04 	addi	r2,r2,27960
   41284:	e0ffff17 	ldw	r3,-4(fp)
   41288:	18c7883a 	add	r3,r3,r3
   4128c:	18c7883a 	add	r3,r3,r3
   41290:	10c5883a 	add	r2,r2,r3
   41294:	10000015 	stw	zero,0(r2)
	LCD_PRINTF(lcd, "%c%s%d\n", ESC, ESC_ROW1_COL13, highscore_list[p.lcd_line0_index]);
	LCD_PRINTF(lcd, "%c%s%d\n", ESC, ESC_ROW2_COL13, highscore_list[p.lcd_line1_index]);
}

void highscore_reset() {
	for (int i = 0; i < HIGHSCORES_CNT; i++) {
   41298:	e0bfff17 	ldw	r2,-4(fp)
   4129c:	10800044 	addi	r2,r2,1
   412a0:	e0bfff15 	stw	r2,-4(fp)
   412a4:	e0bfff17 	ldw	r2,-4(fp)
   412a8:	10800150 	cmplti	r2,r2,5
   412ac:	103ff31e 	bne	r2,zero,4127c <__alt_data_end+0xfffcf27c>
		highscore_list[i] = 0;
	}
	LCD_PRINTF(lcd, "%c%s\n", ESC, ESC_CLEAR_ALL);
   412b0:	d0a7c217 	ldw	r2,-24824(gp)
   412b4:	01c00174 	movhi	r7,5
   412b8:	39c9ef04 	addi	r7,r7,10172
   412bc:	018006c4 	movi	r6,27
   412c0:	01400174 	movhi	r5,5
   412c4:	2949f004 	addi	r5,r5,10176
   412c8:	1009883a 	mov	r4,r2
   412cc:	0041ac00 	call	41ac0 <fprintf>
	LCD_PRINTF(lcd, "%c%sHighscore is \n", ESC, ESC_ROW1_COL1);
   412d0:	d0a7c217 	ldw	r2,-24824(gp)
   412d4:	01c00174 	movhi	r7,5
   412d8:	39c9f204 	addi	r7,r7,10184
   412dc:	018006c4 	movi	r6,27
   412e0:	01400174 	movhi	r5,5
   412e4:	2949f404 	addi	r5,r5,10192
   412e8:	1009883a 	mov	r4,r2
   412ec:	0041ac00 	call	41ac0 <fprintf>
  	LCD_PRINTF(lcd, "reset\n");
   412f0:	d0a7c217 	ldw	r2,-24824(gp)
   412f4:	100f883a 	mov	r7,r2
   412f8:	01800184 	movi	r6,6
   412fc:	01400044 	movi	r5,1
   41300:	01000174 	movhi	r4,5
   41304:	2109f904 	addi	r4,r4,10212
   41308:	004208c0 	call	4208c <fwrite>
	usleep(3000000);
   4130c:	01000bb4 	movhi	r4,46
   41310:	2131b004 	addi	r4,r4,-14656
   41314:	004fe040 	call	4fe04 <usleep>
}
   41318:	0001883a 	nop
   4131c:	e037883a 	mov	sp,fp
   41320:	dfc00117 	ldw	ra,4(sp)
   41324:	df000017 	ldw	fp,0(sp)
   41328:	dec00204 	addi	sp,sp,8
   4132c:	f800283a 	ret

00041330 <lcd_print>:
#include "lcd.h"

void lcd_print(int row, int col, char str[]) {
   41330:	defff704 	addi	sp,sp,-36
   41334:	dfc00815 	stw	ra,32(sp)
   41338:	df000715 	stw	fp,28(sp)
   4133c:	df000704 	addi	fp,sp,28
   41340:	e13ffd15 	stw	r4,-12(fp)
   41344:	e17ffe15 	stw	r5,-8(fp)
   41348:	e1bfff15 	stw	r6,-4(fp)
    LCD_PRINTF(lcd, "%c[%d;%dH%c%s\b%s\n", ESC, row, col+1, ESC, ESC_CLEAR, str);
   4134c:	d127c217 	ldw	r4,-24824(gp)
   41350:	e0bffe17 	ldw	r2,-8(fp)
   41354:	10c00044 	addi	r3,r2,1
   41358:	e0bfff17 	ldw	r2,-4(fp)
   4135c:	d8800315 	stw	r2,12(sp)
   41360:	00800174 	movhi	r2,5
   41364:	108a0004 	addi	r2,r2,10240
   41368:	d8800215 	stw	r2,8(sp)
   4136c:	008006c4 	movi	r2,27
   41370:	d8800115 	stw	r2,4(sp)
   41374:	d8c00015 	stw	r3,0(sp)
   41378:	e1fffd17 	ldw	r7,-12(fp)
   4137c:	018006c4 	movi	r6,27
   41380:	01400174 	movhi	r5,5
   41384:	2949fb04 	addi	r5,r5,10220
   41388:	0041ac00 	call	41ac0 <fprintf>
}
   4138c:	0001883a 	nop
   41390:	e037883a 	mov	sp,fp
   41394:	dfc00117 	ldw	ra,4(sp)
   41398:	df000017 	ldw	fp,0(sp)
   4139c:	dec00204 	addi	sp,sp,8
   413a0:	f800283a 	ret

000413a4 <lcd_clear>:

void lcd_clear() {
   413a4:	defffe04 	addi	sp,sp,-8
   413a8:	dfc00115 	stw	ra,4(sp)
   413ac:	df000015 	stw	fp,0(sp)
   413b0:	d839883a 	mov	fp,sp
    LCD_PRINTF(lcd, "%c%s\n", ESC, ESC_CLEAR_ALL);
   413b4:	d0a7c217 	ldw	r2,-24824(gp)
   413b8:	01c00174 	movhi	r7,5
   413bc:	39ca0104 	addi	r7,r7,10244
   413c0:	018006c4 	movi	r6,27
   413c4:	01400174 	movhi	r5,5
   413c8:	294a0204 	addi	r5,r5,10248
   413cc:	1009883a 	mov	r4,r2
   413d0:	0041ac00 	call	41ac0 <fprintf>
   413d4:	0001883a 	nop
   413d8:	e037883a 	mov	sp,fp
   413dc:	dfc00117 	ldw	ra,4(sp)
   413e0:	df000017 	ldw	fp,0(sp)
   413e4:	dec00204 	addi	sp,sp,8
   413e8:	f800283a 	ret

000413ec <main>:
#include "lcd.h"
#include "btnLed.h"
#include "game.h"
#include "fsm.h"

int main(void) {
   413ec:	defffe04 	addi	sp,sp,-8
   413f0:	dfc00115 	stw	ra,4(sp)
   413f4:	df000015 	stw	fp,0(sp)
   413f8:	d839883a 	mov	fp,sp
    srand ( time(NULL) );
   413fc:	0009883a 	mov	r4,zero
   41400:	00432f80 	call	432f8 <time>
   41404:	1009883a 	mov	r4,r2
   41408:	0042d500 	call	42d50 <srand>
    
	// Inititalize the lcd
	lcd = LCD_OPEN();
   4140c:	01400174 	movhi	r5,5
   41410:	294a0404 	addi	r5,r5,10256
   41414:	01000174 	movhi	r4,5
   41418:	210a0504 	addi	r4,r4,10260
   4141c:	0041a800 	call	41a80 <fopen>
   41420:	d0a7c215 	stw	r2,-24824(gp)
	if(lcd == NULL) {
   41424:	d0a7c217 	ldw	r2,-24824(gp)
   41428:	1000031e 	bne	r2,zero,41438 <main+0x4c>
		printf("Error: lcd not found!");
   4142c:	01000174 	movhi	r4,5
   41430:	210a0a04 	addi	r4,r4,10280
   41434:	0042c400 	call	42c40 <printf>
	}

    // Initialize the button pio.
    btnLed_init();
   41438:	00403300 	call	40330 <btnLed_init>

    game_set_hard_difficulty();
   4143c:	00410880 	call	41088 <game_set_hard_difficulty>

    while(1) {
    	fsm();
   41440:	00407e00 	call	407e0 <fsm>
    	LCD_PRINTF(lcd, "%c%s\n", ESC, ESC_CLEAR_ALL);
    	input = game_getUserInput();
    	LCD_PRINTF(lcd, "%c%s>helloooen\n", ESC, ESC_ROW1_COL1);
    	*/

		usleep(100000); // Sleep for 0.1s.
   41444:	010000b4 	movhi	r4,2
   41448:	2121a804 	addi	r4,r4,-31072
   4144c:	004fe040 	call	4fe04 <usleep>

    }
   41450:	003ffb06 	br	41440 <__alt_data_end+0xfffcf440>

00041454 <menu_displayPage>:
page highscores_page = {ITEM_CNT_HIGHSCORES_PAGE, highscores_page_items, 0, 1};
page settings_page   = {ITEM_CNT_SETTINGS_PAGE,   settings_page_items,   0, 1};
page about_page      = {ITEM_CNT_ABOUT_PAGE,      about_page_items,      0, 1};
page difficulty_page = {ITEM_CNT_ABOUT_PAGE,      difficulty_page_items, 0, 1};

void menu_displayPage(page p) {
   41454:	defff404 	addi	sp,sp,-48
   41458:	dfc00b15 	stw	ra,44(sp)
   4145c:	df000a15 	stw	fp,40(sp)
   41460:	df000a04 	addi	fp,sp,40
   41464:	e13ffc15 	stw	r4,-16(fp)
   41468:	e17ffd15 	stw	r5,-12(fp)
   4146c:	e1bffe15 	stw	r6,-8(fp)
   41470:	e1ffff15 	stw	r7,-4(fp)
  char str1[] = ">";
   41474:	00800f84 	movi	r2,62
   41478:	e0bff60d 	sth	r2,-40(fp)
  char str_with_pointer[20];
   
  strcpy(str_with_pointer, str1);   // copy the first string into the result array
   4147c:	e0bff684 	addi	r2,fp,-38
   41480:	e17ff604 	addi	r5,fp,-40
   41484:	1009883a 	mov	r4,r2
   41488:	00431d00 	call	431d0 <strcpy>
  strcat(str_with_pointer, p.items[p.lcd_line0_index].name);   // concatenate the second string to the result array
   4148c:	e0fffd17 	ldw	r3,-12(fp)
   41490:	e0bffe17 	ldw	r2,-8(fp)
   41494:	10800724 	muli	r2,r2,28
   41498:	1885883a 	add	r2,r3,r2
   4149c:	1007883a 	mov	r3,r2
   414a0:	e0bff684 	addi	r2,fp,-38
   414a4:	180b883a 	mov	r5,r3
   414a8:	1009883a 	mov	r4,r2
   414ac:	004314c0 	call	4314c <strcat>
  lcd_clear();
   414b0:	00413a40 	call	413a4 <lcd_clear>
  lcd_print(1, 1, str_with_pointer);
   414b4:	e0bff684 	addi	r2,fp,-38
   414b8:	100d883a 	mov	r6,r2
   414bc:	01400044 	movi	r5,1
   414c0:	01000044 	movi	r4,1
   414c4:	00413300 	call	41330 <lcd_print>
  lcd_print(2, 2, p.items[p.lcd_line1_index].name);
   414c8:	e0fffd17 	ldw	r3,-12(fp)
   414cc:	e0bfff17 	ldw	r2,-4(fp)
   414d0:	10800724 	muli	r2,r2,28
   414d4:	1885883a 	add	r2,r3,r2
   414d8:	100d883a 	mov	r6,r2
   414dc:	01400084 	movi	r5,2
   414e0:	01000084 	movi	r4,2
   414e4:	00413300 	call	41330 <lcd_print>
}
   414e8:	0001883a 	nop
   414ec:	e037883a 	mov	sp,fp
   414f0:	dfc00117 	ldw	ra,4(sp)
   414f4:	df000017 	ldw	fp,0(sp)
   414f8:	dec00204 	addi	sp,sp,8
   414fc:	f800283a 	ret

00041500 <menu_scrollPage>:

void menu_scrollPage(page *p, USERINPUT up_down) {
   41500:	defffc04 	addi	sp,sp,-16
   41504:	dfc00315 	stw	ra,12(sp)
   41508:	df000215 	stw	fp,8(sp)
   4150c:	df000204 	addi	fp,sp,8
   41510:	e13ffe15 	stw	r4,-8(fp)
   41514:	e17fff15 	stw	r5,-4(fp)
  if (up_down == BTN_WHITE_UP) {
   41518:	e0bfff17 	ldw	r2,-4(fp)
   4151c:	10800058 	cmpnei	r2,r2,1
   41520:	10001d1e 	bne	r2,zero,41598 <menu_scrollPage+0x98>
    p->lcd_line0_index = ((p->lcd_line0_index - 1) + p->item_cnt) % p->item_cnt;
   41524:	e0bffe17 	ldw	r2,-8(fp)
   41528:	10800217 	ldw	r2,8(r2)
   4152c:	10ffffc4 	addi	r3,r2,-1
   41530:	e0bffe17 	ldw	r2,-8(fp)
   41534:	10800017 	ldw	r2,0(r2)
   41538:	1887883a 	add	r3,r3,r2
   4153c:	e0bffe17 	ldw	r2,-8(fp)
   41540:	10800017 	ldw	r2,0(r2)
   41544:	100b883a 	mov	r5,r2
   41548:	1809883a 	mov	r4,r3
   4154c:	004185c0 	call	4185c <__modsi3>
   41550:	1007883a 	mov	r3,r2
   41554:	e0bffe17 	ldw	r2,-8(fp)
   41558:	10c00215 	stw	r3,8(r2)
    p->lcd_line1_index = ((p->lcd_line1_index - 1) + p->item_cnt) % p->item_cnt;
   4155c:	e0bffe17 	ldw	r2,-8(fp)
   41560:	10800317 	ldw	r2,12(r2)
   41564:	10ffffc4 	addi	r3,r2,-1
   41568:	e0bffe17 	ldw	r2,-8(fp)
   4156c:	10800017 	ldw	r2,0(r2)
   41570:	1887883a 	add	r3,r3,r2
   41574:	e0bffe17 	ldw	r2,-8(fp)
   41578:	10800017 	ldw	r2,0(r2)
   4157c:	100b883a 	mov	r5,r2
   41580:	1809883a 	mov	r4,r3
   41584:	004185c0 	call	4185c <__modsi3>
   41588:	1007883a 	mov	r3,r2
   4158c:	e0bffe17 	ldw	r2,-8(fp)
   41590:	10c00315 	stw	r3,12(r2)
  } else if (up_down == BTN_YELLOW_DOWN) {
    p->lcd_line0_index = (p->lcd_line0_index + 1) % p->item_cnt;
    p->lcd_line1_index = (p->lcd_line1_index + 1) % p->item_cnt;
  }
}
   41594:	00001906 	br	415fc <menu_scrollPage+0xfc>

void menu_scrollPage(page *p, USERINPUT up_down) {
  if (up_down == BTN_WHITE_UP) {
    p->lcd_line0_index = ((p->lcd_line0_index - 1) + p->item_cnt) % p->item_cnt;
    p->lcd_line1_index = ((p->lcd_line1_index - 1) + p->item_cnt) % p->item_cnt;
  } else if (up_down == BTN_YELLOW_DOWN) {
   41598:	e0bfff17 	ldw	r2,-4(fp)
   4159c:	10800098 	cmpnei	r2,r2,2
   415a0:	1000161e 	bne	r2,zero,415fc <menu_scrollPage+0xfc>
    p->lcd_line0_index = (p->lcd_line0_index + 1) % p->item_cnt;
   415a4:	e0bffe17 	ldw	r2,-8(fp)
   415a8:	10800217 	ldw	r2,8(r2)
   415ac:	10c00044 	addi	r3,r2,1
   415b0:	e0bffe17 	ldw	r2,-8(fp)
   415b4:	10800017 	ldw	r2,0(r2)
   415b8:	100b883a 	mov	r5,r2
   415bc:	1809883a 	mov	r4,r3
   415c0:	004185c0 	call	4185c <__modsi3>
   415c4:	1007883a 	mov	r3,r2
   415c8:	e0bffe17 	ldw	r2,-8(fp)
   415cc:	10c00215 	stw	r3,8(r2)
    p->lcd_line1_index = (p->lcd_line1_index + 1) % p->item_cnt;
   415d0:	e0bffe17 	ldw	r2,-8(fp)
   415d4:	10800317 	ldw	r2,12(r2)
   415d8:	10c00044 	addi	r3,r2,1
   415dc:	e0bffe17 	ldw	r2,-8(fp)
   415e0:	10800017 	ldw	r2,0(r2)
   415e4:	100b883a 	mov	r5,r2
   415e8:	1809883a 	mov	r4,r3
   415ec:	004185c0 	call	4185c <__modsi3>
   415f0:	1007883a 	mov	r3,r2
   415f4:	e0bffe17 	ldw	r2,-8(fp)
   415f8:	10c00315 	stw	r3,12(r2)
  }
}
   415fc:	0001883a 	nop
   41600:	e037883a 	mov	sp,fp
   41604:	dfc00117 	ldw	ra,4(sp)
   41608:	df000017 	ldw	fp,0(sp)
   4160c:	dec00204 	addi	sp,sp,8
   41610:	f800283a 	ret

00041614 <menu_about>:

void menu_about() {
   41614:	defffd04 	addi	sp,sp,-12
   41618:	dfc00215 	stw	ra,8(sp)
   4161c:	df000115 	stw	fp,4(sp)
   41620:	df000104 	addi	fp,sp,4
  USERINPUT input = 0;
   41624:	e03fff15 	stw	zero,-4(fp)
  while (input != BTN_RED_BACK) {
   41628:	00001a06 	br	41694 <menu_about+0x80>
    menu_displayPage(about_page);
   4162c:	00800174 	movhi	r2,5
   41630:	108c1604 	addi	r2,r2,12376
   41634:	11000017 	ldw	r4,0(r2)
   41638:	11400117 	ldw	r5,4(r2)
   4163c:	11800217 	ldw	r6,8(r2)
   41640:	11c00317 	ldw	r7,12(r2)
   41644:	00414540 	call	41454 <menu_displayPage>
    input = game_getUserInput();
   41648:	004084c0 	call	4084c <game_getUserInput>
   4164c:	e0bfff15 	stw	r2,-4(fp)
    switch(input) {
   41650:	e0bfff17 	ldw	r2,-4(fp)
   41654:	10c00060 	cmpeqi	r3,r2,1
   41658:	1800031e 	bne	r3,zero,41668 <menu_about+0x54>
   4165c:	108000a0 	cmpeqi	r2,r2,2
   41660:	1000061e 	bne	r2,zero,4167c <menu_about+0x68>
   41664:	00000a06 	br	41690 <menu_about+0x7c>
      case BTN_WHITE_UP:
        menu_scrollPage(&about_page, BTN_WHITE_UP);
   41668:	01400044 	movi	r5,1
   4166c:	01000174 	movhi	r4,5
   41670:	210c1604 	addi	r4,r4,12376
   41674:	00415000 	call	41500 <menu_scrollPage>
        break;
   41678:	00000606 	br	41694 <menu_about+0x80>
      case BTN_YELLOW_DOWN:
        menu_scrollPage(&about_page, BTN_YELLOW_DOWN);
   4167c:	01400084 	movi	r5,2
   41680:	01000174 	movhi	r4,5
   41684:	210c1604 	addi	r4,r4,12376
   41688:	00415000 	call	41500 <menu_scrollPage>
        break;
   4168c:	00000106 	br	41694 <menu_about+0x80>
      default:
        break;
   41690:	0001883a 	nop
  }
}

void menu_about() {
  USERINPUT input = 0;
  while (input != BTN_RED_BACK) {
   41694:	e0bfff17 	ldw	r2,-4(fp)
   41698:	108000d8 	cmpnei	r2,r2,3
   4169c:	103fe31e 	bne	r2,zero,4162c <__alt_data_end+0xfffcf62c>
        break;
      default:
        break;
    }
  }
}
   416a0:	0001883a 	nop
   416a4:	e037883a 	mov	sp,fp
   416a8:	dfc00117 	ldw	ra,4(sp)
   416ac:	df000017 	ldw	fp,0(sp)
   416b0:	dec00204 	addi	sp,sp,8
   416b4:	f800283a 	ret

000416b8 <menu_change_difficulty>:

void menu_change_difficulty() {
   416b8:	defffd04 	addi	sp,sp,-12
   416bc:	dfc00215 	stw	ra,8(sp)
   416c0:	df000115 	stw	fp,4(sp)
   416c4:	df000104 	addi	fp,sp,4
  USERINPUT input = 0;
   416c8:	e03fff15 	stw	zero,-4(fp)
  while (input != BTN_RED_BACK && input != BTN_GREEN_ENTER) {
   416cc:	00003306 	br	4179c <menu_change_difficulty+0xe4>
    menu_displayPage(difficulty_page);
   416d0:	00800174 	movhi	r2,5
   416d4:	108c1a04 	addi	r2,r2,12392
   416d8:	11000017 	ldw	r4,0(r2)
   416dc:	11400117 	ldw	r5,4(r2)
   416e0:	11800217 	ldw	r6,8(r2)
   416e4:	11c00317 	ldw	r7,12(r2)
   416e8:	00414540 	call	41454 <menu_displayPage>
    input = game_getUserInput();
   416ec:	004084c0 	call	4084c <game_getUserInput>
   416f0:	e0bfff15 	stw	r2,-4(fp)
    switch(input) {
   416f4:	e0bfff17 	ldw	r2,-4(fp)
   416f8:	10c000a0 	cmpeqi	r3,r2,2
   416fc:	1800091e 	bne	r3,zero,41724 <menu_change_difficulty+0x6c>
   41700:	10c00120 	cmpeqi	r3,r2,4
   41704:	18000c1e 	bne	r3,zero,41738 <menu_change_difficulty+0x80>
   41708:	10800060 	cmpeqi	r2,r2,1
   4170c:	10002226 	beq	r2,zero,41798 <menu_change_difficulty+0xe0>
      case BTN_WHITE_UP:
        menu_scrollPage(&difficulty_page, BTN_WHITE_UP);
   41710:	01400044 	movi	r5,1
   41714:	01000174 	movhi	r4,5
   41718:	210c1a04 	addi	r4,r4,12392
   4171c:	00415000 	call	41500 <menu_scrollPage>
        break;
   41720:	00001e06 	br	4179c <menu_change_difficulty+0xe4>
      case BTN_YELLOW_DOWN:
        menu_scrollPage(&difficulty_page, BTN_YELLOW_DOWN);
   41724:	01400084 	movi	r5,2
   41728:	01000174 	movhi	r4,5
   4172c:	210c1a04 	addi	r4,r4,12392
   41730:	00415000 	call	41500 <menu_scrollPage>
        break;
   41734:	00001906 	br	4179c <menu_change_difficulty+0xe4>
      case BTN_GREEN_ENTER:
        difficulty_page.items[difficulty_page.lcd_line0_index].function();
   41738:	00800174 	movhi	r2,5
   4173c:	108c1a04 	addi	r2,r2,12392
   41740:	10c00117 	ldw	r3,4(r2)
   41744:	00800174 	movhi	r2,5
   41748:	108c1a04 	addi	r2,r2,12392
   4174c:	10800217 	ldw	r2,8(r2)
   41750:	10800724 	muli	r2,r2,28
   41754:	1885883a 	add	r2,r3,r2
   41758:	10800417 	ldw	r2,16(r2)
   4175c:	103ee83a 	callr	r2
        lcd_print(1,1, "New difficulty");
   41760:	01800174 	movhi	r6,5
   41764:	318a1004 	addi	r6,r6,10304
   41768:	01400044 	movi	r5,1
   4176c:	01000044 	movi	r4,1
   41770:	00413300 	call	41330 <lcd_print>
        lcd_print(2,1, "is set.");
   41774:	01800174 	movhi	r6,5
   41778:	318a1404 	addi	r6,r6,10320
   4177c:	01400044 	movi	r5,1
   41780:	01000084 	movi	r4,2
   41784:	00413300 	call	41330 <lcd_print>
        usleep(2000000);
   41788:	010007f4 	movhi	r4,31
   4178c:	21212004 	addi	r4,r4,-31616
   41790:	004fe040 	call	4fe04 <usleep>
        break;
   41794:	00000106 	br	4179c <menu_change_difficulty+0xe4>
      default:
        break;
   41798:	0001883a 	nop
  }
}

void menu_change_difficulty() {
  USERINPUT input = 0;
  while (input != BTN_RED_BACK && input != BTN_GREEN_ENTER) {
   4179c:	e0bfff17 	ldw	r2,-4(fp)
   417a0:	108000e0 	cmpeqi	r2,r2,3
   417a4:	1000031e 	bne	r2,zero,417b4 <menu_change_difficulty+0xfc>
   417a8:	e0bfff17 	ldw	r2,-4(fp)
   417ac:	10800118 	cmpnei	r2,r2,4
   417b0:	103fc71e 	bne	r2,zero,416d0 <__alt_data_end+0xfffcf6d0>
        break;
      default:
        break;
    }
  }
  printf("Out of while loop\n");
   417b4:	01000174 	movhi	r4,5
   417b8:	210a1604 	addi	r4,r4,10328
   417bc:	0042d3c0 	call	42d3c <puts>
}
   417c0:	0001883a 	nop
   417c4:	e037883a 	mov	sp,fp
   417c8:	dfc00117 	ldw	ra,4(sp)
   417cc:	df000017 	ldw	fp,0(sp)
   417d0:	dec00204 	addi	sp,sp,8
   417d4:	f800283a 	ret

000417d8 <__divsi3>:
   417d8:	20001b16 	blt	r4,zero,41848 <__divsi3+0x70>
   417dc:	000f883a 	mov	r7,zero
   417e0:	28001616 	blt	r5,zero,4183c <__divsi3+0x64>
   417e4:	200d883a 	mov	r6,r4
   417e8:	29001a2e 	bgeu	r5,r4,41854 <__divsi3+0x7c>
   417ec:	00800804 	movi	r2,32
   417f0:	00c00044 	movi	r3,1
   417f4:	00000106 	br	417fc <__divsi3+0x24>
   417f8:	10000d26 	beq	r2,zero,41830 <__divsi3+0x58>
   417fc:	294b883a 	add	r5,r5,r5
   41800:	10bfffc4 	addi	r2,r2,-1
   41804:	18c7883a 	add	r3,r3,r3
   41808:	293ffb36 	bltu	r5,r4,417f8 <__alt_data_end+0xfffcf7f8>
   4180c:	0005883a 	mov	r2,zero
   41810:	18000726 	beq	r3,zero,41830 <__divsi3+0x58>
   41814:	0005883a 	mov	r2,zero
   41818:	31400236 	bltu	r6,r5,41824 <__divsi3+0x4c>
   4181c:	314dc83a 	sub	r6,r6,r5
   41820:	10c4b03a 	or	r2,r2,r3
   41824:	1806d07a 	srli	r3,r3,1
   41828:	280ad07a 	srli	r5,r5,1
   4182c:	183ffa1e 	bne	r3,zero,41818 <__alt_data_end+0xfffcf818>
   41830:	38000126 	beq	r7,zero,41838 <__divsi3+0x60>
   41834:	0085c83a 	sub	r2,zero,r2
   41838:	f800283a 	ret
   4183c:	014bc83a 	sub	r5,zero,r5
   41840:	39c0005c 	xori	r7,r7,1
   41844:	003fe706 	br	417e4 <__alt_data_end+0xfffcf7e4>
   41848:	0109c83a 	sub	r4,zero,r4
   4184c:	01c00044 	movi	r7,1
   41850:	003fe306 	br	417e0 <__alt_data_end+0xfffcf7e0>
   41854:	00c00044 	movi	r3,1
   41858:	003fee06 	br	41814 <__alt_data_end+0xfffcf814>

0004185c <__modsi3>:
   4185c:	20001716 	blt	r4,zero,418bc <__modsi3+0x60>
   41860:	000f883a 	mov	r7,zero
   41864:	2005883a 	mov	r2,r4
   41868:	28001216 	blt	r5,zero,418b4 <__modsi3+0x58>
   4186c:	2900162e 	bgeu	r5,r4,418c8 <__modsi3+0x6c>
   41870:	01800804 	movi	r6,32
   41874:	00c00044 	movi	r3,1
   41878:	00000106 	br	41880 <__modsi3+0x24>
   4187c:	30000a26 	beq	r6,zero,418a8 <__modsi3+0x4c>
   41880:	294b883a 	add	r5,r5,r5
   41884:	31bfffc4 	addi	r6,r6,-1
   41888:	18c7883a 	add	r3,r3,r3
   4188c:	293ffb36 	bltu	r5,r4,4187c <__alt_data_end+0xfffcf87c>
   41890:	18000526 	beq	r3,zero,418a8 <__modsi3+0x4c>
   41894:	1806d07a 	srli	r3,r3,1
   41898:	11400136 	bltu	r2,r5,418a0 <__modsi3+0x44>
   4189c:	1145c83a 	sub	r2,r2,r5
   418a0:	280ad07a 	srli	r5,r5,1
   418a4:	183ffb1e 	bne	r3,zero,41894 <__alt_data_end+0xfffcf894>
   418a8:	38000126 	beq	r7,zero,418b0 <__modsi3+0x54>
   418ac:	0085c83a 	sub	r2,zero,r2
   418b0:	f800283a 	ret
   418b4:	014bc83a 	sub	r5,zero,r5
   418b8:	003fec06 	br	4186c <__alt_data_end+0xfffcf86c>
   418bc:	0109c83a 	sub	r4,zero,r4
   418c0:	01c00044 	movi	r7,1
   418c4:	003fe706 	br	41864 <__alt_data_end+0xfffcf864>
   418c8:	00c00044 	movi	r3,1
   418cc:	003ff106 	br	41894 <__alt_data_end+0xfffcf894>

000418d0 <__udivsi3>:
   418d0:	200d883a 	mov	r6,r4
   418d4:	2900152e 	bgeu	r5,r4,4192c <__udivsi3+0x5c>
   418d8:	28001416 	blt	r5,zero,4192c <__udivsi3+0x5c>
   418dc:	00800804 	movi	r2,32
   418e0:	00c00044 	movi	r3,1
   418e4:	00000206 	br	418f0 <__udivsi3+0x20>
   418e8:	10000e26 	beq	r2,zero,41924 <__udivsi3+0x54>
   418ec:	28000516 	blt	r5,zero,41904 <__udivsi3+0x34>
   418f0:	294b883a 	add	r5,r5,r5
   418f4:	10bfffc4 	addi	r2,r2,-1
   418f8:	18c7883a 	add	r3,r3,r3
   418fc:	293ffa36 	bltu	r5,r4,418e8 <__alt_data_end+0xfffcf8e8>
   41900:	18000826 	beq	r3,zero,41924 <__udivsi3+0x54>
   41904:	0005883a 	mov	r2,zero
   41908:	31400236 	bltu	r6,r5,41914 <__udivsi3+0x44>
   4190c:	314dc83a 	sub	r6,r6,r5
   41910:	10c4b03a 	or	r2,r2,r3
   41914:	1806d07a 	srli	r3,r3,1
   41918:	280ad07a 	srli	r5,r5,1
   4191c:	183ffa1e 	bne	r3,zero,41908 <__alt_data_end+0xfffcf908>
   41920:	f800283a 	ret
   41924:	0005883a 	mov	r2,zero
   41928:	f800283a 	ret
   4192c:	00c00044 	movi	r3,1
   41930:	003ff406 	br	41904 <__alt_data_end+0xfffcf904>

00041934 <__umodsi3>:
   41934:	2005883a 	mov	r2,r4
   41938:	2900122e 	bgeu	r5,r4,41984 <__umodsi3+0x50>
   4193c:	28001116 	blt	r5,zero,41984 <__umodsi3+0x50>
   41940:	01800804 	movi	r6,32
   41944:	00c00044 	movi	r3,1
   41948:	00000206 	br	41954 <__umodsi3+0x20>
   4194c:	30000c26 	beq	r6,zero,41980 <__umodsi3+0x4c>
   41950:	28000516 	blt	r5,zero,41968 <__umodsi3+0x34>
   41954:	294b883a 	add	r5,r5,r5
   41958:	31bfffc4 	addi	r6,r6,-1
   4195c:	18c7883a 	add	r3,r3,r3
   41960:	293ffa36 	bltu	r5,r4,4194c <__alt_data_end+0xfffcf94c>
   41964:	18000626 	beq	r3,zero,41980 <__umodsi3+0x4c>
   41968:	1806d07a 	srli	r3,r3,1
   4196c:	11400136 	bltu	r2,r5,41974 <__umodsi3+0x40>
   41970:	1145c83a 	sub	r2,r2,r5
   41974:	280ad07a 	srli	r5,r5,1
   41978:	183ffb1e 	bne	r3,zero,41968 <__alt_data_end+0xfffcf968>
   4197c:	f800283a 	ret
   41980:	f800283a 	ret
   41984:	00c00044 	movi	r3,1
   41988:	003ff706 	br	41968 <__alt_data_end+0xfffcf968>

0004198c <_fopen_r>:
   4198c:	defffa04 	addi	sp,sp,-24
   41990:	3005883a 	mov	r2,r6
   41994:	dcc00415 	stw	r19,16(sp)
   41998:	d80d883a 	mov	r6,sp
   4199c:	2827883a 	mov	r19,r5
   419a0:	100b883a 	mov	r5,r2
   419a4:	dc800315 	stw	r18,12(sp)
   419a8:	dfc00515 	stw	ra,20(sp)
   419ac:	dc400215 	stw	r17,8(sp)
   419b0:	dc000115 	stw	r16,4(sp)
   419b4:	2025883a 	mov	r18,r4
   419b8:	00476f00 	call	476f0 <__sflags>
   419bc:	10002726 	beq	r2,zero,41a5c <_fopen_r+0xd0>
   419c0:	9009883a 	mov	r4,r18
   419c4:	1023883a 	mov	r17,r2
   419c8:	00475700 	call	47570 <__sfp>
   419cc:	1021883a 	mov	r16,r2
   419d0:	10002226 	beq	r2,zero,41a5c <_fopen_r+0xd0>
   419d4:	d9800017 	ldw	r6,0(sp)
   419d8:	01c06d84 	movi	r7,438
   419dc:	980b883a 	mov	r5,r19
   419e0:	9009883a 	mov	r4,r18
   419e4:	0042bb00 	call	42bb0 <_open_r>
   419e8:	10001916 	blt	r2,zero,41a50 <_fopen_r+0xc4>
   419ec:	8080038d 	sth	r2,14(r16)
   419f0:	00800134 	movhi	r2,4
   419f4:	108c0404 	addi	r2,r2,12304
   419f8:	80800815 	stw	r2,32(r16)
   419fc:	00800134 	movhi	r2,4
   41a00:	108c1b04 	addi	r2,r2,12396
   41a04:	80800915 	stw	r2,36(r16)
   41a08:	00800134 	movhi	r2,4
   41a0c:	108c3a04 	addi	r2,r2,12520
   41a10:	80800a15 	stw	r2,40(r16)
   41a14:	00800134 	movhi	r2,4
   41a18:	108c5104 	addi	r2,r2,12612
   41a1c:	8440030d 	sth	r17,12(r16)
   41a20:	84000715 	stw	r16,28(r16)
   41a24:	80800b15 	stw	r2,44(r16)
   41a28:	8c40400c 	andi	r17,r17,256
   41a2c:	88000d1e 	bne	r17,zero,41a64 <_fopen_r+0xd8>
   41a30:	8005883a 	mov	r2,r16
   41a34:	dfc00517 	ldw	ra,20(sp)
   41a38:	dcc00417 	ldw	r19,16(sp)
   41a3c:	dc800317 	ldw	r18,12(sp)
   41a40:	dc400217 	ldw	r17,8(sp)
   41a44:	dc000117 	ldw	r16,4(sp)
   41a48:	dec00604 	addi	sp,sp,24
   41a4c:	f800283a 	ret
   41a50:	00476b00 	call	476b0 <__sfp_lock_acquire>
   41a54:	8000030d 	sth	zero,12(r16)
   41a58:	00476b40 	call	476b4 <__sfp_lock_release>
   41a5c:	0005883a 	mov	r2,zero
   41a60:	003ff406 	br	41a34 <__alt_data_end+0xfffcfa34>
   41a64:	01c00084 	movi	r7,2
   41a68:	000d883a 	mov	r6,zero
   41a6c:	800b883a 	mov	r5,r16
   41a70:	9009883a 	mov	r4,r18
   41a74:	0041ae40 	call	41ae4 <_fseek_r>
   41a78:	8005883a 	mov	r2,r16
   41a7c:	003fed06 	br	41a34 <__alt_data_end+0xfffcfa34>

00041a80 <fopen>:
   41a80:	00800174 	movhi	r2,5
   41a84:	10931604 	addi	r2,r2,19544
   41a88:	280d883a 	mov	r6,r5
   41a8c:	200b883a 	mov	r5,r4
   41a90:	11000017 	ldw	r4,0(r2)
   41a94:	004198c1 	jmpi	4198c <_fopen_r>

00041a98 <_fprintf_r>:
   41a98:	defffe04 	addi	sp,sp,-8
   41a9c:	2809883a 	mov	r4,r5
   41aa0:	300b883a 	mov	r5,r6
   41aa4:	dfc00015 	stw	ra,0(sp)
   41aa8:	d9c00115 	stw	r7,4(sp)
   41aac:	d9800104 	addi	r6,sp,4
   41ab0:	00455400 	call	45540 <__vfprintf_internal>
   41ab4:	dfc00017 	ldw	ra,0(sp)
   41ab8:	dec00204 	addi	sp,sp,8
   41abc:	f800283a 	ret

00041ac0 <fprintf>:
   41ac0:	defffd04 	addi	sp,sp,-12
   41ac4:	dfc00015 	stw	ra,0(sp)
   41ac8:	d9800115 	stw	r6,4(sp)
   41acc:	d9c00215 	stw	r7,8(sp)
   41ad0:	d9800104 	addi	r6,sp,4
   41ad4:	00455400 	call	45540 <__vfprintf_internal>
   41ad8:	dfc00017 	ldw	ra,0(sp)
   41adc:	dec00304 	addi	sp,sp,12
   41ae0:	f800283a 	ret

00041ae4 <_fseek_r>:
   41ae4:	0041b041 	jmpi	41b04 <_fseeko_r>

00041ae8 <fseek>:
   41ae8:	00800174 	movhi	r2,5
   41aec:	10931604 	addi	r2,r2,19544
   41af0:	300f883a 	mov	r7,r6
   41af4:	280d883a 	mov	r6,r5
   41af8:	200b883a 	mov	r5,r4
   41afc:	11000017 	ldw	r4,0(r2)
   41b00:	0041b041 	jmpi	41b04 <_fseeko_r>

00041b04 <_fseeko_r>:
   41b04:	deffe804 	addi	sp,sp,-96
   41b08:	dd401415 	stw	r21,80(sp)
   41b0c:	dc801115 	stw	r18,68(sp)
   41b10:	dc401015 	stw	r17,64(sp)
   41b14:	dc000f15 	stw	r16,60(sp)
   41b18:	dfc01715 	stw	ra,92(sp)
   41b1c:	ddc01615 	stw	r23,88(sp)
   41b20:	dd801515 	stw	r22,84(sp)
   41b24:	dd001315 	stw	r20,76(sp)
   41b28:	dcc01215 	stw	r19,72(sp)
   41b2c:	2023883a 	mov	r17,r4
   41b30:	2821883a 	mov	r16,r5
   41b34:	302b883a 	mov	r21,r6
   41b38:	3825883a 	mov	r18,r7
   41b3c:	20000226 	beq	r4,zero,41b48 <_fseeko_r+0x44>
   41b40:	20800e17 	ldw	r2,56(r4)
   41b44:	10005a26 	beq	r2,zero,41cb0 <_fseeko_r+0x1ac>
   41b48:	8080030b 	ldhu	r2,12(r16)
   41b4c:	00c04204 	movi	r3,264
   41b50:	1080420c 	andi	r2,r2,264
   41b54:	10c05b26 	beq	r2,r3,41cc4 <_fseeko_r+0x1c0>
   41b58:	85000a17 	ldw	r20,40(r16)
   41b5c:	a000f626 	beq	r20,zero,41f38 <_fseeko_r+0x434>
   41b60:	00800044 	movi	r2,1
   41b64:	90803e26 	beq	r18,r2,41c60 <_fseeko_r+0x15c>
   41b68:	00800084 	movi	r2,2
   41b6c:	90801026 	beq	r18,r2,41bb0 <_fseeko_r+0xac>
   41b70:	90000f26 	beq	r18,zero,41bb0 <_fseeko_r+0xac>
   41b74:	00800584 	movi	r2,22
   41b78:	88800015 	stw	r2,0(r17)
   41b7c:	04ffffc4 	movi	r19,-1
   41b80:	9805883a 	mov	r2,r19
   41b84:	dfc01717 	ldw	ra,92(sp)
   41b88:	ddc01617 	ldw	r23,88(sp)
   41b8c:	dd801517 	ldw	r22,84(sp)
   41b90:	dd401417 	ldw	r21,80(sp)
   41b94:	dd001317 	ldw	r20,76(sp)
   41b98:	dcc01217 	ldw	r19,72(sp)
   41b9c:	dc801117 	ldw	r18,68(sp)
   41ba0:	dc401017 	ldw	r17,64(sp)
   41ba4:	dc000f17 	ldw	r16,60(sp)
   41ba8:	dec01804 	addi	sp,sp,96
   41bac:	f800283a 	ret
   41bb0:	80800417 	ldw	r2,16(r16)
   41bb4:	002f883a 	mov	r23,zero
   41bb8:	0027883a 	mov	r19,zero
   41bbc:	1000cb26 	beq	r2,zero,41eec <_fseeko_r+0x3e8>
   41bc0:	8080030b 	ldhu	r2,12(r16)
   41bc4:	10c2068c 	andi	r3,r2,2074
   41bc8:	1800071e 	bne	r3,zero,41be8 <_fseeko_r+0xe4>
   41bcc:	10c1000c 	andi	r3,r2,1024
   41bd0:	1800451e 	bne	r3,zero,41ce8 <_fseeko_r+0x1e4>
   41bd4:	00c00134 	movhi	r3,4
   41bd8:	18cc3a04 	addi	r3,r3,12520
   41bdc:	a0c0b726 	beq	r20,r3,41ebc <_fseeko_r+0x3b8>
   41be0:	10820014 	ori	r2,r2,2048
   41be4:	8080030d 	sth	r2,12(r16)
   41be8:	800b883a 	mov	r5,r16
   41bec:	8809883a 	mov	r4,r17
   41bf0:	00472c40 	call	472c4 <_fflush_r>
   41bf4:	1027883a 	mov	r19,r2
   41bf8:	103fe01e 	bne	r2,zero,41b7c <__alt_data_end+0xfffcfb7c>
   41bfc:	81400717 	ldw	r5,28(r16)
   41c00:	900f883a 	mov	r7,r18
   41c04:	a80d883a 	mov	r6,r21
   41c08:	8809883a 	mov	r4,r17
   41c0c:	a03ee83a 	callr	r20
   41c10:	00ffffc4 	movi	r3,-1
   41c14:	10ffd926 	beq	r2,r3,41b7c <__alt_data_end+0xfffcfb7c>
   41c18:	81400c17 	ldw	r5,48(r16)
   41c1c:	28000526 	beq	r5,zero,41c34 <_fseeko_r+0x130>
   41c20:	80801004 	addi	r2,r16,64
   41c24:	28800226 	beq	r5,r2,41c30 <_fseeko_r+0x12c>
   41c28:	8809883a 	mov	r4,r17
   41c2c:	00478c00 	call	478c0 <_free_r>
   41c30:	80000c15 	stw	zero,48(r16)
   41c34:	8080030b 	ldhu	r2,12(r16)
   41c38:	80c00417 	ldw	r3,16(r16)
   41c3c:	80000115 	stw	zero,4(r16)
   41c40:	10bdf7cc 	andi	r2,r2,63455
   41c44:	80c00015 	stw	r3,0(r16)
   41c48:	8080030d 	sth	r2,12(r16)
   41c4c:	01800204 	movi	r6,8
   41c50:	000b883a 	mov	r5,zero
   41c54:	81001704 	addi	r4,r16,92
   41c58:	0042a880 	call	42a88 <memset>
   41c5c:	003fc806 	br	41b80 <__alt_data_end+0xfffcfb80>
   41c60:	800b883a 	mov	r5,r16
   41c64:	8809883a 	mov	r4,r17
   41c68:	00472c40 	call	472c4 <_fflush_r>
   41c6c:	8080030b 	ldhu	r2,12(r16)
   41c70:	10c4000c 	andi	r3,r2,4096
   41c74:	18008726 	beq	r3,zero,41e94 <_fseeko_r+0x390>
   41c78:	84c01417 	ldw	r19,80(r16)
   41c7c:	10c0010c 	andi	r3,r2,4
   41c80:	1800431e 	bne	r3,zero,41d90 <_fseeko_r+0x28c>
   41c84:	1080020c 	andi	r2,r2,8
   41c88:	10008026 	beq	r2,zero,41e8c <_fseeko_r+0x388>
   41c8c:	80c00017 	ldw	r3,0(r16)
   41c90:	80800417 	ldw	r2,16(r16)
   41c94:	18000226 	beq	r3,zero,41ca0 <_fseeko_r+0x19c>
   41c98:	1887c83a 	sub	r3,r3,r2
   41c9c:	98e7883a 	add	r19,r19,r3
   41ca0:	aceb883a 	add	r21,r21,r19
   41ca4:	05c00044 	movi	r23,1
   41ca8:	0025883a 	mov	r18,zero
   41cac:	003fc306 	br	41bbc <__alt_data_end+0xfffcfbbc>
   41cb0:	00476a00 	call	476a0 <__sinit>
   41cb4:	8080030b 	ldhu	r2,12(r16)
   41cb8:	00c04204 	movi	r3,264
   41cbc:	1080420c 	andi	r2,r2,264
   41cc0:	10ffa51e 	bne	r2,r3,41b58 <__alt_data_end+0xfffcfb58>
   41cc4:	800b883a 	mov	r5,r16
   41cc8:	8809883a 	mov	r4,r17
   41ccc:	00472c40 	call	472c4 <_fflush_r>
   41cd0:	003fa106 	br	41b58 <__alt_data_end+0xfffcfb58>
   41cd4:	8080030b 	ldhu	r2,12(r16)
   41cd8:	00c10004 	movi	r3,1024
   41cdc:	80c01315 	stw	r3,76(r16)
   41ce0:	10c4b03a 	or	r2,r2,r3
   41ce4:	8080030d 	sth	r2,12(r16)
   41ce8:	9000311e 	bne	r18,zero,41db0 <_fseeko_r+0x2ac>
   41cec:	a82d883a 	mov	r22,r21
   41cf0:	b800371e 	bne	r23,zero,41dd0 <_fseeko_r+0x2cc>
   41cf4:	8080030b 	ldhu	r2,12(r16)
   41cf8:	1084000c 	andi	r2,r2,4096
   41cfc:	10007f26 	beq	r2,zero,41efc <_fseeko_r+0x3f8>
   41d00:	80801417 	ldw	r2,80(r16)
   41d04:	81800117 	ldw	r6,4(r16)
   41d08:	81400c17 	ldw	r5,48(r16)
   41d0c:	11a7c83a 	sub	r19,r2,r6
   41d10:	28008226 	beq	r5,zero,41f1c <_fseeko_r+0x418>
   41d14:	81c00f17 	ldw	r7,60(r16)
   41d18:	99e7c83a 	sub	r19,r19,r7
   41d1c:	81000e17 	ldw	r4,56(r16)
   41d20:	80800417 	ldw	r2,16(r16)
   41d24:	99a7883a 	add	r19,r19,r6
   41d28:	2087c83a 	sub	r3,r4,r2
   41d2c:	98e7c83a 	sub	r19,r19,r3
   41d30:	38c7883a 	add	r3,r7,r3
   41d34:	b4c02b16 	blt	r22,r19,41de4 <_fseeko_r+0x2e0>
   41d38:	98c9883a 	add	r4,r19,r3
   41d3c:	b100292e 	bgeu	r22,r4,41de4 <_fseeko_r+0x2e0>
   41d40:	b4e7c83a 	sub	r19,r22,r19
   41d44:	14c5883a 	add	r2,r2,r19
   41d48:	1ce7c83a 	sub	r19,r3,r19
   41d4c:	80800015 	stw	r2,0(r16)
   41d50:	84c00115 	stw	r19,4(r16)
   41d54:	28000526 	beq	r5,zero,41d6c <_fseeko_r+0x268>
   41d58:	80801004 	addi	r2,r16,64
   41d5c:	28800226 	beq	r5,r2,41d68 <_fseeko_r+0x264>
   41d60:	8809883a 	mov	r4,r17
   41d64:	00478c00 	call	478c0 <_free_r>
   41d68:	80000c15 	stw	zero,48(r16)
   41d6c:	8080030b 	ldhu	r2,12(r16)
   41d70:	01800204 	movi	r6,8
   41d74:	000b883a 	mov	r5,zero
   41d78:	10bff7cc 	andi	r2,r2,65503
   41d7c:	8080030d 	sth	r2,12(r16)
   41d80:	81001704 	addi	r4,r16,92
   41d84:	0042a880 	call	42a88 <memset>
   41d88:	0027883a 	mov	r19,zero
   41d8c:	003f7c06 	br	41b80 <__alt_data_end+0xfffcfb80>
   41d90:	80c00117 	ldw	r3,4(r16)
   41d94:	80800c17 	ldw	r2,48(r16)
   41d98:	98e7c83a 	sub	r19,r19,r3
   41d9c:	10003b26 	beq	r2,zero,41e8c <_fseeko_r+0x388>
   41da0:	80c00f17 	ldw	r3,60(r16)
   41da4:	80800417 	ldw	r2,16(r16)
   41da8:	98e7c83a 	sub	r19,r19,r3
   41dac:	003fbc06 	br	41ca0 <__alt_data_end+0xfffcfca0>
   41db0:	8140038f 	ldh	r5,14(r16)
   41db4:	d80d883a 	mov	r6,sp
   41db8:	8809883a 	mov	r4,r17
   41dbc:	0041f640 	call	41f64 <_fstat_r>
   41dc0:	103f891e 	bne	r2,zero,41be8 <__alt_data_end+0xfffcfbe8>
   41dc4:	dd800417 	ldw	r22,16(sp)
   41dc8:	adad883a 	add	r22,r21,r22
   41dcc:	b83fc926 	beq	r23,zero,41cf4 <__alt_data_end+0xfffcfcf4>
   41dd0:	81400c17 	ldw	r5,48(r16)
   41dd4:	81800117 	ldw	r6,4(r16)
   41dd8:	28005026 	beq	r5,zero,41f1c <_fseeko_r+0x418>
   41ddc:	81c00f17 	ldw	r7,60(r16)
   41de0:	003fce06 	br	41d1c <__alt_data_end+0xfffcfd1c>
   41de4:	84c01317 	ldw	r19,76(r16)
   41de8:	81400717 	ldw	r5,28(r16)
   41dec:	000f883a 	mov	r7,zero
   41df0:	04e7c83a 	sub	r19,zero,r19
   41df4:	9da6703a 	and	r19,r19,r22
   41df8:	980d883a 	mov	r6,r19
   41dfc:	8809883a 	mov	r4,r17
   41e00:	a03ee83a 	callr	r20
   41e04:	00ffffc4 	movi	r3,-1
   41e08:	10ff7726 	beq	r2,r3,41be8 <__alt_data_end+0xfffcfbe8>
   41e0c:	80800417 	ldw	r2,16(r16)
   41e10:	81400c17 	ldw	r5,48(r16)
   41e14:	80000115 	stw	zero,4(r16)
   41e18:	80800015 	stw	r2,0(r16)
   41e1c:	28000526 	beq	r5,zero,41e34 <_fseeko_r+0x330>
   41e20:	80801004 	addi	r2,r16,64
   41e24:	28800226 	beq	r5,r2,41e30 <_fseeko_r+0x32c>
   41e28:	8809883a 	mov	r4,r17
   41e2c:	00478c00 	call	478c0 <_free_r>
   41e30:	80000c15 	stw	zero,48(r16)
   41e34:	8080030b 	ldhu	r2,12(r16)
   41e38:	b4e7c83a 	sub	r19,r22,r19
   41e3c:	10bff7cc 	andi	r2,r2,65503
   41e40:	8080030d 	sth	r2,12(r16)
   41e44:	98000b26 	beq	r19,zero,41e74 <_fseeko_r+0x370>
   41e48:	800b883a 	mov	r5,r16
   41e4c:	8809883a 	mov	r4,r17
   41e50:	0042de80 	call	42de8 <__srefill_r>
   41e54:	103f641e 	bne	r2,zero,41be8 <__alt_data_end+0xfffcfbe8>
   41e58:	80800117 	ldw	r2,4(r16)
   41e5c:	14ff6236 	bltu	r2,r19,41be8 <__alt_data_end+0xfffcfbe8>
   41e60:	80c00017 	ldw	r3,0(r16)
   41e64:	14c5c83a 	sub	r2,r2,r19
   41e68:	80800115 	stw	r2,4(r16)
   41e6c:	1ce7883a 	add	r19,r3,r19
   41e70:	84c00015 	stw	r19,0(r16)
   41e74:	01800204 	movi	r6,8
   41e78:	000b883a 	mov	r5,zero
   41e7c:	81001704 	addi	r4,r16,92
   41e80:	0042a880 	call	42a88 <memset>
   41e84:	0027883a 	mov	r19,zero
   41e88:	003f3d06 	br	41b80 <__alt_data_end+0xfffcfb80>
   41e8c:	80800417 	ldw	r2,16(r16)
   41e90:	003f8306 	br	41ca0 <__alt_data_end+0xfffcfca0>
   41e94:	81400717 	ldw	r5,28(r16)
   41e98:	900f883a 	mov	r7,r18
   41e9c:	000d883a 	mov	r6,zero
   41ea0:	8809883a 	mov	r4,r17
   41ea4:	a03ee83a 	callr	r20
   41ea8:	1027883a 	mov	r19,r2
   41eac:	00bfffc4 	movi	r2,-1
   41eb0:	98bf3226 	beq	r19,r2,41b7c <__alt_data_end+0xfffcfb7c>
   41eb4:	8080030b 	ldhu	r2,12(r16)
   41eb8:	003f7006 	br	41c7c <__alt_data_end+0xfffcfc7c>
   41ebc:	8140038f 	ldh	r5,14(r16)
   41ec0:	283f4716 	blt	r5,zero,41be0 <__alt_data_end+0xfffcfbe0>
   41ec4:	d80d883a 	mov	r6,sp
   41ec8:	8809883a 	mov	r4,r17
   41ecc:	0041f640 	call	41f64 <_fstat_r>
   41ed0:	1000041e 	bne	r2,zero,41ee4 <_fseeko_r+0x3e0>
   41ed4:	d8800117 	ldw	r2,4(sp)
   41ed8:	00e00014 	movui	r3,32768
   41edc:	10bc000c 	andi	r2,r2,61440
   41ee0:	10ff7c26 	beq	r2,r3,41cd4 <__alt_data_end+0xfffcfcd4>
   41ee4:	8080030b 	ldhu	r2,12(r16)
   41ee8:	003f3d06 	br	41be0 <__alt_data_end+0xfffcfbe0>
   41eec:	800b883a 	mov	r5,r16
   41ef0:	8809883a 	mov	r4,r17
   41ef4:	00420c00 	call	420c0 <__smakebuf_r>
   41ef8:	003f3106 	br	41bc0 <__alt_data_end+0xfffcfbc0>
   41efc:	81400717 	ldw	r5,28(r16)
   41f00:	01c00044 	movi	r7,1
   41f04:	000d883a 	mov	r6,zero
   41f08:	8809883a 	mov	r4,r17
   41f0c:	a03ee83a 	callr	r20
   41f10:	00ffffc4 	movi	r3,-1
   41f14:	10ff7b1e 	bne	r2,r3,41d04 <__alt_data_end+0xfffcfd04>
   41f18:	003f3306 	br	41be8 <__alt_data_end+0xfffcfbe8>
   41f1c:	80c00017 	ldw	r3,0(r16)
   41f20:	80800417 	ldw	r2,16(r16)
   41f24:	000b883a 	mov	r5,zero
   41f28:	1887c83a 	sub	r3,r3,r2
   41f2c:	98e7c83a 	sub	r19,r19,r3
   41f30:	30c7883a 	add	r3,r6,r3
   41f34:	003f7f06 	br	41d34 <__alt_data_end+0xfffcfd34>
   41f38:	00800744 	movi	r2,29
   41f3c:	88800015 	stw	r2,0(r17)
   41f40:	04ffffc4 	movi	r19,-1
   41f44:	003f0e06 	br	41b80 <__alt_data_end+0xfffcfb80>

00041f48 <fseeko>:
   41f48:	00800174 	movhi	r2,5
   41f4c:	10931604 	addi	r2,r2,19544
   41f50:	300f883a 	mov	r7,r6
   41f54:	280d883a 	mov	r6,r5
   41f58:	200b883a 	mov	r5,r4
   41f5c:	11000017 	ldw	r4,0(r2)
   41f60:	0041b041 	jmpi	41b04 <_fseeko_r>

00041f64 <_fstat_r>:
   41f64:	defffd04 	addi	sp,sp,-12
   41f68:	2805883a 	mov	r2,r5
   41f6c:	dc000015 	stw	r16,0(sp)
   41f70:	04000174 	movhi	r16,5
   41f74:	dc400115 	stw	r17,4(sp)
   41f78:	841ad804 	addi	r16,r16,27488
   41f7c:	2023883a 	mov	r17,r4
   41f80:	300b883a 	mov	r5,r6
   41f84:	1009883a 	mov	r4,r2
   41f88:	dfc00215 	stw	ra,8(sp)
   41f8c:	80000015 	stw	zero,0(r16)
   41f90:	004eedc0 	call	4eedc <fstat>
   41f94:	00ffffc4 	movi	r3,-1
   41f98:	10c00526 	beq	r2,r3,41fb0 <_fstat_r+0x4c>
   41f9c:	dfc00217 	ldw	ra,8(sp)
   41fa0:	dc400117 	ldw	r17,4(sp)
   41fa4:	dc000017 	ldw	r16,0(sp)
   41fa8:	dec00304 	addi	sp,sp,12
   41fac:	f800283a 	ret
   41fb0:	80c00017 	ldw	r3,0(r16)
   41fb4:	183ff926 	beq	r3,zero,41f9c <__alt_data_end+0xfffcff9c>
   41fb8:	88c00015 	stw	r3,0(r17)
   41fbc:	003ff706 	br	41f9c <__alt_data_end+0xfffcff9c>

00041fc0 <_fwrite_r>:
   41fc0:	defff504 	addi	sp,sp,-44
   41fc4:	dc800815 	stw	r18,32(sp)
   41fc8:	39a5383a 	mul	r18,r7,r6
   41fcc:	d8800304 	addi	r2,sp,12
   41fd0:	d8800015 	stw	r2,0(sp)
   41fd4:	00800044 	movi	r2,1
   41fd8:	dcc00915 	stw	r19,36(sp)
   41fdc:	dc400715 	stw	r17,28(sp)
   41fe0:	dc000615 	stw	r16,24(sp)
   41fe4:	d9400315 	stw	r5,12(sp)
   41fe8:	dfc00a15 	stw	ra,40(sp)
   41fec:	dc800415 	stw	r18,16(sp)
   41ff0:	dc800215 	stw	r18,8(sp)
   41ff4:	d8800115 	stw	r2,4(sp)
   41ff8:	3027883a 	mov	r19,r6
   41ffc:	3821883a 	mov	r16,r7
   42000:	2023883a 	mov	r17,r4
   42004:	d9400b17 	ldw	r5,44(sp)
   42008:	20000226 	beq	r4,zero,42014 <_fwrite_r+0x54>
   4200c:	20800e17 	ldw	r2,56(r4)
   42010:	10001a26 	beq	r2,zero,4207c <_fwrite_r+0xbc>
   42014:	2880030b 	ldhu	r2,12(r5)
   42018:	10c8000c 	andi	r3,r2,8192
   4201c:	1800061e 	bne	r3,zero,42038 <_fwrite_r+0x78>
   42020:	29001917 	ldw	r4,100(r5)
   42024:	00f7ffc4 	movi	r3,-8193
   42028:	10880014 	ori	r2,r2,8192
   4202c:	20c6703a 	and	r3,r4,r3
   42030:	2880030d 	sth	r2,12(r5)
   42034:	28c01915 	stw	r3,100(r5)
   42038:	d80d883a 	mov	r6,sp
   4203c:	8809883a 	mov	r4,r17
   42040:	0047bd00 	call	47bd0 <__sfvwrite_r>
   42044:	10000b26 	beq	r2,zero,42074 <_fwrite_r+0xb4>
   42048:	d9000217 	ldw	r4,8(sp)
   4204c:	980b883a 	mov	r5,r19
   42050:	9109c83a 	sub	r4,r18,r4
   42054:	00418d00 	call	418d0 <__udivsi3>
   42058:	dfc00a17 	ldw	ra,40(sp)
   4205c:	dcc00917 	ldw	r19,36(sp)
   42060:	dc800817 	ldw	r18,32(sp)
   42064:	dc400717 	ldw	r17,28(sp)
   42068:	dc000617 	ldw	r16,24(sp)
   4206c:	dec00b04 	addi	sp,sp,44
   42070:	f800283a 	ret
   42074:	8005883a 	mov	r2,r16
   42078:	003ff706 	br	42058 <__alt_data_end+0xfffd0058>
   4207c:	d9400515 	stw	r5,20(sp)
   42080:	00476a00 	call	476a0 <__sinit>
   42084:	d9400517 	ldw	r5,20(sp)
   42088:	003fe206 	br	42014 <__alt_data_end+0xfffd0014>

0004208c <fwrite>:
   4208c:	defffe04 	addi	sp,sp,-8
   42090:	00800174 	movhi	r2,5
   42094:	d9c00015 	stw	r7,0(sp)
   42098:	10931604 	addi	r2,r2,19544
   4209c:	300f883a 	mov	r7,r6
   420a0:	280d883a 	mov	r6,r5
   420a4:	200b883a 	mov	r5,r4
   420a8:	11000017 	ldw	r4,0(r2)
   420ac:	dfc00115 	stw	ra,4(sp)
   420b0:	0041fc00 	call	41fc0 <_fwrite_r>
   420b4:	dfc00117 	ldw	ra,4(sp)
   420b8:	dec00204 	addi	sp,sp,8
   420bc:	f800283a 	ret

000420c0 <__smakebuf_r>:
   420c0:	2880030b 	ldhu	r2,12(r5)
   420c4:	10c0008c 	andi	r3,r2,2
   420c8:	1800411e 	bne	r3,zero,421d0 <__smakebuf_r+0x110>
   420cc:	deffec04 	addi	sp,sp,-80
   420d0:	dc000f15 	stw	r16,60(sp)
   420d4:	2821883a 	mov	r16,r5
   420d8:	2940038f 	ldh	r5,14(r5)
   420dc:	dc401015 	stw	r17,64(sp)
   420e0:	dfc01315 	stw	ra,76(sp)
   420e4:	dcc01215 	stw	r19,72(sp)
   420e8:	dc801115 	stw	r18,68(sp)
   420ec:	2023883a 	mov	r17,r4
   420f0:	28001c16 	blt	r5,zero,42164 <__smakebuf_r+0xa4>
   420f4:	d80d883a 	mov	r6,sp
   420f8:	0041f640 	call	41f64 <_fstat_r>
   420fc:	10001816 	blt	r2,zero,42160 <__smakebuf_r+0xa0>
   42100:	d8800117 	ldw	r2,4(sp)
   42104:	00e00014 	movui	r3,32768
   42108:	10bc000c 	andi	r2,r2,61440
   4210c:	14c80020 	cmpeqi	r19,r2,8192
   42110:	10c03726 	beq	r2,r3,421f0 <__smakebuf_r+0x130>
   42114:	80c0030b 	ldhu	r3,12(r16)
   42118:	18c20014 	ori	r3,r3,2048
   4211c:	80c0030d 	sth	r3,12(r16)
   42120:	00c80004 	movi	r3,8192
   42124:	10c0521e 	bne	r2,r3,42270 <__smakebuf_r+0x1b0>
   42128:	8140038f 	ldh	r5,14(r16)
   4212c:	8809883a 	mov	r4,r17
   42130:	00482700 	call	48270 <_isatty_r>
   42134:	10004c26 	beq	r2,zero,42268 <__smakebuf_r+0x1a8>
   42138:	8080030b 	ldhu	r2,12(r16)
   4213c:	80c010c4 	addi	r3,r16,67
   42140:	80c00015 	stw	r3,0(r16)
   42144:	10800054 	ori	r2,r2,1
   42148:	8080030d 	sth	r2,12(r16)
   4214c:	00800044 	movi	r2,1
   42150:	80c00415 	stw	r3,16(r16)
   42154:	80800515 	stw	r2,20(r16)
   42158:	04810004 	movi	r18,1024
   4215c:	00000706 	br	4217c <__smakebuf_r+0xbc>
   42160:	8080030b 	ldhu	r2,12(r16)
   42164:	10c0200c 	andi	r3,r2,128
   42168:	18001f1e 	bne	r3,zero,421e8 <__smakebuf_r+0x128>
   4216c:	04810004 	movi	r18,1024
   42170:	10820014 	ori	r2,r2,2048
   42174:	8080030d 	sth	r2,12(r16)
   42178:	0027883a 	mov	r19,zero
   4217c:	900b883a 	mov	r5,r18
   42180:	8809883a 	mov	r4,r17
   42184:	004227c0 	call	4227c <_malloc_r>
   42188:	10002c26 	beq	r2,zero,4223c <__smakebuf_r+0x17c>
   4218c:	80c0030b 	ldhu	r3,12(r16)
   42190:	01000134 	movhi	r4,4
   42194:	211cd604 	addi	r4,r4,29528
   42198:	89000f15 	stw	r4,60(r17)
   4219c:	18c02014 	ori	r3,r3,128
   421a0:	80c0030d 	sth	r3,12(r16)
   421a4:	80800015 	stw	r2,0(r16)
   421a8:	80800415 	stw	r2,16(r16)
   421ac:	84800515 	stw	r18,20(r16)
   421b0:	98001a1e 	bne	r19,zero,4221c <__smakebuf_r+0x15c>
   421b4:	dfc01317 	ldw	ra,76(sp)
   421b8:	dcc01217 	ldw	r19,72(sp)
   421bc:	dc801117 	ldw	r18,68(sp)
   421c0:	dc401017 	ldw	r17,64(sp)
   421c4:	dc000f17 	ldw	r16,60(sp)
   421c8:	dec01404 	addi	sp,sp,80
   421cc:	f800283a 	ret
   421d0:	288010c4 	addi	r2,r5,67
   421d4:	28800015 	stw	r2,0(r5)
   421d8:	28800415 	stw	r2,16(r5)
   421dc:	00800044 	movi	r2,1
   421e0:	28800515 	stw	r2,20(r5)
   421e4:	f800283a 	ret
   421e8:	04801004 	movi	r18,64
   421ec:	003fe006 	br	42170 <__alt_data_end+0xfffd0170>
   421f0:	81000a17 	ldw	r4,40(r16)
   421f4:	00c00134 	movhi	r3,4
   421f8:	18cc3a04 	addi	r3,r3,12520
   421fc:	20ffc51e 	bne	r4,r3,42114 <__alt_data_end+0xfffd0114>
   42200:	8080030b 	ldhu	r2,12(r16)
   42204:	04810004 	movi	r18,1024
   42208:	84801315 	stw	r18,76(r16)
   4220c:	1484b03a 	or	r2,r2,r18
   42210:	8080030d 	sth	r2,12(r16)
   42214:	0027883a 	mov	r19,zero
   42218:	003fd806 	br	4217c <__alt_data_end+0xfffd017c>
   4221c:	8140038f 	ldh	r5,14(r16)
   42220:	8809883a 	mov	r4,r17
   42224:	00482700 	call	48270 <_isatty_r>
   42228:	103fe226 	beq	r2,zero,421b4 <__alt_data_end+0xfffd01b4>
   4222c:	8080030b 	ldhu	r2,12(r16)
   42230:	10800054 	ori	r2,r2,1
   42234:	8080030d 	sth	r2,12(r16)
   42238:	003fde06 	br	421b4 <__alt_data_end+0xfffd01b4>
   4223c:	8080030b 	ldhu	r2,12(r16)
   42240:	10c0800c 	andi	r3,r2,512
   42244:	183fdb1e 	bne	r3,zero,421b4 <__alt_data_end+0xfffd01b4>
   42248:	10800094 	ori	r2,r2,2
   4224c:	80c010c4 	addi	r3,r16,67
   42250:	8080030d 	sth	r2,12(r16)
   42254:	00800044 	movi	r2,1
   42258:	80c00015 	stw	r3,0(r16)
   4225c:	80c00415 	stw	r3,16(r16)
   42260:	80800515 	stw	r2,20(r16)
   42264:	003fd306 	br	421b4 <__alt_data_end+0xfffd01b4>
   42268:	04810004 	movi	r18,1024
   4226c:	003fc306 	br	4217c <__alt_data_end+0xfffd017c>
   42270:	0027883a 	mov	r19,zero
   42274:	04810004 	movi	r18,1024
   42278:	003fc006 	br	4217c <__alt_data_end+0xfffd017c>

0004227c <_malloc_r>:
   4227c:	defff504 	addi	sp,sp,-44
   42280:	dc800315 	stw	r18,12(sp)
   42284:	dfc00a15 	stw	ra,40(sp)
   42288:	df000915 	stw	fp,36(sp)
   4228c:	ddc00815 	stw	r23,32(sp)
   42290:	dd800715 	stw	r22,28(sp)
   42294:	dd400615 	stw	r21,24(sp)
   42298:	dd000515 	stw	r20,20(sp)
   4229c:	dcc00415 	stw	r19,16(sp)
   422a0:	dc400215 	stw	r17,8(sp)
   422a4:	dc000115 	stw	r16,4(sp)
   422a8:	288002c4 	addi	r2,r5,11
   422ac:	00c00584 	movi	r3,22
   422b0:	2025883a 	mov	r18,r4
   422b4:	18807f2e 	bgeu	r3,r2,424b4 <_malloc_r+0x238>
   422b8:	047ffe04 	movi	r17,-8
   422bc:	1462703a 	and	r17,r2,r17
   422c0:	8800a316 	blt	r17,zero,42550 <_malloc_r+0x2d4>
   422c4:	8940a236 	bltu	r17,r5,42550 <_malloc_r+0x2d4>
   422c8:	004f7780 	call	4f778 <__malloc_lock>
   422cc:	00807dc4 	movi	r2,503
   422d0:	1441e92e 	bgeu	r2,r17,42a78 <_malloc_r+0x7fc>
   422d4:	8804d27a 	srli	r2,r17,9
   422d8:	1000a126 	beq	r2,zero,42560 <_malloc_r+0x2e4>
   422dc:	00c00104 	movi	r3,4
   422e0:	18811e36 	bltu	r3,r2,4275c <_malloc_r+0x4e0>
   422e4:	8804d1ba 	srli	r2,r17,6
   422e8:	12000e44 	addi	r8,r2,57
   422ec:	11c00e04 	addi	r7,r2,56
   422f0:	4209883a 	add	r4,r8,r8
   422f4:	04c00174 	movhi	r19,5
   422f8:	2109883a 	add	r4,r4,r4
   422fc:	9ccd2704 	addi	r19,r19,13468
   42300:	2109883a 	add	r4,r4,r4
   42304:	9909883a 	add	r4,r19,r4
   42308:	24000117 	ldw	r16,4(r4)
   4230c:	213ffe04 	addi	r4,r4,-8
   42310:	24009726 	beq	r4,r16,42570 <_malloc_r+0x2f4>
   42314:	80800117 	ldw	r2,4(r16)
   42318:	01bfff04 	movi	r6,-4
   4231c:	014003c4 	movi	r5,15
   42320:	1184703a 	and	r2,r2,r6
   42324:	1447c83a 	sub	r3,r2,r17
   42328:	28c00716 	blt	r5,r3,42348 <_malloc_r+0xcc>
   4232c:	1800920e 	bge	r3,zero,42578 <_malloc_r+0x2fc>
   42330:	84000317 	ldw	r16,12(r16)
   42334:	24008e26 	beq	r4,r16,42570 <_malloc_r+0x2f4>
   42338:	80800117 	ldw	r2,4(r16)
   4233c:	1184703a 	and	r2,r2,r6
   42340:	1447c83a 	sub	r3,r2,r17
   42344:	28fff90e 	bge	r5,r3,4232c <__alt_data_end+0xfffd032c>
   42348:	3809883a 	mov	r4,r7
   4234c:	01800174 	movhi	r6,5
   42350:	9c000417 	ldw	r16,16(r19)
   42354:	318d2704 	addi	r6,r6,13468
   42358:	32000204 	addi	r8,r6,8
   4235c:	82013426 	beq	r16,r8,42830 <_malloc_r+0x5b4>
   42360:	80c00117 	ldw	r3,4(r16)
   42364:	00bfff04 	movi	r2,-4
   42368:	188e703a 	and	r7,r3,r2
   4236c:	3c45c83a 	sub	r2,r7,r17
   42370:	00c003c4 	movi	r3,15
   42374:	18811f16 	blt	r3,r2,427f4 <_malloc_r+0x578>
   42378:	32000515 	stw	r8,20(r6)
   4237c:	32000415 	stw	r8,16(r6)
   42380:	10007f0e 	bge	r2,zero,42580 <_malloc_r+0x304>
   42384:	00807fc4 	movi	r2,511
   42388:	11c0fd36 	bltu	r2,r7,42780 <_malloc_r+0x504>
   4238c:	3806d0fa 	srli	r3,r7,3
   42390:	01c00044 	movi	r7,1
   42394:	30800117 	ldw	r2,4(r6)
   42398:	19400044 	addi	r5,r3,1
   4239c:	294b883a 	add	r5,r5,r5
   423a0:	1807d0ba 	srai	r3,r3,2
   423a4:	294b883a 	add	r5,r5,r5
   423a8:	294b883a 	add	r5,r5,r5
   423ac:	298b883a 	add	r5,r5,r6
   423b0:	38c6983a 	sll	r3,r7,r3
   423b4:	29c00017 	ldw	r7,0(r5)
   423b8:	2a7ffe04 	addi	r9,r5,-8
   423bc:	1886b03a 	or	r3,r3,r2
   423c0:	82400315 	stw	r9,12(r16)
   423c4:	81c00215 	stw	r7,8(r16)
   423c8:	30c00115 	stw	r3,4(r6)
   423cc:	2c000015 	stw	r16,0(r5)
   423d0:	3c000315 	stw	r16,12(r7)
   423d4:	2005d0ba 	srai	r2,r4,2
   423d8:	01400044 	movi	r5,1
   423dc:	288a983a 	sll	r5,r5,r2
   423e0:	19406f36 	bltu	r3,r5,425a0 <_malloc_r+0x324>
   423e4:	28c4703a 	and	r2,r5,r3
   423e8:	10000a1e 	bne	r2,zero,42414 <_malloc_r+0x198>
   423ec:	00bfff04 	movi	r2,-4
   423f0:	294b883a 	add	r5,r5,r5
   423f4:	2088703a 	and	r4,r4,r2
   423f8:	28c4703a 	and	r2,r5,r3
   423fc:	21000104 	addi	r4,r4,4
   42400:	1000041e 	bne	r2,zero,42414 <_malloc_r+0x198>
   42404:	294b883a 	add	r5,r5,r5
   42408:	28c4703a 	and	r2,r5,r3
   4240c:	21000104 	addi	r4,r4,4
   42410:	103ffc26 	beq	r2,zero,42404 <__alt_data_end+0xfffd0404>
   42414:	02bfff04 	movi	r10,-4
   42418:	024003c4 	movi	r9,15
   4241c:	21800044 	addi	r6,r4,1
   42420:	318d883a 	add	r6,r6,r6
   42424:	318d883a 	add	r6,r6,r6
   42428:	318d883a 	add	r6,r6,r6
   4242c:	998d883a 	add	r6,r19,r6
   42430:	333ffe04 	addi	r12,r6,-8
   42434:	2017883a 	mov	r11,r4
   42438:	31800104 	addi	r6,r6,4
   4243c:	34000017 	ldw	r16,0(r6)
   42440:	31fffd04 	addi	r7,r6,-12
   42444:	81c0041e 	bne	r16,r7,42458 <_malloc_r+0x1dc>
   42448:	0000fb06 	br	42838 <_malloc_r+0x5bc>
   4244c:	1801030e 	bge	r3,zero,4285c <_malloc_r+0x5e0>
   42450:	84000317 	ldw	r16,12(r16)
   42454:	81c0f826 	beq	r16,r7,42838 <_malloc_r+0x5bc>
   42458:	80800117 	ldw	r2,4(r16)
   4245c:	1284703a 	and	r2,r2,r10
   42460:	1447c83a 	sub	r3,r2,r17
   42464:	48fff90e 	bge	r9,r3,4244c <__alt_data_end+0xfffd044c>
   42468:	80800317 	ldw	r2,12(r16)
   4246c:	81000217 	ldw	r4,8(r16)
   42470:	89400054 	ori	r5,r17,1
   42474:	81400115 	stw	r5,4(r16)
   42478:	20800315 	stw	r2,12(r4)
   4247c:	11000215 	stw	r4,8(r2)
   42480:	8463883a 	add	r17,r16,r17
   42484:	9c400515 	stw	r17,20(r19)
   42488:	9c400415 	stw	r17,16(r19)
   4248c:	18800054 	ori	r2,r3,1
   42490:	88800115 	stw	r2,4(r17)
   42494:	8a000315 	stw	r8,12(r17)
   42498:	8a000215 	stw	r8,8(r17)
   4249c:	88e3883a 	add	r17,r17,r3
   424a0:	88c00015 	stw	r3,0(r17)
   424a4:	9009883a 	mov	r4,r18
   424a8:	004f79c0 	call	4f79c <__malloc_unlock>
   424ac:	80800204 	addi	r2,r16,8
   424b0:	00001b06 	br	42520 <_malloc_r+0x2a4>
   424b4:	04400404 	movi	r17,16
   424b8:	89402536 	bltu	r17,r5,42550 <_malloc_r+0x2d4>
   424bc:	004f7780 	call	4f778 <__malloc_lock>
   424c0:	00800184 	movi	r2,6
   424c4:	01000084 	movi	r4,2
   424c8:	04c00174 	movhi	r19,5
   424cc:	1085883a 	add	r2,r2,r2
   424d0:	9ccd2704 	addi	r19,r19,13468
   424d4:	1085883a 	add	r2,r2,r2
   424d8:	9885883a 	add	r2,r19,r2
   424dc:	14000117 	ldw	r16,4(r2)
   424e0:	10fffe04 	addi	r3,r2,-8
   424e4:	80c0d926 	beq	r16,r3,4284c <_malloc_r+0x5d0>
   424e8:	80c00117 	ldw	r3,4(r16)
   424ec:	81000317 	ldw	r4,12(r16)
   424f0:	00bfff04 	movi	r2,-4
   424f4:	1884703a 	and	r2,r3,r2
   424f8:	81400217 	ldw	r5,8(r16)
   424fc:	8085883a 	add	r2,r16,r2
   42500:	10c00117 	ldw	r3,4(r2)
   42504:	29000315 	stw	r4,12(r5)
   42508:	21400215 	stw	r5,8(r4)
   4250c:	18c00054 	ori	r3,r3,1
   42510:	10c00115 	stw	r3,4(r2)
   42514:	9009883a 	mov	r4,r18
   42518:	004f79c0 	call	4f79c <__malloc_unlock>
   4251c:	80800204 	addi	r2,r16,8
   42520:	dfc00a17 	ldw	ra,40(sp)
   42524:	df000917 	ldw	fp,36(sp)
   42528:	ddc00817 	ldw	r23,32(sp)
   4252c:	dd800717 	ldw	r22,28(sp)
   42530:	dd400617 	ldw	r21,24(sp)
   42534:	dd000517 	ldw	r20,20(sp)
   42538:	dcc00417 	ldw	r19,16(sp)
   4253c:	dc800317 	ldw	r18,12(sp)
   42540:	dc400217 	ldw	r17,8(sp)
   42544:	dc000117 	ldw	r16,4(sp)
   42548:	dec00b04 	addi	sp,sp,44
   4254c:	f800283a 	ret
   42550:	00800304 	movi	r2,12
   42554:	90800015 	stw	r2,0(r18)
   42558:	0005883a 	mov	r2,zero
   4255c:	003ff006 	br	42520 <__alt_data_end+0xfffd0520>
   42560:	01002004 	movi	r4,128
   42564:	02001004 	movi	r8,64
   42568:	01c00fc4 	movi	r7,63
   4256c:	003f6106 	br	422f4 <__alt_data_end+0xfffd02f4>
   42570:	4009883a 	mov	r4,r8
   42574:	003f7506 	br	4234c <__alt_data_end+0xfffd034c>
   42578:	81000317 	ldw	r4,12(r16)
   4257c:	003fde06 	br	424f8 <__alt_data_end+0xfffd04f8>
   42580:	81c5883a 	add	r2,r16,r7
   42584:	11400117 	ldw	r5,4(r2)
   42588:	9009883a 	mov	r4,r18
   4258c:	29400054 	ori	r5,r5,1
   42590:	11400115 	stw	r5,4(r2)
   42594:	004f79c0 	call	4f79c <__malloc_unlock>
   42598:	80800204 	addi	r2,r16,8
   4259c:	003fe006 	br	42520 <__alt_data_end+0xfffd0520>
   425a0:	9c000217 	ldw	r16,8(r19)
   425a4:	00bfff04 	movi	r2,-4
   425a8:	85800117 	ldw	r22,4(r16)
   425ac:	b0ac703a 	and	r22,r22,r2
   425b0:	b4400336 	bltu	r22,r17,425c0 <_malloc_r+0x344>
   425b4:	b445c83a 	sub	r2,r22,r17
   425b8:	00c003c4 	movi	r3,15
   425bc:	18805d16 	blt	r3,r2,42734 <_malloc_r+0x4b8>
   425c0:	05c00174 	movhi	r23,5
   425c4:	00800174 	movhi	r2,5
   425c8:	109adb04 	addi	r2,r2,27500
   425cc:	bdd31704 	addi	r23,r23,19548
   425d0:	15400017 	ldw	r21,0(r2)
   425d4:	b8c00017 	ldw	r3,0(r23)
   425d8:	00bfffc4 	movi	r2,-1
   425dc:	858d883a 	add	r6,r16,r22
   425e0:	8d6b883a 	add	r21,r17,r21
   425e4:	1880ea26 	beq	r3,r2,42990 <_malloc_r+0x714>
   425e8:	ad4403c4 	addi	r21,r21,4111
   425ec:	00bc0004 	movi	r2,-4096
   425f0:	a8aa703a 	and	r21,r21,r2
   425f4:	a80b883a 	mov	r5,r21
   425f8:	9009883a 	mov	r4,r18
   425fc:	d9800015 	stw	r6,0(sp)
   42600:	0042fbc0 	call	42fbc <_sbrk_r>
   42604:	1029883a 	mov	r20,r2
   42608:	00bfffc4 	movi	r2,-1
   4260c:	d9800017 	ldw	r6,0(sp)
   42610:	a080e826 	beq	r20,r2,429b4 <_malloc_r+0x738>
   42614:	a180a636 	bltu	r20,r6,428b0 <_malloc_r+0x634>
   42618:	07000174 	movhi	fp,5
   4261c:	e71b5304 	addi	fp,fp,27980
   42620:	e0800017 	ldw	r2,0(fp)
   42624:	a887883a 	add	r3,r21,r2
   42628:	e0c00015 	stw	r3,0(fp)
   4262c:	3500e626 	beq	r6,r20,429c8 <_malloc_r+0x74c>
   42630:	b9000017 	ldw	r4,0(r23)
   42634:	00bfffc4 	movi	r2,-1
   42638:	2080ee26 	beq	r4,r2,429f4 <_malloc_r+0x778>
   4263c:	a185c83a 	sub	r2,r20,r6
   42640:	10c5883a 	add	r2,r2,r3
   42644:	e0800015 	stw	r2,0(fp)
   42648:	a0c001cc 	andi	r3,r20,7
   4264c:	1800bc26 	beq	r3,zero,42940 <_malloc_r+0x6c4>
   42650:	a0e9c83a 	sub	r20,r20,r3
   42654:	00840204 	movi	r2,4104
   42658:	a5000204 	addi	r20,r20,8
   4265c:	10c7c83a 	sub	r3,r2,r3
   42660:	a545883a 	add	r2,r20,r21
   42664:	1083ffcc 	andi	r2,r2,4095
   42668:	18abc83a 	sub	r21,r3,r2
   4266c:	a80b883a 	mov	r5,r21
   42670:	9009883a 	mov	r4,r18
   42674:	0042fbc0 	call	42fbc <_sbrk_r>
   42678:	00ffffc4 	movi	r3,-1
   4267c:	10c0e126 	beq	r2,r3,42a04 <_malloc_r+0x788>
   42680:	1505c83a 	sub	r2,r2,r20
   42684:	1545883a 	add	r2,r2,r21
   42688:	10800054 	ori	r2,r2,1
   4268c:	e0c00017 	ldw	r3,0(fp)
   42690:	9d000215 	stw	r20,8(r19)
   42694:	a0800115 	stw	r2,4(r20)
   42698:	a8c7883a 	add	r3,r21,r3
   4269c:	e0c00015 	stw	r3,0(fp)
   426a0:	84c00e26 	beq	r16,r19,426dc <_malloc_r+0x460>
   426a4:	018003c4 	movi	r6,15
   426a8:	3580a72e 	bgeu	r6,r22,42948 <_malloc_r+0x6cc>
   426ac:	81400117 	ldw	r5,4(r16)
   426b0:	013ffe04 	movi	r4,-8
   426b4:	b0bffd04 	addi	r2,r22,-12
   426b8:	1104703a 	and	r2,r2,r4
   426bc:	2900004c 	andi	r4,r5,1
   426c0:	2088b03a 	or	r4,r4,r2
   426c4:	81000115 	stw	r4,4(r16)
   426c8:	01400144 	movi	r5,5
   426cc:	8089883a 	add	r4,r16,r2
   426d0:	21400115 	stw	r5,4(r4)
   426d4:	21400215 	stw	r5,8(r4)
   426d8:	3080cd36 	bltu	r6,r2,42a10 <_malloc_r+0x794>
   426dc:	00800174 	movhi	r2,5
   426e0:	109ada04 	addi	r2,r2,27496
   426e4:	11000017 	ldw	r4,0(r2)
   426e8:	20c0012e 	bgeu	r4,r3,426f0 <_malloc_r+0x474>
   426ec:	10c00015 	stw	r3,0(r2)
   426f0:	00800174 	movhi	r2,5
   426f4:	109ad904 	addi	r2,r2,27492
   426f8:	11000017 	ldw	r4,0(r2)
   426fc:	9c000217 	ldw	r16,8(r19)
   42700:	20c0012e 	bgeu	r4,r3,42708 <_malloc_r+0x48c>
   42704:	10c00015 	stw	r3,0(r2)
   42708:	80c00117 	ldw	r3,4(r16)
   4270c:	00bfff04 	movi	r2,-4
   42710:	1886703a 	and	r3,r3,r2
   42714:	1c45c83a 	sub	r2,r3,r17
   42718:	1c400236 	bltu	r3,r17,42724 <_malloc_r+0x4a8>
   4271c:	00c003c4 	movi	r3,15
   42720:	18800416 	blt	r3,r2,42734 <_malloc_r+0x4b8>
   42724:	9009883a 	mov	r4,r18
   42728:	004f79c0 	call	4f79c <__malloc_unlock>
   4272c:	0005883a 	mov	r2,zero
   42730:	003f7b06 	br	42520 <__alt_data_end+0xfffd0520>
   42734:	88c00054 	ori	r3,r17,1
   42738:	80c00115 	stw	r3,4(r16)
   4273c:	8463883a 	add	r17,r16,r17
   42740:	10800054 	ori	r2,r2,1
   42744:	9c400215 	stw	r17,8(r19)
   42748:	88800115 	stw	r2,4(r17)
   4274c:	9009883a 	mov	r4,r18
   42750:	004f79c0 	call	4f79c <__malloc_unlock>
   42754:	80800204 	addi	r2,r16,8
   42758:	003f7106 	br	42520 <__alt_data_end+0xfffd0520>
   4275c:	00c00504 	movi	r3,20
   42760:	18804a2e 	bgeu	r3,r2,4288c <_malloc_r+0x610>
   42764:	00c01504 	movi	r3,84
   42768:	18806e36 	bltu	r3,r2,42924 <_malloc_r+0x6a8>
   4276c:	8804d33a 	srli	r2,r17,12
   42770:	12001bc4 	addi	r8,r2,111
   42774:	11c01b84 	addi	r7,r2,110
   42778:	4209883a 	add	r4,r8,r8
   4277c:	003edd06 	br	422f4 <__alt_data_end+0xfffd02f4>
   42780:	3804d27a 	srli	r2,r7,9
   42784:	00c00104 	movi	r3,4
   42788:	1880442e 	bgeu	r3,r2,4289c <_malloc_r+0x620>
   4278c:	00c00504 	movi	r3,20
   42790:	18808136 	bltu	r3,r2,42998 <_malloc_r+0x71c>
   42794:	11401704 	addi	r5,r2,92
   42798:	10c016c4 	addi	r3,r2,91
   4279c:	294b883a 	add	r5,r5,r5
   427a0:	294b883a 	add	r5,r5,r5
   427a4:	294b883a 	add	r5,r5,r5
   427a8:	994b883a 	add	r5,r19,r5
   427ac:	28800017 	ldw	r2,0(r5)
   427b0:	01800174 	movhi	r6,5
   427b4:	297ffe04 	addi	r5,r5,-8
   427b8:	318d2704 	addi	r6,r6,13468
   427bc:	28806526 	beq	r5,r2,42954 <_malloc_r+0x6d8>
   427c0:	01bfff04 	movi	r6,-4
   427c4:	10c00117 	ldw	r3,4(r2)
   427c8:	1986703a 	and	r3,r3,r6
   427cc:	38c0022e 	bgeu	r7,r3,427d8 <_malloc_r+0x55c>
   427d0:	10800217 	ldw	r2,8(r2)
   427d4:	28bffb1e 	bne	r5,r2,427c4 <__alt_data_end+0xfffd07c4>
   427d8:	11400317 	ldw	r5,12(r2)
   427dc:	98c00117 	ldw	r3,4(r19)
   427e0:	81400315 	stw	r5,12(r16)
   427e4:	80800215 	stw	r2,8(r16)
   427e8:	2c000215 	stw	r16,8(r5)
   427ec:	14000315 	stw	r16,12(r2)
   427f0:	003ef806 	br	423d4 <__alt_data_end+0xfffd03d4>
   427f4:	88c00054 	ori	r3,r17,1
   427f8:	80c00115 	stw	r3,4(r16)
   427fc:	8463883a 	add	r17,r16,r17
   42800:	34400515 	stw	r17,20(r6)
   42804:	34400415 	stw	r17,16(r6)
   42808:	10c00054 	ori	r3,r2,1
   4280c:	8a000315 	stw	r8,12(r17)
   42810:	8a000215 	stw	r8,8(r17)
   42814:	88c00115 	stw	r3,4(r17)
   42818:	88a3883a 	add	r17,r17,r2
   4281c:	88800015 	stw	r2,0(r17)
   42820:	9009883a 	mov	r4,r18
   42824:	004f79c0 	call	4f79c <__malloc_unlock>
   42828:	80800204 	addi	r2,r16,8
   4282c:	003f3c06 	br	42520 <__alt_data_end+0xfffd0520>
   42830:	30c00117 	ldw	r3,4(r6)
   42834:	003ee706 	br	423d4 <__alt_data_end+0xfffd03d4>
   42838:	5ac00044 	addi	r11,r11,1
   4283c:	588000cc 	andi	r2,r11,3
   42840:	31800204 	addi	r6,r6,8
   42844:	103efd1e 	bne	r2,zero,4243c <__alt_data_end+0xfffd043c>
   42848:	00002406 	br	428dc <_malloc_r+0x660>
   4284c:	14000317 	ldw	r16,12(r2)
   42850:	143f251e 	bne	r2,r16,424e8 <__alt_data_end+0xfffd04e8>
   42854:	21000084 	addi	r4,r4,2
   42858:	003ebc06 	br	4234c <__alt_data_end+0xfffd034c>
   4285c:	8085883a 	add	r2,r16,r2
   42860:	10c00117 	ldw	r3,4(r2)
   42864:	81000317 	ldw	r4,12(r16)
   42868:	81400217 	ldw	r5,8(r16)
   4286c:	18c00054 	ori	r3,r3,1
   42870:	10c00115 	stw	r3,4(r2)
   42874:	29000315 	stw	r4,12(r5)
   42878:	21400215 	stw	r5,8(r4)
   4287c:	9009883a 	mov	r4,r18
   42880:	004f79c0 	call	4f79c <__malloc_unlock>
   42884:	80800204 	addi	r2,r16,8
   42888:	003f2506 	br	42520 <__alt_data_end+0xfffd0520>
   4288c:	12001704 	addi	r8,r2,92
   42890:	11c016c4 	addi	r7,r2,91
   42894:	4209883a 	add	r4,r8,r8
   42898:	003e9606 	br	422f4 <__alt_data_end+0xfffd02f4>
   4289c:	3804d1ba 	srli	r2,r7,6
   428a0:	11400e44 	addi	r5,r2,57
   428a4:	10c00e04 	addi	r3,r2,56
   428a8:	294b883a 	add	r5,r5,r5
   428ac:	003fbc06 	br	427a0 <__alt_data_end+0xfffd07a0>
   428b0:	84ff5926 	beq	r16,r19,42618 <__alt_data_end+0xfffd0618>
   428b4:	00800174 	movhi	r2,5
   428b8:	108d2704 	addi	r2,r2,13468
   428bc:	14000217 	ldw	r16,8(r2)
   428c0:	00bfff04 	movi	r2,-4
   428c4:	80c00117 	ldw	r3,4(r16)
   428c8:	1886703a 	and	r3,r3,r2
   428cc:	003f9106 	br	42714 <__alt_data_end+0xfffd0714>
   428d0:	60800217 	ldw	r2,8(r12)
   428d4:	213fffc4 	addi	r4,r4,-1
   428d8:	1300651e 	bne	r2,r12,42a70 <_malloc_r+0x7f4>
   428dc:	208000cc 	andi	r2,r4,3
   428e0:	633ffe04 	addi	r12,r12,-8
   428e4:	103ffa1e 	bne	r2,zero,428d0 <__alt_data_end+0xfffd08d0>
   428e8:	98800117 	ldw	r2,4(r19)
   428ec:	0146303a 	nor	r3,zero,r5
   428f0:	1884703a 	and	r2,r3,r2
   428f4:	98800115 	stw	r2,4(r19)
   428f8:	294b883a 	add	r5,r5,r5
   428fc:	117f2836 	bltu	r2,r5,425a0 <__alt_data_end+0xfffd05a0>
   42900:	283f2726 	beq	r5,zero,425a0 <__alt_data_end+0xfffd05a0>
   42904:	2886703a 	and	r3,r5,r2
   42908:	5809883a 	mov	r4,r11
   4290c:	183ec31e 	bne	r3,zero,4241c <__alt_data_end+0xfffd041c>
   42910:	294b883a 	add	r5,r5,r5
   42914:	2886703a 	and	r3,r5,r2
   42918:	21000104 	addi	r4,r4,4
   4291c:	183ffc26 	beq	r3,zero,42910 <__alt_data_end+0xfffd0910>
   42920:	003ebe06 	br	4241c <__alt_data_end+0xfffd041c>
   42924:	00c05504 	movi	r3,340
   42928:	18801236 	bltu	r3,r2,42974 <_malloc_r+0x6f8>
   4292c:	8804d3fa 	srli	r2,r17,15
   42930:	12001e04 	addi	r8,r2,120
   42934:	11c01dc4 	addi	r7,r2,119
   42938:	4209883a 	add	r4,r8,r8
   4293c:	003e6d06 	br	422f4 <__alt_data_end+0xfffd02f4>
   42940:	00c40004 	movi	r3,4096
   42944:	003f4606 	br	42660 <__alt_data_end+0xfffd0660>
   42948:	00800044 	movi	r2,1
   4294c:	a0800115 	stw	r2,4(r20)
   42950:	003f7406 	br	42724 <__alt_data_end+0xfffd0724>
   42954:	1805d0ba 	srai	r2,r3,2
   42958:	01c00044 	movi	r7,1
   4295c:	30c00117 	ldw	r3,4(r6)
   42960:	388e983a 	sll	r7,r7,r2
   42964:	2805883a 	mov	r2,r5
   42968:	38c6b03a 	or	r3,r7,r3
   4296c:	30c00115 	stw	r3,4(r6)
   42970:	003f9b06 	br	427e0 <__alt_data_end+0xfffd07e0>
   42974:	00c15504 	movi	r3,1364
   42978:	18801a36 	bltu	r3,r2,429e4 <_malloc_r+0x768>
   4297c:	8804d4ba 	srli	r2,r17,18
   42980:	12001f44 	addi	r8,r2,125
   42984:	11c01f04 	addi	r7,r2,124
   42988:	4209883a 	add	r4,r8,r8
   4298c:	003e5906 	br	422f4 <__alt_data_end+0xfffd02f4>
   42990:	ad400404 	addi	r21,r21,16
   42994:	003f1706 	br	425f4 <__alt_data_end+0xfffd05f4>
   42998:	00c01504 	movi	r3,84
   4299c:	18802336 	bltu	r3,r2,42a2c <_malloc_r+0x7b0>
   429a0:	3804d33a 	srli	r2,r7,12
   429a4:	11401bc4 	addi	r5,r2,111
   429a8:	10c01b84 	addi	r3,r2,110
   429ac:	294b883a 	add	r5,r5,r5
   429b0:	003f7b06 	br	427a0 <__alt_data_end+0xfffd07a0>
   429b4:	9c000217 	ldw	r16,8(r19)
   429b8:	00bfff04 	movi	r2,-4
   429bc:	80c00117 	ldw	r3,4(r16)
   429c0:	1886703a 	and	r3,r3,r2
   429c4:	003f5306 	br	42714 <__alt_data_end+0xfffd0714>
   429c8:	3083ffcc 	andi	r2,r6,4095
   429cc:	103f181e 	bne	r2,zero,42630 <__alt_data_end+0xfffd0630>
   429d0:	99000217 	ldw	r4,8(r19)
   429d4:	b545883a 	add	r2,r22,r21
   429d8:	10800054 	ori	r2,r2,1
   429dc:	20800115 	stw	r2,4(r4)
   429e0:	003f3e06 	br	426dc <__alt_data_end+0xfffd06dc>
   429e4:	01003f84 	movi	r4,254
   429e8:	02001fc4 	movi	r8,127
   429ec:	01c01f84 	movi	r7,126
   429f0:	003e4006 	br	422f4 <__alt_data_end+0xfffd02f4>
   429f4:	00800174 	movhi	r2,5
   429f8:	10931704 	addi	r2,r2,19548
   429fc:	15000015 	stw	r20,0(r2)
   42a00:	003f1106 	br	42648 <__alt_data_end+0xfffd0648>
   42a04:	00800044 	movi	r2,1
   42a08:	002b883a 	mov	r21,zero
   42a0c:	003f1f06 	br	4268c <__alt_data_end+0xfffd068c>
   42a10:	81400204 	addi	r5,r16,8
   42a14:	9009883a 	mov	r4,r18
   42a18:	00478c00 	call	478c0 <_free_r>
   42a1c:	00800174 	movhi	r2,5
   42a20:	109b5304 	addi	r2,r2,27980
   42a24:	10c00017 	ldw	r3,0(r2)
   42a28:	003f2c06 	br	426dc <__alt_data_end+0xfffd06dc>
   42a2c:	00c05504 	movi	r3,340
   42a30:	18800536 	bltu	r3,r2,42a48 <_malloc_r+0x7cc>
   42a34:	3804d3fa 	srli	r2,r7,15
   42a38:	11401e04 	addi	r5,r2,120
   42a3c:	10c01dc4 	addi	r3,r2,119
   42a40:	294b883a 	add	r5,r5,r5
   42a44:	003f5606 	br	427a0 <__alt_data_end+0xfffd07a0>
   42a48:	00c15504 	movi	r3,1364
   42a4c:	18800536 	bltu	r3,r2,42a64 <_malloc_r+0x7e8>
   42a50:	3804d4ba 	srli	r2,r7,18
   42a54:	11401f44 	addi	r5,r2,125
   42a58:	10c01f04 	addi	r3,r2,124
   42a5c:	294b883a 	add	r5,r5,r5
   42a60:	003f4f06 	br	427a0 <__alt_data_end+0xfffd07a0>
   42a64:	01403f84 	movi	r5,254
   42a68:	00c01f84 	movi	r3,126
   42a6c:	003f4c06 	br	427a0 <__alt_data_end+0xfffd07a0>
   42a70:	98800117 	ldw	r2,4(r19)
   42a74:	003fa006 	br	428f8 <__alt_data_end+0xfffd08f8>
   42a78:	8808d0fa 	srli	r4,r17,3
   42a7c:	20800044 	addi	r2,r4,1
   42a80:	1085883a 	add	r2,r2,r2
   42a84:	003e9006 	br	424c8 <__alt_data_end+0xfffd04c8>

00042a88 <memset>:
   42a88:	20c000cc 	andi	r3,r4,3
   42a8c:	2005883a 	mov	r2,r4
   42a90:	18004426 	beq	r3,zero,42ba4 <memset+0x11c>
   42a94:	31ffffc4 	addi	r7,r6,-1
   42a98:	30004026 	beq	r6,zero,42b9c <memset+0x114>
   42a9c:	2813883a 	mov	r9,r5
   42aa0:	200d883a 	mov	r6,r4
   42aa4:	2007883a 	mov	r3,r4
   42aa8:	00000406 	br	42abc <memset+0x34>
   42aac:	3a3fffc4 	addi	r8,r7,-1
   42ab0:	31800044 	addi	r6,r6,1
   42ab4:	38003926 	beq	r7,zero,42b9c <memset+0x114>
   42ab8:	400f883a 	mov	r7,r8
   42abc:	18c00044 	addi	r3,r3,1
   42ac0:	32400005 	stb	r9,0(r6)
   42ac4:	1a0000cc 	andi	r8,r3,3
   42ac8:	403ff81e 	bne	r8,zero,42aac <__alt_data_end+0xfffd0aac>
   42acc:	010000c4 	movi	r4,3
   42ad0:	21c02d2e 	bgeu	r4,r7,42b88 <memset+0x100>
   42ad4:	29003fcc 	andi	r4,r5,255
   42ad8:	200c923a 	slli	r6,r4,8
   42adc:	3108b03a 	or	r4,r6,r4
   42ae0:	200c943a 	slli	r6,r4,16
   42ae4:	218cb03a 	or	r6,r4,r6
   42ae8:	010003c4 	movi	r4,15
   42aec:	21c0182e 	bgeu	r4,r7,42b50 <memset+0xc8>
   42af0:	3b3ffc04 	addi	r12,r7,-16
   42af4:	6018d13a 	srli	r12,r12,4
   42af8:	1a000104 	addi	r8,r3,4
   42afc:	1ac00204 	addi	r11,r3,8
   42b00:	6008913a 	slli	r4,r12,4
   42b04:	1a800304 	addi	r10,r3,12
   42b08:	1813883a 	mov	r9,r3
   42b0c:	21000504 	addi	r4,r4,20
   42b10:	1909883a 	add	r4,r3,r4
   42b14:	49800015 	stw	r6,0(r9)
   42b18:	41800015 	stw	r6,0(r8)
   42b1c:	59800015 	stw	r6,0(r11)
   42b20:	51800015 	stw	r6,0(r10)
   42b24:	42000404 	addi	r8,r8,16
   42b28:	4a400404 	addi	r9,r9,16
   42b2c:	5ac00404 	addi	r11,r11,16
   42b30:	52800404 	addi	r10,r10,16
   42b34:	413ff71e 	bne	r8,r4,42b14 <__alt_data_end+0xfffd0b14>
   42b38:	63000044 	addi	r12,r12,1
   42b3c:	6018913a 	slli	r12,r12,4
   42b40:	39c003cc 	andi	r7,r7,15
   42b44:	010000c4 	movi	r4,3
   42b48:	1b07883a 	add	r3,r3,r12
   42b4c:	21c00e2e 	bgeu	r4,r7,42b88 <memset+0x100>
   42b50:	1813883a 	mov	r9,r3
   42b54:	3811883a 	mov	r8,r7
   42b58:	010000c4 	movi	r4,3
   42b5c:	49800015 	stw	r6,0(r9)
   42b60:	423fff04 	addi	r8,r8,-4
   42b64:	4a400104 	addi	r9,r9,4
   42b68:	223ffc36 	bltu	r4,r8,42b5c <__alt_data_end+0xfffd0b5c>
   42b6c:	393fff04 	addi	r4,r7,-4
   42b70:	2008d0ba 	srli	r4,r4,2
   42b74:	39c000cc 	andi	r7,r7,3
   42b78:	21000044 	addi	r4,r4,1
   42b7c:	2109883a 	add	r4,r4,r4
   42b80:	2109883a 	add	r4,r4,r4
   42b84:	1907883a 	add	r3,r3,r4
   42b88:	38000526 	beq	r7,zero,42ba0 <memset+0x118>
   42b8c:	19cf883a 	add	r7,r3,r7
   42b90:	19400005 	stb	r5,0(r3)
   42b94:	18c00044 	addi	r3,r3,1
   42b98:	38fffd1e 	bne	r7,r3,42b90 <__alt_data_end+0xfffd0b90>
   42b9c:	f800283a 	ret
   42ba0:	f800283a 	ret
   42ba4:	2007883a 	mov	r3,r4
   42ba8:	300f883a 	mov	r7,r6
   42bac:	003fc706 	br	42acc <__alt_data_end+0xfffd0acc>

00042bb0 <_open_r>:
   42bb0:	defffd04 	addi	sp,sp,-12
   42bb4:	2805883a 	mov	r2,r5
   42bb8:	dc000015 	stw	r16,0(sp)
   42bbc:	04000174 	movhi	r16,5
   42bc0:	dc400115 	stw	r17,4(sp)
   42bc4:	300b883a 	mov	r5,r6
   42bc8:	841ad804 	addi	r16,r16,27488
   42bcc:	2023883a 	mov	r17,r4
   42bd0:	380d883a 	mov	r6,r7
   42bd4:	1009883a 	mov	r4,r2
   42bd8:	dfc00215 	stw	ra,8(sp)
   42bdc:	80000015 	stw	zero,0(r16)
   42be0:	004f8c00 	call	4f8c0 <open>
   42be4:	00ffffc4 	movi	r3,-1
   42be8:	10c00526 	beq	r2,r3,42c00 <_open_r+0x50>
   42bec:	dfc00217 	ldw	ra,8(sp)
   42bf0:	dc400117 	ldw	r17,4(sp)
   42bf4:	dc000017 	ldw	r16,0(sp)
   42bf8:	dec00304 	addi	sp,sp,12
   42bfc:	f800283a 	ret
   42c00:	80c00017 	ldw	r3,0(r16)
   42c04:	183ff926 	beq	r3,zero,42bec <__alt_data_end+0xfffd0bec>
   42c08:	88c00015 	stw	r3,0(r17)
   42c0c:	003ff706 	br	42bec <__alt_data_end+0xfffd0bec>

00042c10 <_printf_r>:
   42c10:	defffd04 	addi	sp,sp,-12
   42c14:	2805883a 	mov	r2,r5
   42c18:	dfc00015 	stw	ra,0(sp)
   42c1c:	d9800115 	stw	r6,4(sp)
   42c20:	d9c00215 	stw	r7,8(sp)
   42c24:	21400217 	ldw	r5,8(r4)
   42c28:	d9c00104 	addi	r7,sp,4
   42c2c:	100d883a 	mov	r6,r2
   42c30:	00433480 	call	43348 <___vfprintf_internal_r>
   42c34:	dfc00017 	ldw	ra,0(sp)
   42c38:	dec00304 	addi	sp,sp,12
   42c3c:	f800283a 	ret

00042c40 <printf>:
   42c40:	defffc04 	addi	sp,sp,-16
   42c44:	dfc00015 	stw	ra,0(sp)
   42c48:	d9400115 	stw	r5,4(sp)
   42c4c:	d9800215 	stw	r6,8(sp)
   42c50:	d9c00315 	stw	r7,12(sp)
   42c54:	00800174 	movhi	r2,5
   42c58:	10931604 	addi	r2,r2,19544
   42c5c:	10800017 	ldw	r2,0(r2)
   42c60:	200b883a 	mov	r5,r4
   42c64:	d9800104 	addi	r6,sp,4
   42c68:	11000217 	ldw	r4,8(r2)
   42c6c:	00455400 	call	45540 <__vfprintf_internal>
   42c70:	dfc00017 	ldw	ra,0(sp)
   42c74:	dec00404 	addi	sp,sp,16
   42c78:	f800283a 	ret

00042c7c <_puts_r>:
   42c7c:	defff604 	addi	sp,sp,-40
   42c80:	dc000715 	stw	r16,28(sp)
   42c84:	2021883a 	mov	r16,r4
   42c88:	2809883a 	mov	r4,r5
   42c8c:	dc400815 	stw	r17,32(sp)
   42c90:	dfc00915 	stw	ra,36(sp)
   42c94:	2823883a 	mov	r17,r5
   42c98:	00432600 	call	43260 <strlen>
   42c9c:	10c00044 	addi	r3,r2,1
   42ca0:	d8800115 	stw	r2,4(sp)
   42ca4:	00800174 	movhi	r2,5
   42ca8:	108a1c04 	addi	r2,r2,10352
   42cac:	d8800215 	stw	r2,8(sp)
   42cb0:	00800044 	movi	r2,1
   42cb4:	d8800315 	stw	r2,12(sp)
   42cb8:	00800084 	movi	r2,2
   42cbc:	dc400015 	stw	r17,0(sp)
   42cc0:	d8c00615 	stw	r3,24(sp)
   42cc4:	dec00415 	stw	sp,16(sp)
   42cc8:	d8800515 	stw	r2,20(sp)
   42ccc:	80000226 	beq	r16,zero,42cd8 <_puts_r+0x5c>
   42cd0:	80800e17 	ldw	r2,56(r16)
   42cd4:	10001426 	beq	r2,zero,42d28 <_puts_r+0xac>
   42cd8:	81400217 	ldw	r5,8(r16)
   42cdc:	2880030b 	ldhu	r2,12(r5)
   42ce0:	10c8000c 	andi	r3,r2,8192
   42ce4:	1800061e 	bne	r3,zero,42d00 <_puts_r+0x84>
   42ce8:	29001917 	ldw	r4,100(r5)
   42cec:	00f7ffc4 	movi	r3,-8193
   42cf0:	10880014 	ori	r2,r2,8192
   42cf4:	20c6703a 	and	r3,r4,r3
   42cf8:	2880030d 	sth	r2,12(r5)
   42cfc:	28c01915 	stw	r3,100(r5)
   42d00:	d9800404 	addi	r6,sp,16
   42d04:	8009883a 	mov	r4,r16
   42d08:	0047bd00 	call	47bd0 <__sfvwrite_r>
   42d0c:	1000091e 	bne	r2,zero,42d34 <_puts_r+0xb8>
   42d10:	00800284 	movi	r2,10
   42d14:	dfc00917 	ldw	ra,36(sp)
   42d18:	dc400817 	ldw	r17,32(sp)
   42d1c:	dc000717 	ldw	r16,28(sp)
   42d20:	dec00a04 	addi	sp,sp,40
   42d24:	f800283a 	ret
   42d28:	8009883a 	mov	r4,r16
   42d2c:	00476a00 	call	476a0 <__sinit>
   42d30:	003fe906 	br	42cd8 <__alt_data_end+0xfffd0cd8>
   42d34:	00bfffc4 	movi	r2,-1
   42d38:	003ff606 	br	42d14 <__alt_data_end+0xfffd0d14>

00042d3c <puts>:
   42d3c:	00800174 	movhi	r2,5
   42d40:	10931604 	addi	r2,r2,19544
   42d44:	200b883a 	mov	r5,r4
   42d48:	11000017 	ldw	r4,0(r2)
   42d4c:	0042c7c1 	jmpi	42c7c <_puts_r>

00042d50 <srand>:
   42d50:	00800174 	movhi	r2,5
   42d54:	10931604 	addi	r2,r2,19544
   42d58:	10800017 	ldw	r2,0(r2)
   42d5c:	11002915 	stw	r4,164(r2)
   42d60:	10002a15 	stw	zero,168(r2)
   42d64:	f800283a 	ret

00042d68 <rand>:
   42d68:	00800174 	movhi	r2,5
   42d6c:	defffe04 	addi	sp,sp,-8
   42d70:	10931604 	addi	r2,r2,19544
   42d74:	dc000015 	stw	r16,0(sp)
   42d78:	14000017 	ldw	r16,0(r2)
   42d7c:	dfc00115 	stw	ra,4(sp)
   42d80:	01932574 	movhi	r6,19605
   42d84:	81002917 	ldw	r4,164(r16)
   42d88:	81402a17 	ldw	r5,168(r16)
   42d8c:	01d614b4 	movhi	r7,22610
   42d90:	319fcb44 	addi	r6,r6,32557
   42d94:	39fd0b44 	addi	r7,r7,-3027
   42d98:	004bbf00 	call	4bbf0 <__muldi3>
   42d9c:	11000044 	addi	r4,r2,1
   42da0:	2085803a 	cmpltu	r2,r4,r2
   42da4:	10c7883a 	add	r3,r2,r3
   42da8:	00a00034 	movhi	r2,32768
   42dac:	10bfffc4 	addi	r2,r2,-1
   42db0:	1884703a 	and	r2,r3,r2
   42db4:	81002915 	stw	r4,164(r16)
   42db8:	80c02a15 	stw	r3,168(r16)
   42dbc:	dfc00117 	ldw	ra,4(sp)
   42dc0:	dc000017 	ldw	r16,0(sp)
   42dc4:	dec00204 	addi	sp,sp,8
   42dc8:	f800283a 	ret

00042dcc <lflush>:
   42dcc:	2080030b 	ldhu	r2,12(r4)
   42dd0:	00c00244 	movi	r3,9
   42dd4:	1080024c 	andi	r2,r2,9
   42dd8:	10c00226 	beq	r2,r3,42de4 <lflush+0x18>
   42ddc:	0005883a 	mov	r2,zero
   42de0:	f800283a 	ret
   42de4:	00473201 	jmpi	47320 <fflush>

00042de8 <__srefill_r>:
   42de8:	defffc04 	addi	sp,sp,-16
   42dec:	dc400115 	stw	r17,4(sp)
   42df0:	dc000015 	stw	r16,0(sp)
   42df4:	dfc00315 	stw	ra,12(sp)
   42df8:	dc800215 	stw	r18,8(sp)
   42dfc:	2023883a 	mov	r17,r4
   42e00:	2821883a 	mov	r16,r5
   42e04:	20000226 	beq	r4,zero,42e10 <__srefill_r+0x28>
   42e08:	20800e17 	ldw	r2,56(r4)
   42e0c:	10003c26 	beq	r2,zero,42f00 <__srefill_r+0x118>
   42e10:	80c0030b 	ldhu	r3,12(r16)
   42e14:	1908000c 	andi	r4,r3,8192
   42e18:	1805883a 	mov	r2,r3
   42e1c:	2000071e 	bne	r4,zero,42e3c <__srefill_r+0x54>
   42e20:	81001917 	ldw	r4,100(r16)
   42e24:	18880014 	ori	r2,r3,8192
   42e28:	00f7ffc4 	movi	r3,-8193
   42e2c:	20c8703a 	and	r4,r4,r3
   42e30:	8080030d 	sth	r2,12(r16)
   42e34:	1007883a 	mov	r3,r2
   42e38:	81001915 	stw	r4,100(r16)
   42e3c:	80000115 	stw	zero,4(r16)
   42e40:	1100080c 	andi	r4,r2,32
   42e44:	2000571e 	bne	r4,zero,42fa4 <__srefill_r+0x1bc>
   42e48:	1100010c 	andi	r4,r2,4
   42e4c:	20001f26 	beq	r4,zero,42ecc <__srefill_r+0xe4>
   42e50:	81400c17 	ldw	r5,48(r16)
   42e54:	28000826 	beq	r5,zero,42e78 <__srefill_r+0x90>
   42e58:	80801004 	addi	r2,r16,64
   42e5c:	28800226 	beq	r5,r2,42e68 <__srefill_r+0x80>
   42e60:	8809883a 	mov	r4,r17
   42e64:	00478c00 	call	478c0 <_free_r>
   42e68:	80800f17 	ldw	r2,60(r16)
   42e6c:	80000c15 	stw	zero,48(r16)
   42e70:	80800115 	stw	r2,4(r16)
   42e74:	1000391e 	bne	r2,zero,42f5c <__srefill_r+0x174>
   42e78:	80800417 	ldw	r2,16(r16)
   42e7c:	10004b26 	beq	r2,zero,42fac <__srefill_r+0x1c4>
   42e80:	8480030b 	ldhu	r18,12(r16)
   42e84:	908000cc 	andi	r2,r18,3
   42e88:	10001f1e 	bne	r2,zero,42f08 <__srefill_r+0x120>
   42e8c:	81800417 	ldw	r6,16(r16)
   42e90:	80800817 	ldw	r2,32(r16)
   42e94:	81c00517 	ldw	r7,20(r16)
   42e98:	81400717 	ldw	r5,28(r16)
   42e9c:	81800015 	stw	r6,0(r16)
   42ea0:	8809883a 	mov	r4,r17
   42ea4:	103ee83a 	callr	r2
   42ea8:	80800115 	stw	r2,4(r16)
   42eac:	00800e0e 	bge	zero,r2,42ee8 <__srefill_r+0x100>
   42eb0:	0005883a 	mov	r2,zero
   42eb4:	dfc00317 	ldw	ra,12(sp)
   42eb8:	dc800217 	ldw	r18,8(sp)
   42ebc:	dc400117 	ldw	r17,4(sp)
   42ec0:	dc000017 	ldw	r16,0(sp)
   42ec4:	dec00404 	addi	sp,sp,16
   42ec8:	f800283a 	ret
   42ecc:	1100040c 	andi	r4,r2,16
   42ed0:	20003026 	beq	r4,zero,42f94 <__srefill_r+0x1ac>
   42ed4:	1080020c 	andi	r2,r2,8
   42ed8:	1000241e 	bne	r2,zero,42f6c <__srefill_r+0x184>
   42edc:	18c00114 	ori	r3,r3,4
   42ee0:	80c0030d 	sth	r3,12(r16)
   42ee4:	003fe406 	br	42e78 <__alt_data_end+0xfffd0e78>
   42ee8:	80c0030b 	ldhu	r3,12(r16)
   42eec:	1000161e 	bne	r2,zero,42f48 <__srefill_r+0x160>
   42ef0:	18c00814 	ori	r3,r3,32
   42ef4:	00bfffc4 	movi	r2,-1
   42ef8:	80c0030d 	sth	r3,12(r16)
   42efc:	003fed06 	br	42eb4 <__alt_data_end+0xfffd0eb4>
   42f00:	00476a00 	call	476a0 <__sinit>
   42f04:	003fc206 	br	42e10 <__alt_data_end+0xfffd0e10>
   42f08:	00800174 	movhi	r2,5
   42f0c:	10931504 	addi	r2,r2,19540
   42f10:	11000017 	ldw	r4,0(r2)
   42f14:	01400134 	movhi	r5,4
   42f18:	00800044 	movi	r2,1
   42f1c:	294b7304 	addi	r5,r5,11724
   42f20:	8080030d 	sth	r2,12(r16)
   42f24:	004808c0 	call	4808c <_fwalk>
   42f28:	00800244 	movi	r2,9
   42f2c:	8480030d 	sth	r18,12(r16)
   42f30:	9480024c 	andi	r18,r18,9
   42f34:	90bfd51e 	bne	r18,r2,42e8c <__alt_data_end+0xfffd0e8c>
   42f38:	800b883a 	mov	r5,r16
   42f3c:	8809883a 	mov	r4,r17
   42f40:	00470a80 	call	470a8 <__sflush_r>
   42f44:	003fd106 	br	42e8c <__alt_data_end+0xfffd0e8c>
   42f48:	18c01014 	ori	r3,r3,64
   42f4c:	80000115 	stw	zero,4(r16)
   42f50:	00bfffc4 	movi	r2,-1
   42f54:	80c0030d 	sth	r3,12(r16)
   42f58:	003fd606 	br	42eb4 <__alt_data_end+0xfffd0eb4>
   42f5c:	80c00e17 	ldw	r3,56(r16)
   42f60:	0005883a 	mov	r2,zero
   42f64:	80c00015 	stw	r3,0(r16)
   42f68:	003fd206 	br	42eb4 <__alt_data_end+0xfffd0eb4>
   42f6c:	800b883a 	mov	r5,r16
   42f70:	8809883a 	mov	r4,r17
   42f74:	00472c40 	call	472c4 <_fflush_r>
   42f78:	10000a1e 	bne	r2,zero,42fa4 <__srefill_r+0x1bc>
   42f7c:	8080030b 	ldhu	r2,12(r16)
   42f80:	00fffdc4 	movi	r3,-9
   42f84:	80000215 	stw	zero,8(r16)
   42f88:	1886703a 	and	r3,r3,r2
   42f8c:	80000615 	stw	zero,24(r16)
   42f90:	003fd206 	br	42edc <__alt_data_end+0xfffd0edc>
   42f94:	00800244 	movi	r2,9
   42f98:	88800015 	stw	r2,0(r17)
   42f9c:	18c01014 	ori	r3,r3,64
   42fa0:	80c0030d 	sth	r3,12(r16)
   42fa4:	00bfffc4 	movi	r2,-1
   42fa8:	003fc206 	br	42eb4 <__alt_data_end+0xfffd0eb4>
   42fac:	800b883a 	mov	r5,r16
   42fb0:	8809883a 	mov	r4,r17
   42fb4:	00420c00 	call	420c0 <__smakebuf_r>
   42fb8:	003fb106 	br	42e80 <__alt_data_end+0xfffd0e80>

00042fbc <_sbrk_r>:
   42fbc:	defffd04 	addi	sp,sp,-12
   42fc0:	dc000015 	stw	r16,0(sp)
   42fc4:	04000174 	movhi	r16,5
   42fc8:	dc400115 	stw	r17,4(sp)
   42fcc:	841ad804 	addi	r16,r16,27488
   42fd0:	2023883a 	mov	r17,r4
   42fd4:	2809883a 	mov	r4,r5
   42fd8:	dfc00215 	stw	ra,8(sp)
   42fdc:	80000015 	stw	zero,0(r16)
   42fe0:	004fbb00 	call	4fbb0 <sbrk>
   42fe4:	00ffffc4 	movi	r3,-1
   42fe8:	10c00526 	beq	r2,r3,43000 <_sbrk_r+0x44>
   42fec:	dfc00217 	ldw	ra,8(sp)
   42ff0:	dc400117 	ldw	r17,4(sp)
   42ff4:	dc000017 	ldw	r16,0(sp)
   42ff8:	dec00304 	addi	sp,sp,12
   42ffc:	f800283a 	ret
   43000:	80c00017 	ldw	r3,0(r16)
   43004:	183ff926 	beq	r3,zero,42fec <__alt_data_end+0xfffd0fec>
   43008:	88c00015 	stw	r3,0(r17)
   4300c:	003ff706 	br	42fec <__alt_data_end+0xfffd0fec>

00043010 <__sread>:
   43010:	defffe04 	addi	sp,sp,-8
   43014:	dc000015 	stw	r16,0(sp)
   43018:	2821883a 	mov	r16,r5
   4301c:	2940038f 	ldh	r5,14(r5)
   43020:	dfc00115 	stw	ra,4(sp)
   43024:	00497840 	call	49784 <_read_r>
   43028:	10000716 	blt	r2,zero,43048 <__sread+0x38>
   4302c:	80c01417 	ldw	r3,80(r16)
   43030:	1887883a 	add	r3,r3,r2
   43034:	80c01415 	stw	r3,80(r16)
   43038:	dfc00117 	ldw	ra,4(sp)
   4303c:	dc000017 	ldw	r16,0(sp)
   43040:	dec00204 	addi	sp,sp,8
   43044:	f800283a 	ret
   43048:	80c0030b 	ldhu	r3,12(r16)
   4304c:	18fbffcc 	andi	r3,r3,61439
   43050:	80c0030d 	sth	r3,12(r16)
   43054:	dfc00117 	ldw	ra,4(sp)
   43058:	dc000017 	ldw	r16,0(sp)
   4305c:	dec00204 	addi	sp,sp,8
   43060:	f800283a 	ret

00043064 <__seofread>:
   43064:	0005883a 	mov	r2,zero
   43068:	f800283a 	ret

0004306c <__swrite>:
   4306c:	2880030b 	ldhu	r2,12(r5)
   43070:	defffb04 	addi	sp,sp,-20
   43074:	dcc00315 	stw	r19,12(sp)
   43078:	dc800215 	stw	r18,8(sp)
   4307c:	dc400115 	stw	r17,4(sp)
   43080:	dc000015 	stw	r16,0(sp)
   43084:	dfc00415 	stw	ra,16(sp)
   43088:	10c0400c 	andi	r3,r2,256
   4308c:	2821883a 	mov	r16,r5
   43090:	2023883a 	mov	r17,r4
   43094:	3025883a 	mov	r18,r6
   43098:	3827883a 	mov	r19,r7
   4309c:	18000526 	beq	r3,zero,430b4 <__swrite+0x48>
   430a0:	2940038f 	ldh	r5,14(r5)
   430a4:	01c00084 	movi	r7,2
   430a8:	000d883a 	mov	r6,zero
   430ac:	00483a00 	call	483a0 <_lseek_r>
   430b0:	8080030b 	ldhu	r2,12(r16)
   430b4:	8140038f 	ldh	r5,14(r16)
   430b8:	10bbffcc 	andi	r2,r2,61439
   430bc:	980f883a 	mov	r7,r19
   430c0:	900d883a 	mov	r6,r18
   430c4:	8809883a 	mov	r4,r17
   430c8:	8080030d 	sth	r2,12(r16)
   430cc:	dfc00417 	ldw	ra,16(sp)
   430d0:	dcc00317 	ldw	r19,12(sp)
   430d4:	dc800217 	ldw	r18,8(sp)
   430d8:	dc400117 	ldw	r17,4(sp)
   430dc:	dc000017 	ldw	r16,0(sp)
   430e0:	dec00504 	addi	sp,sp,20
   430e4:	00456181 	jmpi	45618 <_write_r>

000430e8 <__sseek>:
   430e8:	defffe04 	addi	sp,sp,-8
   430ec:	dc000015 	stw	r16,0(sp)
   430f0:	2821883a 	mov	r16,r5
   430f4:	2940038f 	ldh	r5,14(r5)
   430f8:	dfc00115 	stw	ra,4(sp)
   430fc:	00483a00 	call	483a0 <_lseek_r>
   43100:	00ffffc4 	movi	r3,-1
   43104:	10c00826 	beq	r2,r3,43128 <__sseek+0x40>
   43108:	80c0030b 	ldhu	r3,12(r16)
   4310c:	80801415 	stw	r2,80(r16)
   43110:	18c40014 	ori	r3,r3,4096
   43114:	80c0030d 	sth	r3,12(r16)
   43118:	dfc00117 	ldw	ra,4(sp)
   4311c:	dc000017 	ldw	r16,0(sp)
   43120:	dec00204 	addi	sp,sp,8
   43124:	f800283a 	ret
   43128:	80c0030b 	ldhu	r3,12(r16)
   4312c:	18fbffcc 	andi	r3,r3,61439
   43130:	80c0030d 	sth	r3,12(r16)
   43134:	dfc00117 	ldw	ra,4(sp)
   43138:	dc000017 	ldw	r16,0(sp)
   4313c:	dec00204 	addi	sp,sp,8
   43140:	f800283a 	ret

00043144 <__sclose>:
   43144:	2940038f 	ldh	r5,14(r5)
   43148:	00457cc1 	jmpi	457cc <_close_r>

0004314c <strcat>:
   4314c:	defffe04 	addi	sp,sp,-8
   43150:	dc000015 	stw	r16,0(sp)
   43154:	dfc00115 	stw	ra,4(sp)
   43158:	208000cc 	andi	r2,r4,3
   4315c:	2021883a 	mov	r16,r4
   43160:	1000131e 	bne	r2,zero,431b0 <strcat+0x64>
   43164:	20800017 	ldw	r2,0(r4)
   43168:	01ffbff4 	movhi	r7,65279
   4316c:	39ffbfc4 	addi	r7,r7,-257
   43170:	0086303a 	nor	r3,zero,r2
   43174:	01a02074 	movhi	r6,32897
   43178:	11c5883a 	add	r2,r2,r7
   4317c:	31a02004 	addi	r6,r6,-32640
   43180:	10c4703a 	and	r2,r2,r3
   43184:	1184703a 	and	r2,r2,r6
   43188:	1000091e 	bne	r2,zero,431b0 <strcat+0x64>
   4318c:	21000104 	addi	r4,r4,4
   43190:	20800017 	ldw	r2,0(r4)
   43194:	11c7883a 	add	r3,r2,r7
   43198:	0084303a 	nor	r2,zero,r2
   4319c:	1884703a 	and	r2,r3,r2
   431a0:	1184703a 	and	r2,r2,r6
   431a4:	103ff926 	beq	r2,zero,4318c <__alt_data_end+0xfffd118c>
   431a8:	00000106 	br	431b0 <strcat+0x64>
   431ac:	21000044 	addi	r4,r4,1
   431b0:	20800007 	ldb	r2,0(r4)
   431b4:	103ffd1e 	bne	r2,zero,431ac <__alt_data_end+0xfffd11ac>
   431b8:	00431d00 	call	431d0 <strcpy>
   431bc:	8005883a 	mov	r2,r16
   431c0:	dfc00117 	ldw	ra,4(sp)
   431c4:	dc000017 	ldw	r16,0(sp)
   431c8:	dec00204 	addi	sp,sp,8
   431cc:	f800283a 	ret

000431d0 <strcpy>:
   431d0:	2906b03a 	or	r3,r5,r4
   431d4:	18c000cc 	andi	r3,r3,3
   431d8:	2005883a 	mov	r2,r4
   431dc:	1800161e 	bne	r3,zero,43238 <strcpy+0x68>
   431e0:	29c00017 	ldw	r7,0(r5)
   431e4:	02ffbff4 	movhi	r11,65279
   431e8:	5affbfc4 	addi	r11,r11,-257
   431ec:	02a02074 	movhi	r10,32897
   431f0:	01c6303a 	nor	r3,zero,r7
   431f4:	3ac9883a 	add	r4,r7,r11
   431f8:	52a02004 	addi	r10,r10,-32640
   431fc:	20c6703a 	and	r3,r4,r3
   43200:	1a86703a 	and	r3,r3,r10
   43204:	18000c1e 	bne	r3,zero,43238 <strcpy+0x68>
   43208:	1011883a 	mov	r8,r2
   4320c:	41c00015 	stw	r7,0(r8)
   43210:	29400104 	addi	r5,r5,4
   43214:	29c00017 	ldw	r7,0(r5)
   43218:	41800104 	addi	r6,r8,4
   4321c:	3011883a 	mov	r8,r6
   43220:	3ad3883a 	add	r9,r7,r11
   43224:	01c6303a 	nor	r3,zero,r7
   43228:	48c6703a 	and	r3,r9,r3
   4322c:	1a86703a 	and	r3,r3,r10
   43230:	183ff626 	beq	r3,zero,4320c <__alt_data_end+0xfffd120c>
   43234:	00000106 	br	4323c <strcpy+0x6c>
   43238:	100d883a 	mov	r6,r2
   4323c:	28c00003 	ldbu	r3,0(r5)
   43240:	31800044 	addi	r6,r6,1
   43244:	29400044 	addi	r5,r5,1
   43248:	30ffffc5 	stb	r3,-1(r6)
   4324c:	18c03fcc 	andi	r3,r3,255
   43250:	18c0201c 	xori	r3,r3,128
   43254:	18ffe004 	addi	r3,r3,-128
   43258:	183ff81e 	bne	r3,zero,4323c <__alt_data_end+0xfffd123c>
   4325c:	f800283a 	ret

00043260 <strlen>:
   43260:	208000cc 	andi	r2,r4,3
   43264:	10002026 	beq	r2,zero,432e8 <strlen+0x88>
   43268:	20800007 	ldb	r2,0(r4)
   4326c:	10002026 	beq	r2,zero,432f0 <strlen+0x90>
   43270:	2005883a 	mov	r2,r4
   43274:	00000206 	br	43280 <strlen+0x20>
   43278:	10c00007 	ldb	r3,0(r2)
   4327c:	18001826 	beq	r3,zero,432e0 <strlen+0x80>
   43280:	10800044 	addi	r2,r2,1
   43284:	10c000cc 	andi	r3,r2,3
   43288:	183ffb1e 	bne	r3,zero,43278 <__alt_data_end+0xfffd1278>
   4328c:	10c00017 	ldw	r3,0(r2)
   43290:	01ffbff4 	movhi	r7,65279
   43294:	39ffbfc4 	addi	r7,r7,-257
   43298:	00ca303a 	nor	r5,zero,r3
   4329c:	01a02074 	movhi	r6,32897
   432a0:	19c7883a 	add	r3,r3,r7
   432a4:	31a02004 	addi	r6,r6,-32640
   432a8:	1946703a 	and	r3,r3,r5
   432ac:	1986703a 	and	r3,r3,r6
   432b0:	1800091e 	bne	r3,zero,432d8 <strlen+0x78>
   432b4:	10800104 	addi	r2,r2,4
   432b8:	10c00017 	ldw	r3,0(r2)
   432bc:	19cb883a 	add	r5,r3,r7
   432c0:	00c6303a 	nor	r3,zero,r3
   432c4:	28c6703a 	and	r3,r5,r3
   432c8:	1986703a 	and	r3,r3,r6
   432cc:	183ff926 	beq	r3,zero,432b4 <__alt_data_end+0xfffd12b4>
   432d0:	00000106 	br	432d8 <strlen+0x78>
   432d4:	10800044 	addi	r2,r2,1
   432d8:	10c00007 	ldb	r3,0(r2)
   432dc:	183ffd1e 	bne	r3,zero,432d4 <__alt_data_end+0xfffd12d4>
   432e0:	1105c83a 	sub	r2,r2,r4
   432e4:	f800283a 	ret
   432e8:	2005883a 	mov	r2,r4
   432ec:	003fe706 	br	4328c <__alt_data_end+0xfffd128c>
   432f0:	0005883a 	mov	r2,zero
   432f4:	f800283a 	ret

000432f8 <time>:
   432f8:	00800174 	movhi	r2,5
   432fc:	defffc04 	addi	sp,sp,-16
   43300:	10931604 	addi	r2,r2,19544
   43304:	dc000215 	stw	r16,8(sp)
   43308:	2021883a 	mov	r16,r4
   4330c:	11000017 	ldw	r4,0(r2)
   43310:	000d883a 	mov	r6,zero
   43314:	d80b883a 	mov	r5,sp
   43318:	dfc00315 	stw	ra,12(sp)
   4331c:	00482140 	call	48214 <_gettimeofday_r>
   43320:	10000716 	blt	r2,zero,43340 <time+0x48>
   43324:	d8800017 	ldw	r2,0(sp)
   43328:	80000126 	beq	r16,zero,43330 <time+0x38>
   4332c:	80800015 	stw	r2,0(r16)
   43330:	dfc00317 	ldw	ra,12(sp)
   43334:	dc000217 	ldw	r16,8(sp)
   43338:	dec00404 	addi	sp,sp,16
   4333c:	f800283a 	ret
   43340:	00bfffc4 	movi	r2,-1
   43344:	003ffa06 	br	43330 <__alt_data_end+0xfffd1330>

00043348 <___vfprintf_internal_r>:
   43348:	deffb804 	addi	sp,sp,-288
   4334c:	dfc04715 	stw	ra,284(sp)
   43350:	ddc04515 	stw	r23,276(sp)
   43354:	dd404315 	stw	r21,268(sp)
   43358:	d9002c15 	stw	r4,176(sp)
   4335c:	282f883a 	mov	r23,r5
   43360:	302b883a 	mov	r21,r6
   43364:	d9c02d15 	stw	r7,180(sp)
   43368:	df004615 	stw	fp,280(sp)
   4336c:	dd804415 	stw	r22,272(sp)
   43370:	dd004215 	stw	r20,264(sp)
   43374:	dcc04115 	stw	r19,260(sp)
   43378:	dc804015 	stw	r18,256(sp)
   4337c:	dc403f15 	stw	r17,252(sp)
   43380:	dc003e15 	stw	r16,248(sp)
   43384:	00483700 	call	48370 <_localeconv_r>
   43388:	10800017 	ldw	r2,0(r2)
   4338c:	1009883a 	mov	r4,r2
   43390:	d8803415 	stw	r2,208(sp)
   43394:	00432600 	call	43260 <strlen>
   43398:	d8803715 	stw	r2,220(sp)
   4339c:	d8802c17 	ldw	r2,176(sp)
   433a0:	10000226 	beq	r2,zero,433ac <___vfprintf_internal_r+0x64>
   433a4:	10800e17 	ldw	r2,56(r2)
   433a8:	1000f926 	beq	r2,zero,43790 <___vfprintf_internal_r+0x448>
   433ac:	b880030b 	ldhu	r2,12(r23)
   433b0:	10c8000c 	andi	r3,r2,8192
   433b4:	1800061e 	bne	r3,zero,433d0 <___vfprintf_internal_r+0x88>
   433b8:	b9001917 	ldw	r4,100(r23)
   433bc:	00f7ffc4 	movi	r3,-8193
   433c0:	10880014 	ori	r2,r2,8192
   433c4:	20c6703a 	and	r3,r4,r3
   433c8:	b880030d 	sth	r2,12(r23)
   433cc:	b8c01915 	stw	r3,100(r23)
   433d0:	10c0020c 	andi	r3,r2,8
   433d4:	1800c126 	beq	r3,zero,436dc <___vfprintf_internal_r+0x394>
   433d8:	b8c00417 	ldw	r3,16(r23)
   433dc:	1800bf26 	beq	r3,zero,436dc <___vfprintf_internal_r+0x394>
   433e0:	1080068c 	andi	r2,r2,26
   433e4:	00c00284 	movi	r3,10
   433e8:	10c0c426 	beq	r2,r3,436fc <___vfprintf_internal_r+0x3b4>
   433ec:	d8c00404 	addi	r3,sp,16
   433f0:	05000174 	movhi	r20,5
   433f4:	d9001e04 	addi	r4,sp,120
   433f8:	a50a2d84 	addi	r20,r20,10422
   433fc:	d8c01e15 	stw	r3,120(sp)
   43400:	d8002015 	stw	zero,128(sp)
   43404:	d8001f15 	stw	zero,124(sp)
   43408:	d8003315 	stw	zero,204(sp)
   4340c:	d8003615 	stw	zero,216(sp)
   43410:	d8003815 	stw	zero,224(sp)
   43414:	1811883a 	mov	r8,r3
   43418:	d8003915 	stw	zero,228(sp)
   4341c:	d8003a15 	stw	zero,232(sp)
   43420:	d8002f15 	stw	zero,188(sp)
   43424:	d9002815 	stw	r4,160(sp)
   43428:	a8800007 	ldb	r2,0(r21)
   4342c:	10027b26 	beq	r2,zero,43e1c <___vfprintf_internal_r+0xad4>
   43430:	00c00944 	movi	r3,37
   43434:	a821883a 	mov	r16,r21
   43438:	10c0021e 	bne	r2,r3,43444 <___vfprintf_internal_r+0xfc>
   4343c:	00001406 	br	43490 <___vfprintf_internal_r+0x148>
   43440:	10c00326 	beq	r2,r3,43450 <___vfprintf_internal_r+0x108>
   43444:	84000044 	addi	r16,r16,1
   43448:	80800007 	ldb	r2,0(r16)
   4344c:	103ffc1e 	bne	r2,zero,43440 <__alt_data_end+0xfffd1440>
   43450:	8563c83a 	sub	r17,r16,r21
   43454:	88000e26 	beq	r17,zero,43490 <___vfprintf_internal_r+0x148>
   43458:	d8c02017 	ldw	r3,128(sp)
   4345c:	d8801f17 	ldw	r2,124(sp)
   43460:	45400015 	stw	r21,0(r8)
   43464:	1c47883a 	add	r3,r3,r17
   43468:	10800044 	addi	r2,r2,1
   4346c:	d8c02015 	stw	r3,128(sp)
   43470:	44400115 	stw	r17,4(r8)
   43474:	d8801f15 	stw	r2,124(sp)
   43478:	00c001c4 	movi	r3,7
   4347c:	1880a716 	blt	r3,r2,4371c <___vfprintf_internal_r+0x3d4>
   43480:	42000204 	addi	r8,r8,8
   43484:	d9402f17 	ldw	r5,188(sp)
   43488:	2c4b883a 	add	r5,r5,r17
   4348c:	d9402f15 	stw	r5,188(sp)
   43490:	80800007 	ldb	r2,0(r16)
   43494:	1000a826 	beq	r2,zero,43738 <___vfprintf_internal_r+0x3f0>
   43498:	84400047 	ldb	r17,1(r16)
   4349c:	00bfffc4 	movi	r2,-1
   434a0:	85400044 	addi	r21,r16,1
   434a4:	d8002785 	stb	zero,158(sp)
   434a8:	0007883a 	mov	r3,zero
   434ac:	000f883a 	mov	r7,zero
   434b0:	d8802915 	stw	r2,164(sp)
   434b4:	d8003115 	stw	zero,196(sp)
   434b8:	0025883a 	mov	r18,zero
   434bc:	01401604 	movi	r5,88
   434c0:	01800244 	movi	r6,9
   434c4:	02800a84 	movi	r10,42
   434c8:	02401b04 	movi	r9,108
   434cc:	ad400044 	addi	r21,r21,1
   434d0:	88bff804 	addi	r2,r17,-32
   434d4:	28830436 	bltu	r5,r2,440e8 <___vfprintf_internal_r+0xda0>
   434d8:	100490ba 	slli	r2,r2,2
   434dc:	01000134 	movhi	r4,4
   434e0:	210d3c04 	addi	r4,r4,13552
   434e4:	1105883a 	add	r2,r2,r4
   434e8:	10800017 	ldw	r2,0(r2)
   434ec:	1000683a 	jmp	r2
   434f0:	00044008 	cmpgei	zero,zero,4352
   434f4:	000440e8 	cmpgeui	zero,zero,4355
   434f8:	000440e8 	cmpgeui	zero,zero,4355
   434fc:	00044028 	cmpgeui	zero,zero,4352
   43500:	000440e8 	cmpgeui	zero,zero,4355
   43504:	000440e8 	cmpgeui	zero,zero,4355
   43508:	000440e8 	cmpgeui	zero,zero,4355
   4350c:	000440e8 	cmpgeui	zero,zero,4355
   43510:	000440e8 	cmpgeui	zero,zero,4355
   43514:	000440e8 	cmpgeui	zero,zero,4355
   43518:	0004379c 	xori	zero,zero,4318
   4351c:	00043f44 	movi	zero,4349
   43520:	000440e8 	cmpgeui	zero,zero,4355
   43524:	00043664 	muli	zero,zero,4313
   43528:	000437c4 	movi	zero,4319
   4352c:	000440e8 	cmpgeui	zero,zero,4355
   43530:	00043804 	movi	zero,4320
   43534:	00043810 	cmplti	zero,zero,4320
   43538:	00043810 	cmplti	zero,zero,4320
   4353c:	00043810 	cmplti	zero,zero,4320
   43540:	00043810 	cmplti	zero,zero,4320
   43544:	00043810 	cmplti	zero,zero,4320
   43548:	00043810 	cmplti	zero,zero,4320
   4354c:	00043810 	cmplti	zero,zero,4320
   43550:	00043810 	cmplti	zero,zero,4320
   43554:	00043810 	cmplti	zero,zero,4320
   43558:	000440e8 	cmpgeui	zero,zero,4355
   4355c:	000440e8 	cmpgeui	zero,zero,4355
   43560:	000440e8 	cmpgeui	zero,zero,4355
   43564:	000440e8 	cmpgeui	zero,zero,4355
   43568:	000440e8 	cmpgeui	zero,zero,4355
   4356c:	000440e8 	cmpgeui	zero,zero,4355
   43570:	000440e8 	cmpgeui	zero,zero,4355
   43574:	000440e8 	cmpgeui	zero,zero,4355
   43578:	000440e8 	cmpgeui	zero,zero,4355
   4357c:	000440e8 	cmpgeui	zero,zero,4355
   43580:	00043844 	movi	zero,4321
   43584:	00043900 	call	4390 <__alt_mem_onchip_memory2-0x3bc70>
   43588:	000440e8 	cmpgeui	zero,zero,4355
   4358c:	00043900 	call	4390 <__alt_mem_onchip_memory2-0x3bc70>
   43590:	000440e8 	cmpgeui	zero,zero,4355
   43594:	000440e8 	cmpgeui	zero,zero,4355
   43598:	000440e8 	cmpgeui	zero,zero,4355
   4359c:	000440e8 	cmpgeui	zero,zero,4355
   435a0:	000439a0 	cmpeqi	zero,zero,4326
   435a4:	000440e8 	cmpgeui	zero,zero,4355
   435a8:	000440e8 	cmpgeui	zero,zero,4355
   435ac:	000439ac 	andhi	zero,zero,4326
   435b0:	000440e8 	cmpgeui	zero,zero,4355
   435b4:	000440e8 	cmpgeui	zero,zero,4355
   435b8:	000440e8 	cmpgeui	zero,zero,4355
   435bc:	000440e8 	cmpgeui	zero,zero,4355
   435c0:	000440e8 	cmpgeui	zero,zero,4355
   435c4:	00043e24 	muli	zero,zero,4344
   435c8:	000440e8 	cmpgeui	zero,zero,4355
   435cc:	000440e8 	cmpgeui	zero,zero,4355
   435d0:	00043e84 	movi	zero,4346
   435d4:	000440e8 	cmpgeui	zero,zero,4355
   435d8:	000440e8 	cmpgeui	zero,zero,4355
   435dc:	000440e8 	cmpgeui	zero,zero,4355
   435e0:	000440e8 	cmpgeui	zero,zero,4355
   435e4:	000440e8 	cmpgeui	zero,zero,4355
   435e8:	000440e8 	cmpgeui	zero,zero,4355
   435ec:	000440e8 	cmpgeui	zero,zero,4355
   435f0:	000440e8 	cmpgeui	zero,zero,4355
   435f4:	000440e8 	cmpgeui	zero,zero,4355
   435f8:	000440e8 	cmpgeui	zero,zero,4355
   435fc:	00044094 	movui	zero,4354
   43600:	00044034 	movhi	zero,4352
   43604:	00043900 	call	4390 <__alt_mem_onchip_memory2-0x3bc70>
   43608:	00043900 	call	4390 <__alt_mem_onchip_memory2-0x3bc70>
   4360c:	00043900 	call	4390 <__alt_mem_onchip_memory2-0x3bc70>
   43610:	00044044 	movi	zero,4353
   43614:	00044034 	movhi	zero,4352
   43618:	000440e8 	cmpgeui	zero,zero,4355
   4361c:	000440e8 	cmpgeui	zero,zero,4355
   43620:	00044050 	cmplti	zero,zero,4353
   43624:	000440e8 	cmpgeui	zero,zero,4355
   43628:	00044060 	cmpeqi	zero,zero,4353
   4362c:	00043f34 	movhi	zero,4348
   43630:	00043670 	cmpltui	zero,zero,4313
   43634:	00043f54 	movui	zero,4349
   43638:	000440e8 	cmpgeui	zero,zero,4355
   4363c:	00043f60 	cmpeqi	zero,zero,4349
   43640:	000440e8 	cmpgeui	zero,zero,4355
   43644:	00043fbc 	xorhi	zero,zero,4350
   43648:	000440e8 	cmpgeui	zero,zero,4355
   4364c:	000440e8 	cmpgeui	zero,zero,4355
   43650:	00043fcc 	andi	zero,zero,4351
   43654:	d9003117 	ldw	r4,196(sp)
   43658:	d8802d15 	stw	r2,180(sp)
   4365c:	0109c83a 	sub	r4,zero,r4
   43660:	d9003115 	stw	r4,196(sp)
   43664:	94800114 	ori	r18,r18,4
   43668:	ac400007 	ldb	r17,0(r21)
   4366c:	003f9706 	br	434cc <__alt_data_end+0xfffd14cc>
   43670:	00800c04 	movi	r2,48
   43674:	d9002d17 	ldw	r4,180(sp)
   43678:	d9402917 	ldw	r5,164(sp)
   4367c:	d8802705 	stb	r2,156(sp)
   43680:	00801e04 	movi	r2,120
   43684:	d8802745 	stb	r2,157(sp)
   43688:	d8002785 	stb	zero,158(sp)
   4368c:	20c00104 	addi	r3,r4,4
   43690:	24c00017 	ldw	r19,0(r4)
   43694:	002d883a 	mov	r22,zero
   43698:	90800094 	ori	r2,r18,2
   4369c:	28029a16 	blt	r5,zero,44108 <___vfprintf_internal_r+0xdc0>
   436a0:	00bfdfc4 	movi	r2,-129
   436a4:	90a4703a 	and	r18,r18,r2
   436a8:	d8c02d15 	stw	r3,180(sp)
   436ac:	94800094 	ori	r18,r18,2
   436b0:	9802871e 	bne	r19,zero,440d0 <___vfprintf_internal_r+0xd88>
   436b4:	00800174 	movhi	r2,5
   436b8:	108a2604 	addi	r2,r2,10392
   436bc:	d8803915 	stw	r2,228(sp)
   436c0:	04401e04 	movi	r17,120
   436c4:	d8802917 	ldw	r2,164(sp)
   436c8:	0039883a 	mov	fp,zero
   436cc:	1001e926 	beq	r2,zero,43e74 <___vfprintf_internal_r+0xb2c>
   436d0:	0027883a 	mov	r19,zero
   436d4:	002d883a 	mov	r22,zero
   436d8:	00020506 	br	43ef0 <___vfprintf_internal_r+0xba8>
   436dc:	d9002c17 	ldw	r4,176(sp)
   436e0:	b80b883a 	mov	r5,r23
   436e4:	00456780 	call	45678 <__swsetup_r>
   436e8:	1005ac1e 	bne	r2,zero,44d9c <___vfprintf_internal_r+0x1a54>
   436ec:	b880030b 	ldhu	r2,12(r23)
   436f0:	00c00284 	movi	r3,10
   436f4:	1080068c 	andi	r2,r2,26
   436f8:	10ff3c1e 	bne	r2,r3,433ec <__alt_data_end+0xfffd13ec>
   436fc:	b880038f 	ldh	r2,14(r23)
   43700:	103f3a16 	blt	r2,zero,433ec <__alt_data_end+0xfffd13ec>
   43704:	d9c02d17 	ldw	r7,180(sp)
   43708:	d9002c17 	ldw	r4,176(sp)
   4370c:	a80d883a 	mov	r6,r21
   43710:	b80b883a 	mov	r5,r23
   43714:	004555c0 	call	4555c <__sbprintf>
   43718:	00001106 	br	43760 <___vfprintf_internal_r+0x418>
   4371c:	d9002c17 	ldw	r4,176(sp)
   43720:	d9801e04 	addi	r6,sp,120
   43724:	b80b883a 	mov	r5,r23
   43728:	0049f940 	call	49f94 <__sprint_r>
   4372c:	1000081e 	bne	r2,zero,43750 <___vfprintf_internal_r+0x408>
   43730:	da000404 	addi	r8,sp,16
   43734:	003f5306 	br	43484 <__alt_data_end+0xfffd1484>
   43738:	d8802017 	ldw	r2,128(sp)
   4373c:	10000426 	beq	r2,zero,43750 <___vfprintf_internal_r+0x408>
   43740:	d9002c17 	ldw	r4,176(sp)
   43744:	d9801e04 	addi	r6,sp,120
   43748:	b80b883a 	mov	r5,r23
   4374c:	0049f940 	call	49f94 <__sprint_r>
   43750:	b880030b 	ldhu	r2,12(r23)
   43754:	1080100c 	andi	r2,r2,64
   43758:	1005901e 	bne	r2,zero,44d9c <___vfprintf_internal_r+0x1a54>
   4375c:	d8802f17 	ldw	r2,188(sp)
   43760:	dfc04717 	ldw	ra,284(sp)
   43764:	df004617 	ldw	fp,280(sp)
   43768:	ddc04517 	ldw	r23,276(sp)
   4376c:	dd804417 	ldw	r22,272(sp)
   43770:	dd404317 	ldw	r21,268(sp)
   43774:	dd004217 	ldw	r20,264(sp)
   43778:	dcc04117 	ldw	r19,260(sp)
   4377c:	dc804017 	ldw	r18,256(sp)
   43780:	dc403f17 	ldw	r17,252(sp)
   43784:	dc003e17 	ldw	r16,248(sp)
   43788:	dec04804 	addi	sp,sp,288
   4378c:	f800283a 	ret
   43790:	d9002c17 	ldw	r4,176(sp)
   43794:	00476a00 	call	476a0 <__sinit>
   43798:	003f0406 	br	433ac <__alt_data_end+0xfffd13ac>
   4379c:	d8802d17 	ldw	r2,180(sp)
   437a0:	d9002d17 	ldw	r4,180(sp)
   437a4:	10800017 	ldw	r2,0(r2)
   437a8:	d8803115 	stw	r2,196(sp)
   437ac:	20800104 	addi	r2,r4,4
   437b0:	d9003117 	ldw	r4,196(sp)
   437b4:	203fa716 	blt	r4,zero,43654 <__alt_data_end+0xfffd1654>
   437b8:	d8802d15 	stw	r2,180(sp)
   437bc:	ac400007 	ldb	r17,0(r21)
   437c0:	003f4206 	br	434cc <__alt_data_end+0xfffd14cc>
   437c4:	ac400007 	ldb	r17,0(r21)
   437c8:	aac00044 	addi	r11,r21,1
   437cc:	8a872826 	beq	r17,r10,45470 <___vfprintf_internal_r+0x2128>
   437d0:	88bff404 	addi	r2,r17,-48
   437d4:	0009883a 	mov	r4,zero
   437d8:	30867d36 	bltu	r6,r2,451d0 <___vfprintf_internal_r+0x1e88>
   437dc:	5c400007 	ldb	r17,0(r11)
   437e0:	210002a4 	muli	r4,r4,10
   437e4:	5d400044 	addi	r21,r11,1
   437e8:	a817883a 	mov	r11,r21
   437ec:	2089883a 	add	r4,r4,r2
   437f0:	88bff404 	addi	r2,r17,-48
   437f4:	30bff92e 	bgeu	r6,r2,437dc <__alt_data_end+0xfffd17dc>
   437f8:	2005c916 	blt	r4,zero,44f20 <___vfprintf_internal_r+0x1bd8>
   437fc:	d9002915 	stw	r4,164(sp)
   43800:	003f3306 	br	434d0 <__alt_data_end+0xfffd14d0>
   43804:	94802014 	ori	r18,r18,128
   43808:	ac400007 	ldb	r17,0(r21)
   4380c:	003f2f06 	br	434cc <__alt_data_end+0xfffd14cc>
   43810:	a809883a 	mov	r4,r21
   43814:	d8003115 	stw	zero,196(sp)
   43818:	88bff404 	addi	r2,r17,-48
   4381c:	0017883a 	mov	r11,zero
   43820:	24400007 	ldb	r17,0(r4)
   43824:	5ac002a4 	muli	r11,r11,10
   43828:	ad400044 	addi	r21,r21,1
   4382c:	a809883a 	mov	r4,r21
   43830:	12d7883a 	add	r11,r2,r11
   43834:	88bff404 	addi	r2,r17,-48
   43838:	30bff92e 	bgeu	r6,r2,43820 <__alt_data_end+0xfffd1820>
   4383c:	dac03115 	stw	r11,196(sp)
   43840:	003f2306 	br	434d0 <__alt_data_end+0xfffd14d0>
   43844:	18c03fcc 	andi	r3,r3,255
   43848:	18072b1e 	bne	r3,zero,454f8 <___vfprintf_internal_r+0x21b0>
   4384c:	94800414 	ori	r18,r18,16
   43850:	9080080c 	andi	r2,r18,32
   43854:	10037b26 	beq	r2,zero,44644 <___vfprintf_internal_r+0x12fc>
   43858:	d9402d17 	ldw	r5,180(sp)
   4385c:	28800117 	ldw	r2,4(r5)
   43860:	2cc00017 	ldw	r19,0(r5)
   43864:	29400204 	addi	r5,r5,8
   43868:	d9402d15 	stw	r5,180(sp)
   4386c:	102d883a 	mov	r22,r2
   43870:	10044b16 	blt	r2,zero,449a0 <___vfprintf_internal_r+0x1658>
   43874:	d9402917 	ldw	r5,164(sp)
   43878:	df002783 	ldbu	fp,158(sp)
   4387c:	2803bc16 	blt	r5,zero,44770 <___vfprintf_internal_r+0x1428>
   43880:	00ffdfc4 	movi	r3,-129
   43884:	9d84b03a 	or	r2,r19,r22
   43888:	90e4703a 	and	r18,r18,r3
   4388c:	10017726 	beq	r2,zero,43e6c <___vfprintf_internal_r+0xb24>
   43890:	b0038326 	beq	r22,zero,446a0 <___vfprintf_internal_r+0x1358>
   43894:	dc402a15 	stw	r17,168(sp)
   43898:	dc001e04 	addi	r16,sp,120
   4389c:	b023883a 	mov	r17,r22
   438a0:	402d883a 	mov	r22,r8
   438a4:	9809883a 	mov	r4,r19
   438a8:	880b883a 	mov	r5,r17
   438ac:	01800284 	movi	r6,10
   438b0:	000f883a 	mov	r7,zero
   438b4:	004c1c80 	call	4c1c8 <__umoddi3>
   438b8:	10800c04 	addi	r2,r2,48
   438bc:	843fffc4 	addi	r16,r16,-1
   438c0:	9809883a 	mov	r4,r19
   438c4:	880b883a 	mov	r5,r17
   438c8:	80800005 	stb	r2,0(r16)
   438cc:	01800284 	movi	r6,10
   438d0:	000f883a 	mov	r7,zero
   438d4:	004bc500 	call	4bc50 <__udivdi3>
   438d8:	1027883a 	mov	r19,r2
   438dc:	10c4b03a 	or	r2,r2,r3
   438e0:	1823883a 	mov	r17,r3
   438e4:	103fef1e 	bne	r2,zero,438a4 <__alt_data_end+0xfffd18a4>
   438e8:	d8c02817 	ldw	r3,160(sp)
   438ec:	dc402a17 	ldw	r17,168(sp)
   438f0:	b011883a 	mov	r8,r22
   438f4:	1c07c83a 	sub	r3,r3,r16
   438f8:	d8c02e15 	stw	r3,184(sp)
   438fc:	00005906 	br	43a64 <___vfprintf_internal_r+0x71c>
   43900:	18c03fcc 	andi	r3,r3,255
   43904:	1806fa1e 	bne	r3,zero,454f0 <___vfprintf_internal_r+0x21a8>
   43908:	9080020c 	andi	r2,r18,8
   4390c:	10048a26 	beq	r2,zero,44b38 <___vfprintf_internal_r+0x17f0>
   43910:	d8c02d17 	ldw	r3,180(sp)
   43914:	d9002d17 	ldw	r4,180(sp)
   43918:	d9402d17 	ldw	r5,180(sp)
   4391c:	18c00017 	ldw	r3,0(r3)
   43920:	21000117 	ldw	r4,4(r4)
   43924:	29400204 	addi	r5,r5,8
   43928:	d8c03615 	stw	r3,216(sp)
   4392c:	d9003815 	stw	r4,224(sp)
   43930:	d9402d15 	stw	r5,180(sp)
   43934:	d9003617 	ldw	r4,216(sp)
   43938:	d9403817 	ldw	r5,224(sp)
   4393c:	da003d15 	stw	r8,244(sp)
   43940:	04000044 	movi	r16,1
   43944:	0049d480 	call	49d48 <__fpclassifyd>
   43948:	da003d17 	ldw	r8,244(sp)
   4394c:	14041f1e 	bne	r2,r16,449cc <___vfprintf_internal_r+0x1684>
   43950:	d9003617 	ldw	r4,216(sp)
   43954:	d9403817 	ldw	r5,224(sp)
   43958:	000d883a 	mov	r6,zero
   4395c:	000f883a 	mov	r7,zero
   43960:	004d9f80 	call	4d9f8 <__ledf2>
   43964:	da003d17 	ldw	r8,244(sp)
   43968:	1005be16 	blt	r2,zero,45064 <___vfprintf_internal_r+0x1d1c>
   4396c:	df002783 	ldbu	fp,158(sp)
   43970:	008011c4 	movi	r2,71
   43974:	1445330e 	bge	r2,r17,44e44 <___vfprintf_internal_r+0x1afc>
   43978:	04000174 	movhi	r16,5
   4397c:	840a1e04 	addi	r16,r16,10360
   43980:	00c000c4 	movi	r3,3
   43984:	00bfdfc4 	movi	r2,-129
   43988:	d8c02a15 	stw	r3,168(sp)
   4398c:	90a4703a 	and	r18,r18,r2
   43990:	d8c02e15 	stw	r3,184(sp)
   43994:	d8002915 	stw	zero,164(sp)
   43998:	d8003215 	stw	zero,200(sp)
   4399c:	00003706 	br	43a7c <___vfprintf_internal_r+0x734>
   439a0:	94800214 	ori	r18,r18,8
   439a4:	ac400007 	ldb	r17,0(r21)
   439a8:	003ec806 	br	434cc <__alt_data_end+0xfffd14cc>
   439ac:	18c03fcc 	andi	r3,r3,255
   439b0:	1806db1e 	bne	r3,zero,45520 <___vfprintf_internal_r+0x21d8>
   439b4:	94800414 	ori	r18,r18,16
   439b8:	9080080c 	andi	r2,r18,32
   439bc:	1002d826 	beq	r2,zero,44520 <___vfprintf_internal_r+0x11d8>
   439c0:	d9402d17 	ldw	r5,180(sp)
   439c4:	d8c02917 	ldw	r3,164(sp)
   439c8:	d8002785 	stb	zero,158(sp)
   439cc:	28800204 	addi	r2,r5,8
   439d0:	2cc00017 	ldw	r19,0(r5)
   439d4:	2d800117 	ldw	r22,4(r5)
   439d8:	18048f16 	blt	r3,zero,44c18 <___vfprintf_internal_r+0x18d0>
   439dc:	013fdfc4 	movi	r4,-129
   439e0:	9d86b03a 	or	r3,r19,r22
   439e4:	d8802d15 	stw	r2,180(sp)
   439e8:	9124703a 	and	r18,r18,r4
   439ec:	1802d91e 	bne	r3,zero,44554 <___vfprintf_internal_r+0x120c>
   439f0:	d8c02917 	ldw	r3,164(sp)
   439f4:	0039883a 	mov	fp,zero
   439f8:	1805c326 	beq	r3,zero,45108 <___vfprintf_internal_r+0x1dc0>
   439fc:	0027883a 	mov	r19,zero
   43a00:	002d883a 	mov	r22,zero
   43a04:	dc001e04 	addi	r16,sp,120
   43a08:	9806d0fa 	srli	r3,r19,3
   43a0c:	b008977a 	slli	r4,r22,29
   43a10:	b02cd0fa 	srli	r22,r22,3
   43a14:	9cc001cc 	andi	r19,r19,7
   43a18:	98800c04 	addi	r2,r19,48
   43a1c:	843fffc4 	addi	r16,r16,-1
   43a20:	20e6b03a 	or	r19,r4,r3
   43a24:	80800005 	stb	r2,0(r16)
   43a28:	9d86b03a 	or	r3,r19,r22
   43a2c:	183ff61e 	bne	r3,zero,43a08 <__alt_data_end+0xfffd1a08>
   43a30:	90c0004c 	andi	r3,r18,1
   43a34:	18013b26 	beq	r3,zero,43f24 <___vfprintf_internal_r+0xbdc>
   43a38:	10803fcc 	andi	r2,r2,255
   43a3c:	1080201c 	xori	r2,r2,128
   43a40:	10bfe004 	addi	r2,r2,-128
   43a44:	00c00c04 	movi	r3,48
   43a48:	10c13626 	beq	r2,r3,43f24 <___vfprintf_internal_r+0xbdc>
   43a4c:	80ffffc5 	stb	r3,-1(r16)
   43a50:	d8c02817 	ldw	r3,160(sp)
   43a54:	80bfffc4 	addi	r2,r16,-1
   43a58:	1021883a 	mov	r16,r2
   43a5c:	1887c83a 	sub	r3,r3,r2
   43a60:	d8c02e15 	stw	r3,184(sp)
   43a64:	d8802e17 	ldw	r2,184(sp)
   43a68:	d9002917 	ldw	r4,164(sp)
   43a6c:	1100010e 	bge	r2,r4,43a74 <___vfprintf_internal_r+0x72c>
   43a70:	2005883a 	mov	r2,r4
   43a74:	d8802a15 	stw	r2,168(sp)
   43a78:	d8003215 	stw	zero,200(sp)
   43a7c:	e7003fcc 	andi	fp,fp,255
   43a80:	e700201c 	xori	fp,fp,128
   43a84:	e73fe004 	addi	fp,fp,-128
   43a88:	e0000326 	beq	fp,zero,43a98 <___vfprintf_internal_r+0x750>
   43a8c:	d8c02a17 	ldw	r3,168(sp)
   43a90:	18c00044 	addi	r3,r3,1
   43a94:	d8c02a15 	stw	r3,168(sp)
   43a98:	90c0008c 	andi	r3,r18,2
   43a9c:	d8c02b15 	stw	r3,172(sp)
   43aa0:	18000326 	beq	r3,zero,43ab0 <___vfprintf_internal_r+0x768>
   43aa4:	d8c02a17 	ldw	r3,168(sp)
   43aa8:	18c00084 	addi	r3,r3,2
   43aac:	d8c02a15 	stw	r3,168(sp)
   43ab0:	90c0210c 	andi	r3,r18,132
   43ab4:	d8c03015 	stw	r3,192(sp)
   43ab8:	1801a31e 	bne	r3,zero,44148 <___vfprintf_internal_r+0xe00>
   43abc:	d9003117 	ldw	r4,196(sp)
   43ac0:	d8c02a17 	ldw	r3,168(sp)
   43ac4:	20e7c83a 	sub	r19,r4,r3
   43ac8:	04c19f0e 	bge	zero,r19,44148 <___vfprintf_internal_r+0xe00>
   43acc:	02400404 	movi	r9,16
   43ad0:	d8c02017 	ldw	r3,128(sp)
   43ad4:	d8801f17 	ldw	r2,124(sp)
   43ad8:	4cc50d0e 	bge	r9,r19,44f10 <___vfprintf_internal_r+0x1bc8>
   43adc:	01400174 	movhi	r5,5
   43ae0:	294a3184 	addi	r5,r5,10438
   43ae4:	dc403b15 	stw	r17,236(sp)
   43ae8:	d9403515 	stw	r5,212(sp)
   43aec:	9823883a 	mov	r17,r19
   43af0:	482d883a 	mov	r22,r9
   43af4:	9027883a 	mov	r19,r18
   43af8:	070001c4 	movi	fp,7
   43afc:	8025883a 	mov	r18,r16
   43b00:	dc002c17 	ldw	r16,176(sp)
   43b04:	00000306 	br	43b14 <___vfprintf_internal_r+0x7cc>
   43b08:	8c7ffc04 	addi	r17,r17,-16
   43b0c:	42000204 	addi	r8,r8,8
   43b10:	b440130e 	bge	r22,r17,43b60 <___vfprintf_internal_r+0x818>
   43b14:	01000174 	movhi	r4,5
   43b18:	18c00404 	addi	r3,r3,16
   43b1c:	10800044 	addi	r2,r2,1
   43b20:	210a3184 	addi	r4,r4,10438
   43b24:	41000015 	stw	r4,0(r8)
   43b28:	45800115 	stw	r22,4(r8)
   43b2c:	d8c02015 	stw	r3,128(sp)
   43b30:	d8801f15 	stw	r2,124(sp)
   43b34:	e0bff40e 	bge	fp,r2,43b08 <__alt_data_end+0xfffd1b08>
   43b38:	d9801e04 	addi	r6,sp,120
   43b3c:	b80b883a 	mov	r5,r23
   43b40:	8009883a 	mov	r4,r16
   43b44:	0049f940 	call	49f94 <__sprint_r>
   43b48:	103f011e 	bne	r2,zero,43750 <__alt_data_end+0xfffd1750>
   43b4c:	8c7ffc04 	addi	r17,r17,-16
   43b50:	d8c02017 	ldw	r3,128(sp)
   43b54:	d8801f17 	ldw	r2,124(sp)
   43b58:	da000404 	addi	r8,sp,16
   43b5c:	b47fed16 	blt	r22,r17,43b14 <__alt_data_end+0xfffd1b14>
   43b60:	9021883a 	mov	r16,r18
   43b64:	9825883a 	mov	r18,r19
   43b68:	8827883a 	mov	r19,r17
   43b6c:	dc403b17 	ldw	r17,236(sp)
   43b70:	d9403517 	ldw	r5,212(sp)
   43b74:	98c7883a 	add	r3,r19,r3
   43b78:	10800044 	addi	r2,r2,1
   43b7c:	41400015 	stw	r5,0(r8)
   43b80:	44c00115 	stw	r19,4(r8)
   43b84:	d8c02015 	stw	r3,128(sp)
   43b88:	d8801f15 	stw	r2,124(sp)
   43b8c:	010001c4 	movi	r4,7
   43b90:	2082a316 	blt	r4,r2,44620 <___vfprintf_internal_r+0x12d8>
   43b94:	df002787 	ldb	fp,158(sp)
   43b98:	42000204 	addi	r8,r8,8
   43b9c:	e0000c26 	beq	fp,zero,43bd0 <___vfprintf_internal_r+0x888>
   43ba0:	d8801f17 	ldw	r2,124(sp)
   43ba4:	d9002784 	addi	r4,sp,158
   43ba8:	18c00044 	addi	r3,r3,1
   43bac:	10800044 	addi	r2,r2,1
   43bb0:	41000015 	stw	r4,0(r8)
   43bb4:	01000044 	movi	r4,1
   43bb8:	41000115 	stw	r4,4(r8)
   43bbc:	d8c02015 	stw	r3,128(sp)
   43bc0:	d8801f15 	stw	r2,124(sp)
   43bc4:	010001c4 	movi	r4,7
   43bc8:	20823c16 	blt	r4,r2,444bc <___vfprintf_internal_r+0x1174>
   43bcc:	42000204 	addi	r8,r8,8
   43bd0:	d8802b17 	ldw	r2,172(sp)
   43bd4:	10000c26 	beq	r2,zero,43c08 <___vfprintf_internal_r+0x8c0>
   43bd8:	d8801f17 	ldw	r2,124(sp)
   43bdc:	d9002704 	addi	r4,sp,156
   43be0:	18c00084 	addi	r3,r3,2
   43be4:	10800044 	addi	r2,r2,1
   43be8:	41000015 	stw	r4,0(r8)
   43bec:	01000084 	movi	r4,2
   43bf0:	41000115 	stw	r4,4(r8)
   43bf4:	d8c02015 	stw	r3,128(sp)
   43bf8:	d8801f15 	stw	r2,124(sp)
   43bfc:	010001c4 	movi	r4,7
   43c00:	20823616 	blt	r4,r2,444dc <___vfprintf_internal_r+0x1194>
   43c04:	42000204 	addi	r8,r8,8
   43c08:	d9003017 	ldw	r4,192(sp)
   43c0c:	00802004 	movi	r2,128
   43c10:	20819926 	beq	r4,r2,44278 <___vfprintf_internal_r+0xf30>
   43c14:	d9402917 	ldw	r5,164(sp)
   43c18:	d8802e17 	ldw	r2,184(sp)
   43c1c:	28adc83a 	sub	r22,r5,r2
   43c20:	0580310e 	bge	zero,r22,43ce8 <___vfprintf_internal_r+0x9a0>
   43c24:	07000404 	movi	fp,16
   43c28:	d8801f17 	ldw	r2,124(sp)
   43c2c:	e584140e 	bge	fp,r22,44c80 <___vfprintf_internal_r+0x1938>
   43c30:	01400174 	movhi	r5,5
   43c34:	294a2d84 	addi	r5,r5,10422
   43c38:	dc402915 	stw	r17,164(sp)
   43c3c:	d9402b15 	stw	r5,172(sp)
   43c40:	b023883a 	mov	r17,r22
   43c44:	04c001c4 	movi	r19,7
   43c48:	a82d883a 	mov	r22,r21
   43c4c:	902b883a 	mov	r21,r18
   43c50:	8025883a 	mov	r18,r16
   43c54:	dc002c17 	ldw	r16,176(sp)
   43c58:	00000306 	br	43c68 <___vfprintf_internal_r+0x920>
   43c5c:	8c7ffc04 	addi	r17,r17,-16
   43c60:	42000204 	addi	r8,r8,8
   43c64:	e440110e 	bge	fp,r17,43cac <___vfprintf_internal_r+0x964>
   43c68:	18c00404 	addi	r3,r3,16
   43c6c:	10800044 	addi	r2,r2,1
   43c70:	45000015 	stw	r20,0(r8)
   43c74:	47000115 	stw	fp,4(r8)
   43c78:	d8c02015 	stw	r3,128(sp)
   43c7c:	d8801f15 	stw	r2,124(sp)
   43c80:	98bff60e 	bge	r19,r2,43c5c <__alt_data_end+0xfffd1c5c>
   43c84:	d9801e04 	addi	r6,sp,120
   43c88:	b80b883a 	mov	r5,r23
   43c8c:	8009883a 	mov	r4,r16
   43c90:	0049f940 	call	49f94 <__sprint_r>
   43c94:	103eae1e 	bne	r2,zero,43750 <__alt_data_end+0xfffd1750>
   43c98:	8c7ffc04 	addi	r17,r17,-16
   43c9c:	d8c02017 	ldw	r3,128(sp)
   43ca0:	d8801f17 	ldw	r2,124(sp)
   43ca4:	da000404 	addi	r8,sp,16
   43ca8:	e47fef16 	blt	fp,r17,43c68 <__alt_data_end+0xfffd1c68>
   43cac:	9021883a 	mov	r16,r18
   43cb0:	a825883a 	mov	r18,r21
   43cb4:	b02b883a 	mov	r21,r22
   43cb8:	882d883a 	mov	r22,r17
   43cbc:	dc402917 	ldw	r17,164(sp)
   43cc0:	d9002b17 	ldw	r4,172(sp)
   43cc4:	1d87883a 	add	r3,r3,r22
   43cc8:	10800044 	addi	r2,r2,1
   43ccc:	41000015 	stw	r4,0(r8)
   43cd0:	45800115 	stw	r22,4(r8)
   43cd4:	d8c02015 	stw	r3,128(sp)
   43cd8:	d8801f15 	stw	r2,124(sp)
   43cdc:	010001c4 	movi	r4,7
   43ce0:	2081ee16 	blt	r4,r2,4449c <___vfprintf_internal_r+0x1154>
   43ce4:	42000204 	addi	r8,r8,8
   43ce8:	9080400c 	andi	r2,r18,256
   43cec:	1001181e 	bne	r2,zero,44150 <___vfprintf_internal_r+0xe08>
   43cf0:	d9402e17 	ldw	r5,184(sp)
   43cf4:	d8801f17 	ldw	r2,124(sp)
   43cf8:	44000015 	stw	r16,0(r8)
   43cfc:	1947883a 	add	r3,r3,r5
   43d00:	10800044 	addi	r2,r2,1
   43d04:	41400115 	stw	r5,4(r8)
   43d08:	d8c02015 	stw	r3,128(sp)
   43d0c:	d8801f15 	stw	r2,124(sp)
   43d10:	010001c4 	movi	r4,7
   43d14:	2081d316 	blt	r4,r2,44464 <___vfprintf_internal_r+0x111c>
   43d18:	42000204 	addi	r8,r8,8
   43d1c:	9480010c 	andi	r18,r18,4
   43d20:	90003226 	beq	r18,zero,43dec <___vfprintf_internal_r+0xaa4>
   43d24:	d9403117 	ldw	r5,196(sp)
   43d28:	d8802a17 	ldw	r2,168(sp)
   43d2c:	28a1c83a 	sub	r16,r5,r2
   43d30:	04002e0e 	bge	zero,r16,43dec <___vfprintf_internal_r+0xaa4>
   43d34:	04400404 	movi	r17,16
   43d38:	d8801f17 	ldw	r2,124(sp)
   43d3c:	8c04a20e 	bge	r17,r16,44fc8 <___vfprintf_internal_r+0x1c80>
   43d40:	01400174 	movhi	r5,5
   43d44:	294a3184 	addi	r5,r5,10438
   43d48:	d9403515 	stw	r5,212(sp)
   43d4c:	048001c4 	movi	r18,7
   43d50:	dcc02c17 	ldw	r19,176(sp)
   43d54:	00000306 	br	43d64 <___vfprintf_internal_r+0xa1c>
   43d58:	843ffc04 	addi	r16,r16,-16
   43d5c:	42000204 	addi	r8,r8,8
   43d60:	8c00130e 	bge	r17,r16,43db0 <___vfprintf_internal_r+0xa68>
   43d64:	01000174 	movhi	r4,5
   43d68:	18c00404 	addi	r3,r3,16
   43d6c:	10800044 	addi	r2,r2,1
   43d70:	210a3184 	addi	r4,r4,10438
   43d74:	41000015 	stw	r4,0(r8)
   43d78:	44400115 	stw	r17,4(r8)
   43d7c:	d8c02015 	stw	r3,128(sp)
   43d80:	d8801f15 	stw	r2,124(sp)
   43d84:	90bff40e 	bge	r18,r2,43d58 <__alt_data_end+0xfffd1d58>
   43d88:	d9801e04 	addi	r6,sp,120
   43d8c:	b80b883a 	mov	r5,r23
   43d90:	9809883a 	mov	r4,r19
   43d94:	0049f940 	call	49f94 <__sprint_r>
   43d98:	103e6d1e 	bne	r2,zero,43750 <__alt_data_end+0xfffd1750>
   43d9c:	843ffc04 	addi	r16,r16,-16
   43da0:	d8c02017 	ldw	r3,128(sp)
   43da4:	d8801f17 	ldw	r2,124(sp)
   43da8:	da000404 	addi	r8,sp,16
   43dac:	8c3fed16 	blt	r17,r16,43d64 <__alt_data_end+0xfffd1d64>
   43db0:	d9403517 	ldw	r5,212(sp)
   43db4:	1c07883a 	add	r3,r3,r16
   43db8:	10800044 	addi	r2,r2,1
   43dbc:	41400015 	stw	r5,0(r8)
   43dc0:	44000115 	stw	r16,4(r8)
   43dc4:	d8c02015 	stw	r3,128(sp)
   43dc8:	d8801f15 	stw	r2,124(sp)
   43dcc:	010001c4 	movi	r4,7
   43dd0:	2080060e 	bge	r4,r2,43dec <___vfprintf_internal_r+0xaa4>
   43dd4:	d9002c17 	ldw	r4,176(sp)
   43dd8:	d9801e04 	addi	r6,sp,120
   43ddc:	b80b883a 	mov	r5,r23
   43de0:	0049f940 	call	49f94 <__sprint_r>
   43de4:	103e5a1e 	bne	r2,zero,43750 <__alt_data_end+0xfffd1750>
   43de8:	d8c02017 	ldw	r3,128(sp)
   43dec:	d8803117 	ldw	r2,196(sp)
   43df0:	d9002a17 	ldw	r4,168(sp)
   43df4:	1100010e 	bge	r2,r4,43dfc <___vfprintf_internal_r+0xab4>
   43df8:	2005883a 	mov	r2,r4
   43dfc:	d9402f17 	ldw	r5,188(sp)
   43e00:	288b883a 	add	r5,r5,r2
   43e04:	d9402f15 	stw	r5,188(sp)
   43e08:	18019e1e 	bne	r3,zero,44484 <___vfprintf_internal_r+0x113c>
   43e0c:	a8800007 	ldb	r2,0(r21)
   43e10:	d8001f15 	stw	zero,124(sp)
   43e14:	da000404 	addi	r8,sp,16
   43e18:	103d851e 	bne	r2,zero,43430 <__alt_data_end+0xfffd1430>
   43e1c:	a821883a 	mov	r16,r21
   43e20:	003d9b06 	br	43490 <__alt_data_end+0xfffd1490>
   43e24:	18c03fcc 	andi	r3,r3,255
   43e28:	1805c11e 	bne	r3,zero,45530 <___vfprintf_internal_r+0x21e8>
   43e2c:	94800414 	ori	r18,r18,16
   43e30:	9080080c 	andi	r2,r18,32
   43e34:	10020c26 	beq	r2,zero,44668 <___vfprintf_internal_r+0x1320>
   43e38:	d8802d17 	ldw	r2,180(sp)
   43e3c:	d9002917 	ldw	r4,164(sp)
   43e40:	d8002785 	stb	zero,158(sp)
   43e44:	10c00204 	addi	r3,r2,8
   43e48:	14c00017 	ldw	r19,0(r2)
   43e4c:	15800117 	ldw	r22,4(r2)
   43e50:	20040f16 	blt	r4,zero,44e90 <___vfprintf_internal_r+0x1b48>
   43e54:	013fdfc4 	movi	r4,-129
   43e58:	9d84b03a 	or	r2,r19,r22
   43e5c:	d8c02d15 	stw	r3,180(sp)
   43e60:	9124703a 	and	r18,r18,r4
   43e64:	0039883a 	mov	fp,zero
   43e68:	103e891e 	bne	r2,zero,43890 <__alt_data_end+0xfffd1890>
   43e6c:	d9002917 	ldw	r4,164(sp)
   43e70:	2002c11e 	bne	r4,zero,44978 <___vfprintf_internal_r+0x1630>
   43e74:	d8002915 	stw	zero,164(sp)
   43e78:	d8002e15 	stw	zero,184(sp)
   43e7c:	dc001e04 	addi	r16,sp,120
   43e80:	003ef806 	br	43a64 <__alt_data_end+0xfffd1a64>
   43e84:	18c03fcc 	andi	r3,r3,255
   43e88:	18059d1e 	bne	r3,zero,45500 <___vfprintf_internal_r+0x21b8>
   43e8c:	01400174 	movhi	r5,5
   43e90:	294a2104 	addi	r5,r5,10372
   43e94:	d9403915 	stw	r5,228(sp)
   43e98:	9080080c 	andi	r2,r18,32
   43e9c:	10005226 	beq	r2,zero,43fe8 <___vfprintf_internal_r+0xca0>
   43ea0:	d8802d17 	ldw	r2,180(sp)
   43ea4:	14c00017 	ldw	r19,0(r2)
   43ea8:	15800117 	ldw	r22,4(r2)
   43eac:	10800204 	addi	r2,r2,8
   43eb0:	d8802d15 	stw	r2,180(sp)
   43eb4:	9080004c 	andi	r2,r18,1
   43eb8:	10019026 	beq	r2,zero,444fc <___vfprintf_internal_r+0x11b4>
   43ebc:	9d84b03a 	or	r2,r19,r22
   43ec0:	10036926 	beq	r2,zero,44c68 <___vfprintf_internal_r+0x1920>
   43ec4:	d8c02917 	ldw	r3,164(sp)
   43ec8:	00800c04 	movi	r2,48
   43ecc:	d8802705 	stb	r2,156(sp)
   43ed0:	dc402745 	stb	r17,157(sp)
   43ed4:	d8002785 	stb	zero,158(sp)
   43ed8:	90800094 	ori	r2,r18,2
   43edc:	18045d16 	blt	r3,zero,45054 <___vfprintf_internal_r+0x1d0c>
   43ee0:	00bfdfc4 	movi	r2,-129
   43ee4:	90a4703a 	and	r18,r18,r2
   43ee8:	94800094 	ori	r18,r18,2
   43eec:	0039883a 	mov	fp,zero
   43ef0:	d9003917 	ldw	r4,228(sp)
   43ef4:	dc001e04 	addi	r16,sp,120
   43ef8:	988003cc 	andi	r2,r19,15
   43efc:	b006973a 	slli	r3,r22,28
   43f00:	2085883a 	add	r2,r4,r2
   43f04:	9826d13a 	srli	r19,r19,4
   43f08:	10800003 	ldbu	r2,0(r2)
   43f0c:	b02cd13a 	srli	r22,r22,4
   43f10:	843fffc4 	addi	r16,r16,-1
   43f14:	1ce6b03a 	or	r19,r3,r19
   43f18:	80800005 	stb	r2,0(r16)
   43f1c:	9d84b03a 	or	r2,r19,r22
   43f20:	103ff51e 	bne	r2,zero,43ef8 <__alt_data_end+0xfffd1ef8>
   43f24:	d8c02817 	ldw	r3,160(sp)
   43f28:	1c07c83a 	sub	r3,r3,r16
   43f2c:	d8c02e15 	stw	r3,184(sp)
   43f30:	003ecc06 	br	43a64 <__alt_data_end+0xfffd1a64>
   43f34:	18c03fcc 	andi	r3,r3,255
   43f38:	183e9f26 	beq	r3,zero,439b8 <__alt_data_end+0xfffd19b8>
   43f3c:	d9c02785 	stb	r7,158(sp)
   43f40:	003e9d06 	br	439b8 <__alt_data_end+0xfffd19b8>
   43f44:	00c00044 	movi	r3,1
   43f48:	01c00ac4 	movi	r7,43
   43f4c:	ac400007 	ldb	r17,0(r21)
   43f50:	003d5e06 	br	434cc <__alt_data_end+0xfffd14cc>
   43f54:	94800814 	ori	r18,r18,32
   43f58:	ac400007 	ldb	r17,0(r21)
   43f5c:	003d5b06 	br	434cc <__alt_data_end+0xfffd14cc>
   43f60:	d8c02d17 	ldw	r3,180(sp)
   43f64:	d8002785 	stb	zero,158(sp)
   43f68:	1c000017 	ldw	r16,0(r3)
   43f6c:	1cc00104 	addi	r19,r3,4
   43f70:	80041926 	beq	r16,zero,44fd8 <___vfprintf_internal_r+0x1c90>
   43f74:	d9002917 	ldw	r4,164(sp)
   43f78:	2003d016 	blt	r4,zero,44ebc <___vfprintf_internal_r+0x1b74>
   43f7c:	200d883a 	mov	r6,r4
   43f80:	000b883a 	mov	r5,zero
   43f84:	8009883a 	mov	r4,r16
   43f88:	da003d15 	stw	r8,244(sp)
   43f8c:	00484000 	call	48400 <memchr>
   43f90:	da003d17 	ldw	r8,244(sp)
   43f94:	10045426 	beq	r2,zero,450e8 <___vfprintf_internal_r+0x1da0>
   43f98:	1405c83a 	sub	r2,r2,r16
   43f9c:	d8802e15 	stw	r2,184(sp)
   43fa0:	1003cc16 	blt	r2,zero,44ed4 <___vfprintf_internal_r+0x1b8c>
   43fa4:	df002783 	ldbu	fp,158(sp)
   43fa8:	d8802a15 	stw	r2,168(sp)
   43fac:	dcc02d15 	stw	r19,180(sp)
   43fb0:	d8002915 	stw	zero,164(sp)
   43fb4:	d8003215 	stw	zero,200(sp)
   43fb8:	003eb006 	br	43a7c <__alt_data_end+0xfffd1a7c>
   43fbc:	18c03fcc 	andi	r3,r3,255
   43fc0:	183f9b26 	beq	r3,zero,43e30 <__alt_data_end+0xfffd1e30>
   43fc4:	d9c02785 	stb	r7,158(sp)
   43fc8:	003f9906 	br	43e30 <__alt_data_end+0xfffd1e30>
   43fcc:	18c03fcc 	andi	r3,r3,255
   43fd0:	1805551e 	bne	r3,zero,45528 <___vfprintf_internal_r+0x21e0>
   43fd4:	01400174 	movhi	r5,5
   43fd8:	294a2604 	addi	r5,r5,10392
   43fdc:	d9403915 	stw	r5,228(sp)
   43fe0:	9080080c 	andi	r2,r18,32
   43fe4:	103fae1e 	bne	r2,zero,43ea0 <__alt_data_end+0xfffd1ea0>
   43fe8:	9080040c 	andi	r2,r18,16
   43fec:	1002de26 	beq	r2,zero,44b68 <___vfprintf_internal_r+0x1820>
   43ff0:	d8c02d17 	ldw	r3,180(sp)
   43ff4:	002d883a 	mov	r22,zero
   43ff8:	1cc00017 	ldw	r19,0(r3)
   43ffc:	18c00104 	addi	r3,r3,4
   44000:	d8c02d15 	stw	r3,180(sp)
   44004:	003fab06 	br	43eb4 <__alt_data_end+0xfffd1eb4>
   44008:	38803fcc 	andi	r2,r7,255
   4400c:	1080201c 	xori	r2,r2,128
   44010:	10bfe004 	addi	r2,r2,-128
   44014:	1002d21e 	bne	r2,zero,44b60 <___vfprintf_internal_r+0x1818>
   44018:	00c00044 	movi	r3,1
   4401c:	01c00804 	movi	r7,32
   44020:	ac400007 	ldb	r17,0(r21)
   44024:	003d2906 	br	434cc <__alt_data_end+0xfffd14cc>
   44028:	94800054 	ori	r18,r18,1
   4402c:	ac400007 	ldb	r17,0(r21)
   44030:	003d2606 	br	434cc <__alt_data_end+0xfffd14cc>
   44034:	18c03fcc 	andi	r3,r3,255
   44038:	183e0526 	beq	r3,zero,43850 <__alt_data_end+0xfffd1850>
   4403c:	d9c02785 	stb	r7,158(sp)
   44040:	003e0306 	br	43850 <__alt_data_end+0xfffd1850>
   44044:	94801014 	ori	r18,r18,64
   44048:	ac400007 	ldb	r17,0(r21)
   4404c:	003d1f06 	br	434cc <__alt_data_end+0xfffd14cc>
   44050:	ac400007 	ldb	r17,0(r21)
   44054:	8a438726 	beq	r17,r9,44e74 <___vfprintf_internal_r+0x1b2c>
   44058:	94800414 	ori	r18,r18,16
   4405c:	003d1b06 	br	434cc <__alt_data_end+0xfffd14cc>
   44060:	18c03fcc 	andi	r3,r3,255
   44064:	1805341e 	bne	r3,zero,45538 <___vfprintf_internal_r+0x21f0>
   44068:	9080080c 	andi	r2,r18,32
   4406c:	1002cd26 	beq	r2,zero,44ba4 <___vfprintf_internal_r+0x185c>
   44070:	d9402d17 	ldw	r5,180(sp)
   44074:	d9002f17 	ldw	r4,188(sp)
   44078:	28800017 	ldw	r2,0(r5)
   4407c:	2007d7fa 	srai	r3,r4,31
   44080:	29400104 	addi	r5,r5,4
   44084:	d9402d15 	stw	r5,180(sp)
   44088:	11000015 	stw	r4,0(r2)
   4408c:	10c00115 	stw	r3,4(r2)
   44090:	003ce506 	br	43428 <__alt_data_end+0xfffd1428>
   44094:	d8c02d17 	ldw	r3,180(sp)
   44098:	d9002d17 	ldw	r4,180(sp)
   4409c:	d8002785 	stb	zero,158(sp)
   440a0:	18800017 	ldw	r2,0(r3)
   440a4:	21000104 	addi	r4,r4,4
   440a8:	00c00044 	movi	r3,1
   440ac:	d8c02a15 	stw	r3,168(sp)
   440b0:	d8801405 	stb	r2,80(sp)
   440b4:	d9002d15 	stw	r4,180(sp)
   440b8:	d8c02e15 	stw	r3,184(sp)
   440bc:	d8002915 	stw	zero,164(sp)
   440c0:	d8003215 	stw	zero,200(sp)
   440c4:	dc001404 	addi	r16,sp,80
   440c8:	0039883a 	mov	fp,zero
   440cc:	003e7206 	br	43a98 <__alt_data_end+0xfffd1a98>
   440d0:	01000174 	movhi	r4,5
   440d4:	210a2604 	addi	r4,r4,10392
   440d8:	0039883a 	mov	fp,zero
   440dc:	d9003915 	stw	r4,228(sp)
   440e0:	04401e04 	movi	r17,120
   440e4:	003f8206 	br	43ef0 <__alt_data_end+0xfffd1ef0>
   440e8:	18c03fcc 	andi	r3,r3,255
   440ec:	1805061e 	bne	r3,zero,45508 <___vfprintf_internal_r+0x21c0>
   440f0:	883d9126 	beq	r17,zero,43738 <__alt_data_end+0xfffd1738>
   440f4:	00c00044 	movi	r3,1
   440f8:	d8c02a15 	stw	r3,168(sp)
   440fc:	dc401405 	stb	r17,80(sp)
   44100:	d8002785 	stb	zero,158(sp)
   44104:	003fec06 	br	440b8 <__alt_data_end+0xfffd20b8>
   44108:	01400174 	movhi	r5,5
   4410c:	294a2604 	addi	r5,r5,10392
   44110:	d9403915 	stw	r5,228(sp)
   44114:	d8c02d15 	stw	r3,180(sp)
   44118:	1025883a 	mov	r18,r2
   4411c:	04401e04 	movi	r17,120
   44120:	9d84b03a 	or	r2,r19,r22
   44124:	1000fc1e 	bne	r2,zero,44518 <___vfprintf_internal_r+0x11d0>
   44128:	0039883a 	mov	fp,zero
   4412c:	00800084 	movi	r2,2
   44130:	10803fcc 	andi	r2,r2,255
   44134:	00c00044 	movi	r3,1
   44138:	10c20f26 	beq	r2,r3,44978 <___vfprintf_internal_r+0x1630>
   4413c:	00c00084 	movi	r3,2
   44140:	10fd6326 	beq	r2,r3,436d0 <__alt_data_end+0xfffd16d0>
   44144:	003e2d06 	br	439fc <__alt_data_end+0xfffd19fc>
   44148:	d8c02017 	ldw	r3,128(sp)
   4414c:	003e9306 	br	43b9c <__alt_data_end+0xfffd1b9c>
   44150:	00801944 	movi	r2,101
   44154:	14407e0e 	bge	r2,r17,44350 <___vfprintf_internal_r+0x1008>
   44158:	d9003617 	ldw	r4,216(sp)
   4415c:	d9403817 	ldw	r5,224(sp)
   44160:	000d883a 	mov	r6,zero
   44164:	000f883a 	mov	r7,zero
   44168:	d8c03c15 	stw	r3,240(sp)
   4416c:	da003d15 	stw	r8,244(sp)
   44170:	004d8940 	call	4d894 <__eqdf2>
   44174:	d8c03c17 	ldw	r3,240(sp)
   44178:	da003d17 	ldw	r8,244(sp)
   4417c:	1000f71e 	bne	r2,zero,4455c <___vfprintf_internal_r+0x1214>
   44180:	d8801f17 	ldw	r2,124(sp)
   44184:	01000174 	movhi	r4,5
   44188:	210a2d04 	addi	r4,r4,10420
   4418c:	18c00044 	addi	r3,r3,1
   44190:	10800044 	addi	r2,r2,1
   44194:	41000015 	stw	r4,0(r8)
   44198:	01000044 	movi	r4,1
   4419c:	41000115 	stw	r4,4(r8)
   441a0:	d8c02015 	stw	r3,128(sp)
   441a4:	d8801f15 	stw	r2,124(sp)
   441a8:	010001c4 	movi	r4,7
   441ac:	2082b816 	blt	r4,r2,44c90 <___vfprintf_internal_r+0x1948>
   441b0:	42000204 	addi	r8,r8,8
   441b4:	d8802617 	ldw	r2,152(sp)
   441b8:	d9403317 	ldw	r5,204(sp)
   441bc:	11400216 	blt	r2,r5,441c8 <___vfprintf_internal_r+0xe80>
   441c0:	9080004c 	andi	r2,r18,1
   441c4:	103ed526 	beq	r2,zero,43d1c <__alt_data_end+0xfffd1d1c>
   441c8:	d8803717 	ldw	r2,220(sp)
   441cc:	d9003417 	ldw	r4,208(sp)
   441d0:	d9403717 	ldw	r5,220(sp)
   441d4:	1887883a 	add	r3,r3,r2
   441d8:	d8801f17 	ldw	r2,124(sp)
   441dc:	41000015 	stw	r4,0(r8)
   441e0:	41400115 	stw	r5,4(r8)
   441e4:	10800044 	addi	r2,r2,1
   441e8:	d8c02015 	stw	r3,128(sp)
   441ec:	d8801f15 	stw	r2,124(sp)
   441f0:	010001c4 	movi	r4,7
   441f4:	20832916 	blt	r4,r2,44e9c <___vfprintf_internal_r+0x1b54>
   441f8:	42000204 	addi	r8,r8,8
   441fc:	d8803317 	ldw	r2,204(sp)
   44200:	143fffc4 	addi	r16,r2,-1
   44204:	043ec50e 	bge	zero,r16,43d1c <__alt_data_end+0xfffd1d1c>
   44208:	04400404 	movi	r17,16
   4420c:	d8801f17 	ldw	r2,124(sp)
   44210:	8c00880e 	bge	r17,r16,44434 <___vfprintf_internal_r+0x10ec>
   44214:	01400174 	movhi	r5,5
   44218:	294a2d84 	addi	r5,r5,10422
   4421c:	d9402b15 	stw	r5,172(sp)
   44220:	058001c4 	movi	r22,7
   44224:	dcc02c17 	ldw	r19,176(sp)
   44228:	00000306 	br	44238 <___vfprintf_internal_r+0xef0>
   4422c:	42000204 	addi	r8,r8,8
   44230:	843ffc04 	addi	r16,r16,-16
   44234:	8c00820e 	bge	r17,r16,44440 <___vfprintf_internal_r+0x10f8>
   44238:	18c00404 	addi	r3,r3,16
   4423c:	10800044 	addi	r2,r2,1
   44240:	45000015 	stw	r20,0(r8)
   44244:	44400115 	stw	r17,4(r8)
   44248:	d8c02015 	stw	r3,128(sp)
   4424c:	d8801f15 	stw	r2,124(sp)
   44250:	b0bff60e 	bge	r22,r2,4422c <__alt_data_end+0xfffd222c>
   44254:	d9801e04 	addi	r6,sp,120
   44258:	b80b883a 	mov	r5,r23
   4425c:	9809883a 	mov	r4,r19
   44260:	0049f940 	call	49f94 <__sprint_r>
   44264:	103d3a1e 	bne	r2,zero,43750 <__alt_data_end+0xfffd1750>
   44268:	d8c02017 	ldw	r3,128(sp)
   4426c:	d8801f17 	ldw	r2,124(sp)
   44270:	da000404 	addi	r8,sp,16
   44274:	003fee06 	br	44230 <__alt_data_end+0xfffd2230>
   44278:	d9403117 	ldw	r5,196(sp)
   4427c:	d8802a17 	ldw	r2,168(sp)
   44280:	28adc83a 	sub	r22,r5,r2
   44284:	05be630e 	bge	zero,r22,43c14 <__alt_data_end+0xfffd1c14>
   44288:	07000404 	movi	fp,16
   4428c:	d8801f17 	ldw	r2,124(sp)
   44290:	e5838f0e 	bge	fp,r22,450d0 <___vfprintf_internal_r+0x1d88>
   44294:	01400174 	movhi	r5,5
   44298:	294a2d84 	addi	r5,r5,10422
   4429c:	dc403015 	stw	r17,192(sp)
   442a0:	d9402b15 	stw	r5,172(sp)
   442a4:	b023883a 	mov	r17,r22
   442a8:	04c001c4 	movi	r19,7
   442ac:	a82d883a 	mov	r22,r21
   442b0:	902b883a 	mov	r21,r18
   442b4:	8025883a 	mov	r18,r16
   442b8:	dc002c17 	ldw	r16,176(sp)
   442bc:	00000306 	br	442cc <___vfprintf_internal_r+0xf84>
   442c0:	8c7ffc04 	addi	r17,r17,-16
   442c4:	42000204 	addi	r8,r8,8
   442c8:	e440110e 	bge	fp,r17,44310 <___vfprintf_internal_r+0xfc8>
   442cc:	18c00404 	addi	r3,r3,16
   442d0:	10800044 	addi	r2,r2,1
   442d4:	45000015 	stw	r20,0(r8)
   442d8:	47000115 	stw	fp,4(r8)
   442dc:	d8c02015 	stw	r3,128(sp)
   442e0:	d8801f15 	stw	r2,124(sp)
   442e4:	98bff60e 	bge	r19,r2,442c0 <__alt_data_end+0xfffd22c0>
   442e8:	d9801e04 	addi	r6,sp,120
   442ec:	b80b883a 	mov	r5,r23
   442f0:	8009883a 	mov	r4,r16
   442f4:	0049f940 	call	49f94 <__sprint_r>
   442f8:	103d151e 	bne	r2,zero,43750 <__alt_data_end+0xfffd1750>
   442fc:	8c7ffc04 	addi	r17,r17,-16
   44300:	d8c02017 	ldw	r3,128(sp)
   44304:	d8801f17 	ldw	r2,124(sp)
   44308:	da000404 	addi	r8,sp,16
   4430c:	e47fef16 	blt	fp,r17,442cc <__alt_data_end+0xfffd22cc>
   44310:	9021883a 	mov	r16,r18
   44314:	a825883a 	mov	r18,r21
   44318:	b02b883a 	mov	r21,r22
   4431c:	882d883a 	mov	r22,r17
   44320:	dc403017 	ldw	r17,192(sp)
   44324:	d9002b17 	ldw	r4,172(sp)
   44328:	1d87883a 	add	r3,r3,r22
   4432c:	10800044 	addi	r2,r2,1
   44330:	41000015 	stw	r4,0(r8)
   44334:	45800115 	stw	r22,4(r8)
   44338:	d8c02015 	stw	r3,128(sp)
   4433c:	d8801f15 	stw	r2,124(sp)
   44340:	010001c4 	movi	r4,7
   44344:	20818e16 	blt	r4,r2,44980 <___vfprintf_internal_r+0x1638>
   44348:	42000204 	addi	r8,r8,8
   4434c:	003e3106 	br	43c14 <__alt_data_end+0xfffd1c14>
   44350:	d9403317 	ldw	r5,204(sp)
   44354:	00800044 	movi	r2,1
   44358:	18c00044 	addi	r3,r3,1
   4435c:	1141530e 	bge	r2,r5,448ac <___vfprintf_internal_r+0x1564>
   44360:	dc401f17 	ldw	r17,124(sp)
   44364:	00800044 	movi	r2,1
   44368:	40800115 	stw	r2,4(r8)
   4436c:	8c400044 	addi	r17,r17,1
   44370:	44000015 	stw	r16,0(r8)
   44374:	d8c02015 	stw	r3,128(sp)
   44378:	dc401f15 	stw	r17,124(sp)
   4437c:	008001c4 	movi	r2,7
   44380:	14416b16 	blt	r2,r17,44930 <___vfprintf_internal_r+0x15e8>
   44384:	42000204 	addi	r8,r8,8
   44388:	d8803717 	ldw	r2,220(sp)
   4438c:	d9003417 	ldw	r4,208(sp)
   44390:	8c400044 	addi	r17,r17,1
   44394:	10c7883a 	add	r3,r2,r3
   44398:	40800115 	stw	r2,4(r8)
   4439c:	41000015 	stw	r4,0(r8)
   443a0:	d8c02015 	stw	r3,128(sp)
   443a4:	dc401f15 	stw	r17,124(sp)
   443a8:	008001c4 	movi	r2,7
   443ac:	14416916 	blt	r2,r17,44954 <___vfprintf_internal_r+0x160c>
   443b0:	45800204 	addi	r22,r8,8
   443b4:	d9003617 	ldw	r4,216(sp)
   443b8:	d9403817 	ldw	r5,224(sp)
   443bc:	000d883a 	mov	r6,zero
   443c0:	000f883a 	mov	r7,zero
   443c4:	d8c03c15 	stw	r3,240(sp)
   443c8:	004d8940 	call	4d894 <__eqdf2>
   443cc:	d8c03c17 	ldw	r3,240(sp)
   443d0:	1000bc26 	beq	r2,zero,446c4 <___vfprintf_internal_r+0x137c>
   443d4:	d9403317 	ldw	r5,204(sp)
   443d8:	84000044 	addi	r16,r16,1
   443dc:	8c400044 	addi	r17,r17,1
   443e0:	28bfffc4 	addi	r2,r5,-1
   443e4:	1887883a 	add	r3,r3,r2
   443e8:	b0800115 	stw	r2,4(r22)
   443ec:	b4000015 	stw	r16,0(r22)
   443f0:	d8c02015 	stw	r3,128(sp)
   443f4:	dc401f15 	stw	r17,124(sp)
   443f8:	008001c4 	movi	r2,7
   443fc:	14414316 	blt	r2,r17,4490c <___vfprintf_internal_r+0x15c4>
   44400:	b5800204 	addi	r22,r22,8
   44404:	d9003a17 	ldw	r4,232(sp)
   44408:	df0022c4 	addi	fp,sp,139
   4440c:	8c400044 	addi	r17,r17,1
   44410:	20c7883a 	add	r3,r4,r3
   44414:	b7000015 	stw	fp,0(r22)
   44418:	b1000115 	stw	r4,4(r22)
   4441c:	d8c02015 	stw	r3,128(sp)
   44420:	dc401f15 	stw	r17,124(sp)
   44424:	008001c4 	movi	r2,7
   44428:	14400e16 	blt	r2,r17,44464 <___vfprintf_internal_r+0x111c>
   4442c:	b2000204 	addi	r8,r22,8
   44430:	003e3a06 	br	43d1c <__alt_data_end+0xfffd1d1c>
   44434:	01000174 	movhi	r4,5
   44438:	210a2d84 	addi	r4,r4,10422
   4443c:	d9002b15 	stw	r4,172(sp)
   44440:	d9002b17 	ldw	r4,172(sp)
   44444:	1c07883a 	add	r3,r3,r16
   44448:	44000115 	stw	r16,4(r8)
   4444c:	41000015 	stw	r4,0(r8)
   44450:	10800044 	addi	r2,r2,1
   44454:	d8c02015 	stw	r3,128(sp)
   44458:	d8801f15 	stw	r2,124(sp)
   4445c:	010001c4 	movi	r4,7
   44460:	20be2d0e 	bge	r4,r2,43d18 <__alt_data_end+0xfffd1d18>
   44464:	d9002c17 	ldw	r4,176(sp)
   44468:	d9801e04 	addi	r6,sp,120
   4446c:	b80b883a 	mov	r5,r23
   44470:	0049f940 	call	49f94 <__sprint_r>
   44474:	103cb61e 	bne	r2,zero,43750 <__alt_data_end+0xfffd1750>
   44478:	d8c02017 	ldw	r3,128(sp)
   4447c:	da000404 	addi	r8,sp,16
   44480:	003e2606 	br	43d1c <__alt_data_end+0xfffd1d1c>
   44484:	d9002c17 	ldw	r4,176(sp)
   44488:	d9801e04 	addi	r6,sp,120
   4448c:	b80b883a 	mov	r5,r23
   44490:	0049f940 	call	49f94 <__sprint_r>
   44494:	103e5d26 	beq	r2,zero,43e0c <__alt_data_end+0xfffd1e0c>
   44498:	003cad06 	br	43750 <__alt_data_end+0xfffd1750>
   4449c:	d9002c17 	ldw	r4,176(sp)
   444a0:	d9801e04 	addi	r6,sp,120
   444a4:	b80b883a 	mov	r5,r23
   444a8:	0049f940 	call	49f94 <__sprint_r>
   444ac:	103ca81e 	bne	r2,zero,43750 <__alt_data_end+0xfffd1750>
   444b0:	d8c02017 	ldw	r3,128(sp)
   444b4:	da000404 	addi	r8,sp,16
   444b8:	003e0b06 	br	43ce8 <__alt_data_end+0xfffd1ce8>
   444bc:	d9002c17 	ldw	r4,176(sp)
   444c0:	d9801e04 	addi	r6,sp,120
   444c4:	b80b883a 	mov	r5,r23
   444c8:	0049f940 	call	49f94 <__sprint_r>
   444cc:	103ca01e 	bne	r2,zero,43750 <__alt_data_end+0xfffd1750>
   444d0:	d8c02017 	ldw	r3,128(sp)
   444d4:	da000404 	addi	r8,sp,16
   444d8:	003dbd06 	br	43bd0 <__alt_data_end+0xfffd1bd0>
   444dc:	d9002c17 	ldw	r4,176(sp)
   444e0:	d9801e04 	addi	r6,sp,120
   444e4:	b80b883a 	mov	r5,r23
   444e8:	0049f940 	call	49f94 <__sprint_r>
   444ec:	103c981e 	bne	r2,zero,43750 <__alt_data_end+0xfffd1750>
   444f0:	d8c02017 	ldw	r3,128(sp)
   444f4:	da000404 	addi	r8,sp,16
   444f8:	003dc306 	br	43c08 <__alt_data_end+0xfffd1c08>
   444fc:	d8802917 	ldw	r2,164(sp)
   44500:	d8002785 	stb	zero,158(sp)
   44504:	103f0616 	blt	r2,zero,44120 <__alt_data_end+0xfffd2120>
   44508:	00ffdfc4 	movi	r3,-129
   4450c:	9d84b03a 	or	r2,r19,r22
   44510:	90e4703a 	and	r18,r18,r3
   44514:	103c6b26 	beq	r2,zero,436c4 <__alt_data_end+0xfffd16c4>
   44518:	0039883a 	mov	fp,zero
   4451c:	003e7406 	br	43ef0 <__alt_data_end+0xfffd1ef0>
   44520:	9080040c 	andi	r2,r18,16
   44524:	1001b326 	beq	r2,zero,44bf4 <___vfprintf_internal_r+0x18ac>
   44528:	d9002d17 	ldw	r4,180(sp)
   4452c:	d9402917 	ldw	r5,164(sp)
   44530:	d8002785 	stb	zero,158(sp)
   44534:	20800104 	addi	r2,r4,4
   44538:	24c00017 	ldw	r19,0(r4)
   4453c:	002d883a 	mov	r22,zero
   44540:	2801b516 	blt	r5,zero,44c18 <___vfprintf_internal_r+0x18d0>
   44544:	00ffdfc4 	movi	r3,-129
   44548:	d8802d15 	stw	r2,180(sp)
   4454c:	90e4703a 	and	r18,r18,r3
   44550:	983d2726 	beq	r19,zero,439f0 <__alt_data_end+0xfffd19f0>
   44554:	0039883a 	mov	fp,zero
   44558:	003d2a06 	br	43a04 <__alt_data_end+0xfffd1a04>
   4455c:	dc402617 	ldw	r17,152(sp)
   44560:	0441d30e 	bge	zero,r17,44cb0 <___vfprintf_internal_r+0x1968>
   44564:	dc403217 	ldw	r17,200(sp)
   44568:	d8803317 	ldw	r2,204(sp)
   4456c:	1440010e 	bge	r2,r17,44574 <___vfprintf_internal_r+0x122c>
   44570:	1023883a 	mov	r17,r2
   44574:	04400a0e 	bge	zero,r17,445a0 <___vfprintf_internal_r+0x1258>
   44578:	d8801f17 	ldw	r2,124(sp)
   4457c:	1c47883a 	add	r3,r3,r17
   44580:	44000015 	stw	r16,0(r8)
   44584:	10800044 	addi	r2,r2,1
   44588:	44400115 	stw	r17,4(r8)
   4458c:	d8c02015 	stw	r3,128(sp)
   44590:	d8801f15 	stw	r2,124(sp)
   44594:	010001c4 	movi	r4,7
   44598:	20826516 	blt	r4,r2,44f30 <___vfprintf_internal_r+0x1be8>
   4459c:	42000204 	addi	r8,r8,8
   445a0:	88026116 	blt	r17,zero,44f28 <___vfprintf_internal_r+0x1be0>
   445a4:	d9003217 	ldw	r4,200(sp)
   445a8:	2463c83a 	sub	r17,r4,r17
   445ac:	04407b0e 	bge	zero,r17,4479c <___vfprintf_internal_r+0x1454>
   445b0:	05800404 	movi	r22,16
   445b4:	d8801f17 	ldw	r2,124(sp)
   445b8:	b4419d0e 	bge	r22,r17,44c30 <___vfprintf_internal_r+0x18e8>
   445bc:	01000174 	movhi	r4,5
   445c0:	210a2d84 	addi	r4,r4,10422
   445c4:	d9002b15 	stw	r4,172(sp)
   445c8:	070001c4 	movi	fp,7
   445cc:	dcc02c17 	ldw	r19,176(sp)
   445d0:	00000306 	br	445e0 <___vfprintf_internal_r+0x1298>
   445d4:	42000204 	addi	r8,r8,8
   445d8:	8c7ffc04 	addi	r17,r17,-16
   445dc:	b441970e 	bge	r22,r17,44c3c <___vfprintf_internal_r+0x18f4>
   445e0:	18c00404 	addi	r3,r3,16
   445e4:	10800044 	addi	r2,r2,1
   445e8:	45000015 	stw	r20,0(r8)
   445ec:	45800115 	stw	r22,4(r8)
   445f0:	d8c02015 	stw	r3,128(sp)
   445f4:	d8801f15 	stw	r2,124(sp)
   445f8:	e0bff60e 	bge	fp,r2,445d4 <__alt_data_end+0xfffd25d4>
   445fc:	d9801e04 	addi	r6,sp,120
   44600:	b80b883a 	mov	r5,r23
   44604:	9809883a 	mov	r4,r19
   44608:	0049f940 	call	49f94 <__sprint_r>
   4460c:	103c501e 	bne	r2,zero,43750 <__alt_data_end+0xfffd1750>
   44610:	d8c02017 	ldw	r3,128(sp)
   44614:	d8801f17 	ldw	r2,124(sp)
   44618:	da000404 	addi	r8,sp,16
   4461c:	003fee06 	br	445d8 <__alt_data_end+0xfffd25d8>
   44620:	d9002c17 	ldw	r4,176(sp)
   44624:	d9801e04 	addi	r6,sp,120
   44628:	b80b883a 	mov	r5,r23
   4462c:	0049f940 	call	49f94 <__sprint_r>
   44630:	103c471e 	bne	r2,zero,43750 <__alt_data_end+0xfffd1750>
   44634:	d8c02017 	ldw	r3,128(sp)
   44638:	df002787 	ldb	fp,158(sp)
   4463c:	da000404 	addi	r8,sp,16
   44640:	003d5606 	br	43b9c <__alt_data_end+0xfffd1b9c>
   44644:	9080040c 	andi	r2,r18,16
   44648:	10016126 	beq	r2,zero,44bd0 <___vfprintf_internal_r+0x1888>
   4464c:	d8802d17 	ldw	r2,180(sp)
   44650:	14c00017 	ldw	r19,0(r2)
   44654:	10800104 	addi	r2,r2,4
   44658:	d8802d15 	stw	r2,180(sp)
   4465c:	982dd7fa 	srai	r22,r19,31
   44660:	b005883a 	mov	r2,r22
   44664:	003c8206 	br	43870 <__alt_data_end+0xfffd1870>
   44668:	9080040c 	andi	r2,r18,16
   4466c:	10003526 	beq	r2,zero,44744 <___vfprintf_internal_r+0x13fc>
   44670:	d9402d17 	ldw	r5,180(sp)
   44674:	d8c02917 	ldw	r3,164(sp)
   44678:	d8002785 	stb	zero,158(sp)
   4467c:	28800104 	addi	r2,r5,4
   44680:	2cc00017 	ldw	r19,0(r5)
   44684:	002d883a 	mov	r22,zero
   44688:	18003716 	blt	r3,zero,44768 <___vfprintf_internal_r+0x1420>
   4468c:	00ffdfc4 	movi	r3,-129
   44690:	d8802d15 	stw	r2,180(sp)
   44694:	90e4703a 	and	r18,r18,r3
   44698:	0039883a 	mov	fp,zero
   4469c:	983df326 	beq	r19,zero,43e6c <__alt_data_end+0xfffd1e6c>
   446a0:	00800244 	movi	r2,9
   446a4:	14fc7b36 	bltu	r2,r19,43894 <__alt_data_end+0xfffd1894>
   446a8:	d8c02817 	ldw	r3,160(sp)
   446ac:	dc001dc4 	addi	r16,sp,119
   446b0:	9cc00c04 	addi	r19,r19,48
   446b4:	1c07c83a 	sub	r3,r3,r16
   446b8:	dcc01dc5 	stb	r19,119(sp)
   446bc:	d8c02e15 	stw	r3,184(sp)
   446c0:	003ce806 	br	43a64 <__alt_data_end+0xfffd1a64>
   446c4:	d8803317 	ldw	r2,204(sp)
   446c8:	143fffc4 	addi	r16,r2,-1
   446cc:	043f4d0e 	bge	zero,r16,44404 <__alt_data_end+0xfffd2404>
   446d0:	07000404 	movi	fp,16
   446d4:	e400810e 	bge	fp,r16,448dc <___vfprintf_internal_r+0x1594>
   446d8:	01400174 	movhi	r5,5
   446dc:	294a2d84 	addi	r5,r5,10422
   446e0:	d9402b15 	stw	r5,172(sp)
   446e4:	01c001c4 	movi	r7,7
   446e8:	dcc02c17 	ldw	r19,176(sp)
   446ec:	00000306 	br	446fc <___vfprintf_internal_r+0x13b4>
   446f0:	b5800204 	addi	r22,r22,8
   446f4:	843ffc04 	addi	r16,r16,-16
   446f8:	e4007b0e 	bge	fp,r16,448e8 <___vfprintf_internal_r+0x15a0>
   446fc:	18c00404 	addi	r3,r3,16
   44700:	8c400044 	addi	r17,r17,1
   44704:	b5000015 	stw	r20,0(r22)
   44708:	b7000115 	stw	fp,4(r22)
   4470c:	d8c02015 	stw	r3,128(sp)
   44710:	dc401f15 	stw	r17,124(sp)
   44714:	3c7ff60e 	bge	r7,r17,446f0 <__alt_data_end+0xfffd26f0>
   44718:	d9801e04 	addi	r6,sp,120
   4471c:	b80b883a 	mov	r5,r23
   44720:	9809883a 	mov	r4,r19
   44724:	d9c03c15 	stw	r7,240(sp)
   44728:	0049f940 	call	49f94 <__sprint_r>
   4472c:	d9c03c17 	ldw	r7,240(sp)
   44730:	103c071e 	bne	r2,zero,43750 <__alt_data_end+0xfffd1750>
   44734:	d8c02017 	ldw	r3,128(sp)
   44738:	dc401f17 	ldw	r17,124(sp)
   4473c:	dd800404 	addi	r22,sp,16
   44740:	003fec06 	br	446f4 <__alt_data_end+0xfffd26f4>
   44744:	9080100c 	andi	r2,r18,64
   44748:	d8002785 	stb	zero,158(sp)
   4474c:	10010e26 	beq	r2,zero,44b88 <___vfprintf_internal_r+0x1840>
   44750:	d9002d17 	ldw	r4,180(sp)
   44754:	d9402917 	ldw	r5,164(sp)
   44758:	002d883a 	mov	r22,zero
   4475c:	20800104 	addi	r2,r4,4
   44760:	24c0000b 	ldhu	r19,0(r4)
   44764:	283fc90e 	bge	r5,zero,4468c <__alt_data_end+0xfffd268c>
   44768:	d8802d15 	stw	r2,180(sp)
   4476c:	0039883a 	mov	fp,zero
   44770:	9d84b03a 	or	r2,r19,r22
   44774:	103c461e 	bne	r2,zero,43890 <__alt_data_end+0xfffd1890>
   44778:	00800044 	movi	r2,1
   4477c:	003e6c06 	br	44130 <__alt_data_end+0xfffd2130>
   44780:	d9002c17 	ldw	r4,176(sp)
   44784:	d9801e04 	addi	r6,sp,120
   44788:	b80b883a 	mov	r5,r23
   4478c:	0049f940 	call	49f94 <__sprint_r>
   44790:	103bef1e 	bne	r2,zero,43750 <__alt_data_end+0xfffd1750>
   44794:	d8c02017 	ldw	r3,128(sp)
   44798:	da000404 	addi	r8,sp,16
   4479c:	d9003217 	ldw	r4,200(sp)
   447a0:	d8802617 	ldw	r2,152(sp)
   447a4:	d9403317 	ldw	r5,204(sp)
   447a8:	8123883a 	add	r17,r16,r4
   447ac:	11400216 	blt	r2,r5,447b8 <___vfprintf_internal_r+0x1470>
   447b0:	9100004c 	andi	r4,r18,1
   447b4:	20000d26 	beq	r4,zero,447ec <___vfprintf_internal_r+0x14a4>
   447b8:	d9003717 	ldw	r4,220(sp)
   447bc:	d9403417 	ldw	r5,208(sp)
   447c0:	1907883a 	add	r3,r3,r4
   447c4:	d9001f17 	ldw	r4,124(sp)
   447c8:	41400015 	stw	r5,0(r8)
   447cc:	d9403717 	ldw	r5,220(sp)
   447d0:	21000044 	addi	r4,r4,1
   447d4:	d8c02015 	stw	r3,128(sp)
   447d8:	41400115 	stw	r5,4(r8)
   447dc:	d9001f15 	stw	r4,124(sp)
   447e0:	014001c4 	movi	r5,7
   447e4:	2901e816 	blt	r5,r4,44f88 <___vfprintf_internal_r+0x1c40>
   447e8:	42000204 	addi	r8,r8,8
   447ec:	d9003317 	ldw	r4,204(sp)
   447f0:	8121883a 	add	r16,r16,r4
   447f4:	2085c83a 	sub	r2,r4,r2
   447f8:	8461c83a 	sub	r16,r16,r17
   447fc:	1400010e 	bge	r2,r16,44804 <___vfprintf_internal_r+0x14bc>
   44800:	1021883a 	mov	r16,r2
   44804:	04000a0e 	bge	zero,r16,44830 <___vfprintf_internal_r+0x14e8>
   44808:	d9001f17 	ldw	r4,124(sp)
   4480c:	1c07883a 	add	r3,r3,r16
   44810:	44400015 	stw	r17,0(r8)
   44814:	21000044 	addi	r4,r4,1
   44818:	44000115 	stw	r16,4(r8)
   4481c:	d8c02015 	stw	r3,128(sp)
   44820:	d9001f15 	stw	r4,124(sp)
   44824:	014001c4 	movi	r5,7
   44828:	2901fb16 	blt	r5,r4,45018 <___vfprintf_internal_r+0x1cd0>
   4482c:	42000204 	addi	r8,r8,8
   44830:	8001f716 	blt	r16,zero,45010 <___vfprintf_internal_r+0x1cc8>
   44834:	1421c83a 	sub	r16,r2,r16
   44838:	043d380e 	bge	zero,r16,43d1c <__alt_data_end+0xfffd1d1c>
   4483c:	04400404 	movi	r17,16
   44840:	d8801f17 	ldw	r2,124(sp)
   44844:	8c3efb0e 	bge	r17,r16,44434 <__alt_data_end+0xfffd2434>
   44848:	01400174 	movhi	r5,5
   4484c:	294a2d84 	addi	r5,r5,10422
   44850:	d9402b15 	stw	r5,172(sp)
   44854:	058001c4 	movi	r22,7
   44858:	dcc02c17 	ldw	r19,176(sp)
   4485c:	00000306 	br	4486c <___vfprintf_internal_r+0x1524>
   44860:	42000204 	addi	r8,r8,8
   44864:	843ffc04 	addi	r16,r16,-16
   44868:	8c3ef50e 	bge	r17,r16,44440 <__alt_data_end+0xfffd2440>
   4486c:	18c00404 	addi	r3,r3,16
   44870:	10800044 	addi	r2,r2,1
   44874:	45000015 	stw	r20,0(r8)
   44878:	44400115 	stw	r17,4(r8)
   4487c:	d8c02015 	stw	r3,128(sp)
   44880:	d8801f15 	stw	r2,124(sp)
   44884:	b0bff60e 	bge	r22,r2,44860 <__alt_data_end+0xfffd2860>
   44888:	d9801e04 	addi	r6,sp,120
   4488c:	b80b883a 	mov	r5,r23
   44890:	9809883a 	mov	r4,r19
   44894:	0049f940 	call	49f94 <__sprint_r>
   44898:	103bad1e 	bne	r2,zero,43750 <__alt_data_end+0xfffd1750>
   4489c:	d8c02017 	ldw	r3,128(sp)
   448a0:	d8801f17 	ldw	r2,124(sp)
   448a4:	da000404 	addi	r8,sp,16
   448a8:	003fee06 	br	44864 <__alt_data_end+0xfffd2864>
   448ac:	9088703a 	and	r4,r18,r2
   448b0:	203eab1e 	bne	r4,zero,44360 <__alt_data_end+0xfffd2360>
   448b4:	dc401f17 	ldw	r17,124(sp)
   448b8:	40800115 	stw	r2,4(r8)
   448bc:	44000015 	stw	r16,0(r8)
   448c0:	8c400044 	addi	r17,r17,1
   448c4:	d8c02015 	stw	r3,128(sp)
   448c8:	dc401f15 	stw	r17,124(sp)
   448cc:	008001c4 	movi	r2,7
   448d0:	14400e16 	blt	r2,r17,4490c <___vfprintf_internal_r+0x15c4>
   448d4:	45800204 	addi	r22,r8,8
   448d8:	003eca06 	br	44404 <__alt_data_end+0xfffd2404>
   448dc:	01000174 	movhi	r4,5
   448e0:	210a2d84 	addi	r4,r4,10422
   448e4:	d9002b15 	stw	r4,172(sp)
   448e8:	d8802b17 	ldw	r2,172(sp)
   448ec:	1c07883a 	add	r3,r3,r16
   448f0:	8c400044 	addi	r17,r17,1
   448f4:	b0800015 	stw	r2,0(r22)
   448f8:	b4000115 	stw	r16,4(r22)
   448fc:	d8c02015 	stw	r3,128(sp)
   44900:	dc401f15 	stw	r17,124(sp)
   44904:	008001c4 	movi	r2,7
   44908:	147ebd0e 	bge	r2,r17,44400 <__alt_data_end+0xfffd2400>
   4490c:	d9002c17 	ldw	r4,176(sp)
   44910:	d9801e04 	addi	r6,sp,120
   44914:	b80b883a 	mov	r5,r23
   44918:	0049f940 	call	49f94 <__sprint_r>
   4491c:	103b8c1e 	bne	r2,zero,43750 <__alt_data_end+0xfffd1750>
   44920:	d8c02017 	ldw	r3,128(sp)
   44924:	dc401f17 	ldw	r17,124(sp)
   44928:	dd800404 	addi	r22,sp,16
   4492c:	003eb506 	br	44404 <__alt_data_end+0xfffd2404>
   44930:	d9002c17 	ldw	r4,176(sp)
   44934:	d9801e04 	addi	r6,sp,120
   44938:	b80b883a 	mov	r5,r23
   4493c:	0049f940 	call	49f94 <__sprint_r>
   44940:	103b831e 	bne	r2,zero,43750 <__alt_data_end+0xfffd1750>
   44944:	d8c02017 	ldw	r3,128(sp)
   44948:	dc401f17 	ldw	r17,124(sp)
   4494c:	da000404 	addi	r8,sp,16
   44950:	003e8d06 	br	44388 <__alt_data_end+0xfffd2388>
   44954:	d9002c17 	ldw	r4,176(sp)
   44958:	d9801e04 	addi	r6,sp,120
   4495c:	b80b883a 	mov	r5,r23
   44960:	0049f940 	call	49f94 <__sprint_r>
   44964:	103b7a1e 	bne	r2,zero,43750 <__alt_data_end+0xfffd1750>
   44968:	d8c02017 	ldw	r3,128(sp)
   4496c:	dc401f17 	ldw	r17,124(sp)
   44970:	dd800404 	addi	r22,sp,16
   44974:	003e8f06 	br	443b4 <__alt_data_end+0xfffd23b4>
   44978:	0027883a 	mov	r19,zero
   4497c:	003f4a06 	br	446a8 <__alt_data_end+0xfffd26a8>
   44980:	d9002c17 	ldw	r4,176(sp)
   44984:	d9801e04 	addi	r6,sp,120
   44988:	b80b883a 	mov	r5,r23
   4498c:	0049f940 	call	49f94 <__sprint_r>
   44990:	103b6f1e 	bne	r2,zero,43750 <__alt_data_end+0xfffd1750>
   44994:	d8c02017 	ldw	r3,128(sp)
   44998:	da000404 	addi	r8,sp,16
   4499c:	003c9d06 	br	43c14 <__alt_data_end+0xfffd1c14>
   449a0:	04e7c83a 	sub	r19,zero,r19
   449a4:	9804c03a 	cmpne	r2,r19,zero
   449a8:	05adc83a 	sub	r22,zero,r22
   449ac:	b0adc83a 	sub	r22,r22,r2
   449b0:	d8802917 	ldw	r2,164(sp)
   449b4:	07000b44 	movi	fp,45
   449b8:	df002785 	stb	fp,158(sp)
   449bc:	10017b16 	blt	r2,zero,44fac <___vfprintf_internal_r+0x1c64>
   449c0:	00bfdfc4 	movi	r2,-129
   449c4:	90a4703a 	and	r18,r18,r2
   449c8:	003bb106 	br	43890 <__alt_data_end+0xfffd1890>
   449cc:	d9003617 	ldw	r4,216(sp)
   449d0:	d9403817 	ldw	r5,224(sp)
   449d4:	da003d15 	stw	r8,244(sp)
   449d8:	0049d480 	call	49d48 <__fpclassifyd>
   449dc:	da003d17 	ldw	r8,244(sp)
   449e0:	1000f026 	beq	r2,zero,44da4 <___vfprintf_internal_r+0x1a5c>
   449e4:	d9002917 	ldw	r4,164(sp)
   449e8:	05bff7c4 	movi	r22,-33
   449ec:	00bfffc4 	movi	r2,-1
   449f0:	8dac703a 	and	r22,r17,r22
   449f4:	20820026 	beq	r4,r2,451f8 <___vfprintf_internal_r+0x1eb0>
   449f8:	008011c4 	movi	r2,71
   449fc:	b081f726 	beq	r22,r2,451dc <___vfprintf_internal_r+0x1e94>
   44a00:	d9003817 	ldw	r4,224(sp)
   44a04:	90c04014 	ori	r3,r18,256
   44a08:	d8c02b15 	stw	r3,172(sp)
   44a0c:	20021516 	blt	r4,zero,45264 <___vfprintf_internal_r+0x1f1c>
   44a10:	dcc03817 	ldw	r19,224(sp)
   44a14:	d8002a05 	stb	zero,168(sp)
   44a18:	00801984 	movi	r2,102
   44a1c:	8881f926 	beq	r17,r2,45204 <___vfprintf_internal_r+0x1ebc>
   44a20:	00801184 	movi	r2,70
   44a24:	88821c26 	beq	r17,r2,45298 <___vfprintf_internal_r+0x1f50>
   44a28:	00801144 	movi	r2,69
   44a2c:	b081ef26 	beq	r22,r2,451ec <___vfprintf_internal_r+0x1ea4>
   44a30:	d8c02917 	ldw	r3,164(sp)
   44a34:	d8802104 	addi	r2,sp,132
   44a38:	d8800315 	stw	r2,12(sp)
   44a3c:	d9403617 	ldw	r5,216(sp)
   44a40:	d8802504 	addi	r2,sp,148
   44a44:	d9002c17 	ldw	r4,176(sp)
   44a48:	d8800215 	stw	r2,8(sp)
   44a4c:	d8802604 	addi	r2,sp,152
   44a50:	d8c00015 	stw	r3,0(sp)
   44a54:	d8800115 	stw	r2,4(sp)
   44a58:	01c00084 	movi	r7,2
   44a5c:	980d883a 	mov	r6,r19
   44a60:	d8c03c15 	stw	r3,240(sp)
   44a64:	da003d15 	stw	r8,244(sp)
   44a68:	0045a200 	call	45a20 <_dtoa_r>
   44a6c:	1021883a 	mov	r16,r2
   44a70:	008019c4 	movi	r2,103
   44a74:	d8c03c17 	ldw	r3,240(sp)
   44a78:	da003d17 	ldw	r8,244(sp)
   44a7c:	88817126 	beq	r17,r2,45044 <___vfprintf_internal_r+0x1cfc>
   44a80:	008011c4 	movi	r2,71
   44a84:	88829226 	beq	r17,r2,454d0 <___vfprintf_internal_r+0x2188>
   44a88:	80f9883a 	add	fp,r16,r3
   44a8c:	d9003617 	ldw	r4,216(sp)
   44a90:	000d883a 	mov	r6,zero
   44a94:	000f883a 	mov	r7,zero
   44a98:	980b883a 	mov	r5,r19
   44a9c:	da003d15 	stw	r8,244(sp)
   44aa0:	004d8940 	call	4d894 <__eqdf2>
   44aa4:	da003d17 	ldw	r8,244(sp)
   44aa8:	10018d26 	beq	r2,zero,450e0 <___vfprintf_internal_r+0x1d98>
   44aac:	d8802117 	ldw	r2,132(sp)
   44ab0:	1700062e 	bgeu	r2,fp,44acc <___vfprintf_internal_r+0x1784>
   44ab4:	01000c04 	movi	r4,48
   44ab8:	10c00044 	addi	r3,r2,1
   44abc:	d8c02115 	stw	r3,132(sp)
   44ac0:	11000005 	stb	r4,0(r2)
   44ac4:	d8802117 	ldw	r2,132(sp)
   44ac8:	173ffb36 	bltu	r2,fp,44ab8 <__alt_data_end+0xfffd2ab8>
   44acc:	1405c83a 	sub	r2,r2,r16
   44ad0:	d8803315 	stw	r2,204(sp)
   44ad4:	008011c4 	movi	r2,71
   44ad8:	b0817626 	beq	r22,r2,450b4 <___vfprintf_internal_r+0x1d6c>
   44adc:	00801944 	movi	r2,101
   44ae0:	1442810e 	bge	r2,r17,454e8 <___vfprintf_internal_r+0x21a0>
   44ae4:	d8c02617 	ldw	r3,152(sp)
   44ae8:	00801984 	movi	r2,102
   44aec:	d8c03215 	stw	r3,200(sp)
   44af0:	8881fe26 	beq	r17,r2,452ec <___vfprintf_internal_r+0x1fa4>
   44af4:	d8c03217 	ldw	r3,200(sp)
   44af8:	d9003317 	ldw	r4,204(sp)
   44afc:	1901dd16 	blt	r3,r4,45274 <___vfprintf_internal_r+0x1f2c>
   44b00:	9480004c 	andi	r18,r18,1
   44b04:	90022b1e 	bne	r18,zero,453b4 <___vfprintf_internal_r+0x206c>
   44b08:	1805883a 	mov	r2,r3
   44b0c:	18028016 	blt	r3,zero,45510 <___vfprintf_internal_r+0x21c8>
   44b10:	d8c03217 	ldw	r3,200(sp)
   44b14:	044019c4 	movi	r17,103
   44b18:	d8c02e15 	stw	r3,184(sp)
   44b1c:	df002a07 	ldb	fp,168(sp)
   44b20:	e001531e 	bne	fp,zero,45070 <___vfprintf_internal_r+0x1d28>
   44b24:	df002783 	ldbu	fp,158(sp)
   44b28:	d8802a15 	stw	r2,168(sp)
   44b2c:	dc802b17 	ldw	r18,172(sp)
   44b30:	d8002915 	stw	zero,164(sp)
   44b34:	003bd106 	br	43a7c <__alt_data_end+0xfffd1a7c>
   44b38:	d8802d17 	ldw	r2,180(sp)
   44b3c:	d8c02d17 	ldw	r3,180(sp)
   44b40:	d9002d17 	ldw	r4,180(sp)
   44b44:	10800017 	ldw	r2,0(r2)
   44b48:	18c00117 	ldw	r3,4(r3)
   44b4c:	21000204 	addi	r4,r4,8
   44b50:	d8803615 	stw	r2,216(sp)
   44b54:	d8c03815 	stw	r3,224(sp)
   44b58:	d9002d15 	stw	r4,180(sp)
   44b5c:	003b7506 	br	43934 <__alt_data_end+0xfffd1934>
   44b60:	ac400007 	ldb	r17,0(r21)
   44b64:	003a5906 	br	434cc <__alt_data_end+0xfffd14cc>
   44b68:	9080100c 	andi	r2,r18,64
   44b6c:	1000a826 	beq	r2,zero,44e10 <___vfprintf_internal_r+0x1ac8>
   44b70:	d9002d17 	ldw	r4,180(sp)
   44b74:	002d883a 	mov	r22,zero
   44b78:	24c0000b 	ldhu	r19,0(r4)
   44b7c:	21000104 	addi	r4,r4,4
   44b80:	d9002d15 	stw	r4,180(sp)
   44b84:	003ccb06 	br	43eb4 <__alt_data_end+0xfffd1eb4>
   44b88:	d8c02d17 	ldw	r3,180(sp)
   44b8c:	d9002917 	ldw	r4,164(sp)
   44b90:	002d883a 	mov	r22,zero
   44b94:	18800104 	addi	r2,r3,4
   44b98:	1cc00017 	ldw	r19,0(r3)
   44b9c:	203ebb0e 	bge	r4,zero,4468c <__alt_data_end+0xfffd268c>
   44ba0:	003ef106 	br	44768 <__alt_data_end+0xfffd2768>
   44ba4:	9080040c 	andi	r2,r18,16
   44ba8:	1000921e 	bne	r2,zero,44df4 <___vfprintf_internal_r+0x1aac>
   44bac:	9480100c 	andi	r18,r18,64
   44bb0:	90013926 	beq	r18,zero,45098 <___vfprintf_internal_r+0x1d50>
   44bb4:	d9002d17 	ldw	r4,180(sp)
   44bb8:	d9402f17 	ldw	r5,188(sp)
   44bbc:	20800017 	ldw	r2,0(r4)
   44bc0:	21000104 	addi	r4,r4,4
   44bc4:	d9002d15 	stw	r4,180(sp)
   44bc8:	1140000d 	sth	r5,0(r2)
   44bcc:	003a1606 	br	43428 <__alt_data_end+0xfffd1428>
   44bd0:	9080100c 	andi	r2,r18,64
   44bd4:	10008026 	beq	r2,zero,44dd8 <___vfprintf_internal_r+0x1a90>
   44bd8:	d8c02d17 	ldw	r3,180(sp)
   44bdc:	1cc0000f 	ldh	r19,0(r3)
   44be0:	18c00104 	addi	r3,r3,4
   44be4:	d8c02d15 	stw	r3,180(sp)
   44be8:	982dd7fa 	srai	r22,r19,31
   44bec:	b005883a 	mov	r2,r22
   44bf0:	003b1f06 	br	43870 <__alt_data_end+0xfffd1870>
   44bf4:	9080100c 	andi	r2,r18,64
   44bf8:	d8002785 	stb	zero,158(sp)
   44bfc:	10008a1e 	bne	r2,zero,44e28 <___vfprintf_internal_r+0x1ae0>
   44c00:	d9402d17 	ldw	r5,180(sp)
   44c04:	d8c02917 	ldw	r3,164(sp)
   44c08:	002d883a 	mov	r22,zero
   44c0c:	28800104 	addi	r2,r5,4
   44c10:	2cc00017 	ldw	r19,0(r5)
   44c14:	183e4b0e 	bge	r3,zero,44544 <__alt_data_end+0xfffd2544>
   44c18:	9d86b03a 	or	r3,r19,r22
   44c1c:	d8802d15 	stw	r2,180(sp)
   44c20:	183e4c1e 	bne	r3,zero,44554 <__alt_data_end+0xfffd2554>
   44c24:	0039883a 	mov	fp,zero
   44c28:	0005883a 	mov	r2,zero
   44c2c:	003d4006 	br	44130 <__alt_data_end+0xfffd2130>
   44c30:	01400174 	movhi	r5,5
   44c34:	294a2d84 	addi	r5,r5,10422
   44c38:	d9402b15 	stw	r5,172(sp)
   44c3c:	d9402b17 	ldw	r5,172(sp)
   44c40:	1c47883a 	add	r3,r3,r17
   44c44:	10800044 	addi	r2,r2,1
   44c48:	41400015 	stw	r5,0(r8)
   44c4c:	44400115 	stw	r17,4(r8)
   44c50:	d8c02015 	stw	r3,128(sp)
   44c54:	d8801f15 	stw	r2,124(sp)
   44c58:	010001c4 	movi	r4,7
   44c5c:	20bec816 	blt	r4,r2,44780 <__alt_data_end+0xfffd2780>
   44c60:	42000204 	addi	r8,r8,8
   44c64:	003ecd06 	br	4479c <__alt_data_end+0xfffd279c>
   44c68:	d9002917 	ldw	r4,164(sp)
   44c6c:	d8002785 	stb	zero,158(sp)
   44c70:	203d2d16 	blt	r4,zero,44128 <__alt_data_end+0xfffd2128>
   44c74:	00bfdfc4 	movi	r2,-129
   44c78:	90a4703a 	and	r18,r18,r2
   44c7c:	003a9106 	br	436c4 <__alt_data_end+0xfffd16c4>
   44c80:	01000174 	movhi	r4,5
   44c84:	210a2d84 	addi	r4,r4,10422
   44c88:	d9002b15 	stw	r4,172(sp)
   44c8c:	003c0c06 	br	43cc0 <__alt_data_end+0xfffd1cc0>
   44c90:	d9002c17 	ldw	r4,176(sp)
   44c94:	d9801e04 	addi	r6,sp,120
   44c98:	b80b883a 	mov	r5,r23
   44c9c:	0049f940 	call	49f94 <__sprint_r>
   44ca0:	103aab1e 	bne	r2,zero,43750 <__alt_data_end+0xfffd1750>
   44ca4:	d8c02017 	ldw	r3,128(sp)
   44ca8:	da000404 	addi	r8,sp,16
   44cac:	003d4106 	br	441b4 <__alt_data_end+0xfffd21b4>
   44cb0:	d8801f17 	ldw	r2,124(sp)
   44cb4:	01400174 	movhi	r5,5
   44cb8:	01000044 	movi	r4,1
   44cbc:	18c00044 	addi	r3,r3,1
   44cc0:	10800044 	addi	r2,r2,1
   44cc4:	294a2d04 	addi	r5,r5,10420
   44cc8:	41000115 	stw	r4,4(r8)
   44ccc:	41400015 	stw	r5,0(r8)
   44cd0:	d8c02015 	stw	r3,128(sp)
   44cd4:	d8801f15 	stw	r2,124(sp)
   44cd8:	010001c4 	movi	r4,7
   44cdc:	20805c16 	blt	r4,r2,44e50 <___vfprintf_internal_r+0x1b08>
   44ce0:	42000204 	addi	r8,r8,8
   44ce4:	8800041e 	bne	r17,zero,44cf8 <___vfprintf_internal_r+0x19b0>
   44ce8:	d8803317 	ldw	r2,204(sp)
   44cec:	1000021e 	bne	r2,zero,44cf8 <___vfprintf_internal_r+0x19b0>
   44cf0:	9080004c 	andi	r2,r18,1
   44cf4:	103c0926 	beq	r2,zero,43d1c <__alt_data_end+0xfffd1d1c>
   44cf8:	d9003717 	ldw	r4,220(sp)
   44cfc:	d8801f17 	ldw	r2,124(sp)
   44d00:	d9403417 	ldw	r5,208(sp)
   44d04:	20c7883a 	add	r3,r4,r3
   44d08:	10800044 	addi	r2,r2,1
   44d0c:	41000115 	stw	r4,4(r8)
   44d10:	41400015 	stw	r5,0(r8)
   44d14:	d8c02015 	stw	r3,128(sp)
   44d18:	d8801f15 	stw	r2,124(sp)
   44d1c:	010001c4 	movi	r4,7
   44d20:	20812116 	blt	r4,r2,451a8 <___vfprintf_internal_r+0x1e60>
   44d24:	42000204 	addi	r8,r8,8
   44d28:	0463c83a 	sub	r17,zero,r17
   44d2c:	0440730e 	bge	zero,r17,44efc <___vfprintf_internal_r+0x1bb4>
   44d30:	05800404 	movi	r22,16
   44d34:	b440860e 	bge	r22,r17,44f50 <___vfprintf_internal_r+0x1c08>
   44d38:	01400174 	movhi	r5,5
   44d3c:	294a2d84 	addi	r5,r5,10422
   44d40:	d9402b15 	stw	r5,172(sp)
   44d44:	070001c4 	movi	fp,7
   44d48:	dcc02c17 	ldw	r19,176(sp)
   44d4c:	00000306 	br	44d5c <___vfprintf_internal_r+0x1a14>
   44d50:	42000204 	addi	r8,r8,8
   44d54:	8c7ffc04 	addi	r17,r17,-16
   44d58:	b440800e 	bge	r22,r17,44f5c <___vfprintf_internal_r+0x1c14>
   44d5c:	18c00404 	addi	r3,r3,16
   44d60:	10800044 	addi	r2,r2,1
   44d64:	45000015 	stw	r20,0(r8)
   44d68:	45800115 	stw	r22,4(r8)
   44d6c:	d8c02015 	stw	r3,128(sp)
   44d70:	d8801f15 	stw	r2,124(sp)
   44d74:	e0bff60e 	bge	fp,r2,44d50 <__alt_data_end+0xfffd2d50>
   44d78:	d9801e04 	addi	r6,sp,120
   44d7c:	b80b883a 	mov	r5,r23
   44d80:	9809883a 	mov	r4,r19
   44d84:	0049f940 	call	49f94 <__sprint_r>
   44d88:	103a711e 	bne	r2,zero,43750 <__alt_data_end+0xfffd1750>
   44d8c:	d8c02017 	ldw	r3,128(sp)
   44d90:	d8801f17 	ldw	r2,124(sp)
   44d94:	da000404 	addi	r8,sp,16
   44d98:	003fee06 	br	44d54 <__alt_data_end+0xfffd2d54>
   44d9c:	00bfffc4 	movi	r2,-1
   44da0:	003a6f06 	br	43760 <__alt_data_end+0xfffd1760>
   44da4:	008011c4 	movi	r2,71
   44da8:	1440b816 	blt	r2,r17,4508c <___vfprintf_internal_r+0x1d44>
   44dac:	04000174 	movhi	r16,5
   44db0:	840a1f04 	addi	r16,r16,10364
   44db4:	00c000c4 	movi	r3,3
   44db8:	00bfdfc4 	movi	r2,-129
   44dbc:	d8c02a15 	stw	r3,168(sp)
   44dc0:	90a4703a 	and	r18,r18,r2
   44dc4:	df002783 	ldbu	fp,158(sp)
   44dc8:	d8c02e15 	stw	r3,184(sp)
   44dcc:	d8002915 	stw	zero,164(sp)
   44dd0:	d8003215 	stw	zero,200(sp)
   44dd4:	003b2906 	br	43a7c <__alt_data_end+0xfffd1a7c>
   44dd8:	d9002d17 	ldw	r4,180(sp)
   44ddc:	24c00017 	ldw	r19,0(r4)
   44de0:	21000104 	addi	r4,r4,4
   44de4:	d9002d15 	stw	r4,180(sp)
   44de8:	982dd7fa 	srai	r22,r19,31
   44dec:	b005883a 	mov	r2,r22
   44df0:	003a9f06 	br	43870 <__alt_data_end+0xfffd1870>
   44df4:	d9402d17 	ldw	r5,180(sp)
   44df8:	d8c02f17 	ldw	r3,188(sp)
   44dfc:	28800017 	ldw	r2,0(r5)
   44e00:	29400104 	addi	r5,r5,4
   44e04:	d9402d15 	stw	r5,180(sp)
   44e08:	10c00015 	stw	r3,0(r2)
   44e0c:	00398606 	br	43428 <__alt_data_end+0xfffd1428>
   44e10:	d9402d17 	ldw	r5,180(sp)
   44e14:	002d883a 	mov	r22,zero
   44e18:	2cc00017 	ldw	r19,0(r5)
   44e1c:	29400104 	addi	r5,r5,4
   44e20:	d9402d15 	stw	r5,180(sp)
   44e24:	003c2306 	br	43eb4 <__alt_data_end+0xfffd1eb4>
   44e28:	d8c02d17 	ldw	r3,180(sp)
   44e2c:	d9002917 	ldw	r4,164(sp)
   44e30:	002d883a 	mov	r22,zero
   44e34:	18800104 	addi	r2,r3,4
   44e38:	1cc0000b 	ldhu	r19,0(r3)
   44e3c:	203dc10e 	bge	r4,zero,44544 <__alt_data_end+0xfffd2544>
   44e40:	003f7506 	br	44c18 <__alt_data_end+0xfffd2c18>
   44e44:	04000174 	movhi	r16,5
   44e48:	840a1d04 	addi	r16,r16,10356
   44e4c:	003acc06 	br	43980 <__alt_data_end+0xfffd1980>
   44e50:	d9002c17 	ldw	r4,176(sp)
   44e54:	d9801e04 	addi	r6,sp,120
   44e58:	b80b883a 	mov	r5,r23
   44e5c:	0049f940 	call	49f94 <__sprint_r>
   44e60:	103a3b1e 	bne	r2,zero,43750 <__alt_data_end+0xfffd1750>
   44e64:	dc402617 	ldw	r17,152(sp)
   44e68:	d8c02017 	ldw	r3,128(sp)
   44e6c:	da000404 	addi	r8,sp,16
   44e70:	003f9c06 	br	44ce4 <__alt_data_end+0xfffd2ce4>
   44e74:	ac400043 	ldbu	r17,1(r21)
   44e78:	94800814 	ori	r18,r18,32
   44e7c:	ad400044 	addi	r21,r21,1
   44e80:	8c403fcc 	andi	r17,r17,255
   44e84:	8c40201c 	xori	r17,r17,128
   44e88:	8c7fe004 	addi	r17,r17,-128
   44e8c:	00398f06 	br	434cc <__alt_data_end+0xfffd14cc>
   44e90:	d8c02d15 	stw	r3,180(sp)
   44e94:	0039883a 	mov	fp,zero
   44e98:	003e3506 	br	44770 <__alt_data_end+0xfffd2770>
   44e9c:	d9002c17 	ldw	r4,176(sp)
   44ea0:	d9801e04 	addi	r6,sp,120
   44ea4:	b80b883a 	mov	r5,r23
   44ea8:	0049f940 	call	49f94 <__sprint_r>
   44eac:	103a281e 	bne	r2,zero,43750 <__alt_data_end+0xfffd1750>
   44eb0:	d8c02017 	ldw	r3,128(sp)
   44eb4:	da000404 	addi	r8,sp,16
   44eb8:	003cd006 	br	441fc <__alt_data_end+0xfffd21fc>
   44ebc:	8009883a 	mov	r4,r16
   44ec0:	da003d15 	stw	r8,244(sp)
   44ec4:	00432600 	call	43260 <strlen>
   44ec8:	d8802e15 	stw	r2,184(sp)
   44ecc:	da003d17 	ldw	r8,244(sp)
   44ed0:	103c340e 	bge	r2,zero,43fa4 <__alt_data_end+0xfffd1fa4>
   44ed4:	0005883a 	mov	r2,zero
   44ed8:	003c3206 	br	43fa4 <__alt_data_end+0xfffd1fa4>
   44edc:	d9002c17 	ldw	r4,176(sp)
   44ee0:	d9801e04 	addi	r6,sp,120
   44ee4:	b80b883a 	mov	r5,r23
   44ee8:	0049f940 	call	49f94 <__sprint_r>
   44eec:	103a181e 	bne	r2,zero,43750 <__alt_data_end+0xfffd1750>
   44ef0:	d8c02017 	ldw	r3,128(sp)
   44ef4:	d8801f17 	ldw	r2,124(sp)
   44ef8:	da000404 	addi	r8,sp,16
   44efc:	d9403317 	ldw	r5,204(sp)
   44f00:	10800044 	addi	r2,r2,1
   44f04:	44000015 	stw	r16,0(r8)
   44f08:	28c7883a 	add	r3,r5,r3
   44f0c:	003b7d06 	br	43d04 <__alt_data_end+0xfffd1d04>
   44f10:	01000174 	movhi	r4,5
   44f14:	210a3184 	addi	r4,r4,10438
   44f18:	d9003515 	stw	r4,212(sp)
   44f1c:	003b1406 	br	43b70 <__alt_data_end+0xfffd1b70>
   44f20:	013fffc4 	movi	r4,-1
   44f24:	003a3506 	br	437fc <__alt_data_end+0xfffd17fc>
   44f28:	0023883a 	mov	r17,zero
   44f2c:	003d9d06 	br	445a4 <__alt_data_end+0xfffd25a4>
   44f30:	d9002c17 	ldw	r4,176(sp)
   44f34:	d9801e04 	addi	r6,sp,120
   44f38:	b80b883a 	mov	r5,r23
   44f3c:	0049f940 	call	49f94 <__sprint_r>
   44f40:	103a031e 	bne	r2,zero,43750 <__alt_data_end+0xfffd1750>
   44f44:	d8c02017 	ldw	r3,128(sp)
   44f48:	da000404 	addi	r8,sp,16
   44f4c:	003d9406 	br	445a0 <__alt_data_end+0xfffd25a0>
   44f50:	01000174 	movhi	r4,5
   44f54:	210a2d84 	addi	r4,r4,10422
   44f58:	d9002b15 	stw	r4,172(sp)
   44f5c:	d9002b17 	ldw	r4,172(sp)
   44f60:	1c47883a 	add	r3,r3,r17
   44f64:	10800044 	addi	r2,r2,1
   44f68:	41000015 	stw	r4,0(r8)
   44f6c:	44400115 	stw	r17,4(r8)
   44f70:	d8c02015 	stw	r3,128(sp)
   44f74:	d8801f15 	stw	r2,124(sp)
   44f78:	010001c4 	movi	r4,7
   44f7c:	20bfd716 	blt	r4,r2,44edc <__alt_data_end+0xfffd2edc>
   44f80:	42000204 	addi	r8,r8,8
   44f84:	003fdd06 	br	44efc <__alt_data_end+0xfffd2efc>
   44f88:	d9002c17 	ldw	r4,176(sp)
   44f8c:	d9801e04 	addi	r6,sp,120
   44f90:	b80b883a 	mov	r5,r23
   44f94:	0049f940 	call	49f94 <__sprint_r>
   44f98:	1039ed1e 	bne	r2,zero,43750 <__alt_data_end+0xfffd1750>
   44f9c:	d8802617 	ldw	r2,152(sp)
   44fa0:	d8c02017 	ldw	r3,128(sp)
   44fa4:	da000404 	addi	r8,sp,16
   44fa8:	003e1006 	br	447ec <__alt_data_end+0xfffd27ec>
   44fac:	00800044 	movi	r2,1
   44fb0:	10803fcc 	andi	r2,r2,255
   44fb4:	00c00044 	movi	r3,1
   44fb8:	10fa3526 	beq	r2,r3,43890 <__alt_data_end+0xfffd1890>
   44fbc:	00c00084 	movi	r3,2
   44fc0:	10fbcb26 	beq	r2,r3,43ef0 <__alt_data_end+0xfffd1ef0>
   44fc4:	003a8f06 	br	43a04 <__alt_data_end+0xfffd1a04>
   44fc8:	01000174 	movhi	r4,5
   44fcc:	210a3184 	addi	r4,r4,10438
   44fd0:	d9003515 	stw	r4,212(sp)
   44fd4:	003b7606 	br	43db0 <__alt_data_end+0xfffd1db0>
   44fd8:	d8802917 	ldw	r2,164(sp)
   44fdc:	00c00184 	movi	r3,6
   44fe0:	1880012e 	bgeu	r3,r2,44fe8 <___vfprintf_internal_r+0x1ca0>
   44fe4:	1805883a 	mov	r2,r3
   44fe8:	d8802e15 	stw	r2,184(sp)
   44fec:	1000ef16 	blt	r2,zero,453ac <___vfprintf_internal_r+0x2064>
   44ff0:	04000174 	movhi	r16,5
   44ff4:	d8802a15 	stw	r2,168(sp)
   44ff8:	dcc02d15 	stw	r19,180(sp)
   44ffc:	d8002915 	stw	zero,164(sp)
   45000:	d8003215 	stw	zero,200(sp)
   45004:	840a2b04 	addi	r16,r16,10412
   45008:	0039883a 	mov	fp,zero
   4500c:	003aa206 	br	43a98 <__alt_data_end+0xfffd1a98>
   45010:	0021883a 	mov	r16,zero
   45014:	003e0706 	br	44834 <__alt_data_end+0xfffd2834>
   45018:	d9002c17 	ldw	r4,176(sp)
   4501c:	d9801e04 	addi	r6,sp,120
   45020:	b80b883a 	mov	r5,r23
   45024:	0049f940 	call	49f94 <__sprint_r>
   45028:	1039c91e 	bne	r2,zero,43750 <__alt_data_end+0xfffd1750>
   4502c:	d8802617 	ldw	r2,152(sp)
   45030:	d9403317 	ldw	r5,204(sp)
   45034:	d8c02017 	ldw	r3,128(sp)
   45038:	da000404 	addi	r8,sp,16
   4503c:	2885c83a 	sub	r2,r5,r2
   45040:	003dfb06 	br	44830 <__alt_data_end+0xfffd2830>
   45044:	9080004c 	andi	r2,r18,1
   45048:	103e8f1e 	bne	r2,zero,44a88 <__alt_data_end+0xfffd2a88>
   4504c:	d8802117 	ldw	r2,132(sp)
   45050:	003e9e06 	br	44acc <__alt_data_end+0xfffd2acc>
   45054:	1025883a 	mov	r18,r2
   45058:	0039883a 	mov	fp,zero
   4505c:	00800084 	movi	r2,2
   45060:	003fd306 	br	44fb0 <__alt_data_end+0xfffd2fb0>
   45064:	07000b44 	movi	fp,45
   45068:	df002785 	stb	fp,158(sp)
   4506c:	003a4006 	br	43970 <__alt_data_end+0xfffd1970>
   45070:	00c00b44 	movi	r3,45
   45074:	d8c02785 	stb	r3,158(sp)
   45078:	d8802a15 	stw	r2,168(sp)
   4507c:	dc802b17 	ldw	r18,172(sp)
   45080:	d8002915 	stw	zero,164(sp)
   45084:	07000b44 	movi	fp,45
   45088:	003a8006 	br	43a8c <__alt_data_end+0xfffd1a8c>
   4508c:	04000174 	movhi	r16,5
   45090:	840a2004 	addi	r16,r16,10368
   45094:	003f4706 	br	44db4 <__alt_data_end+0xfffd2db4>
   45098:	d8c02d17 	ldw	r3,180(sp)
   4509c:	d9002f17 	ldw	r4,188(sp)
   450a0:	18800017 	ldw	r2,0(r3)
   450a4:	18c00104 	addi	r3,r3,4
   450a8:	d8c02d15 	stw	r3,180(sp)
   450ac:	11000015 	stw	r4,0(r2)
   450b0:	0038dd06 	br	43428 <__alt_data_end+0xfffd1428>
   450b4:	dd802617 	ldw	r22,152(sp)
   450b8:	00bfff44 	movi	r2,-3
   450bc:	b0801c16 	blt	r22,r2,45130 <___vfprintf_internal_r+0x1de8>
   450c0:	d9402917 	ldw	r5,164(sp)
   450c4:	2d801a16 	blt	r5,r22,45130 <___vfprintf_internal_r+0x1de8>
   450c8:	dd803215 	stw	r22,200(sp)
   450cc:	003e8906 	br	44af4 <__alt_data_end+0xfffd2af4>
   450d0:	01000174 	movhi	r4,5
   450d4:	210a2d84 	addi	r4,r4,10422
   450d8:	d9002b15 	stw	r4,172(sp)
   450dc:	003c9106 	br	44324 <__alt_data_end+0xfffd2324>
   450e0:	e005883a 	mov	r2,fp
   450e4:	003e7906 	br	44acc <__alt_data_end+0xfffd2acc>
   450e8:	d9402917 	ldw	r5,164(sp)
   450ec:	df002783 	ldbu	fp,158(sp)
   450f0:	dcc02d15 	stw	r19,180(sp)
   450f4:	d9402a15 	stw	r5,168(sp)
   450f8:	d9402e15 	stw	r5,184(sp)
   450fc:	d8002915 	stw	zero,164(sp)
   45100:	d8003215 	stw	zero,200(sp)
   45104:	003a5d06 	br	43a7c <__alt_data_end+0xfffd1a7c>
   45108:	9080004c 	andi	r2,r18,1
   4510c:	0039883a 	mov	fp,zero
   45110:	10000426 	beq	r2,zero,45124 <___vfprintf_internal_r+0x1ddc>
   45114:	00800c04 	movi	r2,48
   45118:	dc001dc4 	addi	r16,sp,119
   4511c:	d8801dc5 	stb	r2,119(sp)
   45120:	003b8006 	br	43f24 <__alt_data_end+0xfffd1f24>
   45124:	d8002e15 	stw	zero,184(sp)
   45128:	dc001e04 	addi	r16,sp,120
   4512c:	003a4d06 	br	43a64 <__alt_data_end+0xfffd1a64>
   45130:	8c7fff84 	addi	r17,r17,-2
   45134:	b5bfffc4 	addi	r22,r22,-1
   45138:	dd802615 	stw	r22,152(sp)
   4513c:	dc4022c5 	stb	r17,139(sp)
   45140:	b000bf16 	blt	r22,zero,45440 <___vfprintf_internal_r+0x20f8>
   45144:	00800ac4 	movi	r2,43
   45148:	d8802305 	stb	r2,140(sp)
   4514c:	00800244 	movi	r2,9
   45150:	15807016 	blt	r2,r22,45314 <___vfprintf_internal_r+0x1fcc>
   45154:	00800c04 	movi	r2,48
   45158:	b5800c04 	addi	r22,r22,48
   4515c:	d8802345 	stb	r2,141(sp)
   45160:	dd802385 	stb	r22,142(sp)
   45164:	d88023c4 	addi	r2,sp,143
   45168:	df0022c4 	addi	fp,sp,139
   4516c:	d8c03317 	ldw	r3,204(sp)
   45170:	1739c83a 	sub	fp,r2,fp
   45174:	d9003317 	ldw	r4,204(sp)
   45178:	e0c7883a 	add	r3,fp,r3
   4517c:	df003a15 	stw	fp,232(sp)
   45180:	d8c02e15 	stw	r3,184(sp)
   45184:	00800044 	movi	r2,1
   45188:	1100b30e 	bge	r2,r4,45458 <___vfprintf_internal_r+0x2110>
   4518c:	d8c02e17 	ldw	r3,184(sp)
   45190:	18c00044 	addi	r3,r3,1
   45194:	d8c02e15 	stw	r3,184(sp)
   45198:	1805883a 	mov	r2,r3
   4519c:	1800ac16 	blt	r3,zero,45450 <___vfprintf_internal_r+0x2108>
   451a0:	d8003215 	stw	zero,200(sp)
   451a4:	003e5d06 	br	44b1c <__alt_data_end+0xfffd2b1c>
   451a8:	d9002c17 	ldw	r4,176(sp)
   451ac:	d9801e04 	addi	r6,sp,120
   451b0:	b80b883a 	mov	r5,r23
   451b4:	0049f940 	call	49f94 <__sprint_r>
   451b8:	1039651e 	bne	r2,zero,43750 <__alt_data_end+0xfffd1750>
   451bc:	dc402617 	ldw	r17,152(sp)
   451c0:	d8c02017 	ldw	r3,128(sp)
   451c4:	d8801f17 	ldw	r2,124(sp)
   451c8:	da000404 	addi	r8,sp,16
   451cc:	003ed606 	br	44d28 <__alt_data_end+0xfffd2d28>
   451d0:	582b883a 	mov	r21,r11
   451d4:	d8002915 	stw	zero,164(sp)
   451d8:	0038bd06 	br	434d0 <__alt_data_end+0xfffd14d0>
   451dc:	d8802917 	ldw	r2,164(sp)
   451e0:	103e071e 	bne	r2,zero,44a00 <__alt_data_end+0xfffd2a00>
   451e4:	dc002915 	stw	r16,164(sp)
   451e8:	003e0506 	br	44a00 <__alt_data_end+0xfffd2a00>
   451ec:	d9002917 	ldw	r4,164(sp)
   451f0:	20c00044 	addi	r3,r4,1
   451f4:	003e0f06 	br	44a34 <__alt_data_end+0xfffd2a34>
   451f8:	01400184 	movi	r5,6
   451fc:	d9402915 	stw	r5,164(sp)
   45200:	003dff06 	br	44a00 <__alt_data_end+0xfffd2a00>
   45204:	d8802104 	addi	r2,sp,132
   45208:	d8800315 	stw	r2,12(sp)
   4520c:	d8802504 	addi	r2,sp,148
   45210:	d8800215 	stw	r2,8(sp)
   45214:	d8802604 	addi	r2,sp,152
   45218:	d8800115 	stw	r2,4(sp)
   4521c:	d8802917 	ldw	r2,164(sp)
   45220:	d9403617 	ldw	r5,216(sp)
   45224:	d9002c17 	ldw	r4,176(sp)
   45228:	d8800015 	stw	r2,0(sp)
   4522c:	01c000c4 	movi	r7,3
   45230:	980d883a 	mov	r6,r19
   45234:	da003d15 	stw	r8,244(sp)
   45238:	0045a200 	call	45a20 <_dtoa_r>
   4523c:	d8c02917 	ldw	r3,164(sp)
   45240:	da003d17 	ldw	r8,244(sp)
   45244:	1021883a 	mov	r16,r2
   45248:	10f9883a 	add	fp,r2,r3
   4524c:	81000007 	ldb	r4,0(r16)
   45250:	00800c04 	movi	r2,48
   45254:	20805e26 	beq	r4,r2,453d0 <___vfprintf_internal_r+0x2088>
   45258:	d8c02617 	ldw	r3,152(sp)
   4525c:	e0f9883a 	add	fp,fp,r3
   45260:	003e0a06 	br	44a8c <__alt_data_end+0xfffd2a8c>
   45264:	00c00b44 	movi	r3,45
   45268:	24e0003c 	xorhi	r19,r4,32768
   4526c:	d8c02a05 	stb	r3,168(sp)
   45270:	003de906 	br	44a18 <__alt_data_end+0xfffd2a18>
   45274:	d8c03217 	ldw	r3,200(sp)
   45278:	00c07a0e 	bge	zero,r3,45464 <___vfprintf_internal_r+0x211c>
   4527c:	00800044 	movi	r2,1
   45280:	d9003317 	ldw	r4,204(sp)
   45284:	1105883a 	add	r2,r2,r4
   45288:	d8802e15 	stw	r2,184(sp)
   4528c:	10004e16 	blt	r2,zero,453c8 <___vfprintf_internal_r+0x2080>
   45290:	044019c4 	movi	r17,103
   45294:	003e2106 	br	44b1c <__alt_data_end+0xfffd2b1c>
   45298:	d9002917 	ldw	r4,164(sp)
   4529c:	d8802104 	addi	r2,sp,132
   452a0:	d8800315 	stw	r2,12(sp)
   452a4:	d9000015 	stw	r4,0(sp)
   452a8:	d8802504 	addi	r2,sp,148
   452ac:	d9403617 	ldw	r5,216(sp)
   452b0:	d9002c17 	ldw	r4,176(sp)
   452b4:	d8800215 	stw	r2,8(sp)
   452b8:	d8802604 	addi	r2,sp,152
   452bc:	d8800115 	stw	r2,4(sp)
   452c0:	01c000c4 	movi	r7,3
   452c4:	980d883a 	mov	r6,r19
   452c8:	da003d15 	stw	r8,244(sp)
   452cc:	0045a200 	call	45a20 <_dtoa_r>
   452d0:	d8c02917 	ldw	r3,164(sp)
   452d4:	da003d17 	ldw	r8,244(sp)
   452d8:	1021883a 	mov	r16,r2
   452dc:	00801184 	movi	r2,70
   452e0:	80f9883a 	add	fp,r16,r3
   452e4:	88bfd926 	beq	r17,r2,4524c <__alt_data_end+0xfffd324c>
   452e8:	003de806 	br	44a8c <__alt_data_end+0xfffd2a8c>
   452ec:	d9002917 	ldw	r4,164(sp)
   452f0:	00c04d0e 	bge	zero,r3,45428 <___vfprintf_internal_r+0x20e0>
   452f4:	2000441e 	bne	r4,zero,45408 <___vfprintf_internal_r+0x20c0>
   452f8:	9480004c 	andi	r18,r18,1
   452fc:	9000421e 	bne	r18,zero,45408 <___vfprintf_internal_r+0x20c0>
   45300:	1805883a 	mov	r2,r3
   45304:	18007016 	blt	r3,zero,454c8 <___vfprintf_internal_r+0x2180>
   45308:	d8c03217 	ldw	r3,200(sp)
   4530c:	d8c02e15 	stw	r3,184(sp)
   45310:	003e0206 	br	44b1c <__alt_data_end+0xfffd2b1c>
   45314:	df0022c4 	addi	fp,sp,139
   45318:	dc002915 	stw	r16,164(sp)
   4531c:	4027883a 	mov	r19,r8
   45320:	e021883a 	mov	r16,fp
   45324:	b009883a 	mov	r4,r22
   45328:	01400284 	movi	r5,10
   4532c:	004185c0 	call	4185c <__modsi3>
   45330:	10800c04 	addi	r2,r2,48
   45334:	843fffc4 	addi	r16,r16,-1
   45338:	b009883a 	mov	r4,r22
   4533c:	01400284 	movi	r5,10
   45340:	80800005 	stb	r2,0(r16)
   45344:	00417d80 	call	417d8 <__divsi3>
   45348:	102d883a 	mov	r22,r2
   4534c:	00800244 	movi	r2,9
   45350:	15bff416 	blt	r2,r22,45324 <__alt_data_end+0xfffd3324>
   45354:	9811883a 	mov	r8,r19
   45358:	b0800c04 	addi	r2,r22,48
   4535c:	8027883a 	mov	r19,r16
   45360:	997fffc4 	addi	r5,r19,-1
   45364:	98bfffc5 	stb	r2,-1(r19)
   45368:	dc002917 	ldw	r16,164(sp)
   4536c:	2f006a2e 	bgeu	r5,fp,45518 <___vfprintf_internal_r+0x21d0>
   45370:	d9c02384 	addi	r7,sp,142
   45374:	3ccfc83a 	sub	r7,r7,r19
   45378:	d9002344 	addi	r4,sp,141
   4537c:	e1cf883a 	add	r7,fp,r7
   45380:	00000106 	br	45388 <___vfprintf_internal_r+0x2040>
   45384:	28800003 	ldbu	r2,0(r5)
   45388:	20800005 	stb	r2,0(r4)
   4538c:	21000044 	addi	r4,r4,1
   45390:	29400044 	addi	r5,r5,1
   45394:	393ffb1e 	bne	r7,r4,45384 <__alt_data_end+0xfffd3384>
   45398:	d8802304 	addi	r2,sp,140
   4539c:	14c5c83a 	sub	r2,r2,r19
   453a0:	d8c02344 	addi	r3,sp,141
   453a4:	1885883a 	add	r2,r3,r2
   453a8:	003f7006 	br	4516c <__alt_data_end+0xfffd316c>
   453ac:	0005883a 	mov	r2,zero
   453b0:	003f0f06 	br	44ff0 <__alt_data_end+0xfffd2ff0>
   453b4:	d8c03217 	ldw	r3,200(sp)
   453b8:	18c00044 	addi	r3,r3,1
   453bc:	d8c02e15 	stw	r3,184(sp)
   453c0:	1805883a 	mov	r2,r3
   453c4:	183fb20e 	bge	r3,zero,45290 <__alt_data_end+0xfffd3290>
   453c8:	0005883a 	mov	r2,zero
   453cc:	003fb006 	br	45290 <__alt_data_end+0xfffd3290>
   453d0:	d9003617 	ldw	r4,216(sp)
   453d4:	000d883a 	mov	r6,zero
   453d8:	000f883a 	mov	r7,zero
   453dc:	980b883a 	mov	r5,r19
   453e0:	d8c03c15 	stw	r3,240(sp)
   453e4:	da003d15 	stw	r8,244(sp)
   453e8:	004d8940 	call	4d894 <__eqdf2>
   453ec:	d8c03c17 	ldw	r3,240(sp)
   453f0:	da003d17 	ldw	r8,244(sp)
   453f4:	103f9826 	beq	r2,zero,45258 <__alt_data_end+0xfffd3258>
   453f8:	00800044 	movi	r2,1
   453fc:	10c7c83a 	sub	r3,r2,r3
   45400:	d8c02615 	stw	r3,152(sp)
   45404:	003f9506 	br	4525c <__alt_data_end+0xfffd325c>
   45408:	d9002917 	ldw	r4,164(sp)
   4540c:	d8c03217 	ldw	r3,200(sp)
   45410:	20800044 	addi	r2,r4,1
   45414:	1885883a 	add	r2,r3,r2
   45418:	d8802e15 	stw	r2,184(sp)
   4541c:	103dbf0e 	bge	r2,zero,44b1c <__alt_data_end+0xfffd2b1c>
   45420:	0005883a 	mov	r2,zero
   45424:	003dbd06 	br	44b1c <__alt_data_end+0xfffd2b1c>
   45428:	2000211e 	bne	r4,zero,454b0 <___vfprintf_internal_r+0x2168>
   4542c:	9480004c 	andi	r18,r18,1
   45430:	90001f1e 	bne	r18,zero,454b0 <___vfprintf_internal_r+0x2168>
   45434:	00800044 	movi	r2,1
   45438:	d8802e15 	stw	r2,184(sp)
   4543c:	003db706 	br	44b1c <__alt_data_end+0xfffd2b1c>
   45440:	00800b44 	movi	r2,45
   45444:	05adc83a 	sub	r22,zero,r22
   45448:	d8802305 	stb	r2,140(sp)
   4544c:	003f3f06 	br	4514c <__alt_data_end+0xfffd314c>
   45450:	0005883a 	mov	r2,zero
   45454:	003f5206 	br	451a0 <__alt_data_end+0xfffd31a0>
   45458:	90a4703a 	and	r18,r18,r2
   4545c:	903f4e26 	beq	r18,zero,45198 <__alt_data_end+0xfffd3198>
   45460:	003f4a06 	br	4518c <__alt_data_end+0xfffd318c>
   45464:	00800084 	movi	r2,2
   45468:	10c5c83a 	sub	r2,r2,r3
   4546c:	003f8406 	br	45280 <__alt_data_end+0xfffd3280>
   45470:	d8802d17 	ldw	r2,180(sp)
   45474:	d9002d17 	ldw	r4,180(sp)
   45478:	ac400043 	ldbu	r17,1(r21)
   4547c:	10800017 	ldw	r2,0(r2)
   45480:	582b883a 	mov	r21,r11
   45484:	d8802915 	stw	r2,164(sp)
   45488:	20800104 	addi	r2,r4,4
   4548c:	d9002917 	ldw	r4,164(sp)
   45490:	d8802d15 	stw	r2,180(sp)
   45494:	203e7a0e 	bge	r4,zero,44e80 <__alt_data_end+0xfffd2e80>
   45498:	8c403fcc 	andi	r17,r17,255
   4549c:	00bfffc4 	movi	r2,-1
   454a0:	8c40201c 	xori	r17,r17,128
   454a4:	d8802915 	stw	r2,164(sp)
   454a8:	8c7fe004 	addi	r17,r17,-128
   454ac:	00380706 	br	434cc <__alt_data_end+0xfffd14cc>
   454b0:	d8c02917 	ldw	r3,164(sp)
   454b4:	18c00084 	addi	r3,r3,2
   454b8:	d8c02e15 	stw	r3,184(sp)
   454bc:	1805883a 	mov	r2,r3
   454c0:	183d960e 	bge	r3,zero,44b1c <__alt_data_end+0xfffd2b1c>
   454c4:	003fd606 	br	45420 <__alt_data_end+0xfffd3420>
   454c8:	0005883a 	mov	r2,zero
   454cc:	003f8e06 	br	45308 <__alt_data_end+0xfffd3308>
   454d0:	9080004c 	andi	r2,r18,1
   454d4:	103f811e 	bne	r2,zero,452dc <__alt_data_end+0xfffd32dc>
   454d8:	d8802117 	ldw	r2,132(sp)
   454dc:	1405c83a 	sub	r2,r2,r16
   454e0:	d8803315 	stw	r2,204(sp)
   454e4:	b47ef326 	beq	r22,r17,450b4 <__alt_data_end+0xfffd30b4>
   454e8:	dd802617 	ldw	r22,152(sp)
   454ec:	003f1106 	br	45134 <__alt_data_end+0xfffd3134>
   454f0:	d9c02785 	stb	r7,158(sp)
   454f4:	00390406 	br	43908 <__alt_data_end+0xfffd1908>
   454f8:	d9c02785 	stb	r7,158(sp)
   454fc:	0038d306 	br	4384c <__alt_data_end+0xfffd184c>
   45500:	d9c02785 	stb	r7,158(sp)
   45504:	003a6106 	br	43e8c <__alt_data_end+0xfffd1e8c>
   45508:	d9c02785 	stb	r7,158(sp)
   4550c:	003af806 	br	440f0 <__alt_data_end+0xfffd20f0>
   45510:	0005883a 	mov	r2,zero
   45514:	003d7e06 	br	44b10 <__alt_data_end+0xfffd2b10>
   45518:	d8802344 	addi	r2,sp,141
   4551c:	003f1306 	br	4516c <__alt_data_end+0xfffd316c>
   45520:	d9c02785 	stb	r7,158(sp)
   45524:	00392306 	br	439b4 <__alt_data_end+0xfffd19b4>
   45528:	d9c02785 	stb	r7,158(sp)
   4552c:	003aa906 	br	43fd4 <__alt_data_end+0xfffd1fd4>
   45530:	d9c02785 	stb	r7,158(sp)
   45534:	003a3d06 	br	43e2c <__alt_data_end+0xfffd1e2c>
   45538:	d9c02785 	stb	r7,158(sp)
   4553c:	003aca06 	br	44068 <__alt_data_end+0xfffd2068>

00045540 <__vfprintf_internal>:
   45540:	00800174 	movhi	r2,5
   45544:	10931604 	addi	r2,r2,19544
   45548:	300f883a 	mov	r7,r6
   4554c:	280d883a 	mov	r6,r5
   45550:	200b883a 	mov	r5,r4
   45554:	11000017 	ldw	r4,0(r2)
   45558:	00433481 	jmpi	43348 <___vfprintf_internal_r>

0004555c <__sbprintf>:
   4555c:	2880030b 	ldhu	r2,12(r5)
   45560:	2ac01917 	ldw	r11,100(r5)
   45564:	2a80038b 	ldhu	r10,14(r5)
   45568:	2a400717 	ldw	r9,28(r5)
   4556c:	2a000917 	ldw	r8,36(r5)
   45570:	defee204 	addi	sp,sp,-1144
   45574:	00c10004 	movi	r3,1024
   45578:	dc011a15 	stw	r16,1128(sp)
   4557c:	10bfff4c 	andi	r2,r2,65533
   45580:	2821883a 	mov	r16,r5
   45584:	d8cb883a 	add	r5,sp,r3
   45588:	dc811c15 	stw	r18,1136(sp)
   4558c:	dc411b15 	stw	r17,1132(sp)
   45590:	dfc11d15 	stw	ra,1140(sp)
   45594:	2025883a 	mov	r18,r4
   45598:	d881030d 	sth	r2,1036(sp)
   4559c:	dac11915 	stw	r11,1124(sp)
   455a0:	da81038d 	sth	r10,1038(sp)
   455a4:	da410715 	stw	r9,1052(sp)
   455a8:	da010915 	stw	r8,1060(sp)
   455ac:	dec10015 	stw	sp,1024(sp)
   455b0:	dec10415 	stw	sp,1040(sp)
   455b4:	d8c10215 	stw	r3,1032(sp)
   455b8:	d8c10515 	stw	r3,1044(sp)
   455bc:	d8010615 	stw	zero,1048(sp)
   455c0:	00433480 	call	43348 <___vfprintf_internal_r>
   455c4:	1023883a 	mov	r17,r2
   455c8:	10000416 	blt	r2,zero,455dc <__sbprintf+0x80>
   455cc:	d9410004 	addi	r5,sp,1024
   455d0:	9009883a 	mov	r4,r18
   455d4:	00472c40 	call	472c4 <_fflush_r>
   455d8:	10000d1e 	bne	r2,zero,45610 <__sbprintf+0xb4>
   455dc:	d881030b 	ldhu	r2,1036(sp)
   455e0:	1080100c 	andi	r2,r2,64
   455e4:	10000326 	beq	r2,zero,455f4 <__sbprintf+0x98>
   455e8:	8080030b 	ldhu	r2,12(r16)
   455ec:	10801014 	ori	r2,r2,64
   455f0:	8080030d 	sth	r2,12(r16)
   455f4:	8805883a 	mov	r2,r17
   455f8:	dfc11d17 	ldw	ra,1140(sp)
   455fc:	dc811c17 	ldw	r18,1136(sp)
   45600:	dc411b17 	ldw	r17,1132(sp)
   45604:	dc011a17 	ldw	r16,1128(sp)
   45608:	dec11e04 	addi	sp,sp,1144
   4560c:	f800283a 	ret
   45610:	047fffc4 	movi	r17,-1
   45614:	003ff106 	br	455dc <__alt_data_end+0xfffd35dc>

00045618 <_write_r>:
   45618:	defffd04 	addi	sp,sp,-12
   4561c:	2805883a 	mov	r2,r5
   45620:	dc000015 	stw	r16,0(sp)
   45624:	04000174 	movhi	r16,5
   45628:	dc400115 	stw	r17,4(sp)
   4562c:	300b883a 	mov	r5,r6
   45630:	841ad804 	addi	r16,r16,27488
   45634:	2023883a 	mov	r17,r4
   45638:	380d883a 	mov	r6,r7
   4563c:	1009883a 	mov	r4,r2
   45640:	dfc00215 	stw	ra,8(sp)
   45644:	80000015 	stw	zero,0(r16)
   45648:	004fe700 	call	4fe70 <write>
   4564c:	00ffffc4 	movi	r3,-1
   45650:	10c00526 	beq	r2,r3,45668 <_write_r+0x50>
   45654:	dfc00217 	ldw	ra,8(sp)
   45658:	dc400117 	ldw	r17,4(sp)
   4565c:	dc000017 	ldw	r16,0(sp)
   45660:	dec00304 	addi	sp,sp,12
   45664:	f800283a 	ret
   45668:	80c00017 	ldw	r3,0(r16)
   4566c:	183ff926 	beq	r3,zero,45654 <__alt_data_end+0xfffd3654>
   45670:	88c00015 	stw	r3,0(r17)
   45674:	003ff706 	br	45654 <__alt_data_end+0xfffd3654>

00045678 <__swsetup_r>:
   45678:	00800174 	movhi	r2,5
   4567c:	defffd04 	addi	sp,sp,-12
   45680:	10931604 	addi	r2,r2,19544
   45684:	dc400115 	stw	r17,4(sp)
   45688:	2023883a 	mov	r17,r4
   4568c:	11000017 	ldw	r4,0(r2)
   45690:	dc000015 	stw	r16,0(sp)
   45694:	dfc00215 	stw	ra,8(sp)
   45698:	2821883a 	mov	r16,r5
   4569c:	20000226 	beq	r4,zero,456a8 <__swsetup_r+0x30>
   456a0:	20800e17 	ldw	r2,56(r4)
   456a4:	10003126 	beq	r2,zero,4576c <__swsetup_r+0xf4>
   456a8:	8080030b 	ldhu	r2,12(r16)
   456ac:	10c0020c 	andi	r3,r2,8
   456b0:	1009883a 	mov	r4,r2
   456b4:	18000f26 	beq	r3,zero,456f4 <__swsetup_r+0x7c>
   456b8:	80c00417 	ldw	r3,16(r16)
   456bc:	18001526 	beq	r3,zero,45714 <__swsetup_r+0x9c>
   456c0:	1100004c 	andi	r4,r2,1
   456c4:	20001c1e 	bne	r4,zero,45738 <__swsetup_r+0xc0>
   456c8:	1080008c 	andi	r2,r2,2
   456cc:	1000291e 	bne	r2,zero,45774 <__swsetup_r+0xfc>
   456d0:	80800517 	ldw	r2,20(r16)
   456d4:	80800215 	stw	r2,8(r16)
   456d8:	18001c26 	beq	r3,zero,4574c <__swsetup_r+0xd4>
   456dc:	0005883a 	mov	r2,zero
   456e0:	dfc00217 	ldw	ra,8(sp)
   456e4:	dc400117 	ldw	r17,4(sp)
   456e8:	dc000017 	ldw	r16,0(sp)
   456ec:	dec00304 	addi	sp,sp,12
   456f0:	f800283a 	ret
   456f4:	2080040c 	andi	r2,r4,16
   456f8:	10002e26 	beq	r2,zero,457b4 <__swsetup_r+0x13c>
   456fc:	2080010c 	andi	r2,r4,4
   45700:	10001e1e 	bne	r2,zero,4577c <__swsetup_r+0x104>
   45704:	80c00417 	ldw	r3,16(r16)
   45708:	20800214 	ori	r2,r4,8
   4570c:	8080030d 	sth	r2,12(r16)
   45710:	183feb1e 	bne	r3,zero,456c0 <__alt_data_end+0xfffd36c0>
   45714:	1100a00c 	andi	r4,r2,640
   45718:	01408004 	movi	r5,512
   4571c:	217fe826 	beq	r4,r5,456c0 <__alt_data_end+0xfffd36c0>
   45720:	800b883a 	mov	r5,r16
   45724:	8809883a 	mov	r4,r17
   45728:	00420c00 	call	420c0 <__smakebuf_r>
   4572c:	8080030b 	ldhu	r2,12(r16)
   45730:	80c00417 	ldw	r3,16(r16)
   45734:	003fe206 	br	456c0 <__alt_data_end+0xfffd36c0>
   45738:	80800517 	ldw	r2,20(r16)
   4573c:	80000215 	stw	zero,8(r16)
   45740:	0085c83a 	sub	r2,zero,r2
   45744:	80800615 	stw	r2,24(r16)
   45748:	183fe41e 	bne	r3,zero,456dc <__alt_data_end+0xfffd36dc>
   4574c:	80c0030b 	ldhu	r3,12(r16)
   45750:	0005883a 	mov	r2,zero
   45754:	1900200c 	andi	r4,r3,128
   45758:	203fe126 	beq	r4,zero,456e0 <__alt_data_end+0xfffd36e0>
   4575c:	18c01014 	ori	r3,r3,64
   45760:	80c0030d 	sth	r3,12(r16)
   45764:	00bfffc4 	movi	r2,-1
   45768:	003fdd06 	br	456e0 <__alt_data_end+0xfffd36e0>
   4576c:	00476a00 	call	476a0 <__sinit>
   45770:	003fcd06 	br	456a8 <__alt_data_end+0xfffd36a8>
   45774:	0005883a 	mov	r2,zero
   45778:	003fd606 	br	456d4 <__alt_data_end+0xfffd36d4>
   4577c:	81400c17 	ldw	r5,48(r16)
   45780:	28000626 	beq	r5,zero,4579c <__swsetup_r+0x124>
   45784:	80801004 	addi	r2,r16,64
   45788:	28800326 	beq	r5,r2,45798 <__swsetup_r+0x120>
   4578c:	8809883a 	mov	r4,r17
   45790:	00478c00 	call	478c0 <_free_r>
   45794:	8100030b 	ldhu	r4,12(r16)
   45798:	80000c15 	stw	zero,48(r16)
   4579c:	80c00417 	ldw	r3,16(r16)
   457a0:	00bff6c4 	movi	r2,-37
   457a4:	1108703a 	and	r4,r2,r4
   457a8:	80000115 	stw	zero,4(r16)
   457ac:	80c00015 	stw	r3,0(r16)
   457b0:	003fd506 	br	45708 <__alt_data_end+0xfffd3708>
   457b4:	00800244 	movi	r2,9
   457b8:	88800015 	stw	r2,0(r17)
   457bc:	20801014 	ori	r2,r4,64
   457c0:	8080030d 	sth	r2,12(r16)
   457c4:	00bfffc4 	movi	r2,-1
   457c8:	003fc506 	br	456e0 <__alt_data_end+0xfffd36e0>

000457cc <_close_r>:
   457cc:	defffd04 	addi	sp,sp,-12
   457d0:	dc000015 	stw	r16,0(sp)
   457d4:	04000174 	movhi	r16,5
   457d8:	dc400115 	stw	r17,4(sp)
   457dc:	841ad804 	addi	r16,r16,27488
   457e0:	2023883a 	mov	r17,r4
   457e4:	2809883a 	mov	r4,r5
   457e8:	dfc00215 	stw	ra,8(sp)
   457ec:	80000015 	stw	zero,0(r16)
   457f0:	004eda40 	call	4eda4 <close>
   457f4:	00ffffc4 	movi	r3,-1
   457f8:	10c00526 	beq	r2,r3,45810 <_close_r+0x44>
   457fc:	dfc00217 	ldw	ra,8(sp)
   45800:	dc400117 	ldw	r17,4(sp)
   45804:	dc000017 	ldw	r16,0(sp)
   45808:	dec00304 	addi	sp,sp,12
   4580c:	f800283a 	ret
   45810:	80c00017 	ldw	r3,0(r16)
   45814:	183ff926 	beq	r3,zero,457fc <__alt_data_end+0xfffd37fc>
   45818:	88c00015 	stw	r3,0(r17)
   4581c:	003ff706 	br	457fc <__alt_data_end+0xfffd37fc>

00045820 <quorem>:
   45820:	defff704 	addi	sp,sp,-36
   45824:	dc800215 	stw	r18,8(sp)
   45828:	20800417 	ldw	r2,16(r4)
   4582c:	2c800417 	ldw	r18,16(r5)
   45830:	dfc00815 	stw	ra,32(sp)
   45834:	ddc00715 	stw	r23,28(sp)
   45838:	dd800615 	stw	r22,24(sp)
   4583c:	dd400515 	stw	r21,20(sp)
   45840:	dd000415 	stw	r20,16(sp)
   45844:	dcc00315 	stw	r19,12(sp)
   45848:	dc400115 	stw	r17,4(sp)
   4584c:	dc000015 	stw	r16,0(sp)
   45850:	14807116 	blt	r2,r18,45a18 <quorem+0x1f8>
   45854:	94bfffc4 	addi	r18,r18,-1
   45858:	94ad883a 	add	r22,r18,r18
   4585c:	b5ad883a 	add	r22,r22,r22
   45860:	2c400504 	addi	r17,r5,20
   45864:	8da9883a 	add	r20,r17,r22
   45868:	25400504 	addi	r21,r4,20
   4586c:	282f883a 	mov	r23,r5
   45870:	adad883a 	add	r22,r21,r22
   45874:	a1400017 	ldw	r5,0(r20)
   45878:	2021883a 	mov	r16,r4
   4587c:	b1000017 	ldw	r4,0(r22)
   45880:	29400044 	addi	r5,r5,1
   45884:	00418d00 	call	418d0 <__udivsi3>
   45888:	1027883a 	mov	r19,r2
   4588c:	10002c26 	beq	r2,zero,45940 <quorem+0x120>
   45890:	a813883a 	mov	r9,r21
   45894:	880b883a 	mov	r5,r17
   45898:	0009883a 	mov	r4,zero
   4589c:	000d883a 	mov	r6,zero
   458a0:	2a000017 	ldw	r8,0(r5)
   458a4:	49c00017 	ldw	r7,0(r9)
   458a8:	29400104 	addi	r5,r5,4
   458ac:	40bfffcc 	andi	r2,r8,65535
   458b0:	14c5383a 	mul	r2,r2,r19
   458b4:	4010d43a 	srli	r8,r8,16
   458b8:	38ffffcc 	andi	r3,r7,65535
   458bc:	1105883a 	add	r2,r2,r4
   458c0:	1008d43a 	srli	r4,r2,16
   458c4:	44d1383a 	mul	r8,r8,r19
   458c8:	198d883a 	add	r6,r3,r6
   458cc:	10ffffcc 	andi	r3,r2,65535
   458d0:	30c7c83a 	sub	r3,r6,r3
   458d4:	380ed43a 	srli	r7,r7,16
   458d8:	4105883a 	add	r2,r8,r4
   458dc:	180dd43a 	srai	r6,r3,16
   458e0:	113fffcc 	andi	r4,r2,65535
   458e4:	390fc83a 	sub	r7,r7,r4
   458e8:	398d883a 	add	r6,r7,r6
   458ec:	300e943a 	slli	r7,r6,16
   458f0:	18ffffcc 	andi	r3,r3,65535
   458f4:	1008d43a 	srli	r4,r2,16
   458f8:	38ceb03a 	or	r7,r7,r3
   458fc:	49c00015 	stw	r7,0(r9)
   45900:	300dd43a 	srai	r6,r6,16
   45904:	4a400104 	addi	r9,r9,4
   45908:	a17fe52e 	bgeu	r20,r5,458a0 <__alt_data_end+0xfffd38a0>
   4590c:	b0800017 	ldw	r2,0(r22)
   45910:	10000b1e 	bne	r2,zero,45940 <quorem+0x120>
   45914:	b0bfff04 	addi	r2,r22,-4
   45918:	a880082e 	bgeu	r21,r2,4593c <quorem+0x11c>
   4591c:	b0ffff17 	ldw	r3,-4(r22)
   45920:	18000326 	beq	r3,zero,45930 <quorem+0x110>
   45924:	00000506 	br	4593c <quorem+0x11c>
   45928:	10c00017 	ldw	r3,0(r2)
   4592c:	1800031e 	bne	r3,zero,4593c <quorem+0x11c>
   45930:	10bfff04 	addi	r2,r2,-4
   45934:	94bfffc4 	addi	r18,r18,-1
   45938:	a8bffb36 	bltu	r21,r2,45928 <__alt_data_end+0xfffd3928>
   4593c:	84800415 	stw	r18,16(r16)
   45940:	b80b883a 	mov	r5,r23
   45944:	8009883a 	mov	r4,r16
   45948:	00490500 	call	49050 <__mcmp>
   4594c:	10002616 	blt	r2,zero,459e8 <quorem+0x1c8>
   45950:	9cc00044 	addi	r19,r19,1
   45954:	a805883a 	mov	r2,r21
   45958:	000b883a 	mov	r5,zero
   4595c:	11000017 	ldw	r4,0(r2)
   45960:	89800017 	ldw	r6,0(r17)
   45964:	10800104 	addi	r2,r2,4
   45968:	20ffffcc 	andi	r3,r4,65535
   4596c:	194b883a 	add	r5,r3,r5
   45970:	30ffffcc 	andi	r3,r6,65535
   45974:	28c7c83a 	sub	r3,r5,r3
   45978:	300cd43a 	srli	r6,r6,16
   4597c:	2008d43a 	srli	r4,r4,16
   45980:	180bd43a 	srai	r5,r3,16
   45984:	18ffffcc 	andi	r3,r3,65535
   45988:	2189c83a 	sub	r4,r4,r6
   4598c:	2149883a 	add	r4,r4,r5
   45990:	200c943a 	slli	r6,r4,16
   45994:	8c400104 	addi	r17,r17,4
   45998:	200bd43a 	srai	r5,r4,16
   4599c:	30c6b03a 	or	r3,r6,r3
   459a0:	10ffff15 	stw	r3,-4(r2)
   459a4:	a47fed2e 	bgeu	r20,r17,4595c <__alt_data_end+0xfffd395c>
   459a8:	9485883a 	add	r2,r18,r18
   459ac:	1085883a 	add	r2,r2,r2
   459b0:	a887883a 	add	r3,r21,r2
   459b4:	18800017 	ldw	r2,0(r3)
   459b8:	10000b1e 	bne	r2,zero,459e8 <quorem+0x1c8>
   459bc:	18bfff04 	addi	r2,r3,-4
   459c0:	a880082e 	bgeu	r21,r2,459e4 <quorem+0x1c4>
   459c4:	18ffff17 	ldw	r3,-4(r3)
   459c8:	18000326 	beq	r3,zero,459d8 <quorem+0x1b8>
   459cc:	00000506 	br	459e4 <quorem+0x1c4>
   459d0:	10c00017 	ldw	r3,0(r2)
   459d4:	1800031e 	bne	r3,zero,459e4 <quorem+0x1c4>
   459d8:	10bfff04 	addi	r2,r2,-4
   459dc:	94bfffc4 	addi	r18,r18,-1
   459e0:	a8bffb36 	bltu	r21,r2,459d0 <__alt_data_end+0xfffd39d0>
   459e4:	84800415 	stw	r18,16(r16)
   459e8:	9805883a 	mov	r2,r19
   459ec:	dfc00817 	ldw	ra,32(sp)
   459f0:	ddc00717 	ldw	r23,28(sp)
   459f4:	dd800617 	ldw	r22,24(sp)
   459f8:	dd400517 	ldw	r21,20(sp)
   459fc:	dd000417 	ldw	r20,16(sp)
   45a00:	dcc00317 	ldw	r19,12(sp)
   45a04:	dc800217 	ldw	r18,8(sp)
   45a08:	dc400117 	ldw	r17,4(sp)
   45a0c:	dc000017 	ldw	r16,0(sp)
   45a10:	dec00904 	addi	sp,sp,36
   45a14:	f800283a 	ret
   45a18:	0005883a 	mov	r2,zero
   45a1c:	003ff306 	br	459ec <__alt_data_end+0xfffd39ec>

00045a20 <_dtoa_r>:
   45a20:	20801017 	ldw	r2,64(r4)
   45a24:	deffde04 	addi	sp,sp,-136
   45a28:	df002015 	stw	fp,128(sp)
   45a2c:	dcc01b15 	stw	r19,108(sp)
   45a30:	dc801a15 	stw	r18,104(sp)
   45a34:	dc401915 	stw	r17,100(sp)
   45a38:	dc001815 	stw	r16,96(sp)
   45a3c:	dfc02115 	stw	ra,132(sp)
   45a40:	ddc01f15 	stw	r23,124(sp)
   45a44:	dd801e15 	stw	r22,120(sp)
   45a48:	dd401d15 	stw	r21,116(sp)
   45a4c:	dd001c15 	stw	r20,112(sp)
   45a50:	d9c00315 	stw	r7,12(sp)
   45a54:	2039883a 	mov	fp,r4
   45a58:	3023883a 	mov	r17,r6
   45a5c:	2825883a 	mov	r18,r5
   45a60:	dc002417 	ldw	r16,144(sp)
   45a64:	3027883a 	mov	r19,r6
   45a68:	10000826 	beq	r2,zero,45a8c <_dtoa_r+0x6c>
   45a6c:	21801117 	ldw	r6,68(r4)
   45a70:	00c00044 	movi	r3,1
   45a74:	100b883a 	mov	r5,r2
   45a78:	1986983a 	sll	r3,r3,r6
   45a7c:	11800115 	stw	r6,4(r2)
   45a80:	10c00215 	stw	r3,8(r2)
   45a84:	00488300 	call	48830 <_Bfree>
   45a88:	e0001015 	stw	zero,64(fp)
   45a8c:	88002e16 	blt	r17,zero,45b48 <_dtoa_r+0x128>
   45a90:	80000015 	stw	zero,0(r16)
   45a94:	889ffc2c 	andhi	r2,r17,32752
   45a98:	00dffc34 	movhi	r3,32752
   45a9c:	10c01c26 	beq	r2,r3,45b10 <_dtoa_r+0xf0>
   45aa0:	000d883a 	mov	r6,zero
   45aa4:	000f883a 	mov	r7,zero
   45aa8:	9009883a 	mov	r4,r18
   45aac:	980b883a 	mov	r5,r19
   45ab0:	004d8940 	call	4d894 <__eqdf2>
   45ab4:	10002b1e 	bne	r2,zero,45b64 <_dtoa_r+0x144>
   45ab8:	d9c02317 	ldw	r7,140(sp)
   45abc:	00800044 	movi	r2,1
   45ac0:	38800015 	stw	r2,0(r7)
   45ac4:	d8802517 	ldw	r2,148(sp)
   45ac8:	10019e26 	beq	r2,zero,46144 <_dtoa_r+0x724>
   45acc:	d8c02517 	ldw	r3,148(sp)
   45ad0:	00800174 	movhi	r2,5
   45ad4:	108a2d44 	addi	r2,r2,10421
   45ad8:	18800015 	stw	r2,0(r3)
   45adc:	10bfffc4 	addi	r2,r2,-1
   45ae0:	dfc02117 	ldw	ra,132(sp)
   45ae4:	df002017 	ldw	fp,128(sp)
   45ae8:	ddc01f17 	ldw	r23,124(sp)
   45aec:	dd801e17 	ldw	r22,120(sp)
   45af0:	dd401d17 	ldw	r21,116(sp)
   45af4:	dd001c17 	ldw	r20,112(sp)
   45af8:	dcc01b17 	ldw	r19,108(sp)
   45afc:	dc801a17 	ldw	r18,104(sp)
   45b00:	dc401917 	ldw	r17,100(sp)
   45b04:	dc001817 	ldw	r16,96(sp)
   45b08:	dec02204 	addi	sp,sp,136
   45b0c:	f800283a 	ret
   45b10:	d8c02317 	ldw	r3,140(sp)
   45b14:	0089c3c4 	movi	r2,9999
   45b18:	18800015 	stw	r2,0(r3)
   45b1c:	90017726 	beq	r18,zero,460fc <_dtoa_r+0x6dc>
   45b20:	00800174 	movhi	r2,5
   45b24:	108a3904 	addi	r2,r2,10468
   45b28:	d9002517 	ldw	r4,148(sp)
   45b2c:	203fec26 	beq	r4,zero,45ae0 <__alt_data_end+0xfffd3ae0>
   45b30:	10c000c7 	ldb	r3,3(r2)
   45b34:	1801781e 	bne	r3,zero,46118 <_dtoa_r+0x6f8>
   45b38:	10c000c4 	addi	r3,r2,3
   45b3c:	d9802517 	ldw	r6,148(sp)
   45b40:	30c00015 	stw	r3,0(r6)
   45b44:	003fe606 	br	45ae0 <__alt_data_end+0xfffd3ae0>
   45b48:	04e00034 	movhi	r19,32768
   45b4c:	9cffffc4 	addi	r19,r19,-1
   45b50:	00800044 	movi	r2,1
   45b54:	8ce6703a 	and	r19,r17,r19
   45b58:	80800015 	stw	r2,0(r16)
   45b5c:	9823883a 	mov	r17,r19
   45b60:	003fcc06 	br	45a94 <__alt_data_end+0xfffd3a94>
   45b64:	d8800204 	addi	r2,sp,8
   45b68:	d8800015 	stw	r2,0(sp)
   45b6c:	d9c00104 	addi	r7,sp,4
   45b70:	900b883a 	mov	r5,r18
   45b74:	980d883a 	mov	r6,r19
   45b78:	e009883a 	mov	r4,fp
   45b7c:	8820d53a 	srli	r16,r17,20
   45b80:	004941c0 	call	4941c <__d2b>
   45b84:	d8800915 	stw	r2,36(sp)
   45b88:	8001651e 	bne	r16,zero,46120 <_dtoa_r+0x700>
   45b8c:	dd800217 	ldw	r22,8(sp)
   45b90:	dc000117 	ldw	r16,4(sp)
   45b94:	00800804 	movi	r2,32
   45b98:	b421883a 	add	r16,r22,r16
   45b9c:	80c10c84 	addi	r3,r16,1074
   45ba0:	10c2d10e 	bge	r2,r3,466e8 <_dtoa_r+0xcc8>
   45ba4:	00801004 	movi	r2,64
   45ba8:	81010484 	addi	r4,r16,1042
   45bac:	10c7c83a 	sub	r3,r2,r3
   45bb0:	9108d83a 	srl	r4,r18,r4
   45bb4:	88e2983a 	sll	r17,r17,r3
   45bb8:	2448b03a 	or	r4,r4,r17
   45bbc:	004ec5c0 	call	4ec5c <__floatunsidf>
   45bc0:	017f8434 	movhi	r5,65040
   45bc4:	01800044 	movi	r6,1
   45bc8:	1009883a 	mov	r4,r2
   45bcc:	194b883a 	add	r5,r3,r5
   45bd0:	843fffc4 	addi	r16,r16,-1
   45bd4:	d9801115 	stw	r6,68(sp)
   45bd8:	000d883a 	mov	r6,zero
   45bdc:	01cffe34 	movhi	r7,16376
   45be0:	004e2040 	call	4e204 <__subdf3>
   45be4:	0198dbf4 	movhi	r6,25455
   45be8:	01cff4f4 	movhi	r7,16339
   45bec:	3190d844 	addi	r6,r6,17249
   45bf0:	39e1e9c4 	addi	r7,r7,-30809
   45bf4:	1009883a 	mov	r4,r2
   45bf8:	180b883a 	mov	r5,r3
   45bfc:	004daec0 	call	4daec <__muldf3>
   45c00:	01a2d874 	movhi	r6,35681
   45c04:	01cff1f4 	movhi	r7,16327
   45c08:	31b22cc4 	addi	r6,r6,-14157
   45c0c:	39e28a04 	addi	r7,r7,-30168
   45c10:	180b883a 	mov	r5,r3
   45c14:	1009883a 	mov	r4,r2
   45c18:	004c7000 	call	4c700 <__adddf3>
   45c1c:	8009883a 	mov	r4,r16
   45c20:	1029883a 	mov	r20,r2
   45c24:	1823883a 	mov	r17,r3
   45c28:	004eb800 	call	4eb80 <__floatsidf>
   45c2c:	019427f4 	movhi	r6,20639
   45c30:	01cff4f4 	movhi	r7,16339
   45c34:	319e7ec4 	addi	r6,r6,31227
   45c38:	39d104c4 	addi	r7,r7,17427
   45c3c:	1009883a 	mov	r4,r2
   45c40:	180b883a 	mov	r5,r3
   45c44:	004daec0 	call	4daec <__muldf3>
   45c48:	100d883a 	mov	r6,r2
   45c4c:	180f883a 	mov	r7,r3
   45c50:	a009883a 	mov	r4,r20
   45c54:	880b883a 	mov	r5,r17
   45c58:	004c7000 	call	4c700 <__adddf3>
   45c5c:	1009883a 	mov	r4,r2
   45c60:	180b883a 	mov	r5,r3
   45c64:	1029883a 	mov	r20,r2
   45c68:	1823883a 	mov	r17,r3
   45c6c:	004eb000 	call	4eb00 <__fixdfsi>
   45c70:	000d883a 	mov	r6,zero
   45c74:	000f883a 	mov	r7,zero
   45c78:	a009883a 	mov	r4,r20
   45c7c:	880b883a 	mov	r5,r17
   45c80:	d8800515 	stw	r2,20(sp)
   45c84:	004d9f80 	call	4d9f8 <__ledf2>
   45c88:	10028716 	blt	r2,zero,466a8 <_dtoa_r+0xc88>
   45c8c:	d8c00517 	ldw	r3,20(sp)
   45c90:	00800584 	movi	r2,22
   45c94:	10c27536 	bltu	r2,r3,4666c <_dtoa_r+0xc4c>
   45c98:	180490fa 	slli	r2,r3,3
   45c9c:	00c00174 	movhi	r3,5
   45ca0:	18ca5404 	addi	r3,r3,10576
   45ca4:	1885883a 	add	r2,r3,r2
   45ca8:	11000017 	ldw	r4,0(r2)
   45cac:	11400117 	ldw	r5,4(r2)
   45cb0:	900d883a 	mov	r6,r18
   45cb4:	980f883a 	mov	r7,r19
   45cb8:	004d91c0 	call	4d91c <__gedf2>
   45cbc:	00828d0e 	bge	zero,r2,466f4 <_dtoa_r+0xcd4>
   45cc0:	d9000517 	ldw	r4,20(sp)
   45cc4:	d8000e15 	stw	zero,56(sp)
   45cc8:	213fffc4 	addi	r4,r4,-1
   45ccc:	d9000515 	stw	r4,20(sp)
   45cd0:	b42dc83a 	sub	r22,r22,r16
   45cd4:	b5bfffc4 	addi	r22,r22,-1
   45cd8:	b0026f16 	blt	r22,zero,46698 <_dtoa_r+0xc78>
   45cdc:	d8000815 	stw	zero,32(sp)
   45ce0:	d9c00517 	ldw	r7,20(sp)
   45ce4:	38026416 	blt	r7,zero,46678 <_dtoa_r+0xc58>
   45ce8:	b1ed883a 	add	r22,r22,r7
   45cec:	d9c00d15 	stw	r7,52(sp)
   45cf0:	d8000a15 	stw	zero,40(sp)
   45cf4:	d9800317 	ldw	r6,12(sp)
   45cf8:	00800244 	movi	r2,9
   45cfc:	11811436 	bltu	r2,r6,46150 <_dtoa_r+0x730>
   45d00:	00800144 	movi	r2,5
   45d04:	1184e10e 	bge	r2,r6,4708c <_dtoa_r+0x166c>
   45d08:	31bfff04 	addi	r6,r6,-4
   45d0c:	d9800315 	stw	r6,12(sp)
   45d10:	0023883a 	mov	r17,zero
   45d14:	d9800317 	ldw	r6,12(sp)
   45d18:	008000c4 	movi	r2,3
   45d1c:	30836726 	beq	r6,r2,46abc <_dtoa_r+0x109c>
   45d20:	1183410e 	bge	r2,r6,46a28 <_dtoa_r+0x1008>
   45d24:	d9c00317 	ldw	r7,12(sp)
   45d28:	00800104 	movi	r2,4
   45d2c:	38827c26 	beq	r7,r2,46720 <_dtoa_r+0xd00>
   45d30:	00800144 	movi	r2,5
   45d34:	3884c41e 	bne	r7,r2,47048 <_dtoa_r+0x1628>
   45d38:	00800044 	movi	r2,1
   45d3c:	d8800b15 	stw	r2,44(sp)
   45d40:	d8c00517 	ldw	r3,20(sp)
   45d44:	d9002217 	ldw	r4,136(sp)
   45d48:	1907883a 	add	r3,r3,r4
   45d4c:	19800044 	addi	r6,r3,1
   45d50:	d8c00c15 	stw	r3,48(sp)
   45d54:	d9800615 	stw	r6,24(sp)
   45d58:	0183a40e 	bge	zero,r6,46bec <_dtoa_r+0x11cc>
   45d5c:	d9800617 	ldw	r6,24(sp)
   45d60:	3021883a 	mov	r16,r6
   45d64:	e0001115 	stw	zero,68(fp)
   45d68:	008005c4 	movi	r2,23
   45d6c:	1184c92e 	bgeu	r2,r6,47094 <_dtoa_r+0x1674>
   45d70:	00c00044 	movi	r3,1
   45d74:	00800104 	movi	r2,4
   45d78:	1085883a 	add	r2,r2,r2
   45d7c:	11000504 	addi	r4,r2,20
   45d80:	180b883a 	mov	r5,r3
   45d84:	18c00044 	addi	r3,r3,1
   45d88:	313ffb2e 	bgeu	r6,r4,45d78 <__alt_data_end+0xfffd3d78>
   45d8c:	e1401115 	stw	r5,68(fp)
   45d90:	e009883a 	mov	r4,fp
   45d94:	00487880 	call	48788 <_Balloc>
   45d98:	d8800715 	stw	r2,28(sp)
   45d9c:	e0801015 	stw	r2,64(fp)
   45da0:	00800384 	movi	r2,14
   45da4:	1400f736 	bltu	r2,r16,46184 <_dtoa_r+0x764>
   45da8:	8800f626 	beq	r17,zero,46184 <_dtoa_r+0x764>
   45dac:	d9c00517 	ldw	r7,20(sp)
   45db0:	01c39a0e 	bge	zero,r7,46c1c <_dtoa_r+0x11fc>
   45db4:	388003cc 	andi	r2,r7,15
   45db8:	100490fa 	slli	r2,r2,3
   45dbc:	382bd13a 	srai	r21,r7,4
   45dc0:	00c00174 	movhi	r3,5
   45dc4:	18ca5404 	addi	r3,r3,10576
   45dc8:	1885883a 	add	r2,r3,r2
   45dcc:	a8c0040c 	andi	r3,r21,16
   45dd0:	12400017 	ldw	r9,0(r2)
   45dd4:	12000117 	ldw	r8,4(r2)
   45dd8:	18037926 	beq	r3,zero,46bc0 <_dtoa_r+0x11a0>
   45ddc:	00800174 	movhi	r2,5
   45de0:	108a4a04 	addi	r2,r2,10536
   45de4:	11800817 	ldw	r6,32(r2)
   45de8:	11c00917 	ldw	r7,36(r2)
   45dec:	9009883a 	mov	r4,r18
   45df0:	980b883a 	mov	r5,r19
   45df4:	da001715 	stw	r8,92(sp)
   45df8:	da401615 	stw	r9,88(sp)
   45dfc:	004cfac0 	call	4cfac <__divdf3>
   45e00:	da001717 	ldw	r8,92(sp)
   45e04:	da401617 	ldw	r9,88(sp)
   45e08:	ad4003cc 	andi	r21,r21,15
   45e0c:	040000c4 	movi	r16,3
   45e10:	1023883a 	mov	r17,r2
   45e14:	1829883a 	mov	r20,r3
   45e18:	a8001126 	beq	r21,zero,45e60 <_dtoa_r+0x440>
   45e1c:	05c00174 	movhi	r23,5
   45e20:	bdca4a04 	addi	r23,r23,10536
   45e24:	4805883a 	mov	r2,r9
   45e28:	4007883a 	mov	r3,r8
   45e2c:	a980004c 	andi	r6,r21,1
   45e30:	1009883a 	mov	r4,r2
   45e34:	a82bd07a 	srai	r21,r21,1
   45e38:	180b883a 	mov	r5,r3
   45e3c:	30000426 	beq	r6,zero,45e50 <_dtoa_r+0x430>
   45e40:	b9800017 	ldw	r6,0(r23)
   45e44:	b9c00117 	ldw	r7,4(r23)
   45e48:	84000044 	addi	r16,r16,1
   45e4c:	004daec0 	call	4daec <__muldf3>
   45e50:	bdc00204 	addi	r23,r23,8
   45e54:	a83ff51e 	bne	r21,zero,45e2c <__alt_data_end+0xfffd3e2c>
   45e58:	1013883a 	mov	r9,r2
   45e5c:	1811883a 	mov	r8,r3
   45e60:	480d883a 	mov	r6,r9
   45e64:	400f883a 	mov	r7,r8
   45e68:	8809883a 	mov	r4,r17
   45e6c:	a00b883a 	mov	r5,r20
   45e70:	004cfac0 	call	4cfac <__divdf3>
   45e74:	d8800f15 	stw	r2,60(sp)
   45e78:	d8c01015 	stw	r3,64(sp)
   45e7c:	d8c00e17 	ldw	r3,56(sp)
   45e80:	18000626 	beq	r3,zero,45e9c <_dtoa_r+0x47c>
   45e84:	d9000f17 	ldw	r4,60(sp)
   45e88:	d9401017 	ldw	r5,64(sp)
   45e8c:	000d883a 	mov	r6,zero
   45e90:	01cffc34 	movhi	r7,16368
   45e94:	004d9f80 	call	4d9f8 <__ledf2>
   45e98:	10040b16 	blt	r2,zero,46ec8 <_dtoa_r+0x14a8>
   45e9c:	8009883a 	mov	r4,r16
   45ea0:	004eb800 	call	4eb80 <__floatsidf>
   45ea4:	d9800f17 	ldw	r6,60(sp)
   45ea8:	d9c01017 	ldw	r7,64(sp)
   45eac:	1009883a 	mov	r4,r2
   45eb0:	180b883a 	mov	r5,r3
   45eb4:	004daec0 	call	4daec <__muldf3>
   45eb8:	000d883a 	mov	r6,zero
   45ebc:	01d00734 	movhi	r7,16412
   45ec0:	1009883a 	mov	r4,r2
   45ec4:	180b883a 	mov	r5,r3
   45ec8:	004c7000 	call	4c700 <__adddf3>
   45ecc:	1021883a 	mov	r16,r2
   45ed0:	d8800617 	ldw	r2,24(sp)
   45ed4:	047f3034 	movhi	r17,64704
   45ed8:	1c63883a 	add	r17,r3,r17
   45edc:	10031826 	beq	r2,zero,46b40 <_dtoa_r+0x1120>
   45ee0:	d8c00517 	ldw	r3,20(sp)
   45ee4:	db000617 	ldw	r12,24(sp)
   45ee8:	d8c01315 	stw	r3,76(sp)
   45eec:	d9000b17 	ldw	r4,44(sp)
   45ef0:	20038f26 	beq	r4,zero,46d30 <_dtoa_r+0x1310>
   45ef4:	60bfffc4 	addi	r2,r12,-1
   45ef8:	100490fa 	slli	r2,r2,3
   45efc:	00c00174 	movhi	r3,5
   45f00:	18ca5404 	addi	r3,r3,10576
   45f04:	1885883a 	add	r2,r3,r2
   45f08:	11800017 	ldw	r6,0(r2)
   45f0c:	11c00117 	ldw	r7,4(r2)
   45f10:	d8800717 	ldw	r2,28(sp)
   45f14:	0009883a 	mov	r4,zero
   45f18:	014ff834 	movhi	r5,16352
   45f1c:	db001615 	stw	r12,88(sp)
   45f20:	15c00044 	addi	r23,r2,1
   45f24:	004cfac0 	call	4cfac <__divdf3>
   45f28:	800d883a 	mov	r6,r16
   45f2c:	880f883a 	mov	r7,r17
   45f30:	1009883a 	mov	r4,r2
   45f34:	180b883a 	mov	r5,r3
   45f38:	004e2040 	call	4e204 <__subdf3>
   45f3c:	d9401017 	ldw	r5,64(sp)
   45f40:	d9000f17 	ldw	r4,60(sp)
   45f44:	102b883a 	mov	r21,r2
   45f48:	d8c01215 	stw	r3,72(sp)
   45f4c:	004eb000 	call	4eb00 <__fixdfsi>
   45f50:	1009883a 	mov	r4,r2
   45f54:	1029883a 	mov	r20,r2
   45f58:	004eb800 	call	4eb80 <__floatsidf>
   45f5c:	d9000f17 	ldw	r4,60(sp)
   45f60:	d9401017 	ldw	r5,64(sp)
   45f64:	100d883a 	mov	r6,r2
   45f68:	180f883a 	mov	r7,r3
   45f6c:	004e2040 	call	4e204 <__subdf3>
   45f70:	1823883a 	mov	r17,r3
   45f74:	d8c00717 	ldw	r3,28(sp)
   45f78:	d9401217 	ldw	r5,72(sp)
   45f7c:	a2000c04 	addi	r8,r20,48
   45f80:	1021883a 	mov	r16,r2
   45f84:	1a000005 	stb	r8,0(r3)
   45f88:	800d883a 	mov	r6,r16
   45f8c:	880f883a 	mov	r7,r17
   45f90:	a809883a 	mov	r4,r21
   45f94:	4029883a 	mov	r20,r8
   45f98:	004d91c0 	call	4d91c <__gedf2>
   45f9c:	00841d16 	blt	zero,r2,47014 <_dtoa_r+0x15f4>
   45fa0:	800d883a 	mov	r6,r16
   45fa4:	880f883a 	mov	r7,r17
   45fa8:	0009883a 	mov	r4,zero
   45fac:	014ffc34 	movhi	r5,16368
   45fb0:	004e2040 	call	4e204 <__subdf3>
   45fb4:	d9401217 	ldw	r5,72(sp)
   45fb8:	100d883a 	mov	r6,r2
   45fbc:	180f883a 	mov	r7,r3
   45fc0:	a809883a 	mov	r4,r21
   45fc4:	004d91c0 	call	4d91c <__gedf2>
   45fc8:	db001617 	ldw	r12,88(sp)
   45fcc:	00840e16 	blt	zero,r2,47008 <_dtoa_r+0x15e8>
   45fd0:	00800044 	movi	r2,1
   45fd4:	13006b0e 	bge	r2,r12,46184 <_dtoa_r+0x764>
   45fd8:	d9000717 	ldw	r4,28(sp)
   45fdc:	dd800f15 	stw	r22,60(sp)
   45fe0:	dcc01015 	stw	r19,64(sp)
   45fe4:	2319883a 	add	r12,r4,r12
   45fe8:	dcc01217 	ldw	r19,72(sp)
   45fec:	602d883a 	mov	r22,r12
   45ff0:	dc801215 	stw	r18,72(sp)
   45ff4:	b825883a 	mov	r18,r23
   45ff8:	00000906 	br	46020 <_dtoa_r+0x600>
   45ffc:	004e2040 	call	4e204 <__subdf3>
   46000:	a80d883a 	mov	r6,r21
   46004:	980f883a 	mov	r7,r19
   46008:	1009883a 	mov	r4,r2
   4600c:	180b883a 	mov	r5,r3
   46010:	004d9f80 	call	4d9f8 <__ledf2>
   46014:	1003e816 	blt	r2,zero,46fb8 <_dtoa_r+0x1598>
   46018:	b825883a 	mov	r18,r23
   4601c:	bd83e926 	beq	r23,r22,46fc4 <_dtoa_r+0x15a4>
   46020:	a809883a 	mov	r4,r21
   46024:	980b883a 	mov	r5,r19
   46028:	000d883a 	mov	r6,zero
   4602c:	01d00934 	movhi	r7,16420
   46030:	004daec0 	call	4daec <__muldf3>
   46034:	000d883a 	mov	r6,zero
   46038:	01d00934 	movhi	r7,16420
   4603c:	8009883a 	mov	r4,r16
   46040:	880b883a 	mov	r5,r17
   46044:	102b883a 	mov	r21,r2
   46048:	1827883a 	mov	r19,r3
   4604c:	004daec0 	call	4daec <__muldf3>
   46050:	180b883a 	mov	r5,r3
   46054:	1009883a 	mov	r4,r2
   46058:	1821883a 	mov	r16,r3
   4605c:	1023883a 	mov	r17,r2
   46060:	004eb000 	call	4eb00 <__fixdfsi>
   46064:	1009883a 	mov	r4,r2
   46068:	1029883a 	mov	r20,r2
   4606c:	004eb800 	call	4eb80 <__floatsidf>
   46070:	8809883a 	mov	r4,r17
   46074:	800b883a 	mov	r5,r16
   46078:	100d883a 	mov	r6,r2
   4607c:	180f883a 	mov	r7,r3
   46080:	004e2040 	call	4e204 <__subdf3>
   46084:	a5000c04 	addi	r20,r20,48
   46088:	a80d883a 	mov	r6,r21
   4608c:	980f883a 	mov	r7,r19
   46090:	1009883a 	mov	r4,r2
   46094:	180b883a 	mov	r5,r3
   46098:	95000005 	stb	r20,0(r18)
   4609c:	1021883a 	mov	r16,r2
   460a0:	1823883a 	mov	r17,r3
   460a4:	004d9f80 	call	4d9f8 <__ledf2>
   460a8:	bdc00044 	addi	r23,r23,1
   460ac:	800d883a 	mov	r6,r16
   460b0:	880f883a 	mov	r7,r17
   460b4:	0009883a 	mov	r4,zero
   460b8:	014ffc34 	movhi	r5,16368
   460bc:	103fcf0e 	bge	r2,zero,45ffc <__alt_data_end+0xfffd3ffc>
   460c0:	d8c01317 	ldw	r3,76(sp)
   460c4:	d8c00515 	stw	r3,20(sp)
   460c8:	d9400917 	ldw	r5,36(sp)
   460cc:	e009883a 	mov	r4,fp
   460d0:	00488300 	call	48830 <_Bfree>
   460d4:	d9000517 	ldw	r4,20(sp)
   460d8:	d9802317 	ldw	r6,140(sp)
   460dc:	d9c02517 	ldw	r7,148(sp)
   460e0:	b8000005 	stb	zero,0(r23)
   460e4:	20800044 	addi	r2,r4,1
   460e8:	30800015 	stw	r2,0(r6)
   460ec:	3802aa26 	beq	r7,zero,46b98 <_dtoa_r+0x1178>
   460f0:	3dc00015 	stw	r23,0(r7)
   460f4:	d8800717 	ldw	r2,28(sp)
   460f8:	003e7906 	br	45ae0 <__alt_data_end+0xfffd3ae0>
   460fc:	00800434 	movhi	r2,16
   46100:	10bfffc4 	addi	r2,r2,-1
   46104:	88a2703a 	and	r17,r17,r2
   46108:	883e851e 	bne	r17,zero,45b20 <__alt_data_end+0xfffd3b20>
   4610c:	00800174 	movhi	r2,5
   46110:	108a3604 	addi	r2,r2,10456
   46114:	003e8406 	br	45b28 <__alt_data_end+0xfffd3b28>
   46118:	10c00204 	addi	r3,r2,8
   4611c:	003e8706 	br	45b3c <__alt_data_end+0xfffd3b3c>
   46120:	01400434 	movhi	r5,16
   46124:	297fffc4 	addi	r5,r5,-1
   46128:	994a703a 	and	r5,r19,r5
   4612c:	9009883a 	mov	r4,r18
   46130:	843f0044 	addi	r16,r16,-1023
   46134:	294ffc34 	orhi	r5,r5,16368
   46138:	dd800217 	ldw	r22,8(sp)
   4613c:	d8001115 	stw	zero,68(sp)
   46140:	003ea506 	br	45bd8 <__alt_data_end+0xfffd3bd8>
   46144:	00800174 	movhi	r2,5
   46148:	108a2d04 	addi	r2,r2,10420
   4614c:	003e6406 	br	45ae0 <__alt_data_end+0xfffd3ae0>
   46150:	e0001115 	stw	zero,68(fp)
   46154:	000b883a 	mov	r5,zero
   46158:	e009883a 	mov	r4,fp
   4615c:	00487880 	call	48788 <_Balloc>
   46160:	01bfffc4 	movi	r6,-1
   46164:	01c00044 	movi	r7,1
   46168:	d8800715 	stw	r2,28(sp)
   4616c:	d9800c15 	stw	r6,48(sp)
   46170:	e0801015 	stw	r2,64(fp)
   46174:	d8000315 	stw	zero,12(sp)
   46178:	d9c00b15 	stw	r7,44(sp)
   4617c:	d9800615 	stw	r6,24(sp)
   46180:	d8002215 	stw	zero,136(sp)
   46184:	d8800117 	ldw	r2,4(sp)
   46188:	10008916 	blt	r2,zero,463b0 <_dtoa_r+0x990>
   4618c:	d9000517 	ldw	r4,20(sp)
   46190:	00c00384 	movi	r3,14
   46194:	19008616 	blt	r3,r4,463b0 <_dtoa_r+0x990>
   46198:	200490fa 	slli	r2,r4,3
   4619c:	00c00174 	movhi	r3,5
   461a0:	d9802217 	ldw	r6,136(sp)
   461a4:	18ca5404 	addi	r3,r3,10576
   461a8:	1885883a 	add	r2,r3,r2
   461ac:	14000017 	ldw	r16,0(r2)
   461b0:	14400117 	ldw	r17,4(r2)
   461b4:	30016316 	blt	r6,zero,46744 <_dtoa_r+0xd24>
   461b8:	800d883a 	mov	r6,r16
   461bc:	880f883a 	mov	r7,r17
   461c0:	9009883a 	mov	r4,r18
   461c4:	980b883a 	mov	r5,r19
   461c8:	004cfac0 	call	4cfac <__divdf3>
   461cc:	180b883a 	mov	r5,r3
   461d0:	1009883a 	mov	r4,r2
   461d4:	004eb000 	call	4eb00 <__fixdfsi>
   461d8:	1009883a 	mov	r4,r2
   461dc:	102b883a 	mov	r21,r2
   461e0:	004eb800 	call	4eb80 <__floatsidf>
   461e4:	800d883a 	mov	r6,r16
   461e8:	880f883a 	mov	r7,r17
   461ec:	1009883a 	mov	r4,r2
   461f0:	180b883a 	mov	r5,r3
   461f4:	004daec0 	call	4daec <__muldf3>
   461f8:	100d883a 	mov	r6,r2
   461fc:	180f883a 	mov	r7,r3
   46200:	9009883a 	mov	r4,r18
   46204:	980b883a 	mov	r5,r19
   46208:	004e2040 	call	4e204 <__subdf3>
   4620c:	d9c00717 	ldw	r7,28(sp)
   46210:	1009883a 	mov	r4,r2
   46214:	a8800c04 	addi	r2,r21,48
   46218:	38800005 	stb	r2,0(r7)
   4621c:	3dc00044 	addi	r23,r7,1
   46220:	d9c00617 	ldw	r7,24(sp)
   46224:	01800044 	movi	r6,1
   46228:	180b883a 	mov	r5,r3
   4622c:	2005883a 	mov	r2,r4
   46230:	39803826 	beq	r7,r6,46314 <_dtoa_r+0x8f4>
   46234:	000d883a 	mov	r6,zero
   46238:	01d00934 	movhi	r7,16420
   4623c:	004daec0 	call	4daec <__muldf3>
   46240:	000d883a 	mov	r6,zero
   46244:	000f883a 	mov	r7,zero
   46248:	1009883a 	mov	r4,r2
   4624c:	180b883a 	mov	r5,r3
   46250:	1025883a 	mov	r18,r2
   46254:	1827883a 	mov	r19,r3
   46258:	004d8940 	call	4d894 <__eqdf2>
   4625c:	103f9a26 	beq	r2,zero,460c8 <__alt_data_end+0xfffd40c8>
   46260:	d9c00617 	ldw	r7,24(sp)
   46264:	d8c00717 	ldw	r3,28(sp)
   46268:	b829883a 	mov	r20,r23
   4626c:	38bfffc4 	addi	r2,r7,-1
   46270:	18ad883a 	add	r22,r3,r2
   46274:	00000a06 	br	462a0 <_dtoa_r+0x880>
   46278:	004daec0 	call	4daec <__muldf3>
   4627c:	000d883a 	mov	r6,zero
   46280:	000f883a 	mov	r7,zero
   46284:	1009883a 	mov	r4,r2
   46288:	180b883a 	mov	r5,r3
   4628c:	1025883a 	mov	r18,r2
   46290:	1827883a 	mov	r19,r3
   46294:	b829883a 	mov	r20,r23
   46298:	004d8940 	call	4d894 <__eqdf2>
   4629c:	103f8a26 	beq	r2,zero,460c8 <__alt_data_end+0xfffd40c8>
   462a0:	800d883a 	mov	r6,r16
   462a4:	880f883a 	mov	r7,r17
   462a8:	9009883a 	mov	r4,r18
   462ac:	980b883a 	mov	r5,r19
   462b0:	004cfac0 	call	4cfac <__divdf3>
   462b4:	180b883a 	mov	r5,r3
   462b8:	1009883a 	mov	r4,r2
   462bc:	004eb000 	call	4eb00 <__fixdfsi>
   462c0:	1009883a 	mov	r4,r2
   462c4:	102b883a 	mov	r21,r2
   462c8:	004eb800 	call	4eb80 <__floatsidf>
   462cc:	800d883a 	mov	r6,r16
   462d0:	880f883a 	mov	r7,r17
   462d4:	1009883a 	mov	r4,r2
   462d8:	180b883a 	mov	r5,r3
   462dc:	004daec0 	call	4daec <__muldf3>
   462e0:	100d883a 	mov	r6,r2
   462e4:	180f883a 	mov	r7,r3
   462e8:	9009883a 	mov	r4,r18
   462ec:	980b883a 	mov	r5,r19
   462f0:	004e2040 	call	4e204 <__subdf3>
   462f4:	aa000c04 	addi	r8,r21,48
   462f8:	a2000005 	stb	r8,0(r20)
   462fc:	000d883a 	mov	r6,zero
   46300:	01d00934 	movhi	r7,16420
   46304:	1009883a 	mov	r4,r2
   46308:	180b883a 	mov	r5,r3
   4630c:	a5c00044 	addi	r23,r20,1
   46310:	b53fd91e 	bne	r22,r20,46278 <__alt_data_end+0xfffd4278>
   46314:	100d883a 	mov	r6,r2
   46318:	180f883a 	mov	r7,r3
   4631c:	1009883a 	mov	r4,r2
   46320:	180b883a 	mov	r5,r3
   46324:	004c7000 	call	4c700 <__adddf3>
   46328:	100d883a 	mov	r6,r2
   4632c:	180f883a 	mov	r7,r3
   46330:	8009883a 	mov	r4,r16
   46334:	880b883a 	mov	r5,r17
   46338:	1027883a 	mov	r19,r2
   4633c:	1825883a 	mov	r18,r3
   46340:	004d9f80 	call	4d9f8 <__ledf2>
   46344:	10000816 	blt	r2,zero,46368 <_dtoa_r+0x948>
   46348:	980d883a 	mov	r6,r19
   4634c:	900f883a 	mov	r7,r18
   46350:	8009883a 	mov	r4,r16
   46354:	880b883a 	mov	r5,r17
   46358:	004d8940 	call	4d894 <__eqdf2>
   4635c:	103f5a1e 	bne	r2,zero,460c8 <__alt_data_end+0xfffd40c8>
   46360:	ad40004c 	andi	r21,r21,1
   46364:	a83f5826 	beq	r21,zero,460c8 <__alt_data_end+0xfffd40c8>
   46368:	bd3fffc3 	ldbu	r20,-1(r23)
   4636c:	b8bfffc4 	addi	r2,r23,-1
   46370:	1007883a 	mov	r3,r2
   46374:	01400e44 	movi	r5,57
   46378:	d9800717 	ldw	r6,28(sp)
   4637c:	00000506 	br	46394 <_dtoa_r+0x974>
   46380:	18ffffc4 	addi	r3,r3,-1
   46384:	11824726 	beq	r2,r6,46ca4 <_dtoa_r+0x1284>
   46388:	1d000003 	ldbu	r20,0(r3)
   4638c:	102f883a 	mov	r23,r2
   46390:	10bfffc4 	addi	r2,r2,-1
   46394:	a1003fcc 	andi	r4,r20,255
   46398:	2100201c 	xori	r4,r4,128
   4639c:	213fe004 	addi	r4,r4,-128
   463a0:	217ff726 	beq	r4,r5,46380 <__alt_data_end+0xfffd4380>
   463a4:	a2000044 	addi	r8,r20,1
   463a8:	12000005 	stb	r8,0(r2)
   463ac:	003f4606 	br	460c8 <__alt_data_end+0xfffd40c8>
   463b0:	d9000b17 	ldw	r4,44(sp)
   463b4:	2000c826 	beq	r4,zero,466d8 <_dtoa_r+0xcb8>
   463b8:	d9800317 	ldw	r6,12(sp)
   463bc:	00c00044 	movi	r3,1
   463c0:	1980f90e 	bge	r3,r6,467a8 <_dtoa_r+0xd88>
   463c4:	d8800617 	ldw	r2,24(sp)
   463c8:	d8c00a17 	ldw	r3,40(sp)
   463cc:	157fffc4 	addi	r21,r2,-1
   463d0:	1d41f316 	blt	r3,r21,46ba0 <_dtoa_r+0x1180>
   463d4:	1d6bc83a 	sub	r21,r3,r21
   463d8:	d9c00617 	ldw	r7,24(sp)
   463dc:	3802aa16 	blt	r7,zero,46e88 <_dtoa_r+0x1468>
   463e0:	dd000817 	ldw	r20,32(sp)
   463e4:	d8800617 	ldw	r2,24(sp)
   463e8:	d8c00817 	ldw	r3,32(sp)
   463ec:	01400044 	movi	r5,1
   463f0:	e009883a 	mov	r4,fp
   463f4:	1887883a 	add	r3,r3,r2
   463f8:	d8c00815 	stw	r3,32(sp)
   463fc:	b0ad883a 	add	r22,r22,r2
   46400:	0048b940 	call	48b94 <__i2b>
   46404:	1023883a 	mov	r17,r2
   46408:	a0000826 	beq	r20,zero,4642c <_dtoa_r+0xa0c>
   4640c:	0580070e 	bge	zero,r22,4642c <_dtoa_r+0xa0c>
   46410:	a005883a 	mov	r2,r20
   46414:	b500b916 	blt	r22,r20,466fc <_dtoa_r+0xcdc>
   46418:	d9000817 	ldw	r4,32(sp)
   4641c:	a0a9c83a 	sub	r20,r20,r2
   46420:	b0adc83a 	sub	r22,r22,r2
   46424:	2089c83a 	sub	r4,r4,r2
   46428:	d9000815 	stw	r4,32(sp)
   4642c:	d9800a17 	ldw	r6,40(sp)
   46430:	0181810e 	bge	zero,r6,46a38 <_dtoa_r+0x1018>
   46434:	d9c00b17 	ldw	r7,44(sp)
   46438:	3800b326 	beq	r7,zero,46708 <_dtoa_r+0xce8>
   4643c:	a800b226 	beq	r21,zero,46708 <_dtoa_r+0xce8>
   46440:	880b883a 	mov	r5,r17
   46444:	a80d883a 	mov	r6,r21
   46448:	e009883a 	mov	r4,fp
   4644c:	0048dc80 	call	48dc8 <__pow5mult>
   46450:	d9800917 	ldw	r6,36(sp)
   46454:	100b883a 	mov	r5,r2
   46458:	e009883a 	mov	r4,fp
   4645c:	1023883a 	mov	r17,r2
   46460:	0048bd00 	call	48bd0 <__multiply>
   46464:	1021883a 	mov	r16,r2
   46468:	d8800a17 	ldw	r2,40(sp)
   4646c:	d9400917 	ldw	r5,36(sp)
   46470:	e009883a 	mov	r4,fp
   46474:	1545c83a 	sub	r2,r2,r21
   46478:	d8800a15 	stw	r2,40(sp)
   4647c:	00488300 	call	48830 <_Bfree>
   46480:	d8c00a17 	ldw	r3,40(sp)
   46484:	18009f1e 	bne	r3,zero,46704 <_dtoa_r+0xce4>
   46488:	05c00044 	movi	r23,1
   4648c:	e009883a 	mov	r4,fp
   46490:	b80b883a 	mov	r5,r23
   46494:	0048b940 	call	48b94 <__i2b>
   46498:	d9000d17 	ldw	r4,52(sp)
   4649c:	102b883a 	mov	r21,r2
   464a0:	2000ce26 	beq	r4,zero,467dc <_dtoa_r+0xdbc>
   464a4:	200d883a 	mov	r6,r4
   464a8:	100b883a 	mov	r5,r2
   464ac:	e009883a 	mov	r4,fp
   464b0:	0048dc80 	call	48dc8 <__pow5mult>
   464b4:	d9800317 	ldw	r6,12(sp)
   464b8:	102b883a 	mov	r21,r2
   464bc:	b981810e 	bge	r23,r6,46ac4 <_dtoa_r+0x10a4>
   464c0:	0027883a 	mov	r19,zero
   464c4:	a8800417 	ldw	r2,16(r21)
   464c8:	05c00804 	movi	r23,32
   464cc:	10800104 	addi	r2,r2,4
   464d0:	1085883a 	add	r2,r2,r2
   464d4:	1085883a 	add	r2,r2,r2
   464d8:	a885883a 	add	r2,r21,r2
   464dc:	11000017 	ldw	r4,0(r2)
   464e0:	0048a7c0 	call	48a7c <__hi0bits>
   464e4:	b885c83a 	sub	r2,r23,r2
   464e8:	1585883a 	add	r2,r2,r22
   464ec:	108007cc 	andi	r2,r2,31
   464f0:	1000b326 	beq	r2,zero,467c0 <_dtoa_r+0xda0>
   464f4:	00c00804 	movi	r3,32
   464f8:	1887c83a 	sub	r3,r3,r2
   464fc:	01000104 	movi	r4,4
   46500:	20c2cd0e 	bge	r4,r3,47038 <_dtoa_r+0x1618>
   46504:	00c00704 	movi	r3,28
   46508:	1885c83a 	sub	r2,r3,r2
   4650c:	d8c00817 	ldw	r3,32(sp)
   46510:	a0a9883a 	add	r20,r20,r2
   46514:	b0ad883a 	add	r22,r22,r2
   46518:	1887883a 	add	r3,r3,r2
   4651c:	d8c00815 	stw	r3,32(sp)
   46520:	d9800817 	ldw	r6,32(sp)
   46524:	0180040e 	bge	zero,r6,46538 <_dtoa_r+0xb18>
   46528:	800b883a 	mov	r5,r16
   4652c:	e009883a 	mov	r4,fp
   46530:	0048f080 	call	48f08 <__lshift>
   46534:	1021883a 	mov	r16,r2
   46538:	0580050e 	bge	zero,r22,46550 <_dtoa_r+0xb30>
   4653c:	a80b883a 	mov	r5,r21
   46540:	b00d883a 	mov	r6,r22
   46544:	e009883a 	mov	r4,fp
   46548:	0048f080 	call	48f08 <__lshift>
   4654c:	102b883a 	mov	r21,r2
   46550:	d9c00e17 	ldw	r7,56(sp)
   46554:	3801211e 	bne	r7,zero,469dc <_dtoa_r+0xfbc>
   46558:	d9800617 	ldw	r6,24(sp)
   4655c:	0181380e 	bge	zero,r6,46a40 <_dtoa_r+0x1020>
   46560:	d8c00b17 	ldw	r3,44(sp)
   46564:	1800ab1e 	bne	r3,zero,46814 <_dtoa_r+0xdf4>
   46568:	dc800717 	ldw	r18,28(sp)
   4656c:	dcc00617 	ldw	r19,24(sp)
   46570:	9029883a 	mov	r20,r18
   46574:	00000206 	br	46580 <_dtoa_r+0xb60>
   46578:	00488580 	call	48858 <__multadd>
   4657c:	1021883a 	mov	r16,r2
   46580:	a80b883a 	mov	r5,r21
   46584:	8009883a 	mov	r4,r16
   46588:	00458200 	call	45820 <quorem>
   4658c:	10800c04 	addi	r2,r2,48
   46590:	90800005 	stb	r2,0(r18)
   46594:	94800044 	addi	r18,r18,1
   46598:	9507c83a 	sub	r3,r18,r20
   4659c:	000f883a 	mov	r7,zero
   465a0:	01800284 	movi	r6,10
   465a4:	800b883a 	mov	r5,r16
   465a8:	e009883a 	mov	r4,fp
   465ac:	1cfff216 	blt	r3,r19,46578 <__alt_data_end+0xfffd4578>
   465b0:	1011883a 	mov	r8,r2
   465b4:	d8800617 	ldw	r2,24(sp)
   465b8:	0082370e 	bge	zero,r2,46e98 <_dtoa_r+0x1478>
   465bc:	d9000717 	ldw	r4,28(sp)
   465c0:	0025883a 	mov	r18,zero
   465c4:	20af883a 	add	r23,r4,r2
   465c8:	01800044 	movi	r6,1
   465cc:	800b883a 	mov	r5,r16
   465d0:	e009883a 	mov	r4,fp
   465d4:	da001715 	stw	r8,92(sp)
   465d8:	0048f080 	call	48f08 <__lshift>
   465dc:	a80b883a 	mov	r5,r21
   465e0:	1009883a 	mov	r4,r2
   465e4:	d8800915 	stw	r2,36(sp)
   465e8:	00490500 	call	49050 <__mcmp>
   465ec:	da001717 	ldw	r8,92(sp)
   465f0:	0081800e 	bge	zero,r2,46bf4 <_dtoa_r+0x11d4>
   465f4:	b93fffc3 	ldbu	r4,-1(r23)
   465f8:	b8bfffc4 	addi	r2,r23,-1
   465fc:	1007883a 	mov	r3,r2
   46600:	01800e44 	movi	r6,57
   46604:	d9c00717 	ldw	r7,28(sp)
   46608:	00000506 	br	46620 <_dtoa_r+0xc00>
   4660c:	18ffffc4 	addi	r3,r3,-1
   46610:	11c12326 	beq	r2,r7,46aa0 <_dtoa_r+0x1080>
   46614:	19000003 	ldbu	r4,0(r3)
   46618:	102f883a 	mov	r23,r2
   4661c:	10bfffc4 	addi	r2,r2,-1
   46620:	21403fcc 	andi	r5,r4,255
   46624:	2940201c 	xori	r5,r5,128
   46628:	297fe004 	addi	r5,r5,-128
   4662c:	29bff726 	beq	r5,r6,4660c <__alt_data_end+0xfffd460c>
   46630:	21000044 	addi	r4,r4,1
   46634:	11000005 	stb	r4,0(r2)
   46638:	a80b883a 	mov	r5,r21
   4663c:	e009883a 	mov	r4,fp
   46640:	00488300 	call	48830 <_Bfree>
   46644:	883ea026 	beq	r17,zero,460c8 <__alt_data_end+0xfffd40c8>
   46648:	90000426 	beq	r18,zero,4665c <_dtoa_r+0xc3c>
   4664c:	94400326 	beq	r18,r17,4665c <_dtoa_r+0xc3c>
   46650:	900b883a 	mov	r5,r18
   46654:	e009883a 	mov	r4,fp
   46658:	00488300 	call	48830 <_Bfree>
   4665c:	880b883a 	mov	r5,r17
   46660:	e009883a 	mov	r4,fp
   46664:	00488300 	call	48830 <_Bfree>
   46668:	003e9706 	br	460c8 <__alt_data_end+0xfffd40c8>
   4666c:	01800044 	movi	r6,1
   46670:	d9800e15 	stw	r6,56(sp)
   46674:	003d9606 	br	45cd0 <__alt_data_end+0xfffd3cd0>
   46678:	d8800817 	ldw	r2,32(sp)
   4667c:	d8c00517 	ldw	r3,20(sp)
   46680:	d8000d15 	stw	zero,52(sp)
   46684:	10c5c83a 	sub	r2,r2,r3
   46688:	00c9c83a 	sub	r4,zero,r3
   4668c:	d8800815 	stw	r2,32(sp)
   46690:	d9000a15 	stw	r4,40(sp)
   46694:	003d9706 	br	45cf4 <__alt_data_end+0xfffd3cf4>
   46698:	05adc83a 	sub	r22,zero,r22
   4669c:	dd800815 	stw	r22,32(sp)
   466a0:	002d883a 	mov	r22,zero
   466a4:	003d8e06 	br	45ce0 <__alt_data_end+0xfffd3ce0>
   466a8:	d9000517 	ldw	r4,20(sp)
   466ac:	004eb800 	call	4eb80 <__floatsidf>
   466b0:	100d883a 	mov	r6,r2
   466b4:	180f883a 	mov	r7,r3
   466b8:	a009883a 	mov	r4,r20
   466bc:	880b883a 	mov	r5,r17
   466c0:	004d8940 	call	4d894 <__eqdf2>
   466c4:	103d7126 	beq	r2,zero,45c8c <__alt_data_end+0xfffd3c8c>
   466c8:	d9c00517 	ldw	r7,20(sp)
   466cc:	39ffffc4 	addi	r7,r7,-1
   466d0:	d9c00515 	stw	r7,20(sp)
   466d4:	003d6d06 	br	45c8c <__alt_data_end+0xfffd3c8c>
   466d8:	dd400a17 	ldw	r21,40(sp)
   466dc:	dd000817 	ldw	r20,32(sp)
   466e0:	0023883a 	mov	r17,zero
   466e4:	003f4806 	br	46408 <__alt_data_end+0xfffd4408>
   466e8:	10e3c83a 	sub	r17,r2,r3
   466ec:	9448983a 	sll	r4,r18,r17
   466f0:	003d3206 	br	45bbc <__alt_data_end+0xfffd3bbc>
   466f4:	d8000e15 	stw	zero,56(sp)
   466f8:	003d7506 	br	45cd0 <__alt_data_end+0xfffd3cd0>
   466fc:	b005883a 	mov	r2,r22
   46700:	003f4506 	br	46418 <__alt_data_end+0xfffd4418>
   46704:	dc000915 	stw	r16,36(sp)
   46708:	d9800a17 	ldw	r6,40(sp)
   4670c:	d9400917 	ldw	r5,36(sp)
   46710:	e009883a 	mov	r4,fp
   46714:	0048dc80 	call	48dc8 <__pow5mult>
   46718:	1021883a 	mov	r16,r2
   4671c:	003f5a06 	br	46488 <__alt_data_end+0xfffd4488>
   46720:	01c00044 	movi	r7,1
   46724:	d9c00b15 	stw	r7,44(sp)
   46728:	d8802217 	ldw	r2,136(sp)
   4672c:	0081280e 	bge	zero,r2,46bd0 <_dtoa_r+0x11b0>
   46730:	100d883a 	mov	r6,r2
   46734:	1021883a 	mov	r16,r2
   46738:	d8800c15 	stw	r2,48(sp)
   4673c:	d8800615 	stw	r2,24(sp)
   46740:	003d8806 	br	45d64 <__alt_data_end+0xfffd3d64>
   46744:	d8800617 	ldw	r2,24(sp)
   46748:	00be9b16 	blt	zero,r2,461b8 <__alt_data_end+0xfffd41b8>
   4674c:	10010f1e 	bne	r2,zero,46b8c <_dtoa_r+0x116c>
   46750:	880b883a 	mov	r5,r17
   46754:	000d883a 	mov	r6,zero
   46758:	01d00534 	movhi	r7,16404
   4675c:	8009883a 	mov	r4,r16
   46760:	004daec0 	call	4daec <__muldf3>
   46764:	900d883a 	mov	r6,r18
   46768:	980f883a 	mov	r7,r19
   4676c:	1009883a 	mov	r4,r2
   46770:	180b883a 	mov	r5,r3
   46774:	004d91c0 	call	4d91c <__gedf2>
   46778:	002b883a 	mov	r21,zero
   4677c:	0023883a 	mov	r17,zero
   46780:	1000bf16 	blt	r2,zero,46a80 <_dtoa_r+0x1060>
   46784:	d9802217 	ldw	r6,136(sp)
   46788:	ddc00717 	ldw	r23,28(sp)
   4678c:	018c303a 	nor	r6,zero,r6
   46790:	d9800515 	stw	r6,20(sp)
   46794:	a80b883a 	mov	r5,r21
   46798:	e009883a 	mov	r4,fp
   4679c:	00488300 	call	48830 <_Bfree>
   467a0:	883e4926 	beq	r17,zero,460c8 <__alt_data_end+0xfffd40c8>
   467a4:	003fad06 	br	4665c <__alt_data_end+0xfffd465c>
   467a8:	d9c01117 	ldw	r7,68(sp)
   467ac:	3801bc26 	beq	r7,zero,46ea0 <_dtoa_r+0x1480>
   467b0:	10810cc4 	addi	r2,r2,1075
   467b4:	dd400a17 	ldw	r21,40(sp)
   467b8:	dd000817 	ldw	r20,32(sp)
   467bc:	003f0a06 	br	463e8 <__alt_data_end+0xfffd43e8>
   467c0:	00800704 	movi	r2,28
   467c4:	d9000817 	ldw	r4,32(sp)
   467c8:	a0a9883a 	add	r20,r20,r2
   467cc:	b0ad883a 	add	r22,r22,r2
   467d0:	2089883a 	add	r4,r4,r2
   467d4:	d9000815 	stw	r4,32(sp)
   467d8:	003f5106 	br	46520 <__alt_data_end+0xfffd4520>
   467dc:	d8c00317 	ldw	r3,12(sp)
   467e0:	b8c1fc0e 	bge	r23,r3,46fd4 <_dtoa_r+0x15b4>
   467e4:	0027883a 	mov	r19,zero
   467e8:	b805883a 	mov	r2,r23
   467ec:	003f3e06 	br	464e8 <__alt_data_end+0xfffd44e8>
   467f0:	880b883a 	mov	r5,r17
   467f4:	e009883a 	mov	r4,fp
   467f8:	000f883a 	mov	r7,zero
   467fc:	01800284 	movi	r6,10
   46800:	00488580 	call	48858 <__multadd>
   46804:	d9000c17 	ldw	r4,48(sp)
   46808:	1023883a 	mov	r17,r2
   4680c:	0102040e 	bge	zero,r4,47020 <_dtoa_r+0x1600>
   46810:	d9000615 	stw	r4,24(sp)
   46814:	0500050e 	bge	zero,r20,4682c <_dtoa_r+0xe0c>
   46818:	880b883a 	mov	r5,r17
   4681c:	a00d883a 	mov	r6,r20
   46820:	e009883a 	mov	r4,fp
   46824:	0048f080 	call	48f08 <__lshift>
   46828:	1023883a 	mov	r17,r2
   4682c:	9801241e 	bne	r19,zero,46cc0 <_dtoa_r+0x12a0>
   46830:	8829883a 	mov	r20,r17
   46834:	d9000617 	ldw	r4,24(sp)
   46838:	dcc00717 	ldw	r19,28(sp)
   4683c:	9480004c 	andi	r18,r18,1
   46840:	20bfffc4 	addi	r2,r4,-1
   46844:	9885883a 	add	r2,r19,r2
   46848:	d8800415 	stw	r2,16(sp)
   4684c:	dc800615 	stw	r18,24(sp)
   46850:	a80b883a 	mov	r5,r21
   46854:	8009883a 	mov	r4,r16
   46858:	00458200 	call	45820 <quorem>
   4685c:	880b883a 	mov	r5,r17
   46860:	8009883a 	mov	r4,r16
   46864:	102f883a 	mov	r23,r2
   46868:	00490500 	call	49050 <__mcmp>
   4686c:	a80b883a 	mov	r5,r21
   46870:	a00d883a 	mov	r6,r20
   46874:	e009883a 	mov	r4,fp
   46878:	102d883a 	mov	r22,r2
   4687c:	00490b00 	call	490b0 <__mdiff>
   46880:	1007883a 	mov	r3,r2
   46884:	10800317 	ldw	r2,12(r2)
   46888:	bc800c04 	addi	r18,r23,48
   4688c:	180b883a 	mov	r5,r3
   46890:	10004e1e 	bne	r2,zero,469cc <_dtoa_r+0xfac>
   46894:	8009883a 	mov	r4,r16
   46898:	d8c01615 	stw	r3,88(sp)
   4689c:	00490500 	call	49050 <__mcmp>
   468a0:	d8c01617 	ldw	r3,88(sp)
   468a4:	e009883a 	mov	r4,fp
   468a8:	d8801615 	stw	r2,88(sp)
   468ac:	180b883a 	mov	r5,r3
   468b0:	00488300 	call	48830 <_Bfree>
   468b4:	d8801617 	ldw	r2,88(sp)
   468b8:	1000041e 	bne	r2,zero,468cc <_dtoa_r+0xeac>
   468bc:	d9800317 	ldw	r6,12(sp)
   468c0:	3000021e 	bne	r6,zero,468cc <_dtoa_r+0xeac>
   468c4:	d8c00617 	ldw	r3,24(sp)
   468c8:	18003726 	beq	r3,zero,469a8 <_dtoa_r+0xf88>
   468cc:	b0002016 	blt	r22,zero,46950 <_dtoa_r+0xf30>
   468d0:	b000041e 	bne	r22,zero,468e4 <_dtoa_r+0xec4>
   468d4:	d9000317 	ldw	r4,12(sp)
   468d8:	2000021e 	bne	r4,zero,468e4 <_dtoa_r+0xec4>
   468dc:	d8c00617 	ldw	r3,24(sp)
   468e0:	18001b26 	beq	r3,zero,46950 <_dtoa_r+0xf30>
   468e4:	00810716 	blt	zero,r2,46d04 <_dtoa_r+0x12e4>
   468e8:	d8c00417 	ldw	r3,16(sp)
   468ec:	9d800044 	addi	r22,r19,1
   468f0:	9c800005 	stb	r18,0(r19)
   468f4:	b02f883a 	mov	r23,r22
   468f8:	98c10626 	beq	r19,r3,46d14 <_dtoa_r+0x12f4>
   468fc:	800b883a 	mov	r5,r16
   46900:	000f883a 	mov	r7,zero
   46904:	01800284 	movi	r6,10
   46908:	e009883a 	mov	r4,fp
   4690c:	00488580 	call	48858 <__multadd>
   46910:	1021883a 	mov	r16,r2
   46914:	000f883a 	mov	r7,zero
   46918:	01800284 	movi	r6,10
   4691c:	880b883a 	mov	r5,r17
   46920:	e009883a 	mov	r4,fp
   46924:	8d002526 	beq	r17,r20,469bc <_dtoa_r+0xf9c>
   46928:	00488580 	call	48858 <__multadd>
   4692c:	a00b883a 	mov	r5,r20
   46930:	000f883a 	mov	r7,zero
   46934:	01800284 	movi	r6,10
   46938:	e009883a 	mov	r4,fp
   4693c:	1023883a 	mov	r17,r2
   46940:	00488580 	call	48858 <__multadd>
   46944:	1029883a 	mov	r20,r2
   46948:	b027883a 	mov	r19,r22
   4694c:	003fc006 	br	46850 <__alt_data_end+0xfffd4850>
   46950:	9011883a 	mov	r8,r18
   46954:	00800e0e 	bge	zero,r2,46990 <_dtoa_r+0xf70>
   46958:	800b883a 	mov	r5,r16
   4695c:	01800044 	movi	r6,1
   46960:	e009883a 	mov	r4,fp
   46964:	da001715 	stw	r8,92(sp)
   46968:	0048f080 	call	48f08 <__lshift>
   4696c:	a80b883a 	mov	r5,r21
   46970:	1009883a 	mov	r4,r2
   46974:	1021883a 	mov	r16,r2
   46978:	00490500 	call	49050 <__mcmp>
   4697c:	da001717 	ldw	r8,92(sp)
   46980:	0081960e 	bge	zero,r2,46fdc <_dtoa_r+0x15bc>
   46984:	00800e44 	movi	r2,57
   46988:	40817026 	beq	r8,r2,46f4c <_dtoa_r+0x152c>
   4698c:	ba000c44 	addi	r8,r23,49
   46990:	8825883a 	mov	r18,r17
   46994:	9dc00044 	addi	r23,r19,1
   46998:	9a000005 	stb	r8,0(r19)
   4699c:	a023883a 	mov	r17,r20
   469a0:	dc000915 	stw	r16,36(sp)
   469a4:	003f2406 	br	46638 <__alt_data_end+0xfffd4638>
   469a8:	00800e44 	movi	r2,57
   469ac:	9011883a 	mov	r8,r18
   469b0:	90816626 	beq	r18,r2,46f4c <_dtoa_r+0x152c>
   469b4:	05bff516 	blt	zero,r22,4698c <__alt_data_end+0xfffd498c>
   469b8:	003ff506 	br	46990 <__alt_data_end+0xfffd4990>
   469bc:	00488580 	call	48858 <__multadd>
   469c0:	1023883a 	mov	r17,r2
   469c4:	1029883a 	mov	r20,r2
   469c8:	003fdf06 	br	46948 <__alt_data_end+0xfffd4948>
   469cc:	e009883a 	mov	r4,fp
   469d0:	00488300 	call	48830 <_Bfree>
   469d4:	00800044 	movi	r2,1
   469d8:	003fbc06 	br	468cc <__alt_data_end+0xfffd48cc>
   469dc:	a80b883a 	mov	r5,r21
   469e0:	8009883a 	mov	r4,r16
   469e4:	00490500 	call	49050 <__mcmp>
   469e8:	103edb0e 	bge	r2,zero,46558 <__alt_data_end+0xfffd4558>
   469ec:	800b883a 	mov	r5,r16
   469f0:	000f883a 	mov	r7,zero
   469f4:	01800284 	movi	r6,10
   469f8:	e009883a 	mov	r4,fp
   469fc:	00488580 	call	48858 <__multadd>
   46a00:	1021883a 	mov	r16,r2
   46a04:	d8800517 	ldw	r2,20(sp)
   46a08:	d8c00b17 	ldw	r3,44(sp)
   46a0c:	10bfffc4 	addi	r2,r2,-1
   46a10:	d8800515 	stw	r2,20(sp)
   46a14:	183f761e 	bne	r3,zero,467f0 <__alt_data_end+0xfffd47f0>
   46a18:	d9000c17 	ldw	r4,48(sp)
   46a1c:	0101730e 	bge	zero,r4,46fec <_dtoa_r+0x15cc>
   46a20:	d9000615 	stw	r4,24(sp)
   46a24:	003ed006 	br	46568 <__alt_data_end+0xfffd4568>
   46a28:	00800084 	movi	r2,2
   46a2c:	3081861e 	bne	r6,r2,47048 <_dtoa_r+0x1628>
   46a30:	d8000b15 	stw	zero,44(sp)
   46a34:	003f3c06 	br	46728 <__alt_data_end+0xfffd4728>
   46a38:	dc000917 	ldw	r16,36(sp)
   46a3c:	003e9206 	br	46488 <__alt_data_end+0xfffd4488>
   46a40:	d9c00317 	ldw	r7,12(sp)
   46a44:	00800084 	movi	r2,2
   46a48:	11fec50e 	bge	r2,r7,46560 <__alt_data_end+0xfffd4560>
   46a4c:	d9000617 	ldw	r4,24(sp)
   46a50:	20013c1e 	bne	r4,zero,46f44 <_dtoa_r+0x1524>
   46a54:	a80b883a 	mov	r5,r21
   46a58:	000f883a 	mov	r7,zero
   46a5c:	01800144 	movi	r6,5
   46a60:	e009883a 	mov	r4,fp
   46a64:	00488580 	call	48858 <__multadd>
   46a68:	100b883a 	mov	r5,r2
   46a6c:	8009883a 	mov	r4,r16
   46a70:	102b883a 	mov	r21,r2
   46a74:	00490500 	call	49050 <__mcmp>
   46a78:	dc000915 	stw	r16,36(sp)
   46a7c:	00bf410e 	bge	zero,r2,46784 <__alt_data_end+0xfffd4784>
   46a80:	d9c00717 	ldw	r7,28(sp)
   46a84:	00800c44 	movi	r2,49
   46a88:	38800005 	stb	r2,0(r7)
   46a8c:	d8800517 	ldw	r2,20(sp)
   46a90:	3dc00044 	addi	r23,r7,1
   46a94:	10800044 	addi	r2,r2,1
   46a98:	d8800515 	stw	r2,20(sp)
   46a9c:	003f3d06 	br	46794 <__alt_data_end+0xfffd4794>
   46aa0:	d9800517 	ldw	r6,20(sp)
   46aa4:	d9c00717 	ldw	r7,28(sp)
   46aa8:	00800c44 	movi	r2,49
   46aac:	31800044 	addi	r6,r6,1
   46ab0:	d9800515 	stw	r6,20(sp)
   46ab4:	38800005 	stb	r2,0(r7)
   46ab8:	003edf06 	br	46638 <__alt_data_end+0xfffd4638>
   46abc:	d8000b15 	stw	zero,44(sp)
   46ac0:	003c9f06 	br	45d40 <__alt_data_end+0xfffd3d40>
   46ac4:	903e7e1e 	bne	r18,zero,464c0 <__alt_data_end+0xfffd44c0>
   46ac8:	00800434 	movhi	r2,16
   46acc:	10bfffc4 	addi	r2,r2,-1
   46ad0:	9884703a 	and	r2,r19,r2
   46ad4:	1000ea1e 	bne	r2,zero,46e80 <_dtoa_r+0x1460>
   46ad8:	9cdffc2c 	andhi	r19,r19,32752
   46adc:	9800e826 	beq	r19,zero,46e80 <_dtoa_r+0x1460>
   46ae0:	d9c00817 	ldw	r7,32(sp)
   46ae4:	b5800044 	addi	r22,r22,1
   46ae8:	04c00044 	movi	r19,1
   46aec:	39c00044 	addi	r7,r7,1
   46af0:	d9c00815 	stw	r7,32(sp)
   46af4:	d8800d17 	ldw	r2,52(sp)
   46af8:	103e721e 	bne	r2,zero,464c4 <__alt_data_end+0xfffd44c4>
   46afc:	00800044 	movi	r2,1
   46b00:	003e7906 	br	464e8 <__alt_data_end+0xfffd44e8>
   46b04:	8009883a 	mov	r4,r16
   46b08:	004eb800 	call	4eb80 <__floatsidf>
   46b0c:	d9800f17 	ldw	r6,60(sp)
   46b10:	d9c01017 	ldw	r7,64(sp)
   46b14:	1009883a 	mov	r4,r2
   46b18:	180b883a 	mov	r5,r3
   46b1c:	004daec0 	call	4daec <__muldf3>
   46b20:	000d883a 	mov	r6,zero
   46b24:	01d00734 	movhi	r7,16412
   46b28:	1009883a 	mov	r4,r2
   46b2c:	180b883a 	mov	r5,r3
   46b30:	004c7000 	call	4c700 <__adddf3>
   46b34:	047f3034 	movhi	r17,64704
   46b38:	1021883a 	mov	r16,r2
   46b3c:	1c63883a 	add	r17,r3,r17
   46b40:	d9000f17 	ldw	r4,60(sp)
   46b44:	d9401017 	ldw	r5,64(sp)
   46b48:	000d883a 	mov	r6,zero
   46b4c:	01d00534 	movhi	r7,16404
   46b50:	004e2040 	call	4e204 <__subdf3>
   46b54:	800d883a 	mov	r6,r16
   46b58:	880f883a 	mov	r7,r17
   46b5c:	1009883a 	mov	r4,r2
   46b60:	180b883a 	mov	r5,r3
   46b64:	102b883a 	mov	r21,r2
   46b68:	1829883a 	mov	r20,r3
   46b6c:	004d91c0 	call	4d91c <__gedf2>
   46b70:	00806c16 	blt	zero,r2,46d24 <_dtoa_r+0x1304>
   46b74:	89e0003c 	xorhi	r7,r17,32768
   46b78:	800d883a 	mov	r6,r16
   46b7c:	a809883a 	mov	r4,r21
   46b80:	a00b883a 	mov	r5,r20
   46b84:	004d9f80 	call	4d9f8 <__ledf2>
   46b88:	103d7e0e 	bge	r2,zero,46184 <__alt_data_end+0xfffd4184>
   46b8c:	002b883a 	mov	r21,zero
   46b90:	0023883a 	mov	r17,zero
   46b94:	003efb06 	br	46784 <__alt_data_end+0xfffd4784>
   46b98:	d8800717 	ldw	r2,28(sp)
   46b9c:	003bd006 	br	45ae0 <__alt_data_end+0xfffd3ae0>
   46ba0:	d9000a17 	ldw	r4,40(sp)
   46ba4:	d9800d17 	ldw	r6,52(sp)
   46ba8:	dd400a15 	stw	r21,40(sp)
   46bac:	a905c83a 	sub	r2,r21,r4
   46bb0:	308d883a 	add	r6,r6,r2
   46bb4:	d9800d15 	stw	r6,52(sp)
   46bb8:	002b883a 	mov	r21,zero
   46bbc:	003e0606 	br	463d8 <__alt_data_end+0xfffd43d8>
   46bc0:	9023883a 	mov	r17,r18
   46bc4:	9829883a 	mov	r20,r19
   46bc8:	04000084 	movi	r16,2
   46bcc:	003c9206 	br	45e18 <__alt_data_end+0xfffd3e18>
   46bd0:	04000044 	movi	r16,1
   46bd4:	dc000c15 	stw	r16,48(sp)
   46bd8:	dc000615 	stw	r16,24(sp)
   46bdc:	dc002215 	stw	r16,136(sp)
   46be0:	e0001115 	stw	zero,68(fp)
   46be4:	000b883a 	mov	r5,zero
   46be8:	003c6906 	br	45d90 <__alt_data_end+0xfffd3d90>
   46bec:	3021883a 	mov	r16,r6
   46bf0:	003ffb06 	br	46be0 <__alt_data_end+0xfffd4be0>
   46bf4:	1000021e 	bne	r2,zero,46c00 <_dtoa_r+0x11e0>
   46bf8:	4200004c 	andi	r8,r8,1
   46bfc:	403e7d1e 	bne	r8,zero,465f4 <__alt_data_end+0xfffd45f4>
   46c00:	01000c04 	movi	r4,48
   46c04:	00000106 	br	46c0c <_dtoa_r+0x11ec>
   46c08:	102f883a 	mov	r23,r2
   46c0c:	b8bfffc4 	addi	r2,r23,-1
   46c10:	10c00007 	ldb	r3,0(r2)
   46c14:	193ffc26 	beq	r3,r4,46c08 <__alt_data_end+0xfffd4c08>
   46c18:	003e8706 	br	46638 <__alt_data_end+0xfffd4638>
   46c1c:	d8800517 	ldw	r2,20(sp)
   46c20:	00a3c83a 	sub	r17,zero,r2
   46c24:	8800a426 	beq	r17,zero,46eb8 <_dtoa_r+0x1498>
   46c28:	888003cc 	andi	r2,r17,15
   46c2c:	100490fa 	slli	r2,r2,3
   46c30:	00c00174 	movhi	r3,5
   46c34:	18ca5404 	addi	r3,r3,10576
   46c38:	1885883a 	add	r2,r3,r2
   46c3c:	11800017 	ldw	r6,0(r2)
   46c40:	11c00117 	ldw	r7,4(r2)
   46c44:	9009883a 	mov	r4,r18
   46c48:	980b883a 	mov	r5,r19
   46c4c:	8823d13a 	srai	r17,r17,4
   46c50:	004daec0 	call	4daec <__muldf3>
   46c54:	d8800f15 	stw	r2,60(sp)
   46c58:	d8c01015 	stw	r3,64(sp)
   46c5c:	8800e826 	beq	r17,zero,47000 <_dtoa_r+0x15e0>
   46c60:	05000174 	movhi	r20,5
   46c64:	a50a4a04 	addi	r20,r20,10536
   46c68:	04000084 	movi	r16,2
   46c6c:	8980004c 	andi	r6,r17,1
   46c70:	1009883a 	mov	r4,r2
   46c74:	8823d07a 	srai	r17,r17,1
   46c78:	180b883a 	mov	r5,r3
   46c7c:	30000426 	beq	r6,zero,46c90 <_dtoa_r+0x1270>
   46c80:	a1800017 	ldw	r6,0(r20)
   46c84:	a1c00117 	ldw	r7,4(r20)
   46c88:	84000044 	addi	r16,r16,1
   46c8c:	004daec0 	call	4daec <__muldf3>
   46c90:	a5000204 	addi	r20,r20,8
   46c94:	883ff51e 	bne	r17,zero,46c6c <__alt_data_end+0xfffd4c6c>
   46c98:	d8800f15 	stw	r2,60(sp)
   46c9c:	d8c01015 	stw	r3,64(sp)
   46ca0:	003c7606 	br	45e7c <__alt_data_end+0xfffd3e7c>
   46ca4:	00c00c04 	movi	r3,48
   46ca8:	10c00005 	stb	r3,0(r2)
   46cac:	d8c00517 	ldw	r3,20(sp)
   46cb0:	bd3fffc3 	ldbu	r20,-1(r23)
   46cb4:	18c00044 	addi	r3,r3,1
   46cb8:	d8c00515 	stw	r3,20(sp)
   46cbc:	003db906 	br	463a4 <__alt_data_end+0xfffd43a4>
   46cc0:	89400117 	ldw	r5,4(r17)
   46cc4:	e009883a 	mov	r4,fp
   46cc8:	00487880 	call	48788 <_Balloc>
   46ccc:	89800417 	ldw	r6,16(r17)
   46cd0:	89400304 	addi	r5,r17,12
   46cd4:	11000304 	addi	r4,r2,12
   46cd8:	31800084 	addi	r6,r6,2
   46cdc:	318d883a 	add	r6,r6,r6
   46ce0:	318d883a 	add	r6,r6,r6
   46ce4:	1027883a 	mov	r19,r2
   46ce8:	00484e40 	call	484e4 <memcpy>
   46cec:	01800044 	movi	r6,1
   46cf0:	980b883a 	mov	r5,r19
   46cf4:	e009883a 	mov	r4,fp
   46cf8:	0048f080 	call	48f08 <__lshift>
   46cfc:	1029883a 	mov	r20,r2
   46d00:	003ecc06 	br	46834 <__alt_data_end+0xfffd4834>
   46d04:	00800e44 	movi	r2,57
   46d08:	90809026 	beq	r18,r2,46f4c <_dtoa_r+0x152c>
   46d0c:	92000044 	addi	r8,r18,1
   46d10:	003f1f06 	br	46990 <__alt_data_end+0xfffd4990>
   46d14:	9011883a 	mov	r8,r18
   46d18:	8825883a 	mov	r18,r17
   46d1c:	a023883a 	mov	r17,r20
   46d20:	003e2906 	br	465c8 <__alt_data_end+0xfffd45c8>
   46d24:	002b883a 	mov	r21,zero
   46d28:	0023883a 	mov	r17,zero
   46d2c:	003f5406 	br	46a80 <__alt_data_end+0xfffd4a80>
   46d30:	61bfffc4 	addi	r6,r12,-1
   46d34:	300490fa 	slli	r2,r6,3
   46d38:	00c00174 	movhi	r3,5
   46d3c:	18ca5404 	addi	r3,r3,10576
   46d40:	1885883a 	add	r2,r3,r2
   46d44:	11000017 	ldw	r4,0(r2)
   46d48:	11400117 	ldw	r5,4(r2)
   46d4c:	d8800717 	ldw	r2,28(sp)
   46d50:	880f883a 	mov	r7,r17
   46d54:	d9801215 	stw	r6,72(sp)
   46d58:	800d883a 	mov	r6,r16
   46d5c:	db001615 	stw	r12,88(sp)
   46d60:	15c00044 	addi	r23,r2,1
   46d64:	004daec0 	call	4daec <__muldf3>
   46d68:	d9401017 	ldw	r5,64(sp)
   46d6c:	d9000f17 	ldw	r4,60(sp)
   46d70:	d8c01515 	stw	r3,84(sp)
   46d74:	d8801415 	stw	r2,80(sp)
   46d78:	004eb000 	call	4eb00 <__fixdfsi>
   46d7c:	1009883a 	mov	r4,r2
   46d80:	1021883a 	mov	r16,r2
   46d84:	004eb800 	call	4eb80 <__floatsidf>
   46d88:	d9000f17 	ldw	r4,60(sp)
   46d8c:	d9401017 	ldw	r5,64(sp)
   46d90:	100d883a 	mov	r6,r2
   46d94:	180f883a 	mov	r7,r3
   46d98:	004e2040 	call	4e204 <__subdf3>
   46d9c:	1829883a 	mov	r20,r3
   46da0:	d8c00717 	ldw	r3,28(sp)
   46da4:	84000c04 	addi	r16,r16,48
   46da8:	1023883a 	mov	r17,r2
   46dac:	1c000005 	stb	r16,0(r3)
   46db0:	db001617 	ldw	r12,88(sp)
   46db4:	00800044 	movi	r2,1
   46db8:	60802226 	beq	r12,r2,46e44 <_dtoa_r+0x1424>
   46dbc:	d9c00717 	ldw	r7,28(sp)
   46dc0:	8805883a 	mov	r2,r17
   46dc4:	b82b883a 	mov	r21,r23
   46dc8:	3b19883a 	add	r12,r7,r12
   46dcc:	6023883a 	mov	r17,r12
   46dd0:	a007883a 	mov	r3,r20
   46dd4:	dc800f15 	stw	r18,60(sp)
   46dd8:	000d883a 	mov	r6,zero
   46ddc:	01d00934 	movhi	r7,16420
   46de0:	1009883a 	mov	r4,r2
   46de4:	180b883a 	mov	r5,r3
   46de8:	004daec0 	call	4daec <__muldf3>
   46dec:	180b883a 	mov	r5,r3
   46df0:	1009883a 	mov	r4,r2
   46df4:	1829883a 	mov	r20,r3
   46df8:	1025883a 	mov	r18,r2
   46dfc:	004eb000 	call	4eb00 <__fixdfsi>
   46e00:	1009883a 	mov	r4,r2
   46e04:	1021883a 	mov	r16,r2
   46e08:	004eb800 	call	4eb80 <__floatsidf>
   46e0c:	100d883a 	mov	r6,r2
   46e10:	180f883a 	mov	r7,r3
   46e14:	9009883a 	mov	r4,r18
   46e18:	a00b883a 	mov	r5,r20
   46e1c:	84000c04 	addi	r16,r16,48
   46e20:	004e2040 	call	4e204 <__subdf3>
   46e24:	ad400044 	addi	r21,r21,1
   46e28:	ac3fffc5 	stb	r16,-1(r21)
   46e2c:	ac7fea1e 	bne	r21,r17,46dd8 <__alt_data_end+0xfffd4dd8>
   46e30:	1023883a 	mov	r17,r2
   46e34:	d8801217 	ldw	r2,72(sp)
   46e38:	dc800f17 	ldw	r18,60(sp)
   46e3c:	1829883a 	mov	r20,r3
   46e40:	b8af883a 	add	r23,r23,r2
   46e44:	d9001417 	ldw	r4,80(sp)
   46e48:	d9401517 	ldw	r5,84(sp)
   46e4c:	000d883a 	mov	r6,zero
   46e50:	01cff834 	movhi	r7,16352
   46e54:	004c7000 	call	4c700 <__adddf3>
   46e58:	880d883a 	mov	r6,r17
   46e5c:	a00f883a 	mov	r7,r20
   46e60:	1009883a 	mov	r4,r2
   46e64:	180b883a 	mov	r5,r3
   46e68:	004d9f80 	call	4d9f8 <__ledf2>
   46e6c:	10003e0e 	bge	r2,zero,46f68 <_dtoa_r+0x1548>
   46e70:	d9001317 	ldw	r4,76(sp)
   46e74:	bd3fffc3 	ldbu	r20,-1(r23)
   46e78:	d9000515 	stw	r4,20(sp)
   46e7c:	003d3b06 	br	4636c <__alt_data_end+0xfffd436c>
   46e80:	0027883a 	mov	r19,zero
   46e84:	003f1b06 	br	46af4 <__alt_data_end+0xfffd4af4>
   46e88:	d8800817 	ldw	r2,32(sp)
   46e8c:	11e9c83a 	sub	r20,r2,r7
   46e90:	0005883a 	mov	r2,zero
   46e94:	003d5406 	br	463e8 <__alt_data_end+0xfffd43e8>
   46e98:	00800044 	movi	r2,1
   46e9c:	003dc706 	br	465bc <__alt_data_end+0xfffd45bc>
   46ea0:	d8c00217 	ldw	r3,8(sp)
   46ea4:	00800d84 	movi	r2,54
   46ea8:	dd400a17 	ldw	r21,40(sp)
   46eac:	10c5c83a 	sub	r2,r2,r3
   46eb0:	dd000817 	ldw	r20,32(sp)
   46eb4:	003d4c06 	br	463e8 <__alt_data_end+0xfffd43e8>
   46eb8:	dc800f15 	stw	r18,60(sp)
   46ebc:	dcc01015 	stw	r19,64(sp)
   46ec0:	04000084 	movi	r16,2
   46ec4:	003bed06 	br	45e7c <__alt_data_end+0xfffd3e7c>
   46ec8:	d9000617 	ldw	r4,24(sp)
   46ecc:	203f0d26 	beq	r4,zero,46b04 <__alt_data_end+0xfffd4b04>
   46ed0:	d9800c17 	ldw	r6,48(sp)
   46ed4:	01bcab0e 	bge	zero,r6,46184 <__alt_data_end+0xfffd4184>
   46ed8:	d9401017 	ldw	r5,64(sp)
   46edc:	d9000f17 	ldw	r4,60(sp)
   46ee0:	000d883a 	mov	r6,zero
   46ee4:	01d00934 	movhi	r7,16420
   46ee8:	004daec0 	call	4daec <__muldf3>
   46eec:	81000044 	addi	r4,r16,1
   46ef0:	d8800f15 	stw	r2,60(sp)
   46ef4:	d8c01015 	stw	r3,64(sp)
   46ef8:	004eb800 	call	4eb80 <__floatsidf>
   46efc:	d9800f17 	ldw	r6,60(sp)
   46f00:	d9c01017 	ldw	r7,64(sp)
   46f04:	1009883a 	mov	r4,r2
   46f08:	180b883a 	mov	r5,r3
   46f0c:	004daec0 	call	4daec <__muldf3>
   46f10:	01d00734 	movhi	r7,16412
   46f14:	000d883a 	mov	r6,zero
   46f18:	1009883a 	mov	r4,r2
   46f1c:	180b883a 	mov	r5,r3
   46f20:	004c7000 	call	4c700 <__adddf3>
   46f24:	d9c00517 	ldw	r7,20(sp)
   46f28:	047f3034 	movhi	r17,64704
   46f2c:	1021883a 	mov	r16,r2
   46f30:	39ffffc4 	addi	r7,r7,-1
   46f34:	d9c01315 	stw	r7,76(sp)
   46f38:	1c63883a 	add	r17,r3,r17
   46f3c:	db000c17 	ldw	r12,48(sp)
   46f40:	003bea06 	br	45eec <__alt_data_end+0xfffd3eec>
   46f44:	dc000915 	stw	r16,36(sp)
   46f48:	003e0e06 	br	46784 <__alt_data_end+0xfffd4784>
   46f4c:	01000e44 	movi	r4,57
   46f50:	8825883a 	mov	r18,r17
   46f54:	9dc00044 	addi	r23,r19,1
   46f58:	99000005 	stb	r4,0(r19)
   46f5c:	a023883a 	mov	r17,r20
   46f60:	dc000915 	stw	r16,36(sp)
   46f64:	003da406 	br	465f8 <__alt_data_end+0xfffd45f8>
   46f68:	d9801417 	ldw	r6,80(sp)
   46f6c:	d9c01517 	ldw	r7,84(sp)
   46f70:	0009883a 	mov	r4,zero
   46f74:	014ff834 	movhi	r5,16352
   46f78:	004e2040 	call	4e204 <__subdf3>
   46f7c:	880d883a 	mov	r6,r17
   46f80:	a00f883a 	mov	r7,r20
   46f84:	1009883a 	mov	r4,r2
   46f88:	180b883a 	mov	r5,r3
   46f8c:	004d91c0 	call	4d91c <__gedf2>
   46f90:	00bc7c0e 	bge	zero,r2,46184 <__alt_data_end+0xfffd4184>
   46f94:	01000c04 	movi	r4,48
   46f98:	00000106 	br	46fa0 <_dtoa_r+0x1580>
   46f9c:	102f883a 	mov	r23,r2
   46fa0:	b8bfffc4 	addi	r2,r23,-1
   46fa4:	10c00007 	ldb	r3,0(r2)
   46fa8:	193ffc26 	beq	r3,r4,46f9c <__alt_data_end+0xfffd4f9c>
   46fac:	d9801317 	ldw	r6,76(sp)
   46fb0:	d9800515 	stw	r6,20(sp)
   46fb4:	003c4406 	br	460c8 <__alt_data_end+0xfffd40c8>
   46fb8:	d9801317 	ldw	r6,76(sp)
   46fbc:	d9800515 	stw	r6,20(sp)
   46fc0:	003cea06 	br	4636c <__alt_data_end+0xfffd436c>
   46fc4:	dd800f17 	ldw	r22,60(sp)
   46fc8:	dcc01017 	ldw	r19,64(sp)
   46fcc:	dc801217 	ldw	r18,72(sp)
   46fd0:	003c6c06 	br	46184 <__alt_data_end+0xfffd4184>
   46fd4:	903e031e 	bne	r18,zero,467e4 <__alt_data_end+0xfffd47e4>
   46fd8:	003ebb06 	br	46ac8 <__alt_data_end+0xfffd4ac8>
   46fdc:	103e6c1e 	bne	r2,zero,46990 <__alt_data_end+0xfffd4990>
   46fe0:	4080004c 	andi	r2,r8,1
   46fe4:	103e6a26 	beq	r2,zero,46990 <__alt_data_end+0xfffd4990>
   46fe8:	003e6606 	br	46984 <__alt_data_end+0xfffd4984>
   46fec:	d8c00317 	ldw	r3,12(sp)
   46ff0:	00800084 	movi	r2,2
   46ff4:	10c02916 	blt	r2,r3,4709c <_dtoa_r+0x167c>
   46ff8:	d9000c17 	ldw	r4,48(sp)
   46ffc:	003e8806 	br	46a20 <__alt_data_end+0xfffd4a20>
   47000:	04000084 	movi	r16,2
   47004:	003b9d06 	br	45e7c <__alt_data_end+0xfffd3e7c>
   47008:	d9001317 	ldw	r4,76(sp)
   4700c:	d9000515 	stw	r4,20(sp)
   47010:	003cd606 	br	4636c <__alt_data_end+0xfffd436c>
   47014:	d8801317 	ldw	r2,76(sp)
   47018:	d8800515 	stw	r2,20(sp)
   4701c:	003c2a06 	br	460c8 <__alt_data_end+0xfffd40c8>
   47020:	d9800317 	ldw	r6,12(sp)
   47024:	00800084 	movi	r2,2
   47028:	11801516 	blt	r2,r6,47080 <_dtoa_r+0x1660>
   4702c:	d9c00c17 	ldw	r7,48(sp)
   47030:	d9c00615 	stw	r7,24(sp)
   47034:	003df706 	br	46814 <__alt_data_end+0xfffd4814>
   47038:	193d3926 	beq	r3,r4,46520 <__alt_data_end+0xfffd4520>
   4703c:	00c00f04 	movi	r3,60
   47040:	1885c83a 	sub	r2,r3,r2
   47044:	003ddf06 	br	467c4 <__alt_data_end+0xfffd47c4>
   47048:	e009883a 	mov	r4,fp
   4704c:	e0001115 	stw	zero,68(fp)
   47050:	000b883a 	mov	r5,zero
   47054:	00487880 	call	48788 <_Balloc>
   47058:	d8800715 	stw	r2,28(sp)
   4705c:	d8c00717 	ldw	r3,28(sp)
   47060:	00bfffc4 	movi	r2,-1
   47064:	01000044 	movi	r4,1
   47068:	d8800c15 	stw	r2,48(sp)
   4706c:	e0c01015 	stw	r3,64(fp)
   47070:	d9000b15 	stw	r4,44(sp)
   47074:	d8800615 	stw	r2,24(sp)
   47078:	d8002215 	stw	zero,136(sp)
   4707c:	003c4106 	br	46184 <__alt_data_end+0xfffd4184>
   47080:	d8c00c17 	ldw	r3,48(sp)
   47084:	d8c00615 	stw	r3,24(sp)
   47088:	003e7006 	br	46a4c <__alt_data_end+0xfffd4a4c>
   4708c:	04400044 	movi	r17,1
   47090:	003b2006 	br	45d14 <__alt_data_end+0xfffd3d14>
   47094:	000b883a 	mov	r5,zero
   47098:	003b3d06 	br	45d90 <__alt_data_end+0xfffd3d90>
   4709c:	d8800c17 	ldw	r2,48(sp)
   470a0:	d8800615 	stw	r2,24(sp)
   470a4:	003e6906 	br	46a4c <__alt_data_end+0xfffd4a4c>

000470a8 <__sflush_r>:
   470a8:	2880030b 	ldhu	r2,12(r5)
   470ac:	defffb04 	addi	sp,sp,-20
   470b0:	dcc00315 	stw	r19,12(sp)
   470b4:	dc400115 	stw	r17,4(sp)
   470b8:	dfc00415 	stw	ra,16(sp)
   470bc:	dc800215 	stw	r18,8(sp)
   470c0:	dc000015 	stw	r16,0(sp)
   470c4:	10c0020c 	andi	r3,r2,8
   470c8:	2823883a 	mov	r17,r5
   470cc:	2027883a 	mov	r19,r4
   470d0:	1800311e 	bne	r3,zero,47198 <__sflush_r+0xf0>
   470d4:	28c00117 	ldw	r3,4(r5)
   470d8:	10820014 	ori	r2,r2,2048
   470dc:	2880030d 	sth	r2,12(r5)
   470e0:	00c04b0e 	bge	zero,r3,47210 <__sflush_r+0x168>
   470e4:	8a000a17 	ldw	r8,40(r17)
   470e8:	40002326 	beq	r8,zero,47178 <__sflush_r+0xd0>
   470ec:	9c000017 	ldw	r16,0(r19)
   470f0:	10c4000c 	andi	r3,r2,4096
   470f4:	98000015 	stw	zero,0(r19)
   470f8:	18004826 	beq	r3,zero,4721c <__sflush_r+0x174>
   470fc:	89801417 	ldw	r6,80(r17)
   47100:	10c0010c 	andi	r3,r2,4
   47104:	18000626 	beq	r3,zero,47120 <__sflush_r+0x78>
   47108:	88c00117 	ldw	r3,4(r17)
   4710c:	88800c17 	ldw	r2,48(r17)
   47110:	30cdc83a 	sub	r6,r6,r3
   47114:	10000226 	beq	r2,zero,47120 <__sflush_r+0x78>
   47118:	88800f17 	ldw	r2,60(r17)
   4711c:	308dc83a 	sub	r6,r6,r2
   47120:	89400717 	ldw	r5,28(r17)
   47124:	000f883a 	mov	r7,zero
   47128:	9809883a 	mov	r4,r19
   4712c:	403ee83a 	callr	r8
   47130:	00ffffc4 	movi	r3,-1
   47134:	10c04426 	beq	r2,r3,47248 <__sflush_r+0x1a0>
   47138:	88c0030b 	ldhu	r3,12(r17)
   4713c:	89000417 	ldw	r4,16(r17)
   47140:	88000115 	stw	zero,4(r17)
   47144:	197dffcc 	andi	r5,r3,63487
   47148:	8940030d 	sth	r5,12(r17)
   4714c:	89000015 	stw	r4,0(r17)
   47150:	18c4000c 	andi	r3,r3,4096
   47154:	18002c1e 	bne	r3,zero,47208 <__sflush_r+0x160>
   47158:	89400c17 	ldw	r5,48(r17)
   4715c:	9c000015 	stw	r16,0(r19)
   47160:	28000526 	beq	r5,zero,47178 <__sflush_r+0xd0>
   47164:	88801004 	addi	r2,r17,64
   47168:	28800226 	beq	r5,r2,47174 <__sflush_r+0xcc>
   4716c:	9809883a 	mov	r4,r19
   47170:	00478c00 	call	478c0 <_free_r>
   47174:	88000c15 	stw	zero,48(r17)
   47178:	0005883a 	mov	r2,zero
   4717c:	dfc00417 	ldw	ra,16(sp)
   47180:	dcc00317 	ldw	r19,12(sp)
   47184:	dc800217 	ldw	r18,8(sp)
   47188:	dc400117 	ldw	r17,4(sp)
   4718c:	dc000017 	ldw	r16,0(sp)
   47190:	dec00504 	addi	sp,sp,20
   47194:	f800283a 	ret
   47198:	2c800417 	ldw	r18,16(r5)
   4719c:	903ff626 	beq	r18,zero,47178 <__alt_data_end+0xfffd5178>
   471a0:	2c000017 	ldw	r16,0(r5)
   471a4:	108000cc 	andi	r2,r2,3
   471a8:	2c800015 	stw	r18,0(r5)
   471ac:	84a1c83a 	sub	r16,r16,r18
   471b0:	1000131e 	bne	r2,zero,47200 <__sflush_r+0x158>
   471b4:	28800517 	ldw	r2,20(r5)
   471b8:	88800215 	stw	r2,8(r17)
   471bc:	04000316 	blt	zero,r16,471cc <__sflush_r+0x124>
   471c0:	003fed06 	br	47178 <__alt_data_end+0xfffd5178>
   471c4:	90a5883a 	add	r18,r18,r2
   471c8:	043feb0e 	bge	zero,r16,47178 <__alt_data_end+0xfffd5178>
   471cc:	88800917 	ldw	r2,36(r17)
   471d0:	89400717 	ldw	r5,28(r17)
   471d4:	800f883a 	mov	r7,r16
   471d8:	900d883a 	mov	r6,r18
   471dc:	9809883a 	mov	r4,r19
   471e0:	103ee83a 	callr	r2
   471e4:	80a1c83a 	sub	r16,r16,r2
   471e8:	00bff616 	blt	zero,r2,471c4 <__alt_data_end+0xfffd51c4>
   471ec:	88c0030b 	ldhu	r3,12(r17)
   471f0:	00bfffc4 	movi	r2,-1
   471f4:	18c01014 	ori	r3,r3,64
   471f8:	88c0030d 	sth	r3,12(r17)
   471fc:	003fdf06 	br	4717c <__alt_data_end+0xfffd517c>
   47200:	0005883a 	mov	r2,zero
   47204:	003fec06 	br	471b8 <__alt_data_end+0xfffd51b8>
   47208:	88801415 	stw	r2,80(r17)
   4720c:	003fd206 	br	47158 <__alt_data_end+0xfffd5158>
   47210:	28c00f17 	ldw	r3,60(r5)
   47214:	00ffb316 	blt	zero,r3,470e4 <__alt_data_end+0xfffd50e4>
   47218:	003fd706 	br	47178 <__alt_data_end+0xfffd5178>
   4721c:	89400717 	ldw	r5,28(r17)
   47220:	000d883a 	mov	r6,zero
   47224:	01c00044 	movi	r7,1
   47228:	9809883a 	mov	r4,r19
   4722c:	403ee83a 	callr	r8
   47230:	100d883a 	mov	r6,r2
   47234:	00bfffc4 	movi	r2,-1
   47238:	30801426 	beq	r6,r2,4728c <__sflush_r+0x1e4>
   4723c:	8880030b 	ldhu	r2,12(r17)
   47240:	8a000a17 	ldw	r8,40(r17)
   47244:	003fae06 	br	47100 <__alt_data_end+0xfffd5100>
   47248:	98c00017 	ldw	r3,0(r19)
   4724c:	183fba26 	beq	r3,zero,47138 <__alt_data_end+0xfffd5138>
   47250:	01000744 	movi	r4,29
   47254:	19000626 	beq	r3,r4,47270 <__sflush_r+0x1c8>
   47258:	01000584 	movi	r4,22
   4725c:	19000426 	beq	r3,r4,47270 <__sflush_r+0x1c8>
   47260:	88c0030b 	ldhu	r3,12(r17)
   47264:	18c01014 	ori	r3,r3,64
   47268:	88c0030d 	sth	r3,12(r17)
   4726c:	003fc306 	br	4717c <__alt_data_end+0xfffd517c>
   47270:	8880030b 	ldhu	r2,12(r17)
   47274:	88c00417 	ldw	r3,16(r17)
   47278:	88000115 	stw	zero,4(r17)
   4727c:	10bdffcc 	andi	r2,r2,63487
   47280:	8880030d 	sth	r2,12(r17)
   47284:	88c00015 	stw	r3,0(r17)
   47288:	003fb306 	br	47158 <__alt_data_end+0xfffd5158>
   4728c:	98800017 	ldw	r2,0(r19)
   47290:	103fea26 	beq	r2,zero,4723c <__alt_data_end+0xfffd523c>
   47294:	00c00744 	movi	r3,29
   47298:	10c00226 	beq	r2,r3,472a4 <__sflush_r+0x1fc>
   4729c:	00c00584 	movi	r3,22
   472a0:	10c0031e 	bne	r2,r3,472b0 <__sflush_r+0x208>
   472a4:	9c000015 	stw	r16,0(r19)
   472a8:	0005883a 	mov	r2,zero
   472ac:	003fb306 	br	4717c <__alt_data_end+0xfffd517c>
   472b0:	88c0030b 	ldhu	r3,12(r17)
   472b4:	3005883a 	mov	r2,r6
   472b8:	18c01014 	ori	r3,r3,64
   472bc:	88c0030d 	sth	r3,12(r17)
   472c0:	003fae06 	br	4717c <__alt_data_end+0xfffd517c>

000472c4 <_fflush_r>:
   472c4:	defffd04 	addi	sp,sp,-12
   472c8:	dc000115 	stw	r16,4(sp)
   472cc:	dfc00215 	stw	ra,8(sp)
   472d0:	2021883a 	mov	r16,r4
   472d4:	20000226 	beq	r4,zero,472e0 <_fflush_r+0x1c>
   472d8:	20800e17 	ldw	r2,56(r4)
   472dc:	10000c26 	beq	r2,zero,47310 <_fflush_r+0x4c>
   472e0:	2880030f 	ldh	r2,12(r5)
   472e4:	1000051e 	bne	r2,zero,472fc <_fflush_r+0x38>
   472e8:	0005883a 	mov	r2,zero
   472ec:	dfc00217 	ldw	ra,8(sp)
   472f0:	dc000117 	ldw	r16,4(sp)
   472f4:	dec00304 	addi	sp,sp,12
   472f8:	f800283a 	ret
   472fc:	8009883a 	mov	r4,r16
   47300:	dfc00217 	ldw	ra,8(sp)
   47304:	dc000117 	ldw	r16,4(sp)
   47308:	dec00304 	addi	sp,sp,12
   4730c:	00470a81 	jmpi	470a8 <__sflush_r>
   47310:	d9400015 	stw	r5,0(sp)
   47314:	00476a00 	call	476a0 <__sinit>
   47318:	d9400017 	ldw	r5,0(sp)
   4731c:	003ff006 	br	472e0 <__alt_data_end+0xfffd52e0>

00047320 <fflush>:
   47320:	20000526 	beq	r4,zero,47338 <fflush+0x18>
   47324:	00800174 	movhi	r2,5
   47328:	10931604 	addi	r2,r2,19544
   4732c:	200b883a 	mov	r5,r4
   47330:	11000017 	ldw	r4,0(r2)
   47334:	00472c41 	jmpi	472c4 <_fflush_r>
   47338:	00800174 	movhi	r2,5
   4733c:	10931504 	addi	r2,r2,19540
   47340:	11000017 	ldw	r4,0(r2)
   47344:	01400134 	movhi	r5,4
   47348:	295cb104 	addi	r5,r5,29380
   4734c:	00481501 	jmpi	48150 <_fwalk_reent>

00047350 <__fp_unlock>:
   47350:	0005883a 	mov	r2,zero
   47354:	f800283a 	ret

00047358 <_cleanup_r>:
   47358:	01400174 	movhi	r5,5
   4735c:	296d6904 	addi	r5,r5,-19036
   47360:	00481501 	jmpi	48150 <_fwalk_reent>

00047364 <__sinit.part.1>:
   47364:	defff704 	addi	sp,sp,-36
   47368:	00c00134 	movhi	r3,4
   4736c:	dfc00815 	stw	ra,32(sp)
   47370:	ddc00715 	stw	r23,28(sp)
   47374:	dd800615 	stw	r22,24(sp)
   47378:	dd400515 	stw	r21,20(sp)
   4737c:	dd000415 	stw	r20,16(sp)
   47380:	dcc00315 	stw	r19,12(sp)
   47384:	dc800215 	stw	r18,8(sp)
   47388:	dc400115 	stw	r17,4(sp)
   4738c:	dc000015 	stw	r16,0(sp)
   47390:	18dcd604 	addi	r3,r3,29528
   47394:	24000117 	ldw	r16,4(r4)
   47398:	20c00f15 	stw	r3,60(r4)
   4739c:	2080bb04 	addi	r2,r4,748
   473a0:	00c000c4 	movi	r3,3
   473a4:	20c0b915 	stw	r3,740(r4)
   473a8:	2080ba15 	stw	r2,744(r4)
   473ac:	2000b815 	stw	zero,736(r4)
   473b0:	05c00204 	movi	r23,8
   473b4:	00800104 	movi	r2,4
   473b8:	2025883a 	mov	r18,r4
   473bc:	b80d883a 	mov	r6,r23
   473c0:	81001704 	addi	r4,r16,92
   473c4:	000b883a 	mov	r5,zero
   473c8:	80000015 	stw	zero,0(r16)
   473cc:	80000115 	stw	zero,4(r16)
   473d0:	80000215 	stw	zero,8(r16)
   473d4:	8080030d 	sth	r2,12(r16)
   473d8:	80001915 	stw	zero,100(r16)
   473dc:	8000038d 	sth	zero,14(r16)
   473e0:	80000415 	stw	zero,16(r16)
   473e4:	80000515 	stw	zero,20(r16)
   473e8:	80000615 	stw	zero,24(r16)
   473ec:	0042a880 	call	42a88 <memset>
   473f0:	05800134 	movhi	r22,4
   473f4:	94400217 	ldw	r17,8(r18)
   473f8:	05400134 	movhi	r21,4
   473fc:	05000134 	movhi	r20,4
   47400:	04c00134 	movhi	r19,4
   47404:	b58c0404 	addi	r22,r22,12304
   47408:	ad4c1b04 	addi	r21,r21,12396
   4740c:	a50c3a04 	addi	r20,r20,12520
   47410:	9ccc5104 	addi	r19,r19,12612
   47414:	85800815 	stw	r22,32(r16)
   47418:	85400915 	stw	r21,36(r16)
   4741c:	85000a15 	stw	r20,40(r16)
   47420:	84c00b15 	stw	r19,44(r16)
   47424:	84000715 	stw	r16,28(r16)
   47428:	00800284 	movi	r2,10
   4742c:	8880030d 	sth	r2,12(r17)
   47430:	00800044 	movi	r2,1
   47434:	b80d883a 	mov	r6,r23
   47438:	89001704 	addi	r4,r17,92
   4743c:	000b883a 	mov	r5,zero
   47440:	88000015 	stw	zero,0(r17)
   47444:	88000115 	stw	zero,4(r17)
   47448:	88000215 	stw	zero,8(r17)
   4744c:	88001915 	stw	zero,100(r17)
   47450:	8880038d 	sth	r2,14(r17)
   47454:	88000415 	stw	zero,16(r17)
   47458:	88000515 	stw	zero,20(r17)
   4745c:	88000615 	stw	zero,24(r17)
   47460:	0042a880 	call	42a88 <memset>
   47464:	94000317 	ldw	r16,12(r18)
   47468:	00800484 	movi	r2,18
   4746c:	8c400715 	stw	r17,28(r17)
   47470:	8d800815 	stw	r22,32(r17)
   47474:	8d400915 	stw	r21,36(r17)
   47478:	8d000a15 	stw	r20,40(r17)
   4747c:	8cc00b15 	stw	r19,44(r17)
   47480:	8080030d 	sth	r2,12(r16)
   47484:	00800084 	movi	r2,2
   47488:	80000015 	stw	zero,0(r16)
   4748c:	80000115 	stw	zero,4(r16)
   47490:	80000215 	stw	zero,8(r16)
   47494:	80001915 	stw	zero,100(r16)
   47498:	8080038d 	sth	r2,14(r16)
   4749c:	80000415 	stw	zero,16(r16)
   474a0:	80000515 	stw	zero,20(r16)
   474a4:	80000615 	stw	zero,24(r16)
   474a8:	b80d883a 	mov	r6,r23
   474ac:	000b883a 	mov	r5,zero
   474b0:	81001704 	addi	r4,r16,92
   474b4:	0042a880 	call	42a88 <memset>
   474b8:	00800044 	movi	r2,1
   474bc:	84000715 	stw	r16,28(r16)
   474c0:	85800815 	stw	r22,32(r16)
   474c4:	85400915 	stw	r21,36(r16)
   474c8:	85000a15 	stw	r20,40(r16)
   474cc:	84c00b15 	stw	r19,44(r16)
   474d0:	90800e15 	stw	r2,56(r18)
   474d4:	dfc00817 	ldw	ra,32(sp)
   474d8:	ddc00717 	ldw	r23,28(sp)
   474dc:	dd800617 	ldw	r22,24(sp)
   474e0:	dd400517 	ldw	r21,20(sp)
   474e4:	dd000417 	ldw	r20,16(sp)
   474e8:	dcc00317 	ldw	r19,12(sp)
   474ec:	dc800217 	ldw	r18,8(sp)
   474f0:	dc400117 	ldw	r17,4(sp)
   474f4:	dc000017 	ldw	r16,0(sp)
   474f8:	dec00904 	addi	sp,sp,36
   474fc:	f800283a 	ret

00047500 <__fp_lock>:
   47500:	0005883a 	mov	r2,zero
   47504:	f800283a 	ret

00047508 <__sfmoreglue>:
   47508:	defffc04 	addi	sp,sp,-16
   4750c:	dc400115 	stw	r17,4(sp)
   47510:	2c7fffc4 	addi	r17,r5,-1
   47514:	8c401a24 	muli	r17,r17,104
   47518:	dc800215 	stw	r18,8(sp)
   4751c:	2825883a 	mov	r18,r5
   47520:	89401d04 	addi	r5,r17,116
   47524:	dc000015 	stw	r16,0(sp)
   47528:	dfc00315 	stw	ra,12(sp)
   4752c:	004227c0 	call	4227c <_malloc_r>
   47530:	1021883a 	mov	r16,r2
   47534:	10000726 	beq	r2,zero,47554 <__sfmoreglue+0x4c>
   47538:	11000304 	addi	r4,r2,12
   4753c:	10000015 	stw	zero,0(r2)
   47540:	14800115 	stw	r18,4(r2)
   47544:	11000215 	stw	r4,8(r2)
   47548:	89801a04 	addi	r6,r17,104
   4754c:	000b883a 	mov	r5,zero
   47550:	0042a880 	call	42a88 <memset>
   47554:	8005883a 	mov	r2,r16
   47558:	dfc00317 	ldw	ra,12(sp)
   4755c:	dc800217 	ldw	r18,8(sp)
   47560:	dc400117 	ldw	r17,4(sp)
   47564:	dc000017 	ldw	r16,0(sp)
   47568:	dec00404 	addi	sp,sp,16
   4756c:	f800283a 	ret

00047570 <__sfp>:
   47570:	defffb04 	addi	sp,sp,-20
   47574:	dc000015 	stw	r16,0(sp)
   47578:	04000174 	movhi	r16,5
   4757c:	84131504 	addi	r16,r16,19540
   47580:	dcc00315 	stw	r19,12(sp)
   47584:	2027883a 	mov	r19,r4
   47588:	81000017 	ldw	r4,0(r16)
   4758c:	dfc00415 	stw	ra,16(sp)
   47590:	dc800215 	stw	r18,8(sp)
   47594:	20800e17 	ldw	r2,56(r4)
   47598:	dc400115 	stw	r17,4(sp)
   4759c:	1000021e 	bne	r2,zero,475a8 <__sfp+0x38>
   475a0:	00473640 	call	47364 <__sinit.part.1>
   475a4:	81000017 	ldw	r4,0(r16)
   475a8:	2480b804 	addi	r18,r4,736
   475ac:	047fffc4 	movi	r17,-1
   475b0:	91000117 	ldw	r4,4(r18)
   475b4:	94000217 	ldw	r16,8(r18)
   475b8:	213fffc4 	addi	r4,r4,-1
   475bc:	20000a16 	blt	r4,zero,475e8 <__sfp+0x78>
   475c0:	8080030f 	ldh	r2,12(r16)
   475c4:	10000c26 	beq	r2,zero,475f8 <__sfp+0x88>
   475c8:	80c01d04 	addi	r3,r16,116
   475cc:	00000206 	br	475d8 <__sfp+0x68>
   475d0:	18bfe60f 	ldh	r2,-104(r3)
   475d4:	10000826 	beq	r2,zero,475f8 <__sfp+0x88>
   475d8:	213fffc4 	addi	r4,r4,-1
   475dc:	1c3ffd04 	addi	r16,r3,-12
   475e0:	18c01a04 	addi	r3,r3,104
   475e4:	247ffa1e 	bne	r4,r17,475d0 <__alt_data_end+0xfffd55d0>
   475e8:	90800017 	ldw	r2,0(r18)
   475ec:	10001d26 	beq	r2,zero,47664 <__sfp+0xf4>
   475f0:	1025883a 	mov	r18,r2
   475f4:	003fee06 	br	475b0 <__alt_data_end+0xfffd55b0>
   475f8:	00bfffc4 	movi	r2,-1
   475fc:	8080038d 	sth	r2,14(r16)
   47600:	00800044 	movi	r2,1
   47604:	8080030d 	sth	r2,12(r16)
   47608:	80001915 	stw	zero,100(r16)
   4760c:	80000015 	stw	zero,0(r16)
   47610:	80000215 	stw	zero,8(r16)
   47614:	80000115 	stw	zero,4(r16)
   47618:	80000415 	stw	zero,16(r16)
   4761c:	80000515 	stw	zero,20(r16)
   47620:	80000615 	stw	zero,24(r16)
   47624:	01800204 	movi	r6,8
   47628:	000b883a 	mov	r5,zero
   4762c:	81001704 	addi	r4,r16,92
   47630:	0042a880 	call	42a88 <memset>
   47634:	8005883a 	mov	r2,r16
   47638:	80000c15 	stw	zero,48(r16)
   4763c:	80000d15 	stw	zero,52(r16)
   47640:	80001115 	stw	zero,68(r16)
   47644:	80001215 	stw	zero,72(r16)
   47648:	dfc00417 	ldw	ra,16(sp)
   4764c:	dcc00317 	ldw	r19,12(sp)
   47650:	dc800217 	ldw	r18,8(sp)
   47654:	dc400117 	ldw	r17,4(sp)
   47658:	dc000017 	ldw	r16,0(sp)
   4765c:	dec00504 	addi	sp,sp,20
   47660:	f800283a 	ret
   47664:	01400104 	movi	r5,4
   47668:	9809883a 	mov	r4,r19
   4766c:	00475080 	call	47508 <__sfmoreglue>
   47670:	90800015 	stw	r2,0(r18)
   47674:	103fde1e 	bne	r2,zero,475f0 <__alt_data_end+0xfffd55f0>
   47678:	00800304 	movi	r2,12
   4767c:	98800015 	stw	r2,0(r19)
   47680:	0005883a 	mov	r2,zero
   47684:	003ff006 	br	47648 <__alt_data_end+0xfffd5648>

00047688 <_cleanup>:
   47688:	00800174 	movhi	r2,5
   4768c:	10931504 	addi	r2,r2,19540
   47690:	11000017 	ldw	r4,0(r2)
   47694:	01400174 	movhi	r5,5
   47698:	296d6904 	addi	r5,r5,-19036
   4769c:	00481501 	jmpi	48150 <_fwalk_reent>

000476a0 <__sinit>:
   476a0:	20800e17 	ldw	r2,56(r4)
   476a4:	10000126 	beq	r2,zero,476ac <__sinit+0xc>
   476a8:	f800283a 	ret
   476ac:	00473641 	jmpi	47364 <__sinit.part.1>

000476b0 <__sfp_lock_acquire>:
   476b0:	f800283a 	ret

000476b4 <__sfp_lock_release>:
   476b4:	f800283a 	ret

000476b8 <__sinit_lock_acquire>:
   476b8:	f800283a 	ret

000476bc <__sinit_lock_release>:
   476bc:	f800283a 	ret

000476c0 <__fp_lock_all>:
   476c0:	00800174 	movhi	r2,5
   476c4:	10931604 	addi	r2,r2,19544
   476c8:	11000017 	ldw	r4,0(r2)
   476cc:	01400134 	movhi	r5,4
   476d0:	295d4004 	addi	r5,r5,29952
   476d4:	004808c1 	jmpi	4808c <_fwalk>

000476d8 <__fp_unlock_all>:
   476d8:	00800174 	movhi	r2,5
   476dc:	10931604 	addi	r2,r2,19544
   476e0:	11000017 	ldw	r4,0(r2)
   476e4:	01400134 	movhi	r5,4
   476e8:	295cd404 	addi	r5,r5,29520
   476ec:	004808c1 	jmpi	4808c <_fwalk>

000476f0 <__sflags>:
   476f0:	28800007 	ldb	r2,0(r5)
   476f4:	00c01c84 	movi	r3,114
   476f8:	10c02426 	beq	r2,r3,4778c <__sflags+0x9c>
   476fc:	00c01dc4 	movi	r3,119
   47700:	10c01e26 	beq	r2,r3,4777c <__sflags+0x8c>
   47704:	00c01844 	movi	r3,97
   47708:	10c00426 	beq	r2,r3,4771c <__sflags+0x2c>
   4770c:	00800584 	movi	r2,22
   47710:	20800015 	stw	r2,0(r4)
   47714:	0005883a 	mov	r2,zero
   47718:	f800283a 	ret
   4771c:	02c08204 	movi	r11,520
   47720:	01000044 	movi	r4,1
   47724:	00804204 	movi	r2,264
   47728:	01c00ac4 	movi	r7,43
   4772c:	02bff8c4 	movi	r10,-29
   47730:	027fff04 	movi	r9,-4
   47734:	02001e04 	movi	r8,120
   47738:	29400044 	addi	r5,r5,1
   4773c:	28c00007 	ldb	r3,0(r5)
   47740:	18000626 	beq	r3,zero,4775c <__sflags+0x6c>
   47744:	19c00826 	beq	r3,r7,47768 <__sflags+0x78>
   47748:	1a3ffb1e 	bne	r3,r8,47738 <__alt_data_end+0xfffd5738>
   4774c:	29400044 	addi	r5,r5,1
   47750:	28c00007 	ldb	r3,0(r5)
   47754:	21020014 	ori	r4,r4,2048
   47758:	183ffa1e 	bne	r3,zero,47744 <__alt_data_end+0xfffd5744>
   4775c:	22c8b03a 	or	r4,r4,r11
   47760:	31000015 	stw	r4,0(r6)
   47764:	f800283a 	ret
   47768:	1284703a 	and	r2,r2,r10
   4776c:	2248703a 	and	r4,r4,r9
   47770:	10800414 	ori	r2,r2,16
   47774:	21000094 	ori	r4,r4,2
   47778:	003fef06 	br	47738 <__alt_data_end+0xfffd5738>
   4777c:	02c18004 	movi	r11,1536
   47780:	01000044 	movi	r4,1
   47784:	00800204 	movi	r2,8
   47788:	003fe706 	br	47728 <__alt_data_end+0xfffd5728>
   4778c:	0017883a 	mov	r11,zero
   47790:	0009883a 	mov	r4,zero
   47794:	00800104 	movi	r2,4
   47798:	003fe306 	br	47728 <__alt_data_end+0xfffd5728>

0004779c <_malloc_trim_r>:
   4779c:	defffb04 	addi	sp,sp,-20
   477a0:	dcc00315 	stw	r19,12(sp)
   477a4:	04c00174 	movhi	r19,5
   477a8:	dc800215 	stw	r18,8(sp)
   477ac:	dc400115 	stw	r17,4(sp)
   477b0:	dc000015 	stw	r16,0(sp)
   477b4:	dfc00415 	stw	ra,16(sp)
   477b8:	2821883a 	mov	r16,r5
   477bc:	9ccd2704 	addi	r19,r19,13468
   477c0:	2025883a 	mov	r18,r4
   477c4:	004f7780 	call	4f778 <__malloc_lock>
   477c8:	98800217 	ldw	r2,8(r19)
   477cc:	14400117 	ldw	r17,4(r2)
   477d0:	00bfff04 	movi	r2,-4
   477d4:	88a2703a 	and	r17,r17,r2
   477d8:	8c21c83a 	sub	r16,r17,r16
   477dc:	8403fbc4 	addi	r16,r16,4079
   477e0:	8020d33a 	srli	r16,r16,12
   477e4:	0083ffc4 	movi	r2,4095
   477e8:	843fffc4 	addi	r16,r16,-1
   477ec:	8020933a 	slli	r16,r16,12
   477f0:	1400060e 	bge	r2,r16,4780c <_malloc_trim_r+0x70>
   477f4:	000b883a 	mov	r5,zero
   477f8:	9009883a 	mov	r4,r18
   477fc:	0042fbc0 	call	42fbc <_sbrk_r>
   47800:	98c00217 	ldw	r3,8(r19)
   47804:	1c47883a 	add	r3,r3,r17
   47808:	10c00a26 	beq	r2,r3,47834 <_malloc_trim_r+0x98>
   4780c:	9009883a 	mov	r4,r18
   47810:	004f79c0 	call	4f79c <__malloc_unlock>
   47814:	0005883a 	mov	r2,zero
   47818:	dfc00417 	ldw	ra,16(sp)
   4781c:	dcc00317 	ldw	r19,12(sp)
   47820:	dc800217 	ldw	r18,8(sp)
   47824:	dc400117 	ldw	r17,4(sp)
   47828:	dc000017 	ldw	r16,0(sp)
   4782c:	dec00504 	addi	sp,sp,20
   47830:	f800283a 	ret
   47834:	040bc83a 	sub	r5,zero,r16
   47838:	9009883a 	mov	r4,r18
   4783c:	0042fbc0 	call	42fbc <_sbrk_r>
   47840:	00ffffc4 	movi	r3,-1
   47844:	10c00d26 	beq	r2,r3,4787c <_malloc_trim_r+0xe0>
   47848:	00c00174 	movhi	r3,5
   4784c:	18db5304 	addi	r3,r3,27980
   47850:	18800017 	ldw	r2,0(r3)
   47854:	99000217 	ldw	r4,8(r19)
   47858:	8c23c83a 	sub	r17,r17,r16
   4785c:	8c400054 	ori	r17,r17,1
   47860:	1421c83a 	sub	r16,r2,r16
   47864:	24400115 	stw	r17,4(r4)
   47868:	9009883a 	mov	r4,r18
   4786c:	1c000015 	stw	r16,0(r3)
   47870:	004f79c0 	call	4f79c <__malloc_unlock>
   47874:	00800044 	movi	r2,1
   47878:	003fe706 	br	47818 <__alt_data_end+0xfffd5818>
   4787c:	000b883a 	mov	r5,zero
   47880:	9009883a 	mov	r4,r18
   47884:	0042fbc0 	call	42fbc <_sbrk_r>
   47888:	99000217 	ldw	r4,8(r19)
   4788c:	014003c4 	movi	r5,15
   47890:	1107c83a 	sub	r3,r2,r4
   47894:	28ffdd0e 	bge	r5,r3,4780c <__alt_data_end+0xfffd580c>
   47898:	01400174 	movhi	r5,5
   4789c:	29531704 	addi	r5,r5,19548
   478a0:	29400017 	ldw	r5,0(r5)
   478a4:	18c00054 	ori	r3,r3,1
   478a8:	20c00115 	stw	r3,4(r4)
   478ac:	00c00174 	movhi	r3,5
   478b0:	1145c83a 	sub	r2,r2,r5
   478b4:	18db5304 	addi	r3,r3,27980
   478b8:	18800015 	stw	r2,0(r3)
   478bc:	003fd306 	br	4780c <__alt_data_end+0xfffd580c>

000478c0 <_free_r>:
   478c0:	28004126 	beq	r5,zero,479c8 <_free_r+0x108>
   478c4:	defffd04 	addi	sp,sp,-12
   478c8:	dc400115 	stw	r17,4(sp)
   478cc:	dc000015 	stw	r16,0(sp)
   478d0:	2023883a 	mov	r17,r4
   478d4:	2821883a 	mov	r16,r5
   478d8:	dfc00215 	stw	ra,8(sp)
   478dc:	004f7780 	call	4f778 <__malloc_lock>
   478e0:	81ffff17 	ldw	r7,-4(r16)
   478e4:	00bfff84 	movi	r2,-2
   478e8:	01000174 	movhi	r4,5
   478ec:	81bffe04 	addi	r6,r16,-8
   478f0:	3884703a 	and	r2,r7,r2
   478f4:	210d2704 	addi	r4,r4,13468
   478f8:	308b883a 	add	r5,r6,r2
   478fc:	2a400117 	ldw	r9,4(r5)
   47900:	22000217 	ldw	r8,8(r4)
   47904:	00ffff04 	movi	r3,-4
   47908:	48c6703a 	and	r3,r9,r3
   4790c:	2a005726 	beq	r5,r8,47a6c <_free_r+0x1ac>
   47910:	28c00115 	stw	r3,4(r5)
   47914:	39c0004c 	andi	r7,r7,1
   47918:	3800091e 	bne	r7,zero,47940 <_free_r+0x80>
   4791c:	823ffe17 	ldw	r8,-8(r16)
   47920:	22400204 	addi	r9,r4,8
   47924:	320dc83a 	sub	r6,r6,r8
   47928:	31c00217 	ldw	r7,8(r6)
   4792c:	1205883a 	add	r2,r2,r8
   47930:	3a406526 	beq	r7,r9,47ac8 <_free_r+0x208>
   47934:	32000317 	ldw	r8,12(r6)
   47938:	3a000315 	stw	r8,12(r7)
   4793c:	41c00215 	stw	r7,8(r8)
   47940:	28cf883a 	add	r7,r5,r3
   47944:	39c00117 	ldw	r7,4(r7)
   47948:	39c0004c 	andi	r7,r7,1
   4794c:	38003a26 	beq	r7,zero,47a38 <_free_r+0x178>
   47950:	10c00054 	ori	r3,r2,1
   47954:	30c00115 	stw	r3,4(r6)
   47958:	3087883a 	add	r3,r6,r2
   4795c:	18800015 	stw	r2,0(r3)
   47960:	00c07fc4 	movi	r3,511
   47964:	18801936 	bltu	r3,r2,479cc <_free_r+0x10c>
   47968:	1004d0fa 	srli	r2,r2,3
   4796c:	01c00044 	movi	r7,1
   47970:	21400117 	ldw	r5,4(r4)
   47974:	10c00044 	addi	r3,r2,1
   47978:	18c7883a 	add	r3,r3,r3
   4797c:	1005d0ba 	srai	r2,r2,2
   47980:	18c7883a 	add	r3,r3,r3
   47984:	18c7883a 	add	r3,r3,r3
   47988:	1907883a 	add	r3,r3,r4
   4798c:	3884983a 	sll	r2,r7,r2
   47990:	19c00017 	ldw	r7,0(r3)
   47994:	1a3ffe04 	addi	r8,r3,-8
   47998:	1144b03a 	or	r2,r2,r5
   4799c:	32000315 	stw	r8,12(r6)
   479a0:	31c00215 	stw	r7,8(r6)
   479a4:	20800115 	stw	r2,4(r4)
   479a8:	19800015 	stw	r6,0(r3)
   479ac:	39800315 	stw	r6,12(r7)
   479b0:	8809883a 	mov	r4,r17
   479b4:	dfc00217 	ldw	ra,8(sp)
   479b8:	dc400117 	ldw	r17,4(sp)
   479bc:	dc000017 	ldw	r16,0(sp)
   479c0:	dec00304 	addi	sp,sp,12
   479c4:	004f79c1 	jmpi	4f79c <__malloc_unlock>
   479c8:	f800283a 	ret
   479cc:	100ad27a 	srli	r5,r2,9
   479d0:	00c00104 	movi	r3,4
   479d4:	19404a36 	bltu	r3,r5,47b00 <_free_r+0x240>
   479d8:	100ad1ba 	srli	r5,r2,6
   479dc:	28c00e44 	addi	r3,r5,57
   479e0:	18c7883a 	add	r3,r3,r3
   479e4:	29400e04 	addi	r5,r5,56
   479e8:	18c7883a 	add	r3,r3,r3
   479ec:	18c7883a 	add	r3,r3,r3
   479f0:	1909883a 	add	r4,r3,r4
   479f4:	20c00017 	ldw	r3,0(r4)
   479f8:	01c00174 	movhi	r7,5
   479fc:	213ffe04 	addi	r4,r4,-8
   47a00:	39cd2704 	addi	r7,r7,13468
   47a04:	20c04426 	beq	r4,r3,47b18 <_free_r+0x258>
   47a08:	01ffff04 	movi	r7,-4
   47a0c:	19400117 	ldw	r5,4(r3)
   47a10:	29ca703a 	and	r5,r5,r7
   47a14:	1140022e 	bgeu	r2,r5,47a20 <_free_r+0x160>
   47a18:	18c00217 	ldw	r3,8(r3)
   47a1c:	20fffb1e 	bne	r4,r3,47a0c <__alt_data_end+0xfffd5a0c>
   47a20:	19000317 	ldw	r4,12(r3)
   47a24:	31000315 	stw	r4,12(r6)
   47a28:	30c00215 	stw	r3,8(r6)
   47a2c:	21800215 	stw	r6,8(r4)
   47a30:	19800315 	stw	r6,12(r3)
   47a34:	003fde06 	br	479b0 <__alt_data_end+0xfffd59b0>
   47a38:	29c00217 	ldw	r7,8(r5)
   47a3c:	10c5883a 	add	r2,r2,r3
   47a40:	00c00174 	movhi	r3,5
   47a44:	18cd2904 	addi	r3,r3,13476
   47a48:	38c03b26 	beq	r7,r3,47b38 <_free_r+0x278>
   47a4c:	2a000317 	ldw	r8,12(r5)
   47a50:	11400054 	ori	r5,r2,1
   47a54:	3087883a 	add	r3,r6,r2
   47a58:	3a000315 	stw	r8,12(r7)
   47a5c:	41c00215 	stw	r7,8(r8)
   47a60:	31400115 	stw	r5,4(r6)
   47a64:	18800015 	stw	r2,0(r3)
   47a68:	003fbd06 	br	47960 <__alt_data_end+0xfffd5960>
   47a6c:	39c0004c 	andi	r7,r7,1
   47a70:	10c5883a 	add	r2,r2,r3
   47a74:	3800071e 	bne	r7,zero,47a94 <_free_r+0x1d4>
   47a78:	81fffe17 	ldw	r7,-8(r16)
   47a7c:	31cdc83a 	sub	r6,r6,r7
   47a80:	30c00317 	ldw	r3,12(r6)
   47a84:	31400217 	ldw	r5,8(r6)
   47a88:	11c5883a 	add	r2,r2,r7
   47a8c:	28c00315 	stw	r3,12(r5)
   47a90:	19400215 	stw	r5,8(r3)
   47a94:	10c00054 	ori	r3,r2,1
   47a98:	30c00115 	stw	r3,4(r6)
   47a9c:	00c00174 	movhi	r3,5
   47aa0:	18d31804 	addi	r3,r3,19552
   47aa4:	18c00017 	ldw	r3,0(r3)
   47aa8:	21800215 	stw	r6,8(r4)
   47aac:	10ffc036 	bltu	r2,r3,479b0 <__alt_data_end+0xfffd59b0>
   47ab0:	00800174 	movhi	r2,5
   47ab4:	109adb04 	addi	r2,r2,27500
   47ab8:	11400017 	ldw	r5,0(r2)
   47abc:	8809883a 	mov	r4,r17
   47ac0:	004779c0 	call	4779c <_malloc_trim_r>
   47ac4:	003fba06 	br	479b0 <__alt_data_end+0xfffd59b0>
   47ac8:	28c9883a 	add	r4,r5,r3
   47acc:	21000117 	ldw	r4,4(r4)
   47ad0:	2100004c 	andi	r4,r4,1
   47ad4:	2000391e 	bne	r4,zero,47bbc <_free_r+0x2fc>
   47ad8:	29c00217 	ldw	r7,8(r5)
   47adc:	29000317 	ldw	r4,12(r5)
   47ae0:	1885883a 	add	r2,r3,r2
   47ae4:	10c00054 	ori	r3,r2,1
   47ae8:	39000315 	stw	r4,12(r7)
   47aec:	21c00215 	stw	r7,8(r4)
   47af0:	30c00115 	stw	r3,4(r6)
   47af4:	308d883a 	add	r6,r6,r2
   47af8:	30800015 	stw	r2,0(r6)
   47afc:	003fac06 	br	479b0 <__alt_data_end+0xfffd59b0>
   47b00:	00c00504 	movi	r3,20
   47b04:	19401536 	bltu	r3,r5,47b5c <_free_r+0x29c>
   47b08:	28c01704 	addi	r3,r5,92
   47b0c:	18c7883a 	add	r3,r3,r3
   47b10:	294016c4 	addi	r5,r5,91
   47b14:	003fb406 	br	479e8 <__alt_data_end+0xfffd59e8>
   47b18:	280bd0ba 	srai	r5,r5,2
   47b1c:	00c00044 	movi	r3,1
   47b20:	38800117 	ldw	r2,4(r7)
   47b24:	194a983a 	sll	r5,r3,r5
   47b28:	2007883a 	mov	r3,r4
   47b2c:	2884b03a 	or	r2,r5,r2
   47b30:	38800115 	stw	r2,4(r7)
   47b34:	003fbb06 	br	47a24 <__alt_data_end+0xfffd5a24>
   47b38:	21800515 	stw	r6,20(r4)
   47b3c:	21800415 	stw	r6,16(r4)
   47b40:	10c00054 	ori	r3,r2,1
   47b44:	31c00315 	stw	r7,12(r6)
   47b48:	31c00215 	stw	r7,8(r6)
   47b4c:	30c00115 	stw	r3,4(r6)
   47b50:	308d883a 	add	r6,r6,r2
   47b54:	30800015 	stw	r2,0(r6)
   47b58:	003f9506 	br	479b0 <__alt_data_end+0xfffd59b0>
   47b5c:	00c01504 	movi	r3,84
   47b60:	19400536 	bltu	r3,r5,47b78 <_free_r+0x2b8>
   47b64:	100ad33a 	srli	r5,r2,12
   47b68:	28c01bc4 	addi	r3,r5,111
   47b6c:	18c7883a 	add	r3,r3,r3
   47b70:	29401b84 	addi	r5,r5,110
   47b74:	003f9c06 	br	479e8 <__alt_data_end+0xfffd59e8>
   47b78:	00c05504 	movi	r3,340
   47b7c:	19400536 	bltu	r3,r5,47b94 <_free_r+0x2d4>
   47b80:	100ad3fa 	srli	r5,r2,15
   47b84:	28c01e04 	addi	r3,r5,120
   47b88:	18c7883a 	add	r3,r3,r3
   47b8c:	29401dc4 	addi	r5,r5,119
   47b90:	003f9506 	br	479e8 <__alt_data_end+0xfffd59e8>
   47b94:	00c15504 	movi	r3,1364
   47b98:	19400536 	bltu	r3,r5,47bb0 <_free_r+0x2f0>
   47b9c:	100ad4ba 	srli	r5,r2,18
   47ba0:	28c01f44 	addi	r3,r5,125
   47ba4:	18c7883a 	add	r3,r3,r3
   47ba8:	29401f04 	addi	r5,r5,124
   47bac:	003f8e06 	br	479e8 <__alt_data_end+0xfffd59e8>
   47bb0:	00c03f84 	movi	r3,254
   47bb4:	01401f84 	movi	r5,126
   47bb8:	003f8b06 	br	479e8 <__alt_data_end+0xfffd59e8>
   47bbc:	10c00054 	ori	r3,r2,1
   47bc0:	30c00115 	stw	r3,4(r6)
   47bc4:	308d883a 	add	r6,r6,r2
   47bc8:	30800015 	stw	r2,0(r6)
   47bcc:	003f7806 	br	479b0 <__alt_data_end+0xfffd59b0>

00047bd0 <__sfvwrite_r>:
   47bd0:	30800217 	ldw	r2,8(r6)
   47bd4:	10006726 	beq	r2,zero,47d74 <__sfvwrite_r+0x1a4>
   47bd8:	28c0030b 	ldhu	r3,12(r5)
   47bdc:	defff404 	addi	sp,sp,-48
   47be0:	dd400715 	stw	r21,28(sp)
   47be4:	dd000615 	stw	r20,24(sp)
   47be8:	dc000215 	stw	r16,8(sp)
   47bec:	dfc00b15 	stw	ra,44(sp)
   47bf0:	df000a15 	stw	fp,40(sp)
   47bf4:	ddc00915 	stw	r23,36(sp)
   47bf8:	dd800815 	stw	r22,32(sp)
   47bfc:	dcc00515 	stw	r19,20(sp)
   47c00:	dc800415 	stw	r18,16(sp)
   47c04:	dc400315 	stw	r17,12(sp)
   47c08:	1880020c 	andi	r2,r3,8
   47c0c:	2821883a 	mov	r16,r5
   47c10:	202b883a 	mov	r21,r4
   47c14:	3029883a 	mov	r20,r6
   47c18:	10002726 	beq	r2,zero,47cb8 <__sfvwrite_r+0xe8>
   47c1c:	28800417 	ldw	r2,16(r5)
   47c20:	10002526 	beq	r2,zero,47cb8 <__sfvwrite_r+0xe8>
   47c24:	1880008c 	andi	r2,r3,2
   47c28:	a4400017 	ldw	r17,0(r20)
   47c2c:	10002a26 	beq	r2,zero,47cd8 <__sfvwrite_r+0x108>
   47c30:	05a00034 	movhi	r22,32768
   47c34:	0027883a 	mov	r19,zero
   47c38:	0025883a 	mov	r18,zero
   47c3c:	b5bf0004 	addi	r22,r22,-1024
   47c40:	980d883a 	mov	r6,r19
   47c44:	a809883a 	mov	r4,r21
   47c48:	90004626 	beq	r18,zero,47d64 <__sfvwrite_r+0x194>
   47c4c:	900f883a 	mov	r7,r18
   47c50:	b480022e 	bgeu	r22,r18,47c5c <__sfvwrite_r+0x8c>
   47c54:	01e00034 	movhi	r7,32768
   47c58:	39ff0004 	addi	r7,r7,-1024
   47c5c:	80800917 	ldw	r2,36(r16)
   47c60:	81400717 	ldw	r5,28(r16)
   47c64:	103ee83a 	callr	r2
   47c68:	0080570e 	bge	zero,r2,47dc8 <__sfvwrite_r+0x1f8>
   47c6c:	a0c00217 	ldw	r3,8(r20)
   47c70:	98a7883a 	add	r19,r19,r2
   47c74:	90a5c83a 	sub	r18,r18,r2
   47c78:	1885c83a 	sub	r2,r3,r2
   47c7c:	a0800215 	stw	r2,8(r20)
   47c80:	103fef1e 	bne	r2,zero,47c40 <__alt_data_end+0xfffd5c40>
   47c84:	0005883a 	mov	r2,zero
   47c88:	dfc00b17 	ldw	ra,44(sp)
   47c8c:	df000a17 	ldw	fp,40(sp)
   47c90:	ddc00917 	ldw	r23,36(sp)
   47c94:	dd800817 	ldw	r22,32(sp)
   47c98:	dd400717 	ldw	r21,28(sp)
   47c9c:	dd000617 	ldw	r20,24(sp)
   47ca0:	dcc00517 	ldw	r19,20(sp)
   47ca4:	dc800417 	ldw	r18,16(sp)
   47ca8:	dc400317 	ldw	r17,12(sp)
   47cac:	dc000217 	ldw	r16,8(sp)
   47cb0:	dec00c04 	addi	sp,sp,48
   47cb4:	f800283a 	ret
   47cb8:	800b883a 	mov	r5,r16
   47cbc:	a809883a 	mov	r4,r21
   47cc0:	00456780 	call	45678 <__swsetup_r>
   47cc4:	1000eb1e 	bne	r2,zero,48074 <__sfvwrite_r+0x4a4>
   47cc8:	80c0030b 	ldhu	r3,12(r16)
   47ccc:	a4400017 	ldw	r17,0(r20)
   47cd0:	1880008c 	andi	r2,r3,2
   47cd4:	103fd61e 	bne	r2,zero,47c30 <__alt_data_end+0xfffd5c30>
   47cd8:	1880004c 	andi	r2,r3,1
   47cdc:	10003f1e 	bne	r2,zero,47ddc <__sfvwrite_r+0x20c>
   47ce0:	0039883a 	mov	fp,zero
   47ce4:	0025883a 	mov	r18,zero
   47ce8:	90001a26 	beq	r18,zero,47d54 <__sfvwrite_r+0x184>
   47cec:	1880800c 	andi	r2,r3,512
   47cf0:	84c00217 	ldw	r19,8(r16)
   47cf4:	10002126 	beq	r2,zero,47d7c <__sfvwrite_r+0x1ac>
   47cf8:	982f883a 	mov	r23,r19
   47cfc:	94c09336 	bltu	r18,r19,47f4c <__sfvwrite_r+0x37c>
   47d00:	1881200c 	andi	r2,r3,1152
   47d04:	10009e1e 	bne	r2,zero,47f80 <__sfvwrite_r+0x3b0>
   47d08:	81000017 	ldw	r4,0(r16)
   47d0c:	b80d883a 	mov	r6,r23
   47d10:	e00b883a 	mov	r5,fp
   47d14:	004862c0 	call	4862c <memmove>
   47d18:	80c00217 	ldw	r3,8(r16)
   47d1c:	81000017 	ldw	r4,0(r16)
   47d20:	9005883a 	mov	r2,r18
   47d24:	1ce7c83a 	sub	r19,r3,r19
   47d28:	25cf883a 	add	r7,r4,r23
   47d2c:	84c00215 	stw	r19,8(r16)
   47d30:	81c00015 	stw	r7,0(r16)
   47d34:	a0c00217 	ldw	r3,8(r20)
   47d38:	e0b9883a 	add	fp,fp,r2
   47d3c:	90a5c83a 	sub	r18,r18,r2
   47d40:	18a7c83a 	sub	r19,r3,r2
   47d44:	a4c00215 	stw	r19,8(r20)
   47d48:	983fce26 	beq	r19,zero,47c84 <__alt_data_end+0xfffd5c84>
   47d4c:	80c0030b 	ldhu	r3,12(r16)
   47d50:	903fe61e 	bne	r18,zero,47cec <__alt_data_end+0xfffd5cec>
   47d54:	8f000017 	ldw	fp,0(r17)
   47d58:	8c800117 	ldw	r18,4(r17)
   47d5c:	8c400204 	addi	r17,r17,8
   47d60:	003fe106 	br	47ce8 <__alt_data_end+0xfffd5ce8>
   47d64:	8cc00017 	ldw	r19,0(r17)
   47d68:	8c800117 	ldw	r18,4(r17)
   47d6c:	8c400204 	addi	r17,r17,8
   47d70:	003fb306 	br	47c40 <__alt_data_end+0xfffd5c40>
   47d74:	0005883a 	mov	r2,zero
   47d78:	f800283a 	ret
   47d7c:	81000017 	ldw	r4,0(r16)
   47d80:	80800417 	ldw	r2,16(r16)
   47d84:	11005736 	bltu	r2,r4,47ee4 <__sfvwrite_r+0x314>
   47d88:	85c00517 	ldw	r23,20(r16)
   47d8c:	95c05536 	bltu	r18,r23,47ee4 <__sfvwrite_r+0x314>
   47d90:	00a00034 	movhi	r2,32768
   47d94:	10bfffc4 	addi	r2,r2,-1
   47d98:	9009883a 	mov	r4,r18
   47d9c:	1480012e 	bgeu	r2,r18,47da4 <__sfvwrite_r+0x1d4>
   47da0:	1009883a 	mov	r4,r2
   47da4:	b80b883a 	mov	r5,r23
   47da8:	00417d80 	call	417d8 <__divsi3>
   47dac:	15cf383a 	mul	r7,r2,r23
   47db0:	81400717 	ldw	r5,28(r16)
   47db4:	80800917 	ldw	r2,36(r16)
   47db8:	e00d883a 	mov	r6,fp
   47dbc:	a809883a 	mov	r4,r21
   47dc0:	103ee83a 	callr	r2
   47dc4:	00bfdb16 	blt	zero,r2,47d34 <__alt_data_end+0xfffd5d34>
   47dc8:	8080030b 	ldhu	r2,12(r16)
   47dcc:	10801014 	ori	r2,r2,64
   47dd0:	8080030d 	sth	r2,12(r16)
   47dd4:	00bfffc4 	movi	r2,-1
   47dd8:	003fab06 	br	47c88 <__alt_data_end+0xfffd5c88>
   47ddc:	0027883a 	mov	r19,zero
   47de0:	0011883a 	mov	r8,zero
   47de4:	0039883a 	mov	fp,zero
   47de8:	0025883a 	mov	r18,zero
   47dec:	90001f26 	beq	r18,zero,47e6c <__sfvwrite_r+0x29c>
   47df0:	40005a26 	beq	r8,zero,47f5c <__sfvwrite_r+0x38c>
   47df4:	982d883a 	mov	r22,r19
   47df8:	94c0012e 	bgeu	r18,r19,47e00 <__sfvwrite_r+0x230>
   47dfc:	902d883a 	mov	r22,r18
   47e00:	81000017 	ldw	r4,0(r16)
   47e04:	80800417 	ldw	r2,16(r16)
   47e08:	b02f883a 	mov	r23,r22
   47e0c:	81c00517 	ldw	r7,20(r16)
   47e10:	1100032e 	bgeu	r2,r4,47e20 <__sfvwrite_r+0x250>
   47e14:	80c00217 	ldw	r3,8(r16)
   47e18:	38c7883a 	add	r3,r7,r3
   47e1c:	1d801816 	blt	r3,r22,47e80 <__sfvwrite_r+0x2b0>
   47e20:	b1c03e16 	blt	r22,r7,47f1c <__sfvwrite_r+0x34c>
   47e24:	80800917 	ldw	r2,36(r16)
   47e28:	81400717 	ldw	r5,28(r16)
   47e2c:	e00d883a 	mov	r6,fp
   47e30:	da000115 	stw	r8,4(sp)
   47e34:	a809883a 	mov	r4,r21
   47e38:	103ee83a 	callr	r2
   47e3c:	102f883a 	mov	r23,r2
   47e40:	da000117 	ldw	r8,4(sp)
   47e44:	00bfe00e 	bge	zero,r2,47dc8 <__alt_data_end+0xfffd5dc8>
   47e48:	9de7c83a 	sub	r19,r19,r23
   47e4c:	98001f26 	beq	r19,zero,47ecc <__sfvwrite_r+0x2fc>
   47e50:	a0800217 	ldw	r2,8(r20)
   47e54:	e5f9883a 	add	fp,fp,r23
   47e58:	95e5c83a 	sub	r18,r18,r23
   47e5c:	15efc83a 	sub	r23,r2,r23
   47e60:	a5c00215 	stw	r23,8(r20)
   47e64:	b83f8726 	beq	r23,zero,47c84 <__alt_data_end+0xfffd5c84>
   47e68:	903fe11e 	bne	r18,zero,47df0 <__alt_data_end+0xfffd5df0>
   47e6c:	8f000017 	ldw	fp,0(r17)
   47e70:	8c800117 	ldw	r18,4(r17)
   47e74:	0011883a 	mov	r8,zero
   47e78:	8c400204 	addi	r17,r17,8
   47e7c:	003fdb06 	br	47dec <__alt_data_end+0xfffd5dec>
   47e80:	180d883a 	mov	r6,r3
   47e84:	e00b883a 	mov	r5,fp
   47e88:	da000115 	stw	r8,4(sp)
   47e8c:	d8c00015 	stw	r3,0(sp)
   47e90:	004862c0 	call	4862c <memmove>
   47e94:	d8c00017 	ldw	r3,0(sp)
   47e98:	80800017 	ldw	r2,0(r16)
   47e9c:	800b883a 	mov	r5,r16
   47ea0:	a809883a 	mov	r4,r21
   47ea4:	10c5883a 	add	r2,r2,r3
   47ea8:	80800015 	stw	r2,0(r16)
   47eac:	d8c00015 	stw	r3,0(sp)
   47eb0:	00472c40 	call	472c4 <_fflush_r>
   47eb4:	d8c00017 	ldw	r3,0(sp)
   47eb8:	da000117 	ldw	r8,4(sp)
   47ebc:	103fc21e 	bne	r2,zero,47dc8 <__alt_data_end+0xfffd5dc8>
   47ec0:	182f883a 	mov	r23,r3
   47ec4:	9de7c83a 	sub	r19,r19,r23
   47ec8:	983fe11e 	bne	r19,zero,47e50 <__alt_data_end+0xfffd5e50>
   47ecc:	800b883a 	mov	r5,r16
   47ed0:	a809883a 	mov	r4,r21
   47ed4:	00472c40 	call	472c4 <_fflush_r>
   47ed8:	103fbb1e 	bne	r2,zero,47dc8 <__alt_data_end+0xfffd5dc8>
   47edc:	0011883a 	mov	r8,zero
   47ee0:	003fdb06 	br	47e50 <__alt_data_end+0xfffd5e50>
   47ee4:	94c0012e 	bgeu	r18,r19,47eec <__sfvwrite_r+0x31c>
   47ee8:	9027883a 	mov	r19,r18
   47eec:	980d883a 	mov	r6,r19
   47ef0:	e00b883a 	mov	r5,fp
   47ef4:	004862c0 	call	4862c <memmove>
   47ef8:	80800217 	ldw	r2,8(r16)
   47efc:	80c00017 	ldw	r3,0(r16)
   47f00:	14c5c83a 	sub	r2,r2,r19
   47f04:	1cc7883a 	add	r3,r3,r19
   47f08:	80800215 	stw	r2,8(r16)
   47f0c:	80c00015 	stw	r3,0(r16)
   47f10:	10004326 	beq	r2,zero,48020 <__sfvwrite_r+0x450>
   47f14:	9805883a 	mov	r2,r19
   47f18:	003f8606 	br	47d34 <__alt_data_end+0xfffd5d34>
   47f1c:	b00d883a 	mov	r6,r22
   47f20:	e00b883a 	mov	r5,fp
   47f24:	da000115 	stw	r8,4(sp)
   47f28:	004862c0 	call	4862c <memmove>
   47f2c:	80800217 	ldw	r2,8(r16)
   47f30:	80c00017 	ldw	r3,0(r16)
   47f34:	da000117 	ldw	r8,4(sp)
   47f38:	1585c83a 	sub	r2,r2,r22
   47f3c:	1dad883a 	add	r22,r3,r22
   47f40:	80800215 	stw	r2,8(r16)
   47f44:	85800015 	stw	r22,0(r16)
   47f48:	003fbf06 	br	47e48 <__alt_data_end+0xfffd5e48>
   47f4c:	81000017 	ldw	r4,0(r16)
   47f50:	9027883a 	mov	r19,r18
   47f54:	902f883a 	mov	r23,r18
   47f58:	003f6c06 	br	47d0c <__alt_data_end+0xfffd5d0c>
   47f5c:	900d883a 	mov	r6,r18
   47f60:	01400284 	movi	r5,10
   47f64:	e009883a 	mov	r4,fp
   47f68:	00484000 	call	48400 <memchr>
   47f6c:	10003e26 	beq	r2,zero,48068 <__sfvwrite_r+0x498>
   47f70:	10800044 	addi	r2,r2,1
   47f74:	1727c83a 	sub	r19,r2,fp
   47f78:	02000044 	movi	r8,1
   47f7c:	003f9d06 	br	47df4 <__alt_data_end+0xfffd5df4>
   47f80:	80800517 	ldw	r2,20(r16)
   47f84:	81400417 	ldw	r5,16(r16)
   47f88:	81c00017 	ldw	r7,0(r16)
   47f8c:	10a7883a 	add	r19,r2,r2
   47f90:	9885883a 	add	r2,r19,r2
   47f94:	1026d7fa 	srli	r19,r2,31
   47f98:	396dc83a 	sub	r22,r7,r5
   47f9c:	b1000044 	addi	r4,r22,1
   47fa0:	9885883a 	add	r2,r19,r2
   47fa4:	1027d07a 	srai	r19,r2,1
   47fa8:	2485883a 	add	r2,r4,r18
   47fac:	980d883a 	mov	r6,r19
   47fb0:	9880022e 	bgeu	r19,r2,47fbc <__sfvwrite_r+0x3ec>
   47fb4:	1027883a 	mov	r19,r2
   47fb8:	100d883a 	mov	r6,r2
   47fbc:	18c1000c 	andi	r3,r3,1024
   47fc0:	18001c26 	beq	r3,zero,48034 <__sfvwrite_r+0x464>
   47fc4:	300b883a 	mov	r5,r6
   47fc8:	a809883a 	mov	r4,r21
   47fcc:	004227c0 	call	4227c <_malloc_r>
   47fd0:	102f883a 	mov	r23,r2
   47fd4:	10002926 	beq	r2,zero,4807c <__sfvwrite_r+0x4ac>
   47fd8:	81400417 	ldw	r5,16(r16)
   47fdc:	b00d883a 	mov	r6,r22
   47fe0:	1009883a 	mov	r4,r2
   47fe4:	00484e40 	call	484e4 <memcpy>
   47fe8:	8080030b 	ldhu	r2,12(r16)
   47fec:	00fedfc4 	movi	r3,-1153
   47ff0:	10c4703a 	and	r2,r2,r3
   47ff4:	10802014 	ori	r2,r2,128
   47ff8:	8080030d 	sth	r2,12(r16)
   47ffc:	bd89883a 	add	r4,r23,r22
   48000:	9d8fc83a 	sub	r7,r19,r22
   48004:	85c00415 	stw	r23,16(r16)
   48008:	84c00515 	stw	r19,20(r16)
   4800c:	81000015 	stw	r4,0(r16)
   48010:	9027883a 	mov	r19,r18
   48014:	81c00215 	stw	r7,8(r16)
   48018:	902f883a 	mov	r23,r18
   4801c:	003f3b06 	br	47d0c <__alt_data_end+0xfffd5d0c>
   48020:	800b883a 	mov	r5,r16
   48024:	a809883a 	mov	r4,r21
   48028:	00472c40 	call	472c4 <_fflush_r>
   4802c:	103fb926 	beq	r2,zero,47f14 <__alt_data_end+0xfffd5f14>
   48030:	003f6506 	br	47dc8 <__alt_data_end+0xfffd5dc8>
   48034:	a809883a 	mov	r4,r21
   48038:	00497e40 	call	497e4 <_realloc_r>
   4803c:	102f883a 	mov	r23,r2
   48040:	103fee1e 	bne	r2,zero,47ffc <__alt_data_end+0xfffd5ffc>
   48044:	81400417 	ldw	r5,16(r16)
   48048:	a809883a 	mov	r4,r21
   4804c:	00478c00 	call	478c0 <_free_r>
   48050:	8080030b 	ldhu	r2,12(r16)
   48054:	00ffdfc4 	movi	r3,-129
   48058:	1884703a 	and	r2,r3,r2
   4805c:	00c00304 	movi	r3,12
   48060:	a8c00015 	stw	r3,0(r21)
   48064:	003f5906 	br	47dcc <__alt_data_end+0xfffd5dcc>
   48068:	94c00044 	addi	r19,r18,1
   4806c:	02000044 	movi	r8,1
   48070:	003f6006 	br	47df4 <__alt_data_end+0xfffd5df4>
   48074:	00bfffc4 	movi	r2,-1
   48078:	003f0306 	br	47c88 <__alt_data_end+0xfffd5c88>
   4807c:	00800304 	movi	r2,12
   48080:	a8800015 	stw	r2,0(r21)
   48084:	8080030b 	ldhu	r2,12(r16)
   48088:	003f5006 	br	47dcc <__alt_data_end+0xfffd5dcc>

0004808c <_fwalk>:
   4808c:	defff704 	addi	sp,sp,-36
   48090:	dd000415 	stw	r20,16(sp)
   48094:	dfc00815 	stw	ra,32(sp)
   48098:	ddc00715 	stw	r23,28(sp)
   4809c:	dd800615 	stw	r22,24(sp)
   480a0:	dd400515 	stw	r21,20(sp)
   480a4:	dcc00315 	stw	r19,12(sp)
   480a8:	dc800215 	stw	r18,8(sp)
   480ac:	dc400115 	stw	r17,4(sp)
   480b0:	dc000015 	stw	r16,0(sp)
   480b4:	2500b804 	addi	r20,r4,736
   480b8:	a0002326 	beq	r20,zero,48148 <_fwalk+0xbc>
   480bc:	282b883a 	mov	r21,r5
   480c0:	002f883a 	mov	r23,zero
   480c4:	05800044 	movi	r22,1
   480c8:	04ffffc4 	movi	r19,-1
   480cc:	a4400117 	ldw	r17,4(r20)
   480d0:	a4800217 	ldw	r18,8(r20)
   480d4:	8c7fffc4 	addi	r17,r17,-1
   480d8:	88000d16 	blt	r17,zero,48110 <_fwalk+0x84>
   480dc:	94000304 	addi	r16,r18,12
   480e0:	94800384 	addi	r18,r18,14
   480e4:	8080000b 	ldhu	r2,0(r16)
   480e8:	8c7fffc4 	addi	r17,r17,-1
   480ec:	813ffd04 	addi	r4,r16,-12
   480f0:	b080042e 	bgeu	r22,r2,48104 <_fwalk+0x78>
   480f4:	9080000f 	ldh	r2,0(r18)
   480f8:	14c00226 	beq	r2,r19,48104 <_fwalk+0x78>
   480fc:	a83ee83a 	callr	r21
   48100:	b8aeb03a 	or	r23,r23,r2
   48104:	84001a04 	addi	r16,r16,104
   48108:	94801a04 	addi	r18,r18,104
   4810c:	8cfff51e 	bne	r17,r19,480e4 <__alt_data_end+0xfffd60e4>
   48110:	a5000017 	ldw	r20,0(r20)
   48114:	a03fed1e 	bne	r20,zero,480cc <__alt_data_end+0xfffd60cc>
   48118:	b805883a 	mov	r2,r23
   4811c:	dfc00817 	ldw	ra,32(sp)
   48120:	ddc00717 	ldw	r23,28(sp)
   48124:	dd800617 	ldw	r22,24(sp)
   48128:	dd400517 	ldw	r21,20(sp)
   4812c:	dd000417 	ldw	r20,16(sp)
   48130:	dcc00317 	ldw	r19,12(sp)
   48134:	dc800217 	ldw	r18,8(sp)
   48138:	dc400117 	ldw	r17,4(sp)
   4813c:	dc000017 	ldw	r16,0(sp)
   48140:	dec00904 	addi	sp,sp,36
   48144:	f800283a 	ret
   48148:	002f883a 	mov	r23,zero
   4814c:	003ff206 	br	48118 <__alt_data_end+0xfffd6118>

00048150 <_fwalk_reent>:
   48150:	defff704 	addi	sp,sp,-36
   48154:	dd000415 	stw	r20,16(sp)
   48158:	dfc00815 	stw	ra,32(sp)
   4815c:	ddc00715 	stw	r23,28(sp)
   48160:	dd800615 	stw	r22,24(sp)
   48164:	dd400515 	stw	r21,20(sp)
   48168:	dcc00315 	stw	r19,12(sp)
   4816c:	dc800215 	stw	r18,8(sp)
   48170:	dc400115 	stw	r17,4(sp)
   48174:	dc000015 	stw	r16,0(sp)
   48178:	2500b804 	addi	r20,r4,736
   4817c:	a0002326 	beq	r20,zero,4820c <_fwalk_reent+0xbc>
   48180:	282b883a 	mov	r21,r5
   48184:	2027883a 	mov	r19,r4
   48188:	002f883a 	mov	r23,zero
   4818c:	05800044 	movi	r22,1
   48190:	04bfffc4 	movi	r18,-1
   48194:	a4400117 	ldw	r17,4(r20)
   48198:	a4000217 	ldw	r16,8(r20)
   4819c:	8c7fffc4 	addi	r17,r17,-1
   481a0:	88000c16 	blt	r17,zero,481d4 <_fwalk_reent+0x84>
   481a4:	84000304 	addi	r16,r16,12
   481a8:	8080000b 	ldhu	r2,0(r16)
   481ac:	8c7fffc4 	addi	r17,r17,-1
   481b0:	817ffd04 	addi	r5,r16,-12
   481b4:	b080052e 	bgeu	r22,r2,481cc <_fwalk_reent+0x7c>
   481b8:	8080008f 	ldh	r2,2(r16)
   481bc:	9809883a 	mov	r4,r19
   481c0:	14800226 	beq	r2,r18,481cc <_fwalk_reent+0x7c>
   481c4:	a83ee83a 	callr	r21
   481c8:	b8aeb03a 	or	r23,r23,r2
   481cc:	84001a04 	addi	r16,r16,104
   481d0:	8cbff51e 	bne	r17,r18,481a8 <__alt_data_end+0xfffd61a8>
   481d4:	a5000017 	ldw	r20,0(r20)
   481d8:	a03fee1e 	bne	r20,zero,48194 <__alt_data_end+0xfffd6194>
   481dc:	b805883a 	mov	r2,r23
   481e0:	dfc00817 	ldw	ra,32(sp)
   481e4:	ddc00717 	ldw	r23,28(sp)
   481e8:	dd800617 	ldw	r22,24(sp)
   481ec:	dd400517 	ldw	r21,20(sp)
   481f0:	dd000417 	ldw	r20,16(sp)
   481f4:	dcc00317 	ldw	r19,12(sp)
   481f8:	dc800217 	ldw	r18,8(sp)
   481fc:	dc400117 	ldw	r17,4(sp)
   48200:	dc000017 	ldw	r16,0(sp)
   48204:	dec00904 	addi	sp,sp,36
   48208:	f800283a 	ret
   4820c:	002f883a 	mov	r23,zero
   48210:	003ff206 	br	481dc <__alt_data_end+0xfffd61dc>

00048214 <_gettimeofday_r>:
   48214:	defffd04 	addi	sp,sp,-12
   48218:	2805883a 	mov	r2,r5
   4821c:	dc000015 	stw	r16,0(sp)
   48220:	04000174 	movhi	r16,5
   48224:	dc400115 	stw	r17,4(sp)
   48228:	841ad804 	addi	r16,r16,27488
   4822c:	2023883a 	mov	r17,r4
   48230:	300b883a 	mov	r5,r6
   48234:	1009883a 	mov	r4,r2
   48238:	dfc00215 	stw	ra,8(sp)
   4823c:	80000015 	stw	zero,0(r16)
   48240:	004ef8c0 	call	4ef8c <gettimeofday>
   48244:	00ffffc4 	movi	r3,-1
   48248:	10c00526 	beq	r2,r3,48260 <_gettimeofday_r+0x4c>
   4824c:	dfc00217 	ldw	ra,8(sp)
   48250:	dc400117 	ldw	r17,4(sp)
   48254:	dc000017 	ldw	r16,0(sp)
   48258:	dec00304 	addi	sp,sp,12
   4825c:	f800283a 	ret
   48260:	80c00017 	ldw	r3,0(r16)
   48264:	183ff926 	beq	r3,zero,4824c <__alt_data_end+0xfffd624c>
   48268:	88c00015 	stw	r3,0(r17)
   4826c:	003ff706 	br	4824c <__alt_data_end+0xfffd624c>

00048270 <_isatty_r>:
   48270:	defffd04 	addi	sp,sp,-12
   48274:	dc000015 	stw	r16,0(sp)
   48278:	04000174 	movhi	r16,5
   4827c:	dc400115 	stw	r17,4(sp)
   48280:	841ad804 	addi	r16,r16,27488
   48284:	2023883a 	mov	r17,r4
   48288:	2809883a 	mov	r4,r5
   4828c:	dfc00215 	stw	ra,8(sp)
   48290:	80000015 	stw	zero,0(r16)
   48294:	004f45c0 	call	4f45c <isatty>
   48298:	00ffffc4 	movi	r3,-1
   4829c:	10c00526 	beq	r2,r3,482b4 <_isatty_r+0x44>
   482a0:	dfc00217 	ldw	ra,8(sp)
   482a4:	dc400117 	ldw	r17,4(sp)
   482a8:	dc000017 	ldw	r16,0(sp)
   482ac:	dec00304 	addi	sp,sp,12
   482b0:	f800283a 	ret
   482b4:	80c00017 	ldw	r3,0(r16)
   482b8:	183ff926 	beq	r3,zero,482a0 <__alt_data_end+0xfffd62a0>
   482bc:	88c00015 	stw	r3,0(r17)
   482c0:	003ff706 	br	482a0 <__alt_data_end+0xfffd62a0>

000482c4 <_setlocale_r>:
   482c4:	30001b26 	beq	r6,zero,48334 <_setlocale_r+0x70>
   482c8:	01400174 	movhi	r5,5
   482cc:	defffe04 	addi	sp,sp,-8
   482d0:	294a3a04 	addi	r5,r5,10472
   482d4:	3009883a 	mov	r4,r6
   482d8:	dc000015 	stw	r16,0(sp)
   482dc:	dfc00115 	stw	ra,4(sp)
   482e0:	3021883a 	mov	r16,r6
   482e4:	0049dbc0 	call	49dbc <strcmp>
   482e8:	1000061e 	bne	r2,zero,48304 <_setlocale_r+0x40>
   482ec:	00800174 	movhi	r2,5
   482f0:	108a1b04 	addi	r2,r2,10348
   482f4:	dfc00117 	ldw	ra,4(sp)
   482f8:	dc000017 	ldw	r16,0(sp)
   482fc:	dec00204 	addi	sp,sp,8
   48300:	f800283a 	ret
   48304:	01400174 	movhi	r5,5
   48308:	294a1b04 	addi	r5,r5,10348
   4830c:	8009883a 	mov	r4,r16
   48310:	0049dbc0 	call	49dbc <strcmp>
   48314:	103ff526 	beq	r2,zero,482ec <__alt_data_end+0xfffd62ec>
   48318:	01400174 	movhi	r5,5
   4831c:	294a2504 	addi	r5,r5,10388
   48320:	8009883a 	mov	r4,r16
   48324:	0049dbc0 	call	49dbc <strcmp>
   48328:	103ff026 	beq	r2,zero,482ec <__alt_data_end+0xfffd62ec>
   4832c:	0005883a 	mov	r2,zero
   48330:	003ff006 	br	482f4 <__alt_data_end+0xfffd62f4>
   48334:	00800174 	movhi	r2,5
   48338:	108a1b04 	addi	r2,r2,10348
   4833c:	f800283a 	ret

00048340 <__locale_charset>:
   48340:	00800174 	movhi	r2,5
   48344:	108e3104 	addi	r2,r2,14532
   48348:	f800283a 	ret

0004834c <__locale_mb_cur_max>:
   4834c:	00800174 	movhi	r2,5
   48350:	10931904 	addi	r2,r2,19556
   48354:	10800017 	ldw	r2,0(r2)
   48358:	f800283a 	ret

0004835c <__locale_msgcharset>:
   4835c:	00800174 	movhi	r2,5
   48360:	108e2904 	addi	r2,r2,14500
   48364:	f800283a 	ret

00048368 <__locale_cjk_lang>:
   48368:	0005883a 	mov	r2,zero
   4836c:	f800283a 	ret

00048370 <_localeconv_r>:
   48370:	00800174 	movhi	r2,5
   48374:	108e3904 	addi	r2,r2,14564
   48378:	f800283a 	ret

0004837c <setlocale>:
   4837c:	00800174 	movhi	r2,5
   48380:	10931604 	addi	r2,r2,19544
   48384:	280d883a 	mov	r6,r5
   48388:	200b883a 	mov	r5,r4
   4838c:	11000017 	ldw	r4,0(r2)
   48390:	00482c41 	jmpi	482c4 <_setlocale_r>

00048394 <localeconv>:
   48394:	00800174 	movhi	r2,5
   48398:	108e3904 	addi	r2,r2,14564
   4839c:	f800283a 	ret

000483a0 <_lseek_r>:
   483a0:	defffd04 	addi	sp,sp,-12
   483a4:	2805883a 	mov	r2,r5
   483a8:	dc000015 	stw	r16,0(sp)
   483ac:	04000174 	movhi	r16,5
   483b0:	dc400115 	stw	r17,4(sp)
   483b4:	300b883a 	mov	r5,r6
   483b8:	841ad804 	addi	r16,r16,27488
   483bc:	2023883a 	mov	r17,r4
   483c0:	380d883a 	mov	r6,r7
   483c4:	1009883a 	mov	r4,r2
   483c8:	dfc00215 	stw	ra,8(sp)
   483cc:	80000015 	stw	zero,0(r16)
   483d0:	004f6280 	call	4f628 <lseek>
   483d4:	00ffffc4 	movi	r3,-1
   483d8:	10c00526 	beq	r2,r3,483f0 <_lseek_r+0x50>
   483dc:	dfc00217 	ldw	ra,8(sp)
   483e0:	dc400117 	ldw	r17,4(sp)
   483e4:	dc000017 	ldw	r16,0(sp)
   483e8:	dec00304 	addi	sp,sp,12
   483ec:	f800283a 	ret
   483f0:	80c00017 	ldw	r3,0(r16)
   483f4:	183ff926 	beq	r3,zero,483dc <__alt_data_end+0xfffd63dc>
   483f8:	88c00015 	stw	r3,0(r17)
   483fc:	003ff706 	br	483dc <__alt_data_end+0xfffd63dc>

00048400 <memchr>:
   48400:	208000cc 	andi	r2,r4,3
   48404:	280f883a 	mov	r7,r5
   48408:	10003426 	beq	r2,zero,484dc <memchr+0xdc>
   4840c:	30bfffc4 	addi	r2,r6,-1
   48410:	30001a26 	beq	r6,zero,4847c <memchr+0x7c>
   48414:	20c00003 	ldbu	r3,0(r4)
   48418:	29803fcc 	andi	r6,r5,255
   4841c:	30c0051e 	bne	r6,r3,48434 <memchr+0x34>
   48420:	00001806 	br	48484 <memchr+0x84>
   48424:	10001526 	beq	r2,zero,4847c <memchr+0x7c>
   48428:	20c00003 	ldbu	r3,0(r4)
   4842c:	10bfffc4 	addi	r2,r2,-1
   48430:	30c01426 	beq	r6,r3,48484 <memchr+0x84>
   48434:	21000044 	addi	r4,r4,1
   48438:	20c000cc 	andi	r3,r4,3
   4843c:	183ff91e 	bne	r3,zero,48424 <__alt_data_end+0xfffd6424>
   48440:	020000c4 	movi	r8,3
   48444:	40801136 	bltu	r8,r2,4848c <memchr+0x8c>
   48448:	10000c26 	beq	r2,zero,4847c <memchr+0x7c>
   4844c:	20c00003 	ldbu	r3,0(r4)
   48450:	29403fcc 	andi	r5,r5,255
   48454:	28c00b26 	beq	r5,r3,48484 <memchr+0x84>
   48458:	20c00044 	addi	r3,r4,1
   4845c:	39803fcc 	andi	r6,r7,255
   48460:	2089883a 	add	r4,r4,r2
   48464:	00000306 	br	48474 <memchr+0x74>
   48468:	18c00044 	addi	r3,r3,1
   4846c:	197fffc3 	ldbu	r5,-1(r3)
   48470:	31400526 	beq	r6,r5,48488 <memchr+0x88>
   48474:	1805883a 	mov	r2,r3
   48478:	20fffb1e 	bne	r4,r3,48468 <__alt_data_end+0xfffd6468>
   4847c:	0005883a 	mov	r2,zero
   48480:	f800283a 	ret
   48484:	2005883a 	mov	r2,r4
   48488:	f800283a 	ret
   4848c:	28c03fcc 	andi	r3,r5,255
   48490:	1812923a 	slli	r9,r3,8
   48494:	02ffbff4 	movhi	r11,65279
   48498:	02a02074 	movhi	r10,32897
   4849c:	48d2b03a 	or	r9,r9,r3
   484a0:	4806943a 	slli	r3,r9,16
   484a4:	5affbfc4 	addi	r11,r11,-257
   484a8:	52a02004 	addi	r10,r10,-32640
   484ac:	48d2b03a 	or	r9,r9,r3
   484b0:	20c00017 	ldw	r3,0(r4)
   484b4:	48c6f03a 	xor	r3,r9,r3
   484b8:	1acd883a 	add	r6,r3,r11
   484bc:	00c6303a 	nor	r3,zero,r3
   484c0:	30c6703a 	and	r3,r6,r3
   484c4:	1a86703a 	and	r3,r3,r10
   484c8:	183fe01e 	bne	r3,zero,4844c <__alt_data_end+0xfffd644c>
   484cc:	10bfff04 	addi	r2,r2,-4
   484d0:	21000104 	addi	r4,r4,4
   484d4:	40bff636 	bltu	r8,r2,484b0 <__alt_data_end+0xfffd64b0>
   484d8:	003fdb06 	br	48448 <__alt_data_end+0xfffd6448>
   484dc:	3005883a 	mov	r2,r6
   484e0:	003fd706 	br	48440 <__alt_data_end+0xfffd6440>

000484e4 <memcpy>:
   484e4:	defffd04 	addi	sp,sp,-12
   484e8:	dfc00215 	stw	ra,8(sp)
   484ec:	dc400115 	stw	r17,4(sp)
   484f0:	dc000015 	stw	r16,0(sp)
   484f4:	00c003c4 	movi	r3,15
   484f8:	2005883a 	mov	r2,r4
   484fc:	1980452e 	bgeu	r3,r6,48614 <memcpy+0x130>
   48500:	2906b03a 	or	r3,r5,r4
   48504:	18c000cc 	andi	r3,r3,3
   48508:	1800441e 	bne	r3,zero,4861c <memcpy+0x138>
   4850c:	347ffc04 	addi	r17,r6,-16
   48510:	8822d13a 	srli	r17,r17,4
   48514:	28c00104 	addi	r3,r5,4
   48518:	23400104 	addi	r13,r4,4
   4851c:	8820913a 	slli	r16,r17,4
   48520:	2b000204 	addi	r12,r5,8
   48524:	22c00204 	addi	r11,r4,8
   48528:	84000504 	addi	r16,r16,20
   4852c:	2a800304 	addi	r10,r5,12
   48530:	22400304 	addi	r9,r4,12
   48534:	2c21883a 	add	r16,r5,r16
   48538:	2811883a 	mov	r8,r5
   4853c:	200f883a 	mov	r7,r4
   48540:	41000017 	ldw	r4,0(r8)
   48544:	1fc00017 	ldw	ra,0(r3)
   48548:	63c00017 	ldw	r15,0(r12)
   4854c:	39000015 	stw	r4,0(r7)
   48550:	53800017 	ldw	r14,0(r10)
   48554:	6fc00015 	stw	ra,0(r13)
   48558:	5bc00015 	stw	r15,0(r11)
   4855c:	4b800015 	stw	r14,0(r9)
   48560:	18c00404 	addi	r3,r3,16
   48564:	39c00404 	addi	r7,r7,16
   48568:	42000404 	addi	r8,r8,16
   4856c:	6b400404 	addi	r13,r13,16
   48570:	63000404 	addi	r12,r12,16
   48574:	5ac00404 	addi	r11,r11,16
   48578:	52800404 	addi	r10,r10,16
   4857c:	4a400404 	addi	r9,r9,16
   48580:	1c3fef1e 	bne	r3,r16,48540 <__alt_data_end+0xfffd6540>
   48584:	89c00044 	addi	r7,r17,1
   48588:	380e913a 	slli	r7,r7,4
   4858c:	310003cc 	andi	r4,r6,15
   48590:	02c000c4 	movi	r11,3
   48594:	11c7883a 	add	r3,r2,r7
   48598:	29cb883a 	add	r5,r5,r7
   4859c:	5900212e 	bgeu	r11,r4,48624 <memcpy+0x140>
   485a0:	1813883a 	mov	r9,r3
   485a4:	2811883a 	mov	r8,r5
   485a8:	200f883a 	mov	r7,r4
   485ac:	42800017 	ldw	r10,0(r8)
   485b0:	4a400104 	addi	r9,r9,4
   485b4:	39ffff04 	addi	r7,r7,-4
   485b8:	4abfff15 	stw	r10,-4(r9)
   485bc:	42000104 	addi	r8,r8,4
   485c0:	59fffa36 	bltu	r11,r7,485ac <__alt_data_end+0xfffd65ac>
   485c4:	213fff04 	addi	r4,r4,-4
   485c8:	2008d0ba 	srli	r4,r4,2
   485cc:	318000cc 	andi	r6,r6,3
   485d0:	21000044 	addi	r4,r4,1
   485d4:	2109883a 	add	r4,r4,r4
   485d8:	2109883a 	add	r4,r4,r4
   485dc:	1907883a 	add	r3,r3,r4
   485e0:	290b883a 	add	r5,r5,r4
   485e4:	30000626 	beq	r6,zero,48600 <memcpy+0x11c>
   485e8:	198d883a 	add	r6,r3,r6
   485ec:	29c00003 	ldbu	r7,0(r5)
   485f0:	18c00044 	addi	r3,r3,1
   485f4:	29400044 	addi	r5,r5,1
   485f8:	19ffffc5 	stb	r7,-1(r3)
   485fc:	19bffb1e 	bne	r3,r6,485ec <__alt_data_end+0xfffd65ec>
   48600:	dfc00217 	ldw	ra,8(sp)
   48604:	dc400117 	ldw	r17,4(sp)
   48608:	dc000017 	ldw	r16,0(sp)
   4860c:	dec00304 	addi	sp,sp,12
   48610:	f800283a 	ret
   48614:	2007883a 	mov	r3,r4
   48618:	003ff206 	br	485e4 <__alt_data_end+0xfffd65e4>
   4861c:	2007883a 	mov	r3,r4
   48620:	003ff106 	br	485e8 <__alt_data_end+0xfffd65e8>
   48624:	200d883a 	mov	r6,r4
   48628:	003fee06 	br	485e4 <__alt_data_end+0xfffd65e4>

0004862c <memmove>:
   4862c:	2005883a 	mov	r2,r4
   48630:	29000b2e 	bgeu	r5,r4,48660 <memmove+0x34>
   48634:	298f883a 	add	r7,r5,r6
   48638:	21c0092e 	bgeu	r4,r7,48660 <memmove+0x34>
   4863c:	2187883a 	add	r3,r4,r6
   48640:	198bc83a 	sub	r5,r3,r6
   48644:	30004826 	beq	r6,zero,48768 <memmove+0x13c>
   48648:	39ffffc4 	addi	r7,r7,-1
   4864c:	39000003 	ldbu	r4,0(r7)
   48650:	18ffffc4 	addi	r3,r3,-1
   48654:	19000005 	stb	r4,0(r3)
   48658:	28fffb1e 	bne	r5,r3,48648 <__alt_data_end+0xfffd6648>
   4865c:	f800283a 	ret
   48660:	00c003c4 	movi	r3,15
   48664:	1980412e 	bgeu	r3,r6,4876c <memmove+0x140>
   48668:	2886b03a 	or	r3,r5,r2
   4866c:	18c000cc 	andi	r3,r3,3
   48670:	1800401e 	bne	r3,zero,48774 <memmove+0x148>
   48674:	33fffc04 	addi	r15,r6,-16
   48678:	781ed13a 	srli	r15,r15,4
   4867c:	28c00104 	addi	r3,r5,4
   48680:	13400104 	addi	r13,r2,4
   48684:	781c913a 	slli	r14,r15,4
   48688:	2b000204 	addi	r12,r5,8
   4868c:	12c00204 	addi	r11,r2,8
   48690:	73800504 	addi	r14,r14,20
   48694:	2a800304 	addi	r10,r5,12
   48698:	12400304 	addi	r9,r2,12
   4869c:	2b9d883a 	add	r14,r5,r14
   486a0:	2811883a 	mov	r8,r5
   486a4:	100f883a 	mov	r7,r2
   486a8:	41000017 	ldw	r4,0(r8)
   486ac:	39c00404 	addi	r7,r7,16
   486b0:	18c00404 	addi	r3,r3,16
   486b4:	393ffc15 	stw	r4,-16(r7)
   486b8:	193ffc17 	ldw	r4,-16(r3)
   486bc:	6b400404 	addi	r13,r13,16
   486c0:	5ac00404 	addi	r11,r11,16
   486c4:	693ffc15 	stw	r4,-16(r13)
   486c8:	61000017 	ldw	r4,0(r12)
   486cc:	4a400404 	addi	r9,r9,16
   486d0:	42000404 	addi	r8,r8,16
   486d4:	593ffc15 	stw	r4,-16(r11)
   486d8:	51000017 	ldw	r4,0(r10)
   486dc:	63000404 	addi	r12,r12,16
   486e0:	52800404 	addi	r10,r10,16
   486e4:	493ffc15 	stw	r4,-16(r9)
   486e8:	1bbfef1e 	bne	r3,r14,486a8 <__alt_data_end+0xfffd66a8>
   486ec:	79000044 	addi	r4,r15,1
   486f0:	2008913a 	slli	r4,r4,4
   486f4:	328003cc 	andi	r10,r6,15
   486f8:	02c000c4 	movi	r11,3
   486fc:	1107883a 	add	r3,r2,r4
   48700:	290b883a 	add	r5,r5,r4
   48704:	5a801e2e 	bgeu	r11,r10,48780 <memmove+0x154>
   48708:	1813883a 	mov	r9,r3
   4870c:	2811883a 	mov	r8,r5
   48710:	500f883a 	mov	r7,r10
   48714:	41000017 	ldw	r4,0(r8)
   48718:	4a400104 	addi	r9,r9,4
   4871c:	39ffff04 	addi	r7,r7,-4
   48720:	493fff15 	stw	r4,-4(r9)
   48724:	42000104 	addi	r8,r8,4
   48728:	59fffa36 	bltu	r11,r7,48714 <__alt_data_end+0xfffd6714>
   4872c:	513fff04 	addi	r4,r10,-4
   48730:	2008d0ba 	srli	r4,r4,2
   48734:	318000cc 	andi	r6,r6,3
   48738:	21000044 	addi	r4,r4,1
   4873c:	2109883a 	add	r4,r4,r4
   48740:	2109883a 	add	r4,r4,r4
   48744:	1907883a 	add	r3,r3,r4
   48748:	290b883a 	add	r5,r5,r4
   4874c:	30000b26 	beq	r6,zero,4877c <memmove+0x150>
   48750:	198d883a 	add	r6,r3,r6
   48754:	29c00003 	ldbu	r7,0(r5)
   48758:	18c00044 	addi	r3,r3,1
   4875c:	29400044 	addi	r5,r5,1
   48760:	19ffffc5 	stb	r7,-1(r3)
   48764:	19bffb1e 	bne	r3,r6,48754 <__alt_data_end+0xfffd6754>
   48768:	f800283a 	ret
   4876c:	1007883a 	mov	r3,r2
   48770:	003ff606 	br	4874c <__alt_data_end+0xfffd674c>
   48774:	1007883a 	mov	r3,r2
   48778:	003ff506 	br	48750 <__alt_data_end+0xfffd6750>
   4877c:	f800283a 	ret
   48780:	500d883a 	mov	r6,r10
   48784:	003ff106 	br	4874c <__alt_data_end+0xfffd674c>

00048788 <_Balloc>:
   48788:	20801317 	ldw	r2,76(r4)
   4878c:	defffc04 	addi	sp,sp,-16
   48790:	dc400115 	stw	r17,4(sp)
   48794:	dc000015 	stw	r16,0(sp)
   48798:	dfc00315 	stw	ra,12(sp)
   4879c:	dc800215 	stw	r18,8(sp)
   487a0:	2023883a 	mov	r17,r4
   487a4:	2821883a 	mov	r16,r5
   487a8:	10000f26 	beq	r2,zero,487e8 <_Balloc+0x60>
   487ac:	8407883a 	add	r3,r16,r16
   487b0:	18c7883a 	add	r3,r3,r3
   487b4:	10c7883a 	add	r3,r2,r3
   487b8:	18800017 	ldw	r2,0(r3)
   487bc:	10001126 	beq	r2,zero,48804 <_Balloc+0x7c>
   487c0:	11000017 	ldw	r4,0(r2)
   487c4:	19000015 	stw	r4,0(r3)
   487c8:	10000415 	stw	zero,16(r2)
   487cc:	10000315 	stw	zero,12(r2)
   487d0:	dfc00317 	ldw	ra,12(sp)
   487d4:	dc800217 	ldw	r18,8(sp)
   487d8:	dc400117 	ldw	r17,4(sp)
   487dc:	dc000017 	ldw	r16,0(sp)
   487e0:	dec00404 	addi	sp,sp,16
   487e4:	f800283a 	ret
   487e8:	01800844 	movi	r6,33
   487ec:	01400104 	movi	r5,4
   487f0:	004b4e00 	call	4b4e0 <_calloc_r>
   487f4:	88801315 	stw	r2,76(r17)
   487f8:	103fec1e 	bne	r2,zero,487ac <__alt_data_end+0xfffd67ac>
   487fc:	0005883a 	mov	r2,zero
   48800:	003ff306 	br	487d0 <__alt_data_end+0xfffd67d0>
   48804:	01400044 	movi	r5,1
   48808:	2c24983a 	sll	r18,r5,r16
   4880c:	8809883a 	mov	r4,r17
   48810:	91800144 	addi	r6,r18,5
   48814:	318d883a 	add	r6,r6,r6
   48818:	318d883a 	add	r6,r6,r6
   4881c:	004b4e00 	call	4b4e0 <_calloc_r>
   48820:	103ff626 	beq	r2,zero,487fc <__alt_data_end+0xfffd67fc>
   48824:	14000115 	stw	r16,4(r2)
   48828:	14800215 	stw	r18,8(r2)
   4882c:	003fe606 	br	487c8 <__alt_data_end+0xfffd67c8>

00048830 <_Bfree>:
   48830:	28000826 	beq	r5,zero,48854 <_Bfree+0x24>
   48834:	28c00117 	ldw	r3,4(r5)
   48838:	20801317 	ldw	r2,76(r4)
   4883c:	18c7883a 	add	r3,r3,r3
   48840:	18c7883a 	add	r3,r3,r3
   48844:	10c5883a 	add	r2,r2,r3
   48848:	10c00017 	ldw	r3,0(r2)
   4884c:	28c00015 	stw	r3,0(r5)
   48850:	11400015 	stw	r5,0(r2)
   48854:	f800283a 	ret

00048858 <__multadd>:
   48858:	defffa04 	addi	sp,sp,-24
   4885c:	dc800315 	stw	r18,12(sp)
   48860:	dc400215 	stw	r17,8(sp)
   48864:	dc000115 	stw	r16,4(sp)
   48868:	2823883a 	mov	r17,r5
   4886c:	2c000417 	ldw	r16,16(r5)
   48870:	dfc00515 	stw	ra,20(sp)
   48874:	dcc00415 	stw	r19,16(sp)
   48878:	2025883a 	mov	r18,r4
   4887c:	29400504 	addi	r5,r5,20
   48880:	0011883a 	mov	r8,zero
   48884:	28c00017 	ldw	r3,0(r5)
   48888:	29400104 	addi	r5,r5,4
   4888c:	42000044 	addi	r8,r8,1
   48890:	18bfffcc 	andi	r2,r3,65535
   48894:	1185383a 	mul	r2,r2,r6
   48898:	1806d43a 	srli	r3,r3,16
   4889c:	11cf883a 	add	r7,r2,r7
   488a0:	3808d43a 	srli	r4,r7,16
   488a4:	1987383a 	mul	r3,r3,r6
   488a8:	38bfffcc 	andi	r2,r7,65535
   488ac:	1907883a 	add	r3,r3,r4
   488b0:	1808943a 	slli	r4,r3,16
   488b4:	180ed43a 	srli	r7,r3,16
   488b8:	2085883a 	add	r2,r4,r2
   488bc:	28bfff15 	stw	r2,-4(r5)
   488c0:	443ff016 	blt	r8,r16,48884 <__alt_data_end+0xfffd6884>
   488c4:	38000926 	beq	r7,zero,488ec <__multadd+0x94>
   488c8:	88800217 	ldw	r2,8(r17)
   488cc:	80800f0e 	bge	r16,r2,4890c <__multadd+0xb4>
   488d0:	80800144 	addi	r2,r16,5
   488d4:	1085883a 	add	r2,r2,r2
   488d8:	1085883a 	add	r2,r2,r2
   488dc:	8885883a 	add	r2,r17,r2
   488e0:	11c00015 	stw	r7,0(r2)
   488e4:	84000044 	addi	r16,r16,1
   488e8:	8c000415 	stw	r16,16(r17)
   488ec:	8805883a 	mov	r2,r17
   488f0:	dfc00517 	ldw	ra,20(sp)
   488f4:	dcc00417 	ldw	r19,16(sp)
   488f8:	dc800317 	ldw	r18,12(sp)
   488fc:	dc400217 	ldw	r17,8(sp)
   48900:	dc000117 	ldw	r16,4(sp)
   48904:	dec00604 	addi	sp,sp,24
   48908:	f800283a 	ret
   4890c:	89400117 	ldw	r5,4(r17)
   48910:	9009883a 	mov	r4,r18
   48914:	d9c00015 	stw	r7,0(sp)
   48918:	29400044 	addi	r5,r5,1
   4891c:	00487880 	call	48788 <_Balloc>
   48920:	89800417 	ldw	r6,16(r17)
   48924:	89400304 	addi	r5,r17,12
   48928:	11000304 	addi	r4,r2,12
   4892c:	31800084 	addi	r6,r6,2
   48930:	318d883a 	add	r6,r6,r6
   48934:	318d883a 	add	r6,r6,r6
   48938:	1027883a 	mov	r19,r2
   4893c:	00484e40 	call	484e4 <memcpy>
   48940:	d9c00017 	ldw	r7,0(sp)
   48944:	88000a26 	beq	r17,zero,48970 <__multadd+0x118>
   48948:	88c00117 	ldw	r3,4(r17)
   4894c:	90801317 	ldw	r2,76(r18)
   48950:	18c7883a 	add	r3,r3,r3
   48954:	18c7883a 	add	r3,r3,r3
   48958:	10c5883a 	add	r2,r2,r3
   4895c:	10c00017 	ldw	r3,0(r2)
   48960:	88c00015 	stw	r3,0(r17)
   48964:	14400015 	stw	r17,0(r2)
   48968:	9823883a 	mov	r17,r19
   4896c:	003fd806 	br	488d0 <__alt_data_end+0xfffd68d0>
   48970:	9823883a 	mov	r17,r19
   48974:	003fd606 	br	488d0 <__alt_data_end+0xfffd68d0>

00048978 <__s2b>:
   48978:	defff904 	addi	sp,sp,-28
   4897c:	dc400115 	stw	r17,4(sp)
   48980:	dc000015 	stw	r16,0(sp)
   48984:	2023883a 	mov	r17,r4
   48988:	2821883a 	mov	r16,r5
   4898c:	39000204 	addi	r4,r7,8
   48990:	01400244 	movi	r5,9
   48994:	dcc00315 	stw	r19,12(sp)
   48998:	dc800215 	stw	r18,8(sp)
   4899c:	dfc00615 	stw	ra,24(sp)
   489a0:	dd400515 	stw	r21,20(sp)
   489a4:	dd000415 	stw	r20,16(sp)
   489a8:	3825883a 	mov	r18,r7
   489ac:	3027883a 	mov	r19,r6
   489b0:	00417d80 	call	417d8 <__divsi3>
   489b4:	00c00044 	movi	r3,1
   489b8:	000b883a 	mov	r5,zero
   489bc:	1880030e 	bge	r3,r2,489cc <__s2b+0x54>
   489c0:	18c7883a 	add	r3,r3,r3
   489c4:	29400044 	addi	r5,r5,1
   489c8:	18bffd16 	blt	r3,r2,489c0 <__alt_data_end+0xfffd69c0>
   489cc:	8809883a 	mov	r4,r17
   489d0:	00487880 	call	48788 <_Balloc>
   489d4:	d8c00717 	ldw	r3,28(sp)
   489d8:	10c00515 	stw	r3,20(r2)
   489dc:	00c00044 	movi	r3,1
   489e0:	10c00415 	stw	r3,16(r2)
   489e4:	00c00244 	movi	r3,9
   489e8:	1cc0210e 	bge	r3,r19,48a70 <__s2b+0xf8>
   489ec:	80eb883a 	add	r21,r16,r3
   489f0:	a829883a 	mov	r20,r21
   489f4:	84e1883a 	add	r16,r16,r19
   489f8:	a1c00007 	ldb	r7,0(r20)
   489fc:	01800284 	movi	r6,10
   48a00:	a5000044 	addi	r20,r20,1
   48a04:	100b883a 	mov	r5,r2
   48a08:	39fff404 	addi	r7,r7,-48
   48a0c:	8809883a 	mov	r4,r17
   48a10:	00488580 	call	48858 <__multadd>
   48a14:	a43ff81e 	bne	r20,r16,489f8 <__alt_data_end+0xfffd69f8>
   48a18:	ace1883a 	add	r16,r21,r19
   48a1c:	843ffe04 	addi	r16,r16,-8
   48a20:	9c800a0e 	bge	r19,r18,48a4c <__s2b+0xd4>
   48a24:	94e5c83a 	sub	r18,r18,r19
   48a28:	84a5883a 	add	r18,r16,r18
   48a2c:	81c00007 	ldb	r7,0(r16)
   48a30:	01800284 	movi	r6,10
   48a34:	84000044 	addi	r16,r16,1
   48a38:	100b883a 	mov	r5,r2
   48a3c:	39fff404 	addi	r7,r7,-48
   48a40:	8809883a 	mov	r4,r17
   48a44:	00488580 	call	48858 <__multadd>
   48a48:	84bff81e 	bne	r16,r18,48a2c <__alt_data_end+0xfffd6a2c>
   48a4c:	dfc00617 	ldw	ra,24(sp)
   48a50:	dd400517 	ldw	r21,20(sp)
   48a54:	dd000417 	ldw	r20,16(sp)
   48a58:	dcc00317 	ldw	r19,12(sp)
   48a5c:	dc800217 	ldw	r18,8(sp)
   48a60:	dc400117 	ldw	r17,4(sp)
   48a64:	dc000017 	ldw	r16,0(sp)
   48a68:	dec00704 	addi	sp,sp,28
   48a6c:	f800283a 	ret
   48a70:	84000284 	addi	r16,r16,10
   48a74:	1827883a 	mov	r19,r3
   48a78:	003fe906 	br	48a20 <__alt_data_end+0xfffd6a20>

00048a7c <__hi0bits>:
   48a7c:	20bfffec 	andhi	r2,r4,65535
   48a80:	1000141e 	bne	r2,zero,48ad4 <__hi0bits+0x58>
   48a84:	2008943a 	slli	r4,r4,16
   48a88:	00800404 	movi	r2,16
   48a8c:	20ffc02c 	andhi	r3,r4,65280
   48a90:	1800021e 	bne	r3,zero,48a9c <__hi0bits+0x20>
   48a94:	2008923a 	slli	r4,r4,8
   48a98:	10800204 	addi	r2,r2,8
   48a9c:	20fc002c 	andhi	r3,r4,61440
   48aa0:	1800021e 	bne	r3,zero,48aac <__hi0bits+0x30>
   48aa4:	2008913a 	slli	r4,r4,4
   48aa8:	10800104 	addi	r2,r2,4
   48aac:	20f0002c 	andhi	r3,r4,49152
   48ab0:	1800031e 	bne	r3,zero,48ac0 <__hi0bits+0x44>
   48ab4:	2109883a 	add	r4,r4,r4
   48ab8:	10800084 	addi	r2,r2,2
   48abc:	2109883a 	add	r4,r4,r4
   48ac0:	20000316 	blt	r4,zero,48ad0 <__hi0bits+0x54>
   48ac4:	2110002c 	andhi	r4,r4,16384
   48ac8:	2000041e 	bne	r4,zero,48adc <__hi0bits+0x60>
   48acc:	00800804 	movi	r2,32
   48ad0:	f800283a 	ret
   48ad4:	0005883a 	mov	r2,zero
   48ad8:	003fec06 	br	48a8c <__alt_data_end+0xfffd6a8c>
   48adc:	10800044 	addi	r2,r2,1
   48ae0:	f800283a 	ret

00048ae4 <__lo0bits>:
   48ae4:	20c00017 	ldw	r3,0(r4)
   48ae8:	188001cc 	andi	r2,r3,7
   48aec:	10000826 	beq	r2,zero,48b10 <__lo0bits+0x2c>
   48af0:	1880004c 	andi	r2,r3,1
   48af4:	1000211e 	bne	r2,zero,48b7c <__lo0bits+0x98>
   48af8:	1880008c 	andi	r2,r3,2
   48afc:	1000211e 	bne	r2,zero,48b84 <__lo0bits+0xa0>
   48b00:	1806d0ba 	srli	r3,r3,2
   48b04:	00800084 	movi	r2,2
   48b08:	20c00015 	stw	r3,0(r4)
   48b0c:	f800283a 	ret
   48b10:	18bfffcc 	andi	r2,r3,65535
   48b14:	10001326 	beq	r2,zero,48b64 <__lo0bits+0x80>
   48b18:	0005883a 	mov	r2,zero
   48b1c:	19403fcc 	andi	r5,r3,255
   48b20:	2800021e 	bne	r5,zero,48b2c <__lo0bits+0x48>
   48b24:	1806d23a 	srli	r3,r3,8
   48b28:	10800204 	addi	r2,r2,8
   48b2c:	194003cc 	andi	r5,r3,15
   48b30:	2800021e 	bne	r5,zero,48b3c <__lo0bits+0x58>
   48b34:	1806d13a 	srli	r3,r3,4
   48b38:	10800104 	addi	r2,r2,4
   48b3c:	194000cc 	andi	r5,r3,3
   48b40:	2800021e 	bne	r5,zero,48b4c <__lo0bits+0x68>
   48b44:	1806d0ba 	srli	r3,r3,2
   48b48:	10800084 	addi	r2,r2,2
   48b4c:	1940004c 	andi	r5,r3,1
   48b50:	2800081e 	bne	r5,zero,48b74 <__lo0bits+0x90>
   48b54:	1806d07a 	srli	r3,r3,1
   48b58:	1800051e 	bne	r3,zero,48b70 <__lo0bits+0x8c>
   48b5c:	00800804 	movi	r2,32
   48b60:	f800283a 	ret
   48b64:	1806d43a 	srli	r3,r3,16
   48b68:	00800404 	movi	r2,16
   48b6c:	003feb06 	br	48b1c <__alt_data_end+0xfffd6b1c>
   48b70:	10800044 	addi	r2,r2,1
   48b74:	20c00015 	stw	r3,0(r4)
   48b78:	f800283a 	ret
   48b7c:	0005883a 	mov	r2,zero
   48b80:	f800283a 	ret
   48b84:	1806d07a 	srli	r3,r3,1
   48b88:	00800044 	movi	r2,1
   48b8c:	20c00015 	stw	r3,0(r4)
   48b90:	f800283a 	ret

00048b94 <__i2b>:
   48b94:	defffd04 	addi	sp,sp,-12
   48b98:	dc000015 	stw	r16,0(sp)
   48b9c:	04000044 	movi	r16,1
   48ba0:	dc400115 	stw	r17,4(sp)
   48ba4:	2823883a 	mov	r17,r5
   48ba8:	800b883a 	mov	r5,r16
   48bac:	dfc00215 	stw	ra,8(sp)
   48bb0:	00487880 	call	48788 <_Balloc>
   48bb4:	14400515 	stw	r17,20(r2)
   48bb8:	14000415 	stw	r16,16(r2)
   48bbc:	dfc00217 	ldw	ra,8(sp)
   48bc0:	dc400117 	ldw	r17,4(sp)
   48bc4:	dc000017 	ldw	r16,0(sp)
   48bc8:	dec00304 	addi	sp,sp,12
   48bcc:	f800283a 	ret

00048bd0 <__multiply>:
   48bd0:	defffa04 	addi	sp,sp,-24
   48bd4:	dcc00315 	stw	r19,12(sp)
   48bd8:	dc800215 	stw	r18,8(sp)
   48bdc:	34c00417 	ldw	r19,16(r6)
   48be0:	2c800417 	ldw	r18,16(r5)
   48be4:	dd000415 	stw	r20,16(sp)
   48be8:	dc400115 	stw	r17,4(sp)
   48bec:	dfc00515 	stw	ra,20(sp)
   48bf0:	dc000015 	stw	r16,0(sp)
   48bf4:	2829883a 	mov	r20,r5
   48bf8:	3023883a 	mov	r17,r6
   48bfc:	94c0050e 	bge	r18,r19,48c14 <__multiply+0x44>
   48c00:	9007883a 	mov	r3,r18
   48c04:	3029883a 	mov	r20,r6
   48c08:	9825883a 	mov	r18,r19
   48c0c:	2823883a 	mov	r17,r5
   48c10:	1827883a 	mov	r19,r3
   48c14:	a0800217 	ldw	r2,8(r20)
   48c18:	94e1883a 	add	r16,r18,r19
   48c1c:	a1400117 	ldw	r5,4(r20)
   48c20:	1400010e 	bge	r2,r16,48c28 <__multiply+0x58>
   48c24:	29400044 	addi	r5,r5,1
   48c28:	00487880 	call	48788 <_Balloc>
   48c2c:	8415883a 	add	r10,r16,r16
   48c30:	12c00504 	addi	r11,r2,20
   48c34:	5295883a 	add	r10,r10,r10
   48c38:	5a95883a 	add	r10,r11,r10
   48c3c:	5807883a 	mov	r3,r11
   48c40:	5a80032e 	bgeu	r11,r10,48c50 <__multiply+0x80>
   48c44:	18000015 	stw	zero,0(r3)
   48c48:	18c00104 	addi	r3,r3,4
   48c4c:	1abffd36 	bltu	r3,r10,48c44 <__alt_data_end+0xfffd6c44>
   48c50:	9ce7883a 	add	r19,r19,r19
   48c54:	94a5883a 	add	r18,r18,r18
   48c58:	89800504 	addi	r6,r17,20
   48c5c:	9ce7883a 	add	r19,r19,r19
   48c60:	a3400504 	addi	r13,r20,20
   48c64:	94a5883a 	add	r18,r18,r18
   48c68:	34d9883a 	add	r12,r6,r19
   48c6c:	6c93883a 	add	r9,r13,r18
   48c70:	3300422e 	bgeu	r6,r12,48d7c <__multiply+0x1ac>
   48c74:	37c00017 	ldw	ra,0(r6)
   48c78:	fbffffcc 	andi	r15,ra,65535
   48c7c:	78001b26 	beq	r15,zero,48cec <__multiply+0x11c>
   48c80:	5811883a 	mov	r8,r11
   48c84:	681d883a 	mov	r14,r13
   48c88:	000f883a 	mov	r7,zero
   48c8c:	71000017 	ldw	r4,0(r14)
   48c90:	40c00017 	ldw	r3,0(r8)
   48c94:	73800104 	addi	r14,r14,4
   48c98:	217fffcc 	andi	r5,r4,65535
   48c9c:	2bcb383a 	mul	r5,r5,r15
   48ca0:	2008d43a 	srli	r4,r4,16
   48ca4:	1c7fffcc 	andi	r17,r3,65535
   48ca8:	2c4b883a 	add	r5,r5,r17
   48cac:	29cb883a 	add	r5,r5,r7
   48cb0:	23c9383a 	mul	r4,r4,r15
   48cb4:	1806d43a 	srli	r3,r3,16
   48cb8:	280ed43a 	srli	r7,r5,16
   48cbc:	297fffcc 	andi	r5,r5,65535
   48cc0:	20c7883a 	add	r3,r4,r3
   48cc4:	19c7883a 	add	r3,r3,r7
   48cc8:	1808943a 	slli	r4,r3,16
   48ccc:	4023883a 	mov	r17,r8
   48cd0:	180ed43a 	srli	r7,r3,16
   48cd4:	214ab03a 	or	r5,r4,r5
   48cd8:	41400015 	stw	r5,0(r8)
   48cdc:	42000104 	addi	r8,r8,4
   48ce0:	727fea36 	bltu	r14,r9,48c8c <__alt_data_end+0xfffd6c8c>
   48ce4:	89c00115 	stw	r7,4(r17)
   48ce8:	37c00017 	ldw	ra,0(r6)
   48cec:	f83ed43a 	srli	ra,ra,16
   48cf0:	f8001f26 	beq	ra,zero,48d70 <__multiply+0x1a0>
   48cf4:	58c00017 	ldw	r3,0(r11)
   48cf8:	681d883a 	mov	r14,r13
   48cfc:	581f883a 	mov	r15,r11
   48d00:	1811883a 	mov	r8,r3
   48d04:	5825883a 	mov	r18,r11
   48d08:	000f883a 	mov	r7,zero
   48d0c:	00000106 	br	48d14 <__multiply+0x144>
   48d10:	8825883a 	mov	r18,r17
   48d14:	7140000b 	ldhu	r5,0(r14)
   48d18:	4010d43a 	srli	r8,r8,16
   48d1c:	193fffcc 	andi	r4,r3,65535
   48d20:	2fcb383a 	mul	r5,r5,ra
   48d24:	7bc00104 	addi	r15,r15,4
   48d28:	73800104 	addi	r14,r14,4
   48d2c:	2a0b883a 	add	r5,r5,r8
   48d30:	29cb883a 	add	r5,r5,r7
   48d34:	2806943a 	slli	r3,r5,16
   48d38:	94400104 	addi	r17,r18,4
   48d3c:	280ad43a 	srli	r5,r5,16
   48d40:	1908b03a 	or	r4,r3,r4
   48d44:	793fff15 	stw	r4,-4(r15)
   48d48:	70ffff17 	ldw	r3,-4(r14)
   48d4c:	8a000017 	ldw	r8,0(r17)
   48d50:	1806d43a 	srli	r3,r3,16
   48d54:	413fffcc 	andi	r4,r8,65535
   48d58:	1fc7383a 	mul	r3,r3,ra
   48d5c:	1907883a 	add	r3,r3,r4
   48d60:	1947883a 	add	r3,r3,r5
   48d64:	180ed43a 	srli	r7,r3,16
   48d68:	727fe936 	bltu	r14,r9,48d10 <__alt_data_end+0xfffd6d10>
   48d6c:	90c00115 	stw	r3,4(r18)
   48d70:	31800104 	addi	r6,r6,4
   48d74:	5ac00104 	addi	r11,r11,4
   48d78:	333fbe36 	bltu	r6,r12,48c74 <__alt_data_end+0xfffd6c74>
   48d7c:	0400090e 	bge	zero,r16,48da4 <__multiply+0x1d4>
   48d80:	50ffff17 	ldw	r3,-4(r10)
   48d84:	52bfff04 	addi	r10,r10,-4
   48d88:	18000326 	beq	r3,zero,48d98 <__multiply+0x1c8>
   48d8c:	00000506 	br	48da4 <__multiply+0x1d4>
   48d90:	50c00017 	ldw	r3,0(r10)
   48d94:	1800031e 	bne	r3,zero,48da4 <__multiply+0x1d4>
   48d98:	843fffc4 	addi	r16,r16,-1
   48d9c:	52bfff04 	addi	r10,r10,-4
   48da0:	803ffb1e 	bne	r16,zero,48d90 <__alt_data_end+0xfffd6d90>
   48da4:	14000415 	stw	r16,16(r2)
   48da8:	dfc00517 	ldw	ra,20(sp)
   48dac:	dd000417 	ldw	r20,16(sp)
   48db0:	dcc00317 	ldw	r19,12(sp)
   48db4:	dc800217 	ldw	r18,8(sp)
   48db8:	dc400117 	ldw	r17,4(sp)
   48dbc:	dc000017 	ldw	r16,0(sp)
   48dc0:	dec00604 	addi	sp,sp,24
   48dc4:	f800283a 	ret

00048dc8 <__pow5mult>:
   48dc8:	defffa04 	addi	sp,sp,-24
   48dcc:	dcc00315 	stw	r19,12(sp)
   48dd0:	dc000015 	stw	r16,0(sp)
   48dd4:	dfc00515 	stw	ra,20(sp)
   48dd8:	dd000415 	stw	r20,16(sp)
   48ddc:	dc800215 	stw	r18,8(sp)
   48de0:	dc400115 	stw	r17,4(sp)
   48de4:	308000cc 	andi	r2,r6,3
   48de8:	3021883a 	mov	r16,r6
   48dec:	2027883a 	mov	r19,r4
   48df0:	10002f1e 	bne	r2,zero,48eb0 <__pow5mult+0xe8>
   48df4:	2825883a 	mov	r18,r5
   48df8:	8021d0ba 	srai	r16,r16,2
   48dfc:	80001a26 	beq	r16,zero,48e68 <__pow5mult+0xa0>
   48e00:	9c401217 	ldw	r17,72(r19)
   48e04:	8800061e 	bne	r17,zero,48e20 <__pow5mult+0x58>
   48e08:	00003406 	br	48edc <__pow5mult+0x114>
   48e0c:	8021d07a 	srai	r16,r16,1
   48e10:	80001526 	beq	r16,zero,48e68 <__pow5mult+0xa0>
   48e14:	88800017 	ldw	r2,0(r17)
   48e18:	10001c26 	beq	r2,zero,48e8c <__pow5mult+0xc4>
   48e1c:	1023883a 	mov	r17,r2
   48e20:	8080004c 	andi	r2,r16,1
   48e24:	103ff926 	beq	r2,zero,48e0c <__alt_data_end+0xfffd6e0c>
   48e28:	880d883a 	mov	r6,r17
   48e2c:	900b883a 	mov	r5,r18
   48e30:	9809883a 	mov	r4,r19
   48e34:	0048bd00 	call	48bd0 <__multiply>
   48e38:	90001b26 	beq	r18,zero,48ea8 <__pow5mult+0xe0>
   48e3c:	91000117 	ldw	r4,4(r18)
   48e40:	98c01317 	ldw	r3,76(r19)
   48e44:	8021d07a 	srai	r16,r16,1
   48e48:	2109883a 	add	r4,r4,r4
   48e4c:	2109883a 	add	r4,r4,r4
   48e50:	1907883a 	add	r3,r3,r4
   48e54:	19000017 	ldw	r4,0(r3)
   48e58:	91000015 	stw	r4,0(r18)
   48e5c:	1c800015 	stw	r18,0(r3)
   48e60:	1025883a 	mov	r18,r2
   48e64:	803feb1e 	bne	r16,zero,48e14 <__alt_data_end+0xfffd6e14>
   48e68:	9005883a 	mov	r2,r18
   48e6c:	dfc00517 	ldw	ra,20(sp)
   48e70:	dd000417 	ldw	r20,16(sp)
   48e74:	dcc00317 	ldw	r19,12(sp)
   48e78:	dc800217 	ldw	r18,8(sp)
   48e7c:	dc400117 	ldw	r17,4(sp)
   48e80:	dc000017 	ldw	r16,0(sp)
   48e84:	dec00604 	addi	sp,sp,24
   48e88:	f800283a 	ret
   48e8c:	880d883a 	mov	r6,r17
   48e90:	880b883a 	mov	r5,r17
   48e94:	9809883a 	mov	r4,r19
   48e98:	0048bd00 	call	48bd0 <__multiply>
   48e9c:	88800015 	stw	r2,0(r17)
   48ea0:	10000015 	stw	zero,0(r2)
   48ea4:	003fdd06 	br	48e1c <__alt_data_end+0xfffd6e1c>
   48ea8:	1025883a 	mov	r18,r2
   48eac:	003fd706 	br	48e0c <__alt_data_end+0xfffd6e0c>
   48eb0:	10bfffc4 	addi	r2,r2,-1
   48eb4:	1085883a 	add	r2,r2,r2
   48eb8:	00c00174 	movhi	r3,5
   48ebc:	18ca3d04 	addi	r3,r3,10484
   48ec0:	1085883a 	add	r2,r2,r2
   48ec4:	1885883a 	add	r2,r3,r2
   48ec8:	11800017 	ldw	r6,0(r2)
   48ecc:	000f883a 	mov	r7,zero
   48ed0:	00488580 	call	48858 <__multadd>
   48ed4:	1025883a 	mov	r18,r2
   48ed8:	003fc706 	br	48df8 <__alt_data_end+0xfffd6df8>
   48edc:	05000044 	movi	r20,1
   48ee0:	a00b883a 	mov	r5,r20
   48ee4:	9809883a 	mov	r4,r19
   48ee8:	00487880 	call	48788 <_Balloc>
   48eec:	1023883a 	mov	r17,r2
   48ef0:	00809c44 	movi	r2,625
   48ef4:	88800515 	stw	r2,20(r17)
   48ef8:	8d000415 	stw	r20,16(r17)
   48efc:	9c401215 	stw	r17,72(r19)
   48f00:	88000015 	stw	zero,0(r17)
   48f04:	003fc606 	br	48e20 <__alt_data_end+0xfffd6e20>

00048f08 <__lshift>:
   48f08:	defff904 	addi	sp,sp,-28
   48f0c:	dd400515 	stw	r21,20(sp)
   48f10:	dcc00315 	stw	r19,12(sp)
   48f14:	302bd17a 	srai	r21,r6,5
   48f18:	2cc00417 	ldw	r19,16(r5)
   48f1c:	28800217 	ldw	r2,8(r5)
   48f20:	dd000415 	stw	r20,16(sp)
   48f24:	ace7883a 	add	r19,r21,r19
   48f28:	dc800215 	stw	r18,8(sp)
   48f2c:	dc400115 	stw	r17,4(sp)
   48f30:	dc000015 	stw	r16,0(sp)
   48f34:	dfc00615 	stw	ra,24(sp)
   48f38:	9c000044 	addi	r16,r19,1
   48f3c:	2823883a 	mov	r17,r5
   48f40:	3029883a 	mov	r20,r6
   48f44:	2025883a 	mov	r18,r4
   48f48:	29400117 	ldw	r5,4(r5)
   48f4c:	1400030e 	bge	r2,r16,48f5c <__lshift+0x54>
   48f50:	1085883a 	add	r2,r2,r2
   48f54:	29400044 	addi	r5,r5,1
   48f58:	143ffd16 	blt	r2,r16,48f50 <__alt_data_end+0xfffd6f50>
   48f5c:	9009883a 	mov	r4,r18
   48f60:	00487880 	call	48788 <_Balloc>
   48f64:	10c00504 	addi	r3,r2,20
   48f68:	0540070e 	bge	zero,r21,48f88 <__lshift+0x80>
   48f6c:	ad6b883a 	add	r21,r21,r21
   48f70:	ad6b883a 	add	r21,r21,r21
   48f74:	1809883a 	mov	r4,r3
   48f78:	1d47883a 	add	r3,r3,r21
   48f7c:	20000015 	stw	zero,0(r4)
   48f80:	21000104 	addi	r4,r4,4
   48f84:	193ffd1e 	bne	r3,r4,48f7c <__alt_data_end+0xfffd6f7c>
   48f88:	8a000417 	ldw	r8,16(r17)
   48f8c:	89000504 	addi	r4,r17,20
   48f90:	a18007cc 	andi	r6,r20,31
   48f94:	4211883a 	add	r8,r8,r8
   48f98:	4211883a 	add	r8,r8,r8
   48f9c:	2211883a 	add	r8,r4,r8
   48fa0:	30002326 	beq	r6,zero,49030 <__lshift+0x128>
   48fa4:	02400804 	movi	r9,32
   48fa8:	4993c83a 	sub	r9,r9,r6
   48fac:	000b883a 	mov	r5,zero
   48fb0:	21c00017 	ldw	r7,0(r4)
   48fb4:	1815883a 	mov	r10,r3
   48fb8:	18c00104 	addi	r3,r3,4
   48fbc:	398e983a 	sll	r7,r7,r6
   48fc0:	21000104 	addi	r4,r4,4
   48fc4:	394ab03a 	or	r5,r7,r5
   48fc8:	197fff15 	stw	r5,-4(r3)
   48fcc:	217fff17 	ldw	r5,-4(r4)
   48fd0:	2a4ad83a 	srl	r5,r5,r9
   48fd4:	223ff636 	bltu	r4,r8,48fb0 <__alt_data_end+0xfffd6fb0>
   48fd8:	51400115 	stw	r5,4(r10)
   48fdc:	28001a1e 	bne	r5,zero,49048 <__lshift+0x140>
   48fe0:	843fffc4 	addi	r16,r16,-1
   48fe4:	14000415 	stw	r16,16(r2)
   48fe8:	88000826 	beq	r17,zero,4900c <__lshift+0x104>
   48fec:	89000117 	ldw	r4,4(r17)
   48ff0:	90c01317 	ldw	r3,76(r18)
   48ff4:	2109883a 	add	r4,r4,r4
   48ff8:	2109883a 	add	r4,r4,r4
   48ffc:	1907883a 	add	r3,r3,r4
   49000:	19000017 	ldw	r4,0(r3)
   49004:	89000015 	stw	r4,0(r17)
   49008:	1c400015 	stw	r17,0(r3)
   4900c:	dfc00617 	ldw	ra,24(sp)
   49010:	dd400517 	ldw	r21,20(sp)
   49014:	dd000417 	ldw	r20,16(sp)
   49018:	dcc00317 	ldw	r19,12(sp)
   4901c:	dc800217 	ldw	r18,8(sp)
   49020:	dc400117 	ldw	r17,4(sp)
   49024:	dc000017 	ldw	r16,0(sp)
   49028:	dec00704 	addi	sp,sp,28
   4902c:	f800283a 	ret
   49030:	21400017 	ldw	r5,0(r4)
   49034:	18c00104 	addi	r3,r3,4
   49038:	21000104 	addi	r4,r4,4
   4903c:	197fff15 	stw	r5,-4(r3)
   49040:	223ffb36 	bltu	r4,r8,49030 <__alt_data_end+0xfffd7030>
   49044:	003fe606 	br	48fe0 <__alt_data_end+0xfffd6fe0>
   49048:	9c000084 	addi	r16,r19,2
   4904c:	003fe406 	br	48fe0 <__alt_data_end+0xfffd6fe0>

00049050 <__mcmp>:
   49050:	20800417 	ldw	r2,16(r4)
   49054:	28c00417 	ldw	r3,16(r5)
   49058:	10c5c83a 	sub	r2,r2,r3
   4905c:	1000111e 	bne	r2,zero,490a4 <__mcmp+0x54>
   49060:	18c7883a 	add	r3,r3,r3
   49064:	18c7883a 	add	r3,r3,r3
   49068:	21000504 	addi	r4,r4,20
   4906c:	29400504 	addi	r5,r5,20
   49070:	20c5883a 	add	r2,r4,r3
   49074:	28cb883a 	add	r5,r5,r3
   49078:	00000106 	br	49080 <__mcmp+0x30>
   4907c:	20800a2e 	bgeu	r4,r2,490a8 <__mcmp+0x58>
   49080:	10bfff04 	addi	r2,r2,-4
   49084:	297fff04 	addi	r5,r5,-4
   49088:	11800017 	ldw	r6,0(r2)
   4908c:	28c00017 	ldw	r3,0(r5)
   49090:	30fffa26 	beq	r6,r3,4907c <__alt_data_end+0xfffd707c>
   49094:	30c00236 	bltu	r6,r3,490a0 <__mcmp+0x50>
   49098:	00800044 	movi	r2,1
   4909c:	f800283a 	ret
   490a0:	00bfffc4 	movi	r2,-1
   490a4:	f800283a 	ret
   490a8:	0005883a 	mov	r2,zero
   490ac:	f800283a 	ret

000490b0 <__mdiff>:
   490b0:	28c00417 	ldw	r3,16(r5)
   490b4:	30800417 	ldw	r2,16(r6)
   490b8:	defffa04 	addi	sp,sp,-24
   490bc:	dcc00315 	stw	r19,12(sp)
   490c0:	dc800215 	stw	r18,8(sp)
   490c4:	dfc00515 	stw	ra,20(sp)
   490c8:	dd000415 	stw	r20,16(sp)
   490cc:	dc400115 	stw	r17,4(sp)
   490d0:	dc000015 	stw	r16,0(sp)
   490d4:	1887c83a 	sub	r3,r3,r2
   490d8:	2825883a 	mov	r18,r5
   490dc:	3027883a 	mov	r19,r6
   490e0:	1800141e 	bne	r3,zero,49134 <__mdiff+0x84>
   490e4:	1085883a 	add	r2,r2,r2
   490e8:	1085883a 	add	r2,r2,r2
   490ec:	2a000504 	addi	r8,r5,20
   490f0:	34000504 	addi	r16,r6,20
   490f4:	4087883a 	add	r3,r8,r2
   490f8:	8085883a 	add	r2,r16,r2
   490fc:	00000106 	br	49104 <__mdiff+0x54>
   49100:	40c0592e 	bgeu	r8,r3,49268 <__mdiff+0x1b8>
   49104:	18ffff04 	addi	r3,r3,-4
   49108:	10bfff04 	addi	r2,r2,-4
   4910c:	19c00017 	ldw	r7,0(r3)
   49110:	11400017 	ldw	r5,0(r2)
   49114:	397ffa26 	beq	r7,r5,49100 <__alt_data_end+0xfffd7100>
   49118:	3940592e 	bgeu	r7,r5,49280 <__mdiff+0x1d0>
   4911c:	9005883a 	mov	r2,r18
   49120:	4023883a 	mov	r17,r8
   49124:	9825883a 	mov	r18,r19
   49128:	05000044 	movi	r20,1
   4912c:	1027883a 	mov	r19,r2
   49130:	00000406 	br	49144 <__mdiff+0x94>
   49134:	18005616 	blt	r3,zero,49290 <__mdiff+0x1e0>
   49138:	34400504 	addi	r17,r6,20
   4913c:	2c000504 	addi	r16,r5,20
   49140:	0029883a 	mov	r20,zero
   49144:	91400117 	ldw	r5,4(r18)
   49148:	00487880 	call	48788 <_Balloc>
   4914c:	92400417 	ldw	r9,16(r18)
   49150:	9b000417 	ldw	r12,16(r19)
   49154:	12c00504 	addi	r11,r2,20
   49158:	4a51883a 	add	r8,r9,r9
   4915c:	6319883a 	add	r12,r12,r12
   49160:	4211883a 	add	r8,r8,r8
   49164:	6319883a 	add	r12,r12,r12
   49168:	15000315 	stw	r20,12(r2)
   4916c:	8211883a 	add	r8,r16,r8
   49170:	8b19883a 	add	r12,r17,r12
   49174:	0007883a 	mov	r3,zero
   49178:	81400017 	ldw	r5,0(r16)
   4917c:	89c00017 	ldw	r7,0(r17)
   49180:	59800104 	addi	r6,r11,4
   49184:	293fffcc 	andi	r4,r5,65535
   49188:	20c7883a 	add	r3,r4,r3
   4918c:	393fffcc 	andi	r4,r7,65535
   49190:	1909c83a 	sub	r4,r3,r4
   49194:	280ad43a 	srli	r5,r5,16
   49198:	380ed43a 	srli	r7,r7,16
   4919c:	2007d43a 	srai	r3,r4,16
   491a0:	213fffcc 	andi	r4,r4,65535
   491a4:	29cbc83a 	sub	r5,r5,r7
   491a8:	28c7883a 	add	r3,r5,r3
   491ac:	180a943a 	slli	r5,r3,16
   491b0:	8c400104 	addi	r17,r17,4
   491b4:	84000104 	addi	r16,r16,4
   491b8:	2908b03a 	or	r4,r5,r4
   491bc:	59000015 	stw	r4,0(r11)
   491c0:	1807d43a 	srai	r3,r3,16
   491c4:	3015883a 	mov	r10,r6
   491c8:	3017883a 	mov	r11,r6
   491cc:	8b3fea36 	bltu	r17,r12,49178 <__alt_data_end+0xfffd7178>
   491d0:	8200162e 	bgeu	r16,r8,4922c <__mdiff+0x17c>
   491d4:	8017883a 	mov	r11,r16
   491d8:	59400017 	ldw	r5,0(r11)
   491dc:	31800104 	addi	r6,r6,4
   491e0:	5ac00104 	addi	r11,r11,4
   491e4:	293fffcc 	andi	r4,r5,65535
   491e8:	20c7883a 	add	r3,r4,r3
   491ec:	280ed43a 	srli	r7,r5,16
   491f0:	180bd43a 	srai	r5,r3,16
   491f4:	193fffcc 	andi	r4,r3,65535
   491f8:	3947883a 	add	r3,r7,r5
   491fc:	180a943a 	slli	r5,r3,16
   49200:	1807d43a 	srai	r3,r3,16
   49204:	2908b03a 	or	r4,r5,r4
   49208:	313fff15 	stw	r4,-4(r6)
   4920c:	5a3ff236 	bltu	r11,r8,491d8 <__alt_data_end+0xfffd71d8>
   49210:	0406303a 	nor	r3,zero,r16
   49214:	1a07883a 	add	r3,r3,r8
   49218:	1806d0ba 	srli	r3,r3,2
   4921c:	18c00044 	addi	r3,r3,1
   49220:	18c7883a 	add	r3,r3,r3
   49224:	18c7883a 	add	r3,r3,r3
   49228:	50d5883a 	add	r10,r10,r3
   4922c:	50ffff04 	addi	r3,r10,-4
   49230:	2000041e 	bne	r4,zero,49244 <__mdiff+0x194>
   49234:	18ffff04 	addi	r3,r3,-4
   49238:	19000017 	ldw	r4,0(r3)
   4923c:	4a7fffc4 	addi	r9,r9,-1
   49240:	203ffc26 	beq	r4,zero,49234 <__alt_data_end+0xfffd7234>
   49244:	12400415 	stw	r9,16(r2)
   49248:	dfc00517 	ldw	ra,20(sp)
   4924c:	dd000417 	ldw	r20,16(sp)
   49250:	dcc00317 	ldw	r19,12(sp)
   49254:	dc800217 	ldw	r18,8(sp)
   49258:	dc400117 	ldw	r17,4(sp)
   4925c:	dc000017 	ldw	r16,0(sp)
   49260:	dec00604 	addi	sp,sp,24
   49264:	f800283a 	ret
   49268:	000b883a 	mov	r5,zero
   4926c:	00487880 	call	48788 <_Balloc>
   49270:	00c00044 	movi	r3,1
   49274:	10c00415 	stw	r3,16(r2)
   49278:	10000515 	stw	zero,20(r2)
   4927c:	003ff206 	br	49248 <__alt_data_end+0xfffd7248>
   49280:	8023883a 	mov	r17,r16
   49284:	0029883a 	mov	r20,zero
   49288:	4021883a 	mov	r16,r8
   4928c:	003fad06 	br	49144 <__alt_data_end+0xfffd7144>
   49290:	9005883a 	mov	r2,r18
   49294:	94400504 	addi	r17,r18,20
   49298:	9c000504 	addi	r16,r19,20
   4929c:	9825883a 	mov	r18,r19
   492a0:	05000044 	movi	r20,1
   492a4:	1027883a 	mov	r19,r2
   492a8:	003fa606 	br	49144 <__alt_data_end+0xfffd7144>

000492ac <__ulp>:
   492ac:	295ffc2c 	andhi	r5,r5,32752
   492b0:	00bf3034 	movhi	r2,64704
   492b4:	2887883a 	add	r3,r5,r2
   492b8:	00c0020e 	bge	zero,r3,492c4 <__ulp+0x18>
   492bc:	0005883a 	mov	r2,zero
   492c0:	f800283a 	ret
   492c4:	00c7c83a 	sub	r3,zero,r3
   492c8:	1807d53a 	srai	r3,r3,20
   492cc:	008004c4 	movi	r2,19
   492d0:	10c00b0e 	bge	r2,r3,49300 <__ulp+0x54>
   492d4:	18bffb04 	addi	r2,r3,-20
   492d8:	01000784 	movi	r4,30
   492dc:	0007883a 	mov	r3,zero
   492e0:	20800516 	blt	r4,r2,492f8 <__ulp+0x4c>
   492e4:	010007c4 	movi	r4,31
   492e8:	2089c83a 	sub	r4,r4,r2
   492ec:	00800044 	movi	r2,1
   492f0:	1104983a 	sll	r2,r2,r4
   492f4:	f800283a 	ret
   492f8:	00800044 	movi	r2,1
   492fc:	f800283a 	ret
   49300:	01400234 	movhi	r5,8
   49304:	28c7d83a 	sra	r3,r5,r3
   49308:	0005883a 	mov	r2,zero
   4930c:	f800283a 	ret

00049310 <__b2d>:
   49310:	defffa04 	addi	sp,sp,-24
   49314:	dc000015 	stw	r16,0(sp)
   49318:	24000417 	ldw	r16,16(r4)
   4931c:	dc400115 	stw	r17,4(sp)
   49320:	24400504 	addi	r17,r4,20
   49324:	8421883a 	add	r16,r16,r16
   49328:	8421883a 	add	r16,r16,r16
   4932c:	8c21883a 	add	r16,r17,r16
   49330:	dc800215 	stw	r18,8(sp)
   49334:	84bfff17 	ldw	r18,-4(r16)
   49338:	dd000415 	stw	r20,16(sp)
   4933c:	dcc00315 	stw	r19,12(sp)
   49340:	9009883a 	mov	r4,r18
   49344:	2829883a 	mov	r20,r5
   49348:	dfc00515 	stw	ra,20(sp)
   4934c:	0048a7c0 	call	48a7c <__hi0bits>
   49350:	00c00804 	movi	r3,32
   49354:	1889c83a 	sub	r4,r3,r2
   49358:	a1000015 	stw	r4,0(r20)
   4935c:	01000284 	movi	r4,10
   49360:	84ffff04 	addi	r19,r16,-4
   49364:	20801216 	blt	r4,r2,493b0 <__b2d+0xa0>
   49368:	018002c4 	movi	r6,11
   4936c:	308dc83a 	sub	r6,r6,r2
   49370:	9186d83a 	srl	r3,r18,r6
   49374:	18cffc34 	orhi	r3,r3,16368
   49378:	8cc0212e 	bgeu	r17,r19,49400 <__b2d+0xf0>
   4937c:	813ffe17 	ldw	r4,-8(r16)
   49380:	218cd83a 	srl	r6,r4,r6
   49384:	10800544 	addi	r2,r2,21
   49388:	9084983a 	sll	r2,r18,r2
   4938c:	1184b03a 	or	r2,r2,r6
   49390:	dfc00517 	ldw	ra,20(sp)
   49394:	dd000417 	ldw	r20,16(sp)
   49398:	dcc00317 	ldw	r19,12(sp)
   4939c:	dc800217 	ldw	r18,8(sp)
   493a0:	dc400117 	ldw	r17,4(sp)
   493a4:	dc000017 	ldw	r16,0(sp)
   493a8:	dec00604 	addi	sp,sp,24
   493ac:	f800283a 	ret
   493b0:	8cc00f2e 	bgeu	r17,r19,493f0 <__b2d+0xe0>
   493b4:	117ffd44 	addi	r5,r2,-11
   493b8:	80bffe17 	ldw	r2,-8(r16)
   493bc:	28000e26 	beq	r5,zero,493f8 <__b2d+0xe8>
   493c0:	1949c83a 	sub	r4,r3,r5
   493c4:	9164983a 	sll	r18,r18,r5
   493c8:	1106d83a 	srl	r3,r2,r4
   493cc:	81bffe04 	addi	r6,r16,-8
   493d0:	948ffc34 	orhi	r18,r18,16368
   493d4:	90c6b03a 	or	r3,r18,r3
   493d8:	89800e2e 	bgeu	r17,r6,49414 <__b2d+0x104>
   493dc:	81bffd17 	ldw	r6,-12(r16)
   493e0:	1144983a 	sll	r2,r2,r5
   493e4:	310ad83a 	srl	r5,r6,r4
   493e8:	2884b03a 	or	r2,r5,r2
   493ec:	003fe806 	br	49390 <__alt_data_end+0xfffd7390>
   493f0:	10bffd44 	addi	r2,r2,-11
   493f4:	1000041e 	bne	r2,zero,49408 <__b2d+0xf8>
   493f8:	90cffc34 	orhi	r3,r18,16368
   493fc:	003fe406 	br	49390 <__alt_data_end+0xfffd7390>
   49400:	000d883a 	mov	r6,zero
   49404:	003fdf06 	br	49384 <__alt_data_end+0xfffd7384>
   49408:	90a4983a 	sll	r18,r18,r2
   4940c:	0005883a 	mov	r2,zero
   49410:	003ff906 	br	493f8 <__alt_data_end+0xfffd73f8>
   49414:	1144983a 	sll	r2,r2,r5
   49418:	003fdd06 	br	49390 <__alt_data_end+0xfffd7390>

0004941c <__d2b>:
   4941c:	defff804 	addi	sp,sp,-32
   49420:	dc000215 	stw	r16,8(sp)
   49424:	3021883a 	mov	r16,r6
   49428:	dc400315 	stw	r17,12(sp)
   4942c:	8022907a 	slli	r17,r16,1
   49430:	dd000615 	stw	r20,24(sp)
   49434:	2829883a 	mov	r20,r5
   49438:	01400044 	movi	r5,1
   4943c:	dcc00515 	stw	r19,20(sp)
   49440:	dc800415 	stw	r18,16(sp)
   49444:	dfc00715 	stw	ra,28(sp)
   49448:	3825883a 	mov	r18,r7
   4944c:	8822d57a 	srli	r17,r17,21
   49450:	00487880 	call	48788 <_Balloc>
   49454:	1027883a 	mov	r19,r2
   49458:	00800434 	movhi	r2,16
   4945c:	10bfffc4 	addi	r2,r2,-1
   49460:	808c703a 	and	r6,r16,r2
   49464:	88000126 	beq	r17,zero,4946c <__d2b+0x50>
   49468:	31800434 	orhi	r6,r6,16
   4946c:	d9800015 	stw	r6,0(sp)
   49470:	a0002426 	beq	r20,zero,49504 <__d2b+0xe8>
   49474:	d9000104 	addi	r4,sp,4
   49478:	dd000115 	stw	r20,4(sp)
   4947c:	0048ae40 	call	48ae4 <__lo0bits>
   49480:	d8c00017 	ldw	r3,0(sp)
   49484:	10002f1e 	bne	r2,zero,49544 <__d2b+0x128>
   49488:	d9000117 	ldw	r4,4(sp)
   4948c:	99000515 	stw	r4,20(r19)
   49490:	1821003a 	cmpeq	r16,r3,zero
   49494:	01000084 	movi	r4,2
   49498:	2421c83a 	sub	r16,r4,r16
   4949c:	98c00615 	stw	r3,24(r19)
   494a0:	9c000415 	stw	r16,16(r19)
   494a4:	88001f1e 	bne	r17,zero,49524 <__d2b+0x108>
   494a8:	10bef384 	addi	r2,r2,-1074
   494ac:	90800015 	stw	r2,0(r18)
   494b0:	00900034 	movhi	r2,16384
   494b4:	10bfffc4 	addi	r2,r2,-1
   494b8:	8085883a 	add	r2,r16,r2
   494bc:	1085883a 	add	r2,r2,r2
   494c0:	1085883a 	add	r2,r2,r2
   494c4:	9885883a 	add	r2,r19,r2
   494c8:	11000517 	ldw	r4,20(r2)
   494cc:	8020917a 	slli	r16,r16,5
   494d0:	0048a7c0 	call	48a7c <__hi0bits>
   494d4:	d8c00817 	ldw	r3,32(sp)
   494d8:	8085c83a 	sub	r2,r16,r2
   494dc:	18800015 	stw	r2,0(r3)
   494e0:	9805883a 	mov	r2,r19
   494e4:	dfc00717 	ldw	ra,28(sp)
   494e8:	dd000617 	ldw	r20,24(sp)
   494ec:	dcc00517 	ldw	r19,20(sp)
   494f0:	dc800417 	ldw	r18,16(sp)
   494f4:	dc400317 	ldw	r17,12(sp)
   494f8:	dc000217 	ldw	r16,8(sp)
   494fc:	dec00804 	addi	sp,sp,32
   49500:	f800283a 	ret
   49504:	d809883a 	mov	r4,sp
   49508:	0048ae40 	call	48ae4 <__lo0bits>
   4950c:	d8c00017 	ldw	r3,0(sp)
   49510:	04000044 	movi	r16,1
   49514:	9c000415 	stw	r16,16(r19)
   49518:	98c00515 	stw	r3,20(r19)
   4951c:	10800804 	addi	r2,r2,32
   49520:	883fe126 	beq	r17,zero,494a8 <__alt_data_end+0xfffd74a8>
   49524:	00c00d44 	movi	r3,53
   49528:	8c7ef344 	addi	r17,r17,-1075
   4952c:	88a3883a 	add	r17,r17,r2
   49530:	1885c83a 	sub	r2,r3,r2
   49534:	d8c00817 	ldw	r3,32(sp)
   49538:	94400015 	stw	r17,0(r18)
   4953c:	18800015 	stw	r2,0(r3)
   49540:	003fe706 	br	494e0 <__alt_data_end+0xfffd74e0>
   49544:	01000804 	movi	r4,32
   49548:	2089c83a 	sub	r4,r4,r2
   4954c:	1908983a 	sll	r4,r3,r4
   49550:	d9400117 	ldw	r5,4(sp)
   49554:	1886d83a 	srl	r3,r3,r2
   49558:	2148b03a 	or	r4,r4,r5
   4955c:	99000515 	stw	r4,20(r19)
   49560:	d8c00015 	stw	r3,0(sp)
   49564:	003fca06 	br	49490 <__alt_data_end+0xfffd7490>

00049568 <__ratio>:
   49568:	defff904 	addi	sp,sp,-28
   4956c:	dc400315 	stw	r17,12(sp)
   49570:	2823883a 	mov	r17,r5
   49574:	d9400104 	addi	r5,sp,4
   49578:	dfc00615 	stw	ra,24(sp)
   4957c:	dcc00515 	stw	r19,20(sp)
   49580:	dc800415 	stw	r18,16(sp)
   49584:	2027883a 	mov	r19,r4
   49588:	dc000215 	stw	r16,8(sp)
   4958c:	00493100 	call	49310 <__b2d>
   49590:	d80b883a 	mov	r5,sp
   49594:	8809883a 	mov	r4,r17
   49598:	1025883a 	mov	r18,r2
   4959c:	1821883a 	mov	r16,r3
   495a0:	00493100 	call	49310 <__b2d>
   495a4:	8a000417 	ldw	r8,16(r17)
   495a8:	99000417 	ldw	r4,16(r19)
   495ac:	d9400117 	ldw	r5,4(sp)
   495b0:	2209c83a 	sub	r4,r4,r8
   495b4:	2010917a 	slli	r8,r4,5
   495b8:	d9000017 	ldw	r4,0(sp)
   495bc:	2909c83a 	sub	r4,r5,r4
   495c0:	4109883a 	add	r4,r8,r4
   495c4:	01000e0e 	bge	zero,r4,49600 <__ratio+0x98>
   495c8:	2008953a 	slli	r4,r4,20
   495cc:	2421883a 	add	r16,r4,r16
   495d0:	100d883a 	mov	r6,r2
   495d4:	180f883a 	mov	r7,r3
   495d8:	9009883a 	mov	r4,r18
   495dc:	800b883a 	mov	r5,r16
   495e0:	004cfac0 	call	4cfac <__divdf3>
   495e4:	dfc00617 	ldw	ra,24(sp)
   495e8:	dcc00517 	ldw	r19,20(sp)
   495ec:	dc800417 	ldw	r18,16(sp)
   495f0:	dc400317 	ldw	r17,12(sp)
   495f4:	dc000217 	ldw	r16,8(sp)
   495f8:	dec00704 	addi	sp,sp,28
   495fc:	f800283a 	ret
   49600:	2008953a 	slli	r4,r4,20
   49604:	1907c83a 	sub	r3,r3,r4
   49608:	003ff106 	br	495d0 <__alt_data_end+0xfffd75d0>

0004960c <_mprec_log10>:
   4960c:	defffe04 	addi	sp,sp,-8
   49610:	dc000015 	stw	r16,0(sp)
   49614:	dfc00115 	stw	ra,4(sp)
   49618:	008005c4 	movi	r2,23
   4961c:	2021883a 	mov	r16,r4
   49620:	11000d0e 	bge	r2,r4,49658 <_mprec_log10+0x4c>
   49624:	0005883a 	mov	r2,zero
   49628:	00cffc34 	movhi	r3,16368
   4962c:	843fffc4 	addi	r16,r16,-1
   49630:	000d883a 	mov	r6,zero
   49634:	01d00934 	movhi	r7,16420
   49638:	1009883a 	mov	r4,r2
   4963c:	180b883a 	mov	r5,r3
   49640:	004daec0 	call	4daec <__muldf3>
   49644:	803ff91e 	bne	r16,zero,4962c <__alt_data_end+0xfffd762c>
   49648:	dfc00117 	ldw	ra,4(sp)
   4964c:	dc000017 	ldw	r16,0(sp)
   49650:	dec00204 	addi	sp,sp,8
   49654:	f800283a 	ret
   49658:	202090fa 	slli	r16,r4,3
   4965c:	00800174 	movhi	r2,5
   49660:	108a5404 	addi	r2,r2,10576
   49664:	1421883a 	add	r16,r2,r16
   49668:	80800017 	ldw	r2,0(r16)
   4966c:	80c00117 	ldw	r3,4(r16)
   49670:	dfc00117 	ldw	ra,4(sp)
   49674:	dc000017 	ldw	r16,0(sp)
   49678:	dec00204 	addi	sp,sp,8
   4967c:	f800283a 	ret

00049680 <__copybits>:
   49680:	297fffc4 	addi	r5,r5,-1
   49684:	280fd17a 	srai	r7,r5,5
   49688:	30c00417 	ldw	r3,16(r6)
   4968c:	30800504 	addi	r2,r6,20
   49690:	39c00044 	addi	r7,r7,1
   49694:	18c7883a 	add	r3,r3,r3
   49698:	39cf883a 	add	r7,r7,r7
   4969c:	18c7883a 	add	r3,r3,r3
   496a0:	39cf883a 	add	r7,r7,r7
   496a4:	10c7883a 	add	r3,r2,r3
   496a8:	21cf883a 	add	r7,r4,r7
   496ac:	10c00d2e 	bgeu	r2,r3,496e4 <__copybits+0x64>
   496b0:	200b883a 	mov	r5,r4
   496b4:	12000017 	ldw	r8,0(r2)
   496b8:	29400104 	addi	r5,r5,4
   496bc:	10800104 	addi	r2,r2,4
   496c0:	2a3fff15 	stw	r8,-4(r5)
   496c4:	10fffb36 	bltu	r2,r3,496b4 <__alt_data_end+0xfffd76b4>
   496c8:	1985c83a 	sub	r2,r3,r6
   496cc:	10bffac4 	addi	r2,r2,-21
   496d0:	1004d0ba 	srli	r2,r2,2
   496d4:	10800044 	addi	r2,r2,1
   496d8:	1085883a 	add	r2,r2,r2
   496dc:	1085883a 	add	r2,r2,r2
   496e0:	2089883a 	add	r4,r4,r2
   496e4:	21c0032e 	bgeu	r4,r7,496f4 <__copybits+0x74>
   496e8:	20000015 	stw	zero,0(r4)
   496ec:	21000104 	addi	r4,r4,4
   496f0:	21fffd36 	bltu	r4,r7,496e8 <__alt_data_end+0xfffd76e8>
   496f4:	f800283a 	ret

000496f8 <__any_on>:
   496f8:	20c00417 	ldw	r3,16(r4)
   496fc:	2805d17a 	srai	r2,r5,5
   49700:	21000504 	addi	r4,r4,20
   49704:	18800d0e 	bge	r3,r2,4973c <__any_on+0x44>
   49708:	18c7883a 	add	r3,r3,r3
   4970c:	18c7883a 	add	r3,r3,r3
   49710:	20c7883a 	add	r3,r4,r3
   49714:	20c0192e 	bgeu	r4,r3,4977c <__any_on+0x84>
   49718:	18bfff17 	ldw	r2,-4(r3)
   4971c:	18ffff04 	addi	r3,r3,-4
   49720:	1000041e 	bne	r2,zero,49734 <__any_on+0x3c>
   49724:	20c0142e 	bgeu	r4,r3,49778 <__any_on+0x80>
   49728:	18ffff04 	addi	r3,r3,-4
   4972c:	19400017 	ldw	r5,0(r3)
   49730:	283ffc26 	beq	r5,zero,49724 <__alt_data_end+0xfffd7724>
   49734:	00800044 	movi	r2,1
   49738:	f800283a 	ret
   4973c:	10c00a0e 	bge	r2,r3,49768 <__any_on+0x70>
   49740:	1085883a 	add	r2,r2,r2
   49744:	1085883a 	add	r2,r2,r2
   49748:	294007cc 	andi	r5,r5,31
   4974c:	2087883a 	add	r3,r4,r2
   49750:	283ff026 	beq	r5,zero,49714 <__alt_data_end+0xfffd7714>
   49754:	19800017 	ldw	r6,0(r3)
   49758:	3144d83a 	srl	r2,r6,r5
   4975c:	114a983a 	sll	r5,r2,r5
   49760:	317ff41e 	bne	r6,r5,49734 <__alt_data_end+0xfffd7734>
   49764:	003feb06 	br	49714 <__alt_data_end+0xfffd7714>
   49768:	1085883a 	add	r2,r2,r2
   4976c:	1085883a 	add	r2,r2,r2
   49770:	2087883a 	add	r3,r4,r2
   49774:	003fe706 	br	49714 <__alt_data_end+0xfffd7714>
   49778:	f800283a 	ret
   4977c:	0005883a 	mov	r2,zero
   49780:	f800283a 	ret

00049784 <_read_r>:
   49784:	defffd04 	addi	sp,sp,-12
   49788:	2805883a 	mov	r2,r5
   4978c:	dc000015 	stw	r16,0(sp)
   49790:	04000174 	movhi	r16,5
   49794:	dc400115 	stw	r17,4(sp)
   49798:	300b883a 	mov	r5,r6
   4979c:	841ad804 	addi	r16,r16,27488
   497a0:	2023883a 	mov	r17,r4
   497a4:	380d883a 	mov	r6,r7
   497a8:	1009883a 	mov	r4,r2
   497ac:	dfc00215 	stw	ra,8(sp)
   497b0:	80000015 	stw	zero,0(r16)
   497b4:	004fa500 	call	4fa50 <read>
   497b8:	00ffffc4 	movi	r3,-1
   497bc:	10c00526 	beq	r2,r3,497d4 <_read_r+0x50>
   497c0:	dfc00217 	ldw	ra,8(sp)
   497c4:	dc400117 	ldw	r17,4(sp)
   497c8:	dc000017 	ldw	r16,0(sp)
   497cc:	dec00304 	addi	sp,sp,12
   497d0:	f800283a 	ret
   497d4:	80c00017 	ldw	r3,0(r16)
   497d8:	183ff926 	beq	r3,zero,497c0 <__alt_data_end+0xfffd77c0>
   497dc:	88c00015 	stw	r3,0(r17)
   497e0:	003ff706 	br	497c0 <__alt_data_end+0xfffd77c0>

000497e4 <_realloc_r>:
   497e4:	defff604 	addi	sp,sp,-40
   497e8:	dc800215 	stw	r18,8(sp)
   497ec:	dfc00915 	stw	ra,36(sp)
   497f0:	df000815 	stw	fp,32(sp)
   497f4:	ddc00715 	stw	r23,28(sp)
   497f8:	dd800615 	stw	r22,24(sp)
   497fc:	dd400515 	stw	r21,20(sp)
   49800:	dd000415 	stw	r20,16(sp)
   49804:	dcc00315 	stw	r19,12(sp)
   49808:	dc400115 	stw	r17,4(sp)
   4980c:	dc000015 	stw	r16,0(sp)
   49810:	3025883a 	mov	r18,r6
   49814:	2800b726 	beq	r5,zero,49af4 <_realloc_r+0x310>
   49818:	282b883a 	mov	r21,r5
   4981c:	2029883a 	mov	r20,r4
   49820:	004f7780 	call	4f778 <__malloc_lock>
   49824:	a8bfff17 	ldw	r2,-4(r21)
   49828:	043fff04 	movi	r16,-4
   4982c:	90c002c4 	addi	r3,r18,11
   49830:	01000584 	movi	r4,22
   49834:	acfffe04 	addi	r19,r21,-8
   49838:	1420703a 	and	r16,r2,r16
   4983c:	20c0332e 	bgeu	r4,r3,4990c <_realloc_r+0x128>
   49840:	047ffe04 	movi	r17,-8
   49844:	1c62703a 	and	r17,r3,r17
   49848:	8807883a 	mov	r3,r17
   4984c:	88005816 	blt	r17,zero,499b0 <_realloc_r+0x1cc>
   49850:	8c805736 	bltu	r17,r18,499b0 <_realloc_r+0x1cc>
   49854:	80c0300e 	bge	r16,r3,49918 <_realloc_r+0x134>
   49858:	07000174 	movhi	fp,5
   4985c:	e70d2704 	addi	fp,fp,13468
   49860:	e1c00217 	ldw	r7,8(fp)
   49864:	9c09883a 	add	r4,r19,r16
   49868:	22000117 	ldw	r8,4(r4)
   4986c:	21c06326 	beq	r4,r7,499fc <_realloc_r+0x218>
   49870:	017fff84 	movi	r5,-2
   49874:	414a703a 	and	r5,r8,r5
   49878:	214b883a 	add	r5,r4,r5
   4987c:	29800117 	ldw	r6,4(r5)
   49880:	3180004c 	andi	r6,r6,1
   49884:	30003f26 	beq	r6,zero,49984 <_realloc_r+0x1a0>
   49888:	1080004c 	andi	r2,r2,1
   4988c:	10008326 	beq	r2,zero,49a9c <_realloc_r+0x2b8>
   49890:	900b883a 	mov	r5,r18
   49894:	a009883a 	mov	r4,r20
   49898:	004227c0 	call	4227c <_malloc_r>
   4989c:	1025883a 	mov	r18,r2
   498a0:	10011e26 	beq	r2,zero,49d1c <_realloc_r+0x538>
   498a4:	a93fff17 	ldw	r4,-4(r21)
   498a8:	10fffe04 	addi	r3,r2,-8
   498ac:	00bfff84 	movi	r2,-2
   498b0:	2084703a 	and	r2,r4,r2
   498b4:	9885883a 	add	r2,r19,r2
   498b8:	1880ee26 	beq	r3,r2,49c74 <_realloc_r+0x490>
   498bc:	81bfff04 	addi	r6,r16,-4
   498c0:	00800904 	movi	r2,36
   498c4:	1180b836 	bltu	r2,r6,49ba8 <_realloc_r+0x3c4>
   498c8:	00c004c4 	movi	r3,19
   498cc:	19809636 	bltu	r3,r6,49b28 <_realloc_r+0x344>
   498d0:	9005883a 	mov	r2,r18
   498d4:	a807883a 	mov	r3,r21
   498d8:	19000017 	ldw	r4,0(r3)
   498dc:	11000015 	stw	r4,0(r2)
   498e0:	19000117 	ldw	r4,4(r3)
   498e4:	11000115 	stw	r4,4(r2)
   498e8:	18c00217 	ldw	r3,8(r3)
   498ec:	10c00215 	stw	r3,8(r2)
   498f0:	a80b883a 	mov	r5,r21
   498f4:	a009883a 	mov	r4,r20
   498f8:	00478c00 	call	478c0 <_free_r>
   498fc:	a009883a 	mov	r4,r20
   49900:	004f79c0 	call	4f79c <__malloc_unlock>
   49904:	9005883a 	mov	r2,r18
   49908:	00001206 	br	49954 <_realloc_r+0x170>
   4990c:	00c00404 	movi	r3,16
   49910:	1823883a 	mov	r17,r3
   49914:	003fce06 	br	49850 <__alt_data_end+0xfffd7850>
   49918:	a825883a 	mov	r18,r21
   4991c:	8445c83a 	sub	r2,r16,r17
   49920:	00c003c4 	movi	r3,15
   49924:	18802636 	bltu	r3,r2,499c0 <_realloc_r+0x1dc>
   49928:	99800117 	ldw	r6,4(r19)
   4992c:	9c07883a 	add	r3,r19,r16
   49930:	3180004c 	andi	r6,r6,1
   49934:	3420b03a 	or	r16,r6,r16
   49938:	9c000115 	stw	r16,4(r19)
   4993c:	18800117 	ldw	r2,4(r3)
   49940:	10800054 	ori	r2,r2,1
   49944:	18800115 	stw	r2,4(r3)
   49948:	a009883a 	mov	r4,r20
   4994c:	004f79c0 	call	4f79c <__malloc_unlock>
   49950:	9005883a 	mov	r2,r18
   49954:	dfc00917 	ldw	ra,36(sp)
   49958:	df000817 	ldw	fp,32(sp)
   4995c:	ddc00717 	ldw	r23,28(sp)
   49960:	dd800617 	ldw	r22,24(sp)
   49964:	dd400517 	ldw	r21,20(sp)
   49968:	dd000417 	ldw	r20,16(sp)
   4996c:	dcc00317 	ldw	r19,12(sp)
   49970:	dc800217 	ldw	r18,8(sp)
   49974:	dc400117 	ldw	r17,4(sp)
   49978:	dc000017 	ldw	r16,0(sp)
   4997c:	dec00a04 	addi	sp,sp,40
   49980:	f800283a 	ret
   49984:	017fff04 	movi	r5,-4
   49988:	414a703a 	and	r5,r8,r5
   4998c:	814d883a 	add	r6,r16,r5
   49990:	30c01f16 	blt	r6,r3,49a10 <_realloc_r+0x22c>
   49994:	20800317 	ldw	r2,12(r4)
   49998:	20c00217 	ldw	r3,8(r4)
   4999c:	a825883a 	mov	r18,r21
   499a0:	3021883a 	mov	r16,r6
   499a4:	18800315 	stw	r2,12(r3)
   499a8:	10c00215 	stw	r3,8(r2)
   499ac:	003fdb06 	br	4991c <__alt_data_end+0xfffd791c>
   499b0:	00800304 	movi	r2,12
   499b4:	a0800015 	stw	r2,0(r20)
   499b8:	0005883a 	mov	r2,zero
   499bc:	003fe506 	br	49954 <__alt_data_end+0xfffd7954>
   499c0:	98c00117 	ldw	r3,4(r19)
   499c4:	9c4b883a 	add	r5,r19,r17
   499c8:	11000054 	ori	r4,r2,1
   499cc:	18c0004c 	andi	r3,r3,1
   499d0:	1c62b03a 	or	r17,r3,r17
   499d4:	9c400115 	stw	r17,4(r19)
   499d8:	29000115 	stw	r4,4(r5)
   499dc:	2885883a 	add	r2,r5,r2
   499e0:	10c00117 	ldw	r3,4(r2)
   499e4:	29400204 	addi	r5,r5,8
   499e8:	a009883a 	mov	r4,r20
   499ec:	18c00054 	ori	r3,r3,1
   499f0:	10c00115 	stw	r3,4(r2)
   499f4:	00478c00 	call	478c0 <_free_r>
   499f8:	003fd306 	br	49948 <__alt_data_end+0xfffd7948>
   499fc:	017fff04 	movi	r5,-4
   49a00:	414a703a 	and	r5,r8,r5
   49a04:	89800404 	addi	r6,r17,16
   49a08:	8151883a 	add	r8,r16,r5
   49a0c:	4180590e 	bge	r8,r6,49b74 <_realloc_r+0x390>
   49a10:	1080004c 	andi	r2,r2,1
   49a14:	103f9e1e 	bne	r2,zero,49890 <__alt_data_end+0xfffd7890>
   49a18:	adbffe17 	ldw	r22,-8(r21)
   49a1c:	00bfff04 	movi	r2,-4
   49a20:	9dadc83a 	sub	r22,r19,r22
   49a24:	b1800117 	ldw	r6,4(r22)
   49a28:	3084703a 	and	r2,r6,r2
   49a2c:	20002026 	beq	r4,zero,49ab0 <_realloc_r+0x2cc>
   49a30:	80af883a 	add	r23,r16,r2
   49a34:	b96f883a 	add	r23,r23,r5
   49a38:	21c05f26 	beq	r4,r7,49bb8 <_realloc_r+0x3d4>
   49a3c:	b8c01c16 	blt	r23,r3,49ab0 <_realloc_r+0x2cc>
   49a40:	20800317 	ldw	r2,12(r4)
   49a44:	20c00217 	ldw	r3,8(r4)
   49a48:	81bfff04 	addi	r6,r16,-4
   49a4c:	01000904 	movi	r4,36
   49a50:	18800315 	stw	r2,12(r3)
   49a54:	10c00215 	stw	r3,8(r2)
   49a58:	b0c00217 	ldw	r3,8(r22)
   49a5c:	b0800317 	ldw	r2,12(r22)
   49a60:	b4800204 	addi	r18,r22,8
   49a64:	18800315 	stw	r2,12(r3)
   49a68:	10c00215 	stw	r3,8(r2)
   49a6c:	21801b36 	bltu	r4,r6,49adc <_realloc_r+0x2f8>
   49a70:	008004c4 	movi	r2,19
   49a74:	1180352e 	bgeu	r2,r6,49b4c <_realloc_r+0x368>
   49a78:	a8800017 	ldw	r2,0(r21)
   49a7c:	b0800215 	stw	r2,8(r22)
   49a80:	a8800117 	ldw	r2,4(r21)
   49a84:	b0800315 	stw	r2,12(r22)
   49a88:	008006c4 	movi	r2,27
   49a8c:	11807f36 	bltu	r2,r6,49c8c <_realloc_r+0x4a8>
   49a90:	b0800404 	addi	r2,r22,16
   49a94:	ad400204 	addi	r21,r21,8
   49a98:	00002d06 	br	49b50 <_realloc_r+0x36c>
   49a9c:	adbffe17 	ldw	r22,-8(r21)
   49aa0:	00bfff04 	movi	r2,-4
   49aa4:	9dadc83a 	sub	r22,r19,r22
   49aa8:	b1000117 	ldw	r4,4(r22)
   49aac:	2084703a 	and	r2,r4,r2
   49ab0:	b03f7726 	beq	r22,zero,49890 <__alt_data_end+0xfffd7890>
   49ab4:	80af883a 	add	r23,r16,r2
   49ab8:	b8ff7516 	blt	r23,r3,49890 <__alt_data_end+0xfffd7890>
   49abc:	b0800317 	ldw	r2,12(r22)
   49ac0:	b0c00217 	ldw	r3,8(r22)
   49ac4:	81bfff04 	addi	r6,r16,-4
   49ac8:	01000904 	movi	r4,36
   49acc:	18800315 	stw	r2,12(r3)
   49ad0:	10c00215 	stw	r3,8(r2)
   49ad4:	b4800204 	addi	r18,r22,8
   49ad8:	21bfe52e 	bgeu	r4,r6,49a70 <__alt_data_end+0xfffd7a70>
   49adc:	a80b883a 	mov	r5,r21
   49ae0:	9009883a 	mov	r4,r18
   49ae4:	004862c0 	call	4862c <memmove>
   49ae8:	b821883a 	mov	r16,r23
   49aec:	b027883a 	mov	r19,r22
   49af0:	003f8a06 	br	4991c <__alt_data_end+0xfffd791c>
   49af4:	300b883a 	mov	r5,r6
   49af8:	dfc00917 	ldw	ra,36(sp)
   49afc:	df000817 	ldw	fp,32(sp)
   49b00:	ddc00717 	ldw	r23,28(sp)
   49b04:	dd800617 	ldw	r22,24(sp)
   49b08:	dd400517 	ldw	r21,20(sp)
   49b0c:	dd000417 	ldw	r20,16(sp)
   49b10:	dcc00317 	ldw	r19,12(sp)
   49b14:	dc800217 	ldw	r18,8(sp)
   49b18:	dc400117 	ldw	r17,4(sp)
   49b1c:	dc000017 	ldw	r16,0(sp)
   49b20:	dec00a04 	addi	sp,sp,40
   49b24:	004227c1 	jmpi	4227c <_malloc_r>
   49b28:	a8c00017 	ldw	r3,0(r21)
   49b2c:	90c00015 	stw	r3,0(r18)
   49b30:	a8c00117 	ldw	r3,4(r21)
   49b34:	90c00115 	stw	r3,4(r18)
   49b38:	00c006c4 	movi	r3,27
   49b3c:	19804536 	bltu	r3,r6,49c54 <_realloc_r+0x470>
   49b40:	90800204 	addi	r2,r18,8
   49b44:	a8c00204 	addi	r3,r21,8
   49b48:	003f6306 	br	498d8 <__alt_data_end+0xfffd78d8>
   49b4c:	9005883a 	mov	r2,r18
   49b50:	a8c00017 	ldw	r3,0(r21)
   49b54:	b821883a 	mov	r16,r23
   49b58:	b027883a 	mov	r19,r22
   49b5c:	10c00015 	stw	r3,0(r2)
   49b60:	a8c00117 	ldw	r3,4(r21)
   49b64:	10c00115 	stw	r3,4(r2)
   49b68:	a8c00217 	ldw	r3,8(r21)
   49b6c:	10c00215 	stw	r3,8(r2)
   49b70:	003f6a06 	br	4991c <__alt_data_end+0xfffd791c>
   49b74:	9c67883a 	add	r19,r19,r17
   49b78:	4445c83a 	sub	r2,r8,r17
   49b7c:	e4c00215 	stw	r19,8(fp)
   49b80:	10800054 	ori	r2,r2,1
   49b84:	98800115 	stw	r2,4(r19)
   49b88:	a8bfff17 	ldw	r2,-4(r21)
   49b8c:	a009883a 	mov	r4,r20
   49b90:	1080004c 	andi	r2,r2,1
   49b94:	1462b03a 	or	r17,r2,r17
   49b98:	ac7fff15 	stw	r17,-4(r21)
   49b9c:	004f79c0 	call	4f79c <__malloc_unlock>
   49ba0:	a805883a 	mov	r2,r21
   49ba4:	003f6b06 	br	49954 <__alt_data_end+0xfffd7954>
   49ba8:	a80b883a 	mov	r5,r21
   49bac:	9009883a 	mov	r4,r18
   49bb0:	004862c0 	call	4862c <memmove>
   49bb4:	003f4e06 	br	498f0 <__alt_data_end+0xfffd78f0>
   49bb8:	89000404 	addi	r4,r17,16
   49bbc:	b93fbc16 	blt	r23,r4,49ab0 <__alt_data_end+0xfffd7ab0>
   49bc0:	b0800317 	ldw	r2,12(r22)
   49bc4:	b0c00217 	ldw	r3,8(r22)
   49bc8:	81bfff04 	addi	r6,r16,-4
   49bcc:	01000904 	movi	r4,36
   49bd0:	18800315 	stw	r2,12(r3)
   49bd4:	10c00215 	stw	r3,8(r2)
   49bd8:	b4800204 	addi	r18,r22,8
   49bdc:	21804336 	bltu	r4,r6,49cec <_realloc_r+0x508>
   49be0:	008004c4 	movi	r2,19
   49be4:	11803f2e 	bgeu	r2,r6,49ce4 <_realloc_r+0x500>
   49be8:	a8800017 	ldw	r2,0(r21)
   49bec:	b0800215 	stw	r2,8(r22)
   49bf0:	a8800117 	ldw	r2,4(r21)
   49bf4:	b0800315 	stw	r2,12(r22)
   49bf8:	008006c4 	movi	r2,27
   49bfc:	11803f36 	bltu	r2,r6,49cfc <_realloc_r+0x518>
   49c00:	b0800404 	addi	r2,r22,16
   49c04:	ad400204 	addi	r21,r21,8
   49c08:	a8c00017 	ldw	r3,0(r21)
   49c0c:	10c00015 	stw	r3,0(r2)
   49c10:	a8c00117 	ldw	r3,4(r21)
   49c14:	10c00115 	stw	r3,4(r2)
   49c18:	a8c00217 	ldw	r3,8(r21)
   49c1c:	10c00215 	stw	r3,8(r2)
   49c20:	b447883a 	add	r3,r22,r17
   49c24:	bc45c83a 	sub	r2,r23,r17
   49c28:	e0c00215 	stw	r3,8(fp)
   49c2c:	10800054 	ori	r2,r2,1
   49c30:	18800115 	stw	r2,4(r3)
   49c34:	b0800117 	ldw	r2,4(r22)
   49c38:	a009883a 	mov	r4,r20
   49c3c:	1080004c 	andi	r2,r2,1
   49c40:	1462b03a 	or	r17,r2,r17
   49c44:	b4400115 	stw	r17,4(r22)
   49c48:	004f79c0 	call	4f79c <__malloc_unlock>
   49c4c:	9005883a 	mov	r2,r18
   49c50:	003f4006 	br	49954 <__alt_data_end+0xfffd7954>
   49c54:	a8c00217 	ldw	r3,8(r21)
   49c58:	90c00215 	stw	r3,8(r18)
   49c5c:	a8c00317 	ldw	r3,12(r21)
   49c60:	90c00315 	stw	r3,12(r18)
   49c64:	30801126 	beq	r6,r2,49cac <_realloc_r+0x4c8>
   49c68:	90800404 	addi	r2,r18,16
   49c6c:	a8c00404 	addi	r3,r21,16
   49c70:	003f1906 	br	498d8 <__alt_data_end+0xfffd78d8>
   49c74:	90ffff17 	ldw	r3,-4(r18)
   49c78:	00bfff04 	movi	r2,-4
   49c7c:	a825883a 	mov	r18,r21
   49c80:	1884703a 	and	r2,r3,r2
   49c84:	80a1883a 	add	r16,r16,r2
   49c88:	003f2406 	br	4991c <__alt_data_end+0xfffd791c>
   49c8c:	a8800217 	ldw	r2,8(r21)
   49c90:	b0800415 	stw	r2,16(r22)
   49c94:	a8800317 	ldw	r2,12(r21)
   49c98:	b0800515 	stw	r2,20(r22)
   49c9c:	31000a26 	beq	r6,r4,49cc8 <_realloc_r+0x4e4>
   49ca0:	b0800604 	addi	r2,r22,24
   49ca4:	ad400404 	addi	r21,r21,16
   49ca8:	003fa906 	br	49b50 <__alt_data_end+0xfffd7b50>
   49cac:	a9000417 	ldw	r4,16(r21)
   49cb0:	90800604 	addi	r2,r18,24
   49cb4:	a8c00604 	addi	r3,r21,24
   49cb8:	91000415 	stw	r4,16(r18)
   49cbc:	a9000517 	ldw	r4,20(r21)
   49cc0:	91000515 	stw	r4,20(r18)
   49cc4:	003f0406 	br	498d8 <__alt_data_end+0xfffd78d8>
   49cc8:	a8c00417 	ldw	r3,16(r21)
   49ccc:	ad400604 	addi	r21,r21,24
   49cd0:	b0800804 	addi	r2,r22,32
   49cd4:	b0c00615 	stw	r3,24(r22)
   49cd8:	a8ffff17 	ldw	r3,-4(r21)
   49cdc:	b0c00715 	stw	r3,28(r22)
   49ce0:	003f9b06 	br	49b50 <__alt_data_end+0xfffd7b50>
   49ce4:	9005883a 	mov	r2,r18
   49ce8:	003fc706 	br	49c08 <__alt_data_end+0xfffd7c08>
   49cec:	a80b883a 	mov	r5,r21
   49cf0:	9009883a 	mov	r4,r18
   49cf4:	004862c0 	call	4862c <memmove>
   49cf8:	003fc906 	br	49c20 <__alt_data_end+0xfffd7c20>
   49cfc:	a8800217 	ldw	r2,8(r21)
   49d00:	b0800415 	stw	r2,16(r22)
   49d04:	a8800317 	ldw	r2,12(r21)
   49d08:	b0800515 	stw	r2,20(r22)
   49d0c:	31000726 	beq	r6,r4,49d2c <_realloc_r+0x548>
   49d10:	b0800604 	addi	r2,r22,24
   49d14:	ad400404 	addi	r21,r21,16
   49d18:	003fbb06 	br	49c08 <__alt_data_end+0xfffd7c08>
   49d1c:	a009883a 	mov	r4,r20
   49d20:	004f79c0 	call	4f79c <__malloc_unlock>
   49d24:	0005883a 	mov	r2,zero
   49d28:	003f0a06 	br	49954 <__alt_data_end+0xfffd7954>
   49d2c:	a8c00417 	ldw	r3,16(r21)
   49d30:	ad400604 	addi	r21,r21,24
   49d34:	b0800804 	addi	r2,r22,32
   49d38:	b0c00615 	stw	r3,24(r22)
   49d3c:	a8ffff17 	ldw	r3,-4(r21)
   49d40:	b0c00715 	stw	r3,28(r22)
   49d44:	003fb006 	br	49c08 <__alt_data_end+0xfffd7c08>

00049d48 <__fpclassifyd>:
   49d48:	00a00034 	movhi	r2,32768
   49d4c:	10bfffc4 	addi	r2,r2,-1
   49d50:	2884703a 	and	r2,r5,r2
   49d54:	10000726 	beq	r2,zero,49d74 <__fpclassifyd+0x2c>
   49d58:	00fffc34 	movhi	r3,65520
   49d5c:	019ff834 	movhi	r6,32736
   49d60:	28c7883a 	add	r3,r5,r3
   49d64:	31bfffc4 	addi	r6,r6,-1
   49d68:	30c00536 	bltu	r6,r3,49d80 <__fpclassifyd+0x38>
   49d6c:	00800104 	movi	r2,4
   49d70:	f800283a 	ret
   49d74:	2000021e 	bne	r4,zero,49d80 <__fpclassifyd+0x38>
   49d78:	00800084 	movi	r2,2
   49d7c:	f800283a 	ret
   49d80:	00dffc34 	movhi	r3,32752
   49d84:	019ff834 	movhi	r6,32736
   49d88:	28cb883a 	add	r5,r5,r3
   49d8c:	31bfffc4 	addi	r6,r6,-1
   49d90:	317ff62e 	bgeu	r6,r5,49d6c <__alt_data_end+0xfffd7d6c>
   49d94:	01400434 	movhi	r5,16
   49d98:	297fffc4 	addi	r5,r5,-1
   49d9c:	28800236 	bltu	r5,r2,49da8 <__fpclassifyd+0x60>
   49da0:	008000c4 	movi	r2,3
   49da4:	f800283a 	ret
   49da8:	10c00226 	beq	r2,r3,49db4 <__fpclassifyd+0x6c>
   49dac:	0005883a 	mov	r2,zero
   49db0:	f800283a 	ret
   49db4:	2005003a 	cmpeq	r2,r4,zero
   49db8:	f800283a 	ret

00049dbc <strcmp>:
   49dbc:	2144b03a 	or	r2,r4,r5
   49dc0:	108000cc 	andi	r2,r2,3
   49dc4:	1000171e 	bne	r2,zero,49e24 <strcmp+0x68>
   49dc8:	20800017 	ldw	r2,0(r4)
   49dcc:	28c00017 	ldw	r3,0(r5)
   49dd0:	10c0141e 	bne	r2,r3,49e24 <strcmp+0x68>
   49dd4:	027fbff4 	movhi	r9,65279
   49dd8:	4a7fbfc4 	addi	r9,r9,-257
   49ddc:	0086303a 	nor	r3,zero,r2
   49de0:	02202074 	movhi	r8,32897
   49de4:	1245883a 	add	r2,r2,r9
   49de8:	42202004 	addi	r8,r8,-32640
   49dec:	10c4703a 	and	r2,r2,r3
   49df0:	1204703a 	and	r2,r2,r8
   49df4:	10000226 	beq	r2,zero,49e00 <strcmp+0x44>
   49df8:	00002306 	br	49e88 <strcmp+0xcc>
   49dfc:	1000221e 	bne	r2,zero,49e88 <strcmp+0xcc>
   49e00:	21000104 	addi	r4,r4,4
   49e04:	20c00017 	ldw	r3,0(r4)
   49e08:	29400104 	addi	r5,r5,4
   49e0c:	29800017 	ldw	r6,0(r5)
   49e10:	1a4f883a 	add	r7,r3,r9
   49e14:	00c4303a 	nor	r2,zero,r3
   49e18:	3884703a 	and	r2,r7,r2
   49e1c:	1204703a 	and	r2,r2,r8
   49e20:	19bff626 	beq	r3,r6,49dfc <__alt_data_end+0xfffd7dfc>
   49e24:	20800003 	ldbu	r2,0(r4)
   49e28:	10c03fcc 	andi	r3,r2,255
   49e2c:	18c0201c 	xori	r3,r3,128
   49e30:	18ffe004 	addi	r3,r3,-128
   49e34:	18000c26 	beq	r3,zero,49e68 <strcmp+0xac>
   49e38:	29800007 	ldb	r6,0(r5)
   49e3c:	19800326 	beq	r3,r6,49e4c <strcmp+0x90>
   49e40:	00001306 	br	49e90 <strcmp+0xd4>
   49e44:	29800007 	ldb	r6,0(r5)
   49e48:	11800b1e 	bne	r2,r6,49e78 <strcmp+0xbc>
   49e4c:	21000044 	addi	r4,r4,1
   49e50:	20c00003 	ldbu	r3,0(r4)
   49e54:	29400044 	addi	r5,r5,1
   49e58:	18803fcc 	andi	r2,r3,255
   49e5c:	1080201c 	xori	r2,r2,128
   49e60:	10bfe004 	addi	r2,r2,-128
   49e64:	103ff71e 	bne	r2,zero,49e44 <__alt_data_end+0xfffd7e44>
   49e68:	0007883a 	mov	r3,zero
   49e6c:	28800003 	ldbu	r2,0(r5)
   49e70:	1885c83a 	sub	r2,r3,r2
   49e74:	f800283a 	ret
   49e78:	28800003 	ldbu	r2,0(r5)
   49e7c:	18c03fcc 	andi	r3,r3,255
   49e80:	1885c83a 	sub	r2,r3,r2
   49e84:	f800283a 	ret
   49e88:	0005883a 	mov	r2,zero
   49e8c:	f800283a 	ret
   49e90:	10c03fcc 	andi	r3,r2,255
   49e94:	003ff506 	br	49e6c <__alt_data_end+0xfffd7e6c>

00049e98 <__sprint_r.part.0>:
   49e98:	28801917 	ldw	r2,100(r5)
   49e9c:	defff604 	addi	sp,sp,-40
   49ea0:	dd400515 	stw	r21,20(sp)
   49ea4:	dfc00915 	stw	ra,36(sp)
   49ea8:	df000815 	stw	fp,32(sp)
   49eac:	ddc00715 	stw	r23,28(sp)
   49eb0:	dd800615 	stw	r22,24(sp)
   49eb4:	dd000415 	stw	r20,16(sp)
   49eb8:	dcc00315 	stw	r19,12(sp)
   49ebc:	dc800215 	stw	r18,8(sp)
   49ec0:	dc400115 	stw	r17,4(sp)
   49ec4:	dc000015 	stw	r16,0(sp)
   49ec8:	1088000c 	andi	r2,r2,8192
   49ecc:	302b883a 	mov	r21,r6
   49ed0:	10002e26 	beq	r2,zero,49f8c <__sprint_r.part.0+0xf4>
   49ed4:	30800217 	ldw	r2,8(r6)
   49ed8:	35800017 	ldw	r22,0(r6)
   49edc:	10002926 	beq	r2,zero,49f84 <__sprint_r.part.0+0xec>
   49ee0:	2827883a 	mov	r19,r5
   49ee4:	2029883a 	mov	r20,r4
   49ee8:	b5c00104 	addi	r23,r22,4
   49eec:	04bfffc4 	movi	r18,-1
   49ef0:	bc400017 	ldw	r17,0(r23)
   49ef4:	b4000017 	ldw	r16,0(r22)
   49ef8:	0039883a 	mov	fp,zero
   49efc:	8822d0ba 	srli	r17,r17,2
   49f00:	8800031e 	bne	r17,zero,49f10 <__sprint_r.part.0+0x78>
   49f04:	00001806 	br	49f68 <__sprint_r.part.0+0xd0>
   49f08:	84000104 	addi	r16,r16,4
   49f0c:	8f001526 	beq	r17,fp,49f64 <__sprint_r.part.0+0xcc>
   49f10:	81400017 	ldw	r5,0(r16)
   49f14:	980d883a 	mov	r6,r19
   49f18:	a009883a 	mov	r4,r20
   49f1c:	004b80c0 	call	4b80c <_fputwc_r>
   49f20:	e7000044 	addi	fp,fp,1
   49f24:	14bff81e 	bne	r2,r18,49f08 <__alt_data_end+0xfffd7f08>
   49f28:	9005883a 	mov	r2,r18
   49f2c:	a8000215 	stw	zero,8(r21)
   49f30:	a8000115 	stw	zero,4(r21)
   49f34:	dfc00917 	ldw	ra,36(sp)
   49f38:	df000817 	ldw	fp,32(sp)
   49f3c:	ddc00717 	ldw	r23,28(sp)
   49f40:	dd800617 	ldw	r22,24(sp)
   49f44:	dd400517 	ldw	r21,20(sp)
   49f48:	dd000417 	ldw	r20,16(sp)
   49f4c:	dcc00317 	ldw	r19,12(sp)
   49f50:	dc800217 	ldw	r18,8(sp)
   49f54:	dc400117 	ldw	r17,4(sp)
   49f58:	dc000017 	ldw	r16,0(sp)
   49f5c:	dec00a04 	addi	sp,sp,40
   49f60:	f800283a 	ret
   49f64:	a8800217 	ldw	r2,8(r21)
   49f68:	8c63883a 	add	r17,r17,r17
   49f6c:	8c63883a 	add	r17,r17,r17
   49f70:	1445c83a 	sub	r2,r2,r17
   49f74:	a8800215 	stw	r2,8(r21)
   49f78:	b5800204 	addi	r22,r22,8
   49f7c:	bdc00204 	addi	r23,r23,8
   49f80:	103fdb1e 	bne	r2,zero,49ef0 <__alt_data_end+0xfffd7ef0>
   49f84:	0005883a 	mov	r2,zero
   49f88:	003fe806 	br	49f2c <__alt_data_end+0xfffd7f2c>
   49f8c:	0047bd00 	call	47bd0 <__sfvwrite_r>
   49f90:	003fe606 	br	49f2c <__alt_data_end+0xfffd7f2c>

00049f94 <__sprint_r>:
   49f94:	30c00217 	ldw	r3,8(r6)
   49f98:	18000126 	beq	r3,zero,49fa0 <__sprint_r+0xc>
   49f9c:	0049e981 	jmpi	49e98 <__sprint_r.part.0>
   49fa0:	30000115 	stw	zero,4(r6)
   49fa4:	0005883a 	mov	r2,zero
   49fa8:	f800283a 	ret

00049fac <___vfiprintf_internal_r>:
   49fac:	deffc904 	addi	sp,sp,-220
   49fb0:	df003515 	stw	fp,212(sp)
   49fb4:	dd003115 	stw	r20,196(sp)
   49fb8:	dfc03615 	stw	ra,216(sp)
   49fbc:	ddc03415 	stw	r23,208(sp)
   49fc0:	dd803315 	stw	r22,204(sp)
   49fc4:	dd403215 	stw	r21,200(sp)
   49fc8:	dcc03015 	stw	r19,192(sp)
   49fcc:	dc802f15 	stw	r18,188(sp)
   49fd0:	dc402e15 	stw	r17,184(sp)
   49fd4:	dc002d15 	stw	r16,180(sp)
   49fd8:	d9002015 	stw	r4,128(sp)
   49fdc:	d9c02215 	stw	r7,136(sp)
   49fe0:	2829883a 	mov	r20,r5
   49fe4:	3039883a 	mov	fp,r6
   49fe8:	20000226 	beq	r4,zero,49ff4 <___vfiprintf_internal_r+0x48>
   49fec:	20800e17 	ldw	r2,56(r4)
   49ff0:	1000cf26 	beq	r2,zero,4a330 <___vfiprintf_internal_r+0x384>
   49ff4:	a080030b 	ldhu	r2,12(r20)
   49ff8:	10c8000c 	andi	r3,r2,8192
   49ffc:	1800061e 	bne	r3,zero,4a018 <___vfiprintf_internal_r+0x6c>
   4a000:	a1001917 	ldw	r4,100(r20)
   4a004:	00f7ffc4 	movi	r3,-8193
   4a008:	10880014 	ori	r2,r2,8192
   4a00c:	20c6703a 	and	r3,r4,r3
   4a010:	a080030d 	sth	r2,12(r20)
   4a014:	a0c01915 	stw	r3,100(r20)
   4a018:	10c0020c 	andi	r3,r2,8
   4a01c:	1800a926 	beq	r3,zero,4a2c4 <___vfiprintf_internal_r+0x318>
   4a020:	a0c00417 	ldw	r3,16(r20)
   4a024:	1800a726 	beq	r3,zero,4a2c4 <___vfiprintf_internal_r+0x318>
   4a028:	1080068c 	andi	r2,r2,26
   4a02c:	00c00284 	movi	r3,10
   4a030:	10c0ac26 	beq	r2,r3,4a2e4 <___vfiprintf_internal_r+0x338>
   4a034:	da801a04 	addi	r10,sp,104
   4a038:	da801e15 	stw	r10,120(sp)
   4a03c:	d8801e17 	ldw	r2,120(sp)
   4a040:	da8019c4 	addi	r10,sp,103
   4a044:	05800174 	movhi	r22,5
   4a048:	05c00174 	movhi	r23,5
   4a04c:	da801f15 	stw	r10,124(sp)
   4a050:	1295c83a 	sub	r10,r2,r10
   4a054:	b58a8a04 	addi	r22,r22,10792
   4a058:	bdca8604 	addi	r23,r23,10776
   4a05c:	dec01a15 	stw	sp,104(sp)
   4a060:	d8001c15 	stw	zero,112(sp)
   4a064:	d8001b15 	stw	zero,108(sp)
   4a068:	d8002615 	stw	zero,152(sp)
   4a06c:	d8002315 	stw	zero,140(sp)
   4a070:	da802715 	stw	r10,156(sp)
   4a074:	d811883a 	mov	r8,sp
   4a078:	dd002115 	stw	r20,132(sp)
   4a07c:	e021883a 	mov	r16,fp
   4a080:	80800007 	ldb	r2,0(r16)
   4a084:	1003ea26 	beq	r2,zero,4b030 <___vfiprintf_internal_r+0x1084>
   4a088:	00c00944 	movi	r3,37
   4a08c:	8025883a 	mov	r18,r16
   4a090:	10c0021e 	bne	r2,r3,4a09c <___vfiprintf_internal_r+0xf0>
   4a094:	00001606 	br	4a0f0 <___vfiprintf_internal_r+0x144>
   4a098:	10c00326 	beq	r2,r3,4a0a8 <___vfiprintf_internal_r+0xfc>
   4a09c:	94800044 	addi	r18,r18,1
   4a0a0:	90800007 	ldb	r2,0(r18)
   4a0a4:	103ffc1e 	bne	r2,zero,4a098 <__alt_data_end+0xfffd8098>
   4a0a8:	9423c83a 	sub	r17,r18,r16
   4a0ac:	88001026 	beq	r17,zero,4a0f0 <___vfiprintf_internal_r+0x144>
   4a0b0:	d8c01c17 	ldw	r3,112(sp)
   4a0b4:	d8801b17 	ldw	r2,108(sp)
   4a0b8:	44000015 	stw	r16,0(r8)
   4a0bc:	88c7883a 	add	r3,r17,r3
   4a0c0:	10800044 	addi	r2,r2,1
   4a0c4:	44400115 	stw	r17,4(r8)
   4a0c8:	d8c01c15 	stw	r3,112(sp)
   4a0cc:	d8801b15 	stw	r2,108(sp)
   4a0d0:	010001c4 	movi	r4,7
   4a0d4:	2080760e 	bge	r4,r2,4a2b0 <___vfiprintf_internal_r+0x304>
   4a0d8:	1803821e 	bne	r3,zero,4aee4 <___vfiprintf_internal_r+0xf38>
   4a0dc:	da802317 	ldw	r10,140(sp)
   4a0e0:	d8001b15 	stw	zero,108(sp)
   4a0e4:	d811883a 	mov	r8,sp
   4a0e8:	5455883a 	add	r10,r10,r17
   4a0ec:	da802315 	stw	r10,140(sp)
   4a0f0:	90800007 	ldb	r2,0(r18)
   4a0f4:	10044626 	beq	r2,zero,4b210 <___vfiprintf_internal_r+0x1264>
   4a0f8:	90c00047 	ldb	r3,1(r18)
   4a0fc:	94000044 	addi	r16,r18,1
   4a100:	d8001d85 	stb	zero,118(sp)
   4a104:	0009883a 	mov	r4,zero
   4a108:	000f883a 	mov	r7,zero
   4a10c:	027fffc4 	movi	r9,-1
   4a110:	0023883a 	mov	r17,zero
   4a114:	0029883a 	mov	r20,zero
   4a118:	01401604 	movi	r5,88
   4a11c:	01800244 	movi	r6,9
   4a120:	03400a84 	movi	r13,42
   4a124:	03001b04 	movi	r12,108
   4a128:	84000044 	addi	r16,r16,1
   4a12c:	18bff804 	addi	r2,r3,-32
   4a130:	28827336 	bltu	r5,r2,4ab00 <___vfiprintf_internal_r+0xb54>
   4a134:	100490ba 	slli	r2,r2,2
   4a138:	02800174 	movhi	r10,5
   4a13c:	52a85304 	addi	r10,r10,-24244
   4a140:	1285883a 	add	r2,r2,r10
   4a144:	10800017 	ldw	r2,0(r2)
   4a148:	1000683a 	jmp	r2
   4a14c:	0004a834 	movhi	zero,4768
   4a150:	0004ab00 	call	4ab0 <__alt_mem_onchip_memory2-0x3b550>
   4a154:	0004ab00 	call	4ab0 <__alt_mem_onchip_memory2-0x3b550>
   4a158:	0004a854 	movui	zero,4769
   4a15c:	0004ab00 	call	4ab0 <__alt_mem_onchip_memory2-0x3b550>
   4a160:	0004ab00 	call	4ab0 <__alt_mem_onchip_memory2-0x3b550>
   4a164:	0004ab00 	call	4ab0 <__alt_mem_onchip_memory2-0x3b550>
   4a168:	0004ab00 	call	4ab0 <__alt_mem_onchip_memory2-0x3b550>
   4a16c:	0004ab00 	call	4ab0 <__alt_mem_onchip_memory2-0x3b550>
   4a170:	0004ab00 	call	4ab0 <__alt_mem_onchip_memory2-0x3b550>
   4a174:	0004aa3c 	xorhi	zero,zero,4776
   4a178:	0004aa58 	cmpnei	zero,zero,4777
   4a17c:	0004ab00 	call	4ab0 <__alt_mem_onchip_memory2-0x3b550>
   4a180:	0004a340 	call	4a34 <__alt_mem_onchip_memory2-0x3b5cc>
   4a184:	0004aa68 	cmpgeui	zero,zero,4777
   4a188:	0004ab00 	call	4ab0 <__alt_mem_onchip_memory2-0x3b550>
   4a18c:	0004a860 	cmpeqi	zero,zero,4769
   4a190:	0004a86c 	andhi	zero,zero,4769
   4a194:	0004a86c 	andhi	zero,zero,4769
   4a198:	0004a86c 	andhi	zero,zero,4769
   4a19c:	0004a86c 	andhi	zero,zero,4769
   4a1a0:	0004a86c 	andhi	zero,zero,4769
   4a1a4:	0004a86c 	andhi	zero,zero,4769
   4a1a8:	0004a86c 	andhi	zero,zero,4769
   4a1ac:	0004a86c 	andhi	zero,zero,4769
   4a1b0:	0004a86c 	andhi	zero,zero,4769
   4a1b4:	0004ab00 	call	4ab0 <__alt_mem_onchip_memory2-0x3b550>
   4a1b8:	0004ab00 	call	4ab0 <__alt_mem_onchip_memory2-0x3b550>
   4a1bc:	0004ab00 	call	4ab0 <__alt_mem_onchip_memory2-0x3b550>
   4a1c0:	0004ab00 	call	4ab0 <__alt_mem_onchip_memory2-0x3b550>
   4a1c4:	0004ab00 	call	4ab0 <__alt_mem_onchip_memory2-0x3b550>
   4a1c8:	0004ab00 	call	4ab0 <__alt_mem_onchip_memory2-0x3b550>
   4a1cc:	0004ab00 	call	4ab0 <__alt_mem_onchip_memory2-0x3b550>
   4a1d0:	0004ab00 	call	4ab0 <__alt_mem_onchip_memory2-0x3b550>
   4a1d4:	0004ab00 	call	4ab0 <__alt_mem_onchip_memory2-0x3b550>
   4a1d8:	0004ab00 	call	4ab0 <__alt_mem_onchip_memory2-0x3b550>
   4a1dc:	0004a898 	cmpnei	zero,zero,4770
   4a1e0:	0004ab00 	call	4ab0 <__alt_mem_onchip_memory2-0x3b550>
   4a1e4:	0004ab00 	call	4ab0 <__alt_mem_onchip_memory2-0x3b550>
   4a1e8:	0004ab00 	call	4ab0 <__alt_mem_onchip_memory2-0x3b550>
   4a1ec:	0004ab00 	call	4ab0 <__alt_mem_onchip_memory2-0x3b550>
   4a1f0:	0004ab00 	call	4ab0 <__alt_mem_onchip_memory2-0x3b550>
   4a1f4:	0004ab00 	call	4ab0 <__alt_mem_onchip_memory2-0x3b550>
   4a1f8:	0004ab00 	call	4ab0 <__alt_mem_onchip_memory2-0x3b550>
   4a1fc:	0004ab00 	call	4ab0 <__alt_mem_onchip_memory2-0x3b550>
   4a200:	0004ab00 	call	4ab0 <__alt_mem_onchip_memory2-0x3b550>
   4a204:	0004ab00 	call	4ab0 <__alt_mem_onchip_memory2-0x3b550>
   4a208:	0004a8d0 	cmplti	zero,zero,4771
   4a20c:	0004ab00 	call	4ab0 <__alt_mem_onchip_memory2-0x3b550>
   4a210:	0004ab00 	call	4ab0 <__alt_mem_onchip_memory2-0x3b550>
   4a214:	0004ab00 	call	4ab0 <__alt_mem_onchip_memory2-0x3b550>
   4a218:	0004ab00 	call	4ab0 <__alt_mem_onchip_memory2-0x3b550>
   4a21c:	0004ab00 	call	4ab0 <__alt_mem_onchip_memory2-0x3b550>
   4a220:	0004a928 	cmpgeui	zero,zero,4772
   4a224:	0004ab00 	call	4ab0 <__alt_mem_onchip_memory2-0x3b550>
   4a228:	0004ab00 	call	4ab0 <__alt_mem_onchip_memory2-0x3b550>
   4a22c:	0004a998 	cmpnei	zero,zero,4774
   4a230:	0004ab00 	call	4ab0 <__alt_mem_onchip_memory2-0x3b550>
   4a234:	0004ab00 	call	4ab0 <__alt_mem_onchip_memory2-0x3b550>
   4a238:	0004ab00 	call	4ab0 <__alt_mem_onchip_memory2-0x3b550>
   4a23c:	0004ab00 	call	4ab0 <__alt_mem_onchip_memory2-0x3b550>
   4a240:	0004ab00 	call	4ab0 <__alt_mem_onchip_memory2-0x3b550>
   4a244:	0004ab00 	call	4ab0 <__alt_mem_onchip_memory2-0x3b550>
   4a248:	0004ab00 	call	4ab0 <__alt_mem_onchip_memory2-0x3b550>
   4a24c:	0004ab00 	call	4ab0 <__alt_mem_onchip_memory2-0x3b550>
   4a250:	0004ab00 	call	4ab0 <__alt_mem_onchip_memory2-0x3b550>
   4a254:	0004ab00 	call	4ab0 <__alt_mem_onchip_memory2-0x3b550>
   4a258:	0004a744 	movi	zero,4765
   4a25c:	0004a770 	cmpltui	zero,zero,4765
   4a260:	0004ab00 	call	4ab0 <__alt_mem_onchip_memory2-0x3b550>
   4a264:	0004ab00 	call	4ab0 <__alt_mem_onchip_memory2-0x3b550>
   4a268:	0004ab00 	call	4ab0 <__alt_mem_onchip_memory2-0x3b550>
   4a26c:	0004aaa8 	cmpgeui	zero,zero,4778
   4a270:	0004a770 	cmpltui	zero,zero,4765
   4a274:	0004ab00 	call	4ab0 <__alt_mem_onchip_memory2-0x3b550>
   4a278:	0004ab00 	call	4ab0 <__alt_mem_onchip_memory2-0x3b550>
   4a27c:	0004a604 	movi	zero,4760
   4a280:	0004ab00 	call	4ab0 <__alt_mem_onchip_memory2-0x3b550>
   4a284:	0004a614 	movui	zero,4760
   4a288:	0004a650 	cmplti	zero,zero,4761
   4a28c:	0004a34c 	andi	zero,zero,4749
   4a290:	0004a5f8 	rdprs	zero,zero,4759
   4a294:	0004ab00 	call	4ab0 <__alt_mem_onchip_memory2-0x3b550>
   4a298:	0004a9d4 	movui	zero,4775
   4a29c:	0004ab00 	call	4ab0 <__alt_mem_onchip_memory2-0x3b550>
   4a2a0:	0004aa2c 	andhi	zero,zero,4776
   4a2a4:	0004ab00 	call	4ab0 <__alt_mem_onchip_memory2-0x3b550>
   4a2a8:	0004ab00 	call	4ab0 <__alt_mem_onchip_memory2-0x3b550>
   4a2ac:	0004a6f0 	cmpltui	zero,zero,4763
   4a2b0:	42000204 	addi	r8,r8,8
   4a2b4:	da802317 	ldw	r10,140(sp)
   4a2b8:	5455883a 	add	r10,r10,r17
   4a2bc:	da802315 	stw	r10,140(sp)
   4a2c0:	003f8b06 	br	4a0f0 <__alt_data_end+0xfffd80f0>
   4a2c4:	d9002017 	ldw	r4,128(sp)
   4a2c8:	a00b883a 	mov	r5,r20
   4a2cc:	00456780 	call	45678 <__swsetup_r>
   4a2d0:	1003b11e 	bne	r2,zero,4b198 <___vfiprintf_internal_r+0x11ec>
   4a2d4:	a080030b 	ldhu	r2,12(r20)
   4a2d8:	00c00284 	movi	r3,10
   4a2dc:	1080068c 	andi	r2,r2,26
   4a2e0:	10ff541e 	bne	r2,r3,4a034 <__alt_data_end+0xfffd8034>
   4a2e4:	a080038f 	ldh	r2,14(r20)
   4a2e8:	103f5216 	blt	r2,zero,4a034 <__alt_data_end+0xfffd8034>
   4a2ec:	d9c02217 	ldw	r7,136(sp)
   4a2f0:	d9002017 	ldw	r4,128(sp)
   4a2f4:	e00d883a 	mov	r6,fp
   4a2f8:	a00b883a 	mov	r5,r20
   4a2fc:	004b4240 	call	4b424 <__sbprintf>
   4a300:	dfc03617 	ldw	ra,216(sp)
   4a304:	df003517 	ldw	fp,212(sp)
   4a308:	ddc03417 	ldw	r23,208(sp)
   4a30c:	dd803317 	ldw	r22,204(sp)
   4a310:	dd403217 	ldw	r21,200(sp)
   4a314:	dd003117 	ldw	r20,196(sp)
   4a318:	dcc03017 	ldw	r19,192(sp)
   4a31c:	dc802f17 	ldw	r18,188(sp)
   4a320:	dc402e17 	ldw	r17,184(sp)
   4a324:	dc002d17 	ldw	r16,180(sp)
   4a328:	dec03704 	addi	sp,sp,220
   4a32c:	f800283a 	ret
   4a330:	00476a00 	call	476a0 <__sinit>
   4a334:	003f2f06 	br	49ff4 <__alt_data_end+0xfffd7ff4>
   4a338:	0463c83a 	sub	r17,zero,r17
   4a33c:	d8802215 	stw	r2,136(sp)
   4a340:	a5000114 	ori	r20,r20,4
   4a344:	80c00007 	ldb	r3,0(r16)
   4a348:	003f7706 	br	4a128 <__alt_data_end+0xfffd8128>
   4a34c:	00800c04 	movi	r2,48
   4a350:	da802217 	ldw	r10,136(sp)
   4a354:	d8801d05 	stb	r2,116(sp)
   4a358:	00801e04 	movi	r2,120
   4a35c:	d8801d45 	stb	r2,117(sp)
   4a360:	d8001d85 	stb	zero,118(sp)
   4a364:	50c00104 	addi	r3,r10,4
   4a368:	54800017 	ldw	r18,0(r10)
   4a36c:	0027883a 	mov	r19,zero
   4a370:	a0800094 	ori	r2,r20,2
   4a374:	48030b16 	blt	r9,zero,4afa4 <___vfiprintf_internal_r+0xff8>
   4a378:	00bfdfc4 	movi	r2,-129
   4a37c:	a096703a 	and	r11,r20,r2
   4a380:	d8c02215 	stw	r3,136(sp)
   4a384:	5d000094 	ori	r20,r11,2
   4a388:	90032b1e 	bne	r18,zero,4b038 <___vfiprintf_internal_r+0x108c>
   4a38c:	00800174 	movhi	r2,5
   4a390:	108a2604 	addi	r2,r2,10392
   4a394:	d8802615 	stw	r2,152(sp)
   4a398:	0039883a 	mov	fp,zero
   4a39c:	48017b1e 	bne	r9,zero,4a98c <___vfiprintf_internal_r+0x9e0>
   4a3a0:	0013883a 	mov	r9,zero
   4a3a4:	0027883a 	mov	r19,zero
   4a3a8:	dd401a04 	addi	r21,sp,104
   4a3ac:	4825883a 	mov	r18,r9
   4a3b0:	4cc0010e 	bge	r9,r19,4a3b8 <___vfiprintf_internal_r+0x40c>
   4a3b4:	9825883a 	mov	r18,r19
   4a3b8:	e7003fcc 	andi	fp,fp,255
   4a3bc:	e700201c 	xori	fp,fp,128
   4a3c0:	e73fe004 	addi	fp,fp,-128
   4a3c4:	e0000126 	beq	fp,zero,4a3cc <___vfiprintf_internal_r+0x420>
   4a3c8:	94800044 	addi	r18,r18,1
   4a3cc:	a380008c 	andi	r14,r20,2
   4a3d0:	70000126 	beq	r14,zero,4a3d8 <___vfiprintf_internal_r+0x42c>
   4a3d4:	94800084 	addi	r18,r18,2
   4a3d8:	a700210c 	andi	fp,r20,132
   4a3dc:	e001df1e 	bne	fp,zero,4ab5c <___vfiprintf_internal_r+0xbb0>
   4a3e0:	8c87c83a 	sub	r3,r17,r18
   4a3e4:	00c1dd0e 	bge	zero,r3,4ab5c <___vfiprintf_internal_r+0xbb0>
   4a3e8:	01c00404 	movi	r7,16
   4a3ec:	d8801c17 	ldw	r2,112(sp)
   4a3f0:	38c3ad0e 	bge	r7,r3,4b2a8 <___vfiprintf_internal_r+0x12fc>
   4a3f4:	02800174 	movhi	r10,5
   4a3f8:	528a8a04 	addi	r10,r10,10792
   4a3fc:	dc002915 	stw	r16,164(sp)
   4a400:	d9801b17 	ldw	r6,108(sp)
   4a404:	da802415 	stw	r10,144(sp)
   4a408:	03c001c4 	movi	r15,7
   4a40c:	da402515 	stw	r9,148(sp)
   4a410:	db802815 	stw	r14,160(sp)
   4a414:	1821883a 	mov	r16,r3
   4a418:	00000506 	br	4a430 <___vfiprintf_internal_r+0x484>
   4a41c:	31400084 	addi	r5,r6,2
   4a420:	42000204 	addi	r8,r8,8
   4a424:	200d883a 	mov	r6,r4
   4a428:	843ffc04 	addi	r16,r16,-16
   4a42c:	3c000d0e 	bge	r7,r16,4a464 <___vfiprintf_internal_r+0x4b8>
   4a430:	10800404 	addi	r2,r2,16
   4a434:	31000044 	addi	r4,r6,1
   4a438:	45800015 	stw	r22,0(r8)
   4a43c:	41c00115 	stw	r7,4(r8)
   4a440:	d8801c15 	stw	r2,112(sp)
   4a444:	d9001b15 	stw	r4,108(sp)
   4a448:	793ff40e 	bge	r15,r4,4a41c <__alt_data_end+0xfffd841c>
   4a44c:	1001b51e 	bne	r2,zero,4ab24 <___vfiprintf_internal_r+0xb78>
   4a450:	843ffc04 	addi	r16,r16,-16
   4a454:	000d883a 	mov	r6,zero
   4a458:	01400044 	movi	r5,1
   4a45c:	d811883a 	mov	r8,sp
   4a460:	3c3ff316 	blt	r7,r16,4a430 <__alt_data_end+0xfffd8430>
   4a464:	8007883a 	mov	r3,r16
   4a468:	da402517 	ldw	r9,148(sp)
   4a46c:	db802817 	ldw	r14,160(sp)
   4a470:	dc002917 	ldw	r16,164(sp)
   4a474:	da802417 	ldw	r10,144(sp)
   4a478:	1885883a 	add	r2,r3,r2
   4a47c:	40c00115 	stw	r3,4(r8)
   4a480:	42800015 	stw	r10,0(r8)
   4a484:	d8801c15 	stw	r2,112(sp)
   4a488:	d9401b15 	stw	r5,108(sp)
   4a48c:	00c001c4 	movi	r3,7
   4a490:	19426016 	blt	r3,r5,4ae14 <___vfiprintf_internal_r+0xe68>
   4a494:	d8c01d87 	ldb	r3,118(sp)
   4a498:	42000204 	addi	r8,r8,8
   4a49c:	29000044 	addi	r4,r5,1
   4a4a0:	1801b31e 	bne	r3,zero,4ab70 <___vfiprintf_internal_r+0xbc4>
   4a4a4:	7001c026 	beq	r14,zero,4aba8 <___vfiprintf_internal_r+0xbfc>
   4a4a8:	d8c01d04 	addi	r3,sp,116
   4a4ac:	10800084 	addi	r2,r2,2
   4a4b0:	40c00015 	stw	r3,0(r8)
   4a4b4:	00c00084 	movi	r3,2
   4a4b8:	40c00115 	stw	r3,4(r8)
   4a4bc:	d8801c15 	stw	r2,112(sp)
   4a4c0:	d9001b15 	stw	r4,108(sp)
   4a4c4:	00c001c4 	movi	r3,7
   4a4c8:	1902650e 	bge	r3,r4,4ae60 <___vfiprintf_internal_r+0xeb4>
   4a4cc:	10029a1e 	bne	r2,zero,4af38 <___vfiprintf_internal_r+0xf8c>
   4a4d0:	00c02004 	movi	r3,128
   4a4d4:	01000044 	movi	r4,1
   4a4d8:	000b883a 	mov	r5,zero
   4a4dc:	d811883a 	mov	r8,sp
   4a4e0:	e0c1b31e 	bne	fp,r3,4abb0 <___vfiprintf_internal_r+0xc04>
   4a4e4:	8cb9c83a 	sub	fp,r17,r18
   4a4e8:	0701b10e 	bge	zero,fp,4abb0 <___vfiprintf_internal_r+0xc04>
   4a4ec:	01c00404 	movi	r7,16
   4a4f0:	3f03890e 	bge	r7,fp,4b318 <___vfiprintf_internal_r+0x136c>
   4a4f4:	00c00174 	movhi	r3,5
   4a4f8:	18ca8604 	addi	r3,r3,10776
   4a4fc:	d8c02415 	stw	r3,144(sp)
   4a500:	8007883a 	mov	r3,r16
   4a504:	034001c4 	movi	r13,7
   4a508:	e021883a 	mov	r16,fp
   4a50c:	da402515 	stw	r9,148(sp)
   4a510:	1839883a 	mov	fp,r3
   4a514:	00000506 	br	4a52c <___vfiprintf_internal_r+0x580>
   4a518:	29800084 	addi	r6,r5,2
   4a51c:	42000204 	addi	r8,r8,8
   4a520:	180b883a 	mov	r5,r3
   4a524:	843ffc04 	addi	r16,r16,-16
   4a528:	3c000d0e 	bge	r7,r16,4a560 <___vfiprintf_internal_r+0x5b4>
   4a52c:	10800404 	addi	r2,r2,16
   4a530:	28c00044 	addi	r3,r5,1
   4a534:	45c00015 	stw	r23,0(r8)
   4a538:	41c00115 	stw	r7,4(r8)
   4a53c:	d8801c15 	stw	r2,112(sp)
   4a540:	d8c01b15 	stw	r3,108(sp)
   4a544:	68fff40e 	bge	r13,r3,4a518 <__alt_data_end+0xfffd8518>
   4a548:	1002241e 	bne	r2,zero,4addc <___vfiprintf_internal_r+0xe30>
   4a54c:	843ffc04 	addi	r16,r16,-16
   4a550:	01800044 	movi	r6,1
   4a554:	000b883a 	mov	r5,zero
   4a558:	d811883a 	mov	r8,sp
   4a55c:	3c3ff316 	blt	r7,r16,4a52c <__alt_data_end+0xfffd852c>
   4a560:	da402517 	ldw	r9,148(sp)
   4a564:	e007883a 	mov	r3,fp
   4a568:	8039883a 	mov	fp,r16
   4a56c:	1821883a 	mov	r16,r3
   4a570:	d8c02417 	ldw	r3,144(sp)
   4a574:	1705883a 	add	r2,r2,fp
   4a578:	47000115 	stw	fp,4(r8)
   4a57c:	40c00015 	stw	r3,0(r8)
   4a580:	d8801c15 	stw	r2,112(sp)
   4a584:	d9801b15 	stw	r6,108(sp)
   4a588:	00c001c4 	movi	r3,7
   4a58c:	19827616 	blt	r3,r6,4af68 <___vfiprintf_internal_r+0xfbc>
   4a590:	4cf9c83a 	sub	fp,r9,r19
   4a594:	42000204 	addi	r8,r8,8
   4a598:	31000044 	addi	r4,r6,1
   4a59c:	300b883a 	mov	r5,r6
   4a5a0:	07018516 	blt	zero,fp,4abb8 <___vfiprintf_internal_r+0xc0c>
   4a5a4:	9885883a 	add	r2,r19,r2
   4a5a8:	45400015 	stw	r21,0(r8)
   4a5ac:	44c00115 	stw	r19,4(r8)
   4a5b0:	d8801c15 	stw	r2,112(sp)
   4a5b4:	d9001b15 	stw	r4,108(sp)
   4a5b8:	00c001c4 	movi	r3,7
   4a5bc:	1901dd0e 	bge	r3,r4,4ad34 <___vfiprintf_internal_r+0xd88>
   4a5c0:	1002401e 	bne	r2,zero,4aec4 <___vfiprintf_internal_r+0xf18>
   4a5c4:	d8001b15 	stw	zero,108(sp)
   4a5c8:	a2c0010c 	andi	r11,r20,4
   4a5cc:	58000226 	beq	r11,zero,4a5d8 <___vfiprintf_internal_r+0x62c>
   4a5d0:	8ca7c83a 	sub	r19,r17,r18
   4a5d4:	04c2f216 	blt	zero,r19,4b1a0 <___vfiprintf_internal_r+0x11f4>
   4a5d8:	8c80010e 	bge	r17,r18,4a5e0 <___vfiprintf_internal_r+0x634>
   4a5dc:	9023883a 	mov	r17,r18
   4a5e0:	da802317 	ldw	r10,140(sp)
   4a5e4:	5455883a 	add	r10,r10,r17
   4a5e8:	da802315 	stw	r10,140(sp)
   4a5ec:	d8001b15 	stw	zero,108(sp)
   4a5f0:	d811883a 	mov	r8,sp
   4a5f4:	003ea206 	br	4a080 <__alt_data_end+0xfffd8080>
   4a5f8:	a5000814 	ori	r20,r20,32
   4a5fc:	80c00007 	ldb	r3,0(r16)
   4a600:	003ec906 	br	4a128 <__alt_data_end+0xfffd8128>
   4a604:	80c00007 	ldb	r3,0(r16)
   4a608:	1b030926 	beq	r3,r12,4b230 <___vfiprintf_internal_r+0x1284>
   4a60c:	a5000414 	ori	r20,r20,16
   4a610:	003ec506 	br	4a128 <__alt_data_end+0xfffd8128>
   4a614:	21003fcc 	andi	r4,r4,255
   4a618:	20035e1e 	bne	r4,zero,4b394 <___vfiprintf_internal_r+0x13e8>
   4a61c:	a080080c 	andi	r2,r20,32
   4a620:	1002a526 	beq	r2,zero,4b0b8 <___vfiprintf_internal_r+0x110c>
   4a624:	da802217 	ldw	r10,136(sp)
   4a628:	50800017 	ldw	r2,0(r10)
   4a62c:	da802317 	ldw	r10,140(sp)
   4a630:	5007d7fa 	srai	r3,r10,31
   4a634:	da802217 	ldw	r10,136(sp)
   4a638:	10c00115 	stw	r3,4(r2)
   4a63c:	52800104 	addi	r10,r10,4
   4a640:	da802215 	stw	r10,136(sp)
   4a644:	da802317 	ldw	r10,140(sp)
   4a648:	12800015 	stw	r10,0(r2)
   4a64c:	003e8c06 	br	4a080 <__alt_data_end+0xfffd8080>
   4a650:	21003fcc 	andi	r4,r4,255
   4a654:	2003511e 	bne	r4,zero,4b39c <___vfiprintf_internal_r+0x13f0>
   4a658:	a080080c 	andi	r2,r20,32
   4a65c:	1000a126 	beq	r2,zero,4a8e4 <___vfiprintf_internal_r+0x938>
   4a660:	da802217 	ldw	r10,136(sp)
   4a664:	d8001d85 	stb	zero,118(sp)
   4a668:	50800204 	addi	r2,r10,8
   4a66c:	54800017 	ldw	r18,0(r10)
   4a670:	54c00117 	ldw	r19,4(r10)
   4a674:	4802b416 	blt	r9,zero,4b148 <___vfiprintf_internal_r+0x119c>
   4a678:	013fdfc4 	movi	r4,-129
   4a67c:	94c6b03a 	or	r3,r18,r19
   4a680:	d8802215 	stw	r2,136(sp)
   4a684:	a128703a 	and	r20,r20,r4
   4a688:	1800a226 	beq	r3,zero,4a914 <___vfiprintf_internal_r+0x968>
   4a68c:	0039883a 	mov	fp,zero
   4a690:	dd401a04 	addi	r21,sp,104
   4a694:	9006d0fa 	srli	r3,r18,3
   4a698:	9808977a 	slli	r4,r19,29
   4a69c:	9826d0fa 	srli	r19,r19,3
   4a6a0:	948001cc 	andi	r18,r18,7
   4a6a4:	90800c04 	addi	r2,r18,48
   4a6a8:	ad7fffc4 	addi	r21,r21,-1
   4a6ac:	20e4b03a 	or	r18,r4,r3
   4a6b0:	a8800005 	stb	r2,0(r21)
   4a6b4:	94c6b03a 	or	r3,r18,r19
   4a6b8:	183ff61e 	bne	r3,zero,4a694 <__alt_data_end+0xfffd8694>
   4a6bc:	a0c0004c 	andi	r3,r20,1
   4a6c0:	18005926 	beq	r3,zero,4a828 <___vfiprintf_internal_r+0x87c>
   4a6c4:	10803fcc 	andi	r2,r2,255
   4a6c8:	1080201c 	xori	r2,r2,128
   4a6cc:	10bfe004 	addi	r2,r2,-128
   4a6d0:	00c00c04 	movi	r3,48
   4a6d4:	10c05426 	beq	r2,r3,4a828 <___vfiprintf_internal_r+0x87c>
   4a6d8:	da801e17 	ldw	r10,120(sp)
   4a6dc:	a8bfffc4 	addi	r2,r21,-1
   4a6e0:	a8ffffc5 	stb	r3,-1(r21)
   4a6e4:	50a7c83a 	sub	r19,r10,r2
   4a6e8:	102b883a 	mov	r21,r2
   4a6ec:	003f2f06 	br	4a3ac <__alt_data_end+0xfffd83ac>
   4a6f0:	21003fcc 	andi	r4,r4,255
   4a6f4:	2003421e 	bne	r4,zero,4b400 <___vfiprintf_internal_r+0x1454>
   4a6f8:	00800174 	movhi	r2,5
   4a6fc:	108a2604 	addi	r2,r2,10392
   4a700:	d8802615 	stw	r2,152(sp)
   4a704:	a080080c 	andi	r2,r20,32
   4a708:	1000aa26 	beq	r2,zero,4a9b4 <___vfiprintf_internal_r+0xa08>
   4a70c:	da802217 	ldw	r10,136(sp)
   4a710:	54800017 	ldw	r18,0(r10)
   4a714:	54c00117 	ldw	r19,4(r10)
   4a718:	52800204 	addi	r10,r10,8
   4a71c:	da802215 	stw	r10,136(sp)
   4a720:	a080004c 	andi	r2,r20,1
   4a724:	1001d226 	beq	r2,zero,4ae70 <___vfiprintf_internal_r+0xec4>
   4a728:	94c4b03a 	or	r2,r18,r19
   4a72c:	1002351e 	bne	r2,zero,4b004 <___vfiprintf_internal_r+0x1058>
   4a730:	d8001d85 	stb	zero,118(sp)
   4a734:	48022216 	blt	r9,zero,4afc0 <___vfiprintf_internal_r+0x1014>
   4a738:	00bfdfc4 	movi	r2,-129
   4a73c:	a0a8703a 	and	r20,r20,r2
   4a740:	003f1506 	br	4a398 <__alt_data_end+0xfffd8398>
   4a744:	da802217 	ldw	r10,136(sp)
   4a748:	04800044 	movi	r18,1
   4a74c:	d8001d85 	stb	zero,118(sp)
   4a750:	50800017 	ldw	r2,0(r10)
   4a754:	52800104 	addi	r10,r10,4
   4a758:	da802215 	stw	r10,136(sp)
   4a75c:	d8801005 	stb	r2,64(sp)
   4a760:	9027883a 	mov	r19,r18
   4a764:	dd401004 	addi	r21,sp,64
   4a768:	0013883a 	mov	r9,zero
   4a76c:	003f1706 	br	4a3cc <__alt_data_end+0xfffd83cc>
   4a770:	21003fcc 	andi	r4,r4,255
   4a774:	2003201e 	bne	r4,zero,4b3f8 <___vfiprintf_internal_r+0x144c>
   4a778:	a080080c 	andi	r2,r20,32
   4a77c:	10004b26 	beq	r2,zero,4a8ac <___vfiprintf_internal_r+0x900>
   4a780:	da802217 	ldw	r10,136(sp)
   4a784:	50800117 	ldw	r2,4(r10)
   4a788:	54800017 	ldw	r18,0(r10)
   4a78c:	52800204 	addi	r10,r10,8
   4a790:	da802215 	stw	r10,136(sp)
   4a794:	1027883a 	mov	r19,r2
   4a798:	10022c16 	blt	r2,zero,4b04c <___vfiprintf_internal_r+0x10a0>
   4a79c:	df001d83 	ldbu	fp,118(sp)
   4a7a0:	48007216 	blt	r9,zero,4a96c <___vfiprintf_internal_r+0x9c0>
   4a7a4:	00ffdfc4 	movi	r3,-129
   4a7a8:	94c4b03a 	or	r2,r18,r19
   4a7ac:	a0e8703a 	and	r20,r20,r3
   4a7b0:	1000cc26 	beq	r2,zero,4aae4 <___vfiprintf_internal_r+0xb38>
   4a7b4:	98021026 	beq	r19,zero,4aff8 <___vfiprintf_internal_r+0x104c>
   4a7b8:	dc402415 	stw	r17,144(sp)
   4a7bc:	dc002515 	stw	r16,148(sp)
   4a7c0:	9823883a 	mov	r17,r19
   4a7c4:	9021883a 	mov	r16,r18
   4a7c8:	dd401a04 	addi	r21,sp,104
   4a7cc:	4825883a 	mov	r18,r9
   4a7d0:	4027883a 	mov	r19,r8
   4a7d4:	8009883a 	mov	r4,r16
   4a7d8:	880b883a 	mov	r5,r17
   4a7dc:	01800284 	movi	r6,10
   4a7e0:	000f883a 	mov	r7,zero
   4a7e4:	004c1c80 	call	4c1c8 <__umoddi3>
   4a7e8:	10800c04 	addi	r2,r2,48
   4a7ec:	ad7fffc4 	addi	r21,r21,-1
   4a7f0:	8009883a 	mov	r4,r16
   4a7f4:	880b883a 	mov	r5,r17
   4a7f8:	a8800005 	stb	r2,0(r21)
   4a7fc:	01800284 	movi	r6,10
   4a800:	000f883a 	mov	r7,zero
   4a804:	004bc500 	call	4bc50 <__udivdi3>
   4a808:	1021883a 	mov	r16,r2
   4a80c:	10c4b03a 	or	r2,r2,r3
   4a810:	1823883a 	mov	r17,r3
   4a814:	103fef1e 	bne	r2,zero,4a7d4 <__alt_data_end+0xfffd87d4>
   4a818:	dc402417 	ldw	r17,144(sp)
   4a81c:	dc002517 	ldw	r16,148(sp)
   4a820:	9013883a 	mov	r9,r18
   4a824:	9811883a 	mov	r8,r19
   4a828:	da801e17 	ldw	r10,120(sp)
   4a82c:	5567c83a 	sub	r19,r10,r21
   4a830:	003ede06 	br	4a3ac <__alt_data_end+0xfffd83ac>
   4a834:	38803fcc 	andi	r2,r7,255
   4a838:	1080201c 	xori	r2,r2,128
   4a83c:	10bfe004 	addi	r2,r2,-128
   4a840:	1002371e 	bne	r2,zero,4b120 <___vfiprintf_internal_r+0x1174>
   4a844:	01000044 	movi	r4,1
   4a848:	01c00804 	movi	r7,32
   4a84c:	80c00007 	ldb	r3,0(r16)
   4a850:	003e3506 	br	4a128 <__alt_data_end+0xfffd8128>
   4a854:	a5000054 	ori	r20,r20,1
   4a858:	80c00007 	ldb	r3,0(r16)
   4a85c:	003e3206 	br	4a128 <__alt_data_end+0xfffd8128>
   4a860:	a5002014 	ori	r20,r20,128
   4a864:	80c00007 	ldb	r3,0(r16)
   4a868:	003e2f06 	br	4a128 <__alt_data_end+0xfffd8128>
   4a86c:	8015883a 	mov	r10,r16
   4a870:	0023883a 	mov	r17,zero
   4a874:	18bff404 	addi	r2,r3,-48
   4a878:	50c00007 	ldb	r3,0(r10)
   4a87c:	8c4002a4 	muli	r17,r17,10
   4a880:	84000044 	addi	r16,r16,1
   4a884:	8015883a 	mov	r10,r16
   4a888:	1463883a 	add	r17,r2,r17
   4a88c:	18bff404 	addi	r2,r3,-48
   4a890:	30bff92e 	bgeu	r6,r2,4a878 <__alt_data_end+0xfffd8878>
   4a894:	003e2506 	br	4a12c <__alt_data_end+0xfffd812c>
   4a898:	21003fcc 	andi	r4,r4,255
   4a89c:	2002d41e 	bne	r4,zero,4b3f0 <___vfiprintf_internal_r+0x1444>
   4a8a0:	a5000414 	ori	r20,r20,16
   4a8a4:	a080080c 	andi	r2,r20,32
   4a8a8:	103fb51e 	bne	r2,zero,4a780 <__alt_data_end+0xfffd8780>
   4a8ac:	a080040c 	andi	r2,r20,16
   4a8b0:	1001f826 	beq	r2,zero,4b094 <___vfiprintf_internal_r+0x10e8>
   4a8b4:	da802217 	ldw	r10,136(sp)
   4a8b8:	54800017 	ldw	r18,0(r10)
   4a8bc:	52800104 	addi	r10,r10,4
   4a8c0:	da802215 	stw	r10,136(sp)
   4a8c4:	9027d7fa 	srai	r19,r18,31
   4a8c8:	9805883a 	mov	r2,r19
   4a8cc:	003fb206 	br	4a798 <__alt_data_end+0xfffd8798>
   4a8d0:	21003fcc 	andi	r4,r4,255
   4a8d4:	2002c41e 	bne	r4,zero,4b3e8 <___vfiprintf_internal_r+0x143c>
   4a8d8:	a5000414 	ori	r20,r20,16
   4a8dc:	a080080c 	andi	r2,r20,32
   4a8e0:	103f5f1e 	bne	r2,zero,4a660 <__alt_data_end+0xfffd8660>
   4a8e4:	a080040c 	andi	r2,r20,16
   4a8e8:	10020f26 	beq	r2,zero,4b128 <___vfiprintf_internal_r+0x117c>
   4a8ec:	da802217 	ldw	r10,136(sp)
   4a8f0:	d8001d85 	stb	zero,118(sp)
   4a8f4:	0027883a 	mov	r19,zero
   4a8f8:	50800104 	addi	r2,r10,4
   4a8fc:	54800017 	ldw	r18,0(r10)
   4a900:	48021116 	blt	r9,zero,4b148 <___vfiprintf_internal_r+0x119c>
   4a904:	00ffdfc4 	movi	r3,-129
   4a908:	d8802215 	stw	r2,136(sp)
   4a90c:	a0e8703a 	and	r20,r20,r3
   4a910:	903f5e1e 	bne	r18,zero,4a68c <__alt_data_end+0xfffd868c>
   4a914:	0039883a 	mov	fp,zero
   4a918:	4802a626 	beq	r9,zero,4b3b4 <___vfiprintf_internal_r+0x1408>
   4a91c:	0025883a 	mov	r18,zero
   4a920:	0027883a 	mov	r19,zero
   4a924:	003f5a06 	br	4a690 <__alt_data_end+0xfffd8690>
   4a928:	21003fcc 	andi	r4,r4,255
   4a92c:	20029f1e 	bne	r4,zero,4b3ac <___vfiprintf_internal_r+0x1400>
   4a930:	a5000414 	ori	r20,r20,16
   4a934:	a080080c 	andi	r2,r20,32
   4a938:	10005e1e 	bne	r2,zero,4aab4 <___vfiprintf_internal_r+0xb08>
   4a93c:	a080040c 	andi	r2,r20,16
   4a940:	1001a21e 	bne	r2,zero,4afcc <___vfiprintf_internal_r+0x1020>
   4a944:	a080100c 	andi	r2,r20,64
   4a948:	d8001d85 	stb	zero,118(sp)
   4a94c:	da802217 	ldw	r10,136(sp)
   4a950:	1002231e 	bne	r2,zero,4b1e0 <___vfiprintf_internal_r+0x1234>
   4a954:	50800104 	addi	r2,r10,4
   4a958:	54800017 	ldw	r18,0(r10)
   4a95c:	0027883a 	mov	r19,zero
   4a960:	4801a00e 	bge	r9,zero,4afe4 <___vfiprintf_internal_r+0x1038>
   4a964:	d8802215 	stw	r2,136(sp)
   4a968:	0039883a 	mov	fp,zero
   4a96c:	94c4b03a 	or	r2,r18,r19
   4a970:	103f901e 	bne	r2,zero,4a7b4 <__alt_data_end+0xfffd87b4>
   4a974:	00800044 	movi	r2,1
   4a978:	10803fcc 	andi	r2,r2,255
   4a97c:	00c00044 	movi	r3,1
   4a980:	10c05926 	beq	r2,r3,4aae8 <___vfiprintf_internal_r+0xb3c>
   4a984:	00c00084 	movi	r3,2
   4a988:	10ffe41e 	bne	r2,r3,4a91c <__alt_data_end+0xfffd891c>
   4a98c:	0025883a 	mov	r18,zero
   4a990:	0027883a 	mov	r19,zero
   4a994:	00013d06 	br	4ae8c <___vfiprintf_internal_r+0xee0>
   4a998:	21003fcc 	andi	r4,r4,255
   4a99c:	2002811e 	bne	r4,zero,4b3a4 <___vfiprintf_internal_r+0x13f8>
   4a9a0:	00800174 	movhi	r2,5
   4a9a4:	108a2104 	addi	r2,r2,10372
   4a9a8:	d8802615 	stw	r2,152(sp)
   4a9ac:	a080080c 	andi	r2,r20,32
   4a9b0:	103f561e 	bne	r2,zero,4a70c <__alt_data_end+0xfffd870c>
   4a9b4:	a080040c 	andi	r2,r20,16
   4a9b8:	1001d126 	beq	r2,zero,4b100 <___vfiprintf_internal_r+0x1154>
   4a9bc:	da802217 	ldw	r10,136(sp)
   4a9c0:	0027883a 	mov	r19,zero
   4a9c4:	54800017 	ldw	r18,0(r10)
   4a9c8:	52800104 	addi	r10,r10,4
   4a9cc:	da802215 	stw	r10,136(sp)
   4a9d0:	003f5306 	br	4a720 <__alt_data_end+0xfffd8720>
   4a9d4:	da802217 	ldw	r10,136(sp)
   4a9d8:	d8001d85 	stb	zero,118(sp)
   4a9dc:	55400017 	ldw	r21,0(r10)
   4a9e0:	50c00104 	addi	r3,r10,4
   4a9e4:	a8024226 	beq	r21,zero,4b2f0 <___vfiprintf_internal_r+0x1344>
   4a9e8:	48021816 	blt	r9,zero,4b24c <___vfiprintf_internal_r+0x12a0>
   4a9ec:	480d883a 	mov	r6,r9
   4a9f0:	000b883a 	mov	r5,zero
   4a9f4:	a809883a 	mov	r4,r21
   4a9f8:	d8c02a15 	stw	r3,168(sp)
   4a9fc:	da002b15 	stw	r8,172(sp)
   4aa00:	da402c15 	stw	r9,176(sp)
   4aa04:	00484000 	call	48400 <memchr>
   4aa08:	d8c02a17 	ldw	r3,168(sp)
   4aa0c:	da002b17 	ldw	r8,172(sp)
   4aa10:	da402c17 	ldw	r9,176(sp)
   4aa14:	10024826 	beq	r2,zero,4b338 <___vfiprintf_internal_r+0x138c>
   4aa18:	1567c83a 	sub	r19,r2,r21
   4aa1c:	df001d83 	ldbu	fp,118(sp)
   4aa20:	d8c02215 	stw	r3,136(sp)
   4aa24:	0013883a 	mov	r9,zero
   4aa28:	003e6006 	br	4a3ac <__alt_data_end+0xfffd83ac>
   4aa2c:	21003fcc 	andi	r4,r4,255
   4aa30:	203fc026 	beq	r4,zero,4a934 <__alt_data_end+0xfffd8934>
   4aa34:	d9c01d85 	stb	r7,118(sp)
   4aa38:	003fbe06 	br	4a934 <__alt_data_end+0xfffd8934>
   4aa3c:	da802217 	ldw	r10,136(sp)
   4aa40:	54400017 	ldw	r17,0(r10)
   4aa44:	50800104 	addi	r2,r10,4
   4aa48:	883e3b16 	blt	r17,zero,4a338 <__alt_data_end+0xfffd8338>
   4aa4c:	d8802215 	stw	r2,136(sp)
   4aa50:	80c00007 	ldb	r3,0(r16)
   4aa54:	003db406 	br	4a128 <__alt_data_end+0xfffd8128>
   4aa58:	01000044 	movi	r4,1
   4aa5c:	01c00ac4 	movi	r7,43
   4aa60:	80c00007 	ldb	r3,0(r16)
   4aa64:	003db006 	br	4a128 <__alt_data_end+0xfffd8128>
   4aa68:	80c00007 	ldb	r3,0(r16)
   4aa6c:	82800044 	addi	r10,r16,1
   4aa70:	1b423c26 	beq	r3,r13,4b364 <___vfiprintf_internal_r+0x13b8>
   4aa74:	18bff404 	addi	r2,r3,-48
   4aa78:	0013883a 	mov	r9,zero
   4aa7c:	30822b36 	bltu	r6,r2,4b32c <___vfiprintf_internal_r+0x1380>
   4aa80:	50c00007 	ldb	r3,0(r10)
   4aa84:	4a4002a4 	muli	r9,r9,10
   4aa88:	54000044 	addi	r16,r10,1
   4aa8c:	8015883a 	mov	r10,r16
   4aa90:	4893883a 	add	r9,r9,r2
   4aa94:	18bff404 	addi	r2,r3,-48
   4aa98:	30bff92e 	bgeu	r6,r2,4aa80 <__alt_data_end+0xfffd8a80>
   4aa9c:	483da30e 	bge	r9,zero,4a12c <__alt_data_end+0xfffd812c>
   4aaa0:	027fffc4 	movi	r9,-1
   4aaa4:	003da106 	br	4a12c <__alt_data_end+0xfffd812c>
   4aaa8:	a5001014 	ori	r20,r20,64
   4aaac:	80c00007 	ldb	r3,0(r16)
   4aab0:	003d9d06 	br	4a128 <__alt_data_end+0xfffd8128>
   4aab4:	da802217 	ldw	r10,136(sp)
   4aab8:	d8001d85 	stb	zero,118(sp)
   4aabc:	50c00204 	addi	r3,r10,8
   4aac0:	54800017 	ldw	r18,0(r10)
   4aac4:	54c00117 	ldw	r19,4(r10)
   4aac8:	4801ca16 	blt	r9,zero,4b1f4 <___vfiprintf_internal_r+0x1248>
   4aacc:	013fdfc4 	movi	r4,-129
   4aad0:	94c4b03a 	or	r2,r18,r19
   4aad4:	d8c02215 	stw	r3,136(sp)
   4aad8:	a128703a 	and	r20,r20,r4
   4aadc:	0039883a 	mov	fp,zero
   4aae0:	103f341e 	bne	r2,zero,4a7b4 <__alt_data_end+0xfffd87b4>
   4aae4:	483e2e26 	beq	r9,zero,4a3a0 <__alt_data_end+0xfffd83a0>
   4aae8:	0025883a 	mov	r18,zero
   4aaec:	94800c04 	addi	r18,r18,48
   4aaf0:	dc8019c5 	stb	r18,103(sp)
   4aaf4:	dcc02717 	ldw	r19,156(sp)
   4aaf8:	dd4019c4 	addi	r21,sp,103
   4aafc:	003e2b06 	br	4a3ac <__alt_data_end+0xfffd83ac>
   4ab00:	21003fcc 	andi	r4,r4,255
   4ab04:	2002361e 	bne	r4,zero,4b3e0 <___vfiprintf_internal_r+0x1434>
   4ab08:	1801c126 	beq	r3,zero,4b210 <___vfiprintf_internal_r+0x1264>
   4ab0c:	04800044 	movi	r18,1
   4ab10:	d8c01005 	stb	r3,64(sp)
   4ab14:	d8001d85 	stb	zero,118(sp)
   4ab18:	9027883a 	mov	r19,r18
   4ab1c:	dd401004 	addi	r21,sp,64
   4ab20:	003f1106 	br	4a768 <__alt_data_end+0xfffd8768>
   4ab24:	d9402117 	ldw	r5,132(sp)
   4ab28:	d9002017 	ldw	r4,128(sp)
   4ab2c:	d9801a04 	addi	r6,sp,104
   4ab30:	d9c02b15 	stw	r7,172(sp)
   4ab34:	dbc02a15 	stw	r15,168(sp)
   4ab38:	0049e980 	call	49e98 <__sprint_r.part.0>
   4ab3c:	d9c02b17 	ldw	r7,172(sp)
   4ab40:	dbc02a17 	ldw	r15,168(sp)
   4ab44:	10006d1e 	bne	r2,zero,4acfc <___vfiprintf_internal_r+0xd50>
   4ab48:	d9801b17 	ldw	r6,108(sp)
   4ab4c:	d8801c17 	ldw	r2,112(sp)
   4ab50:	d811883a 	mov	r8,sp
   4ab54:	31400044 	addi	r5,r6,1
   4ab58:	003e3306 	br	4a428 <__alt_data_end+0xfffd8428>
   4ab5c:	d9401b17 	ldw	r5,108(sp)
   4ab60:	d8801c17 	ldw	r2,112(sp)
   4ab64:	29000044 	addi	r4,r5,1
   4ab68:	d8c01d87 	ldb	r3,118(sp)
   4ab6c:	183e4d26 	beq	r3,zero,4a4a4 <__alt_data_end+0xfffd84a4>
   4ab70:	00c00044 	movi	r3,1
   4ab74:	d9401d84 	addi	r5,sp,118
   4ab78:	10c5883a 	add	r2,r2,r3
   4ab7c:	41400015 	stw	r5,0(r8)
   4ab80:	40c00115 	stw	r3,4(r8)
   4ab84:	d8801c15 	stw	r2,112(sp)
   4ab88:	d9001b15 	stw	r4,108(sp)
   4ab8c:	014001c4 	movi	r5,7
   4ab90:	2900a90e 	bge	r5,r4,4ae38 <___vfiprintf_internal_r+0xe8c>
   4ab94:	1000da1e 	bne	r2,zero,4af00 <___vfiprintf_internal_r+0xf54>
   4ab98:	7000ab1e 	bne	r14,zero,4ae48 <___vfiprintf_internal_r+0xe9c>
   4ab9c:	000b883a 	mov	r5,zero
   4aba0:	1809883a 	mov	r4,r3
   4aba4:	d811883a 	mov	r8,sp
   4aba8:	00c02004 	movi	r3,128
   4abac:	e0fe4d26 	beq	fp,r3,4a4e4 <__alt_data_end+0xfffd84e4>
   4abb0:	4cf9c83a 	sub	fp,r9,r19
   4abb4:	073e7b0e 	bge	zero,fp,4a5a4 <__alt_data_end+0xfffd85a4>
   4abb8:	01c00404 	movi	r7,16
   4abbc:	3f01900e 	bge	r7,fp,4b200 <___vfiprintf_internal_r+0x1254>
   4abc0:	00c00174 	movhi	r3,5
   4abc4:	18ca8604 	addi	r3,r3,10776
   4abc8:	d8c02415 	stw	r3,144(sp)
   4abcc:	034001c4 	movi	r13,7
   4abd0:	00000506 	br	4abe8 <___vfiprintf_internal_r+0xc3c>
   4abd4:	29000084 	addi	r4,r5,2
   4abd8:	42000204 	addi	r8,r8,8
   4abdc:	180b883a 	mov	r5,r3
   4abe0:	e73ffc04 	addi	fp,fp,-16
   4abe4:	3f000d0e 	bge	r7,fp,4ac1c <___vfiprintf_internal_r+0xc70>
   4abe8:	10800404 	addi	r2,r2,16
   4abec:	28c00044 	addi	r3,r5,1
   4abf0:	45c00015 	stw	r23,0(r8)
   4abf4:	41c00115 	stw	r7,4(r8)
   4abf8:	d8801c15 	stw	r2,112(sp)
   4abfc:	d8c01b15 	stw	r3,108(sp)
   4ac00:	68fff40e 	bge	r13,r3,4abd4 <__alt_data_end+0xfffd8bd4>
   4ac04:	1000101e 	bne	r2,zero,4ac48 <___vfiprintf_internal_r+0xc9c>
   4ac08:	e73ffc04 	addi	fp,fp,-16
   4ac0c:	01000044 	movi	r4,1
   4ac10:	000b883a 	mov	r5,zero
   4ac14:	d811883a 	mov	r8,sp
   4ac18:	3f3ff316 	blt	r7,fp,4abe8 <__alt_data_end+0xfffd8be8>
   4ac1c:	da802417 	ldw	r10,144(sp)
   4ac20:	1705883a 	add	r2,r2,fp
   4ac24:	47000115 	stw	fp,4(r8)
   4ac28:	42800015 	stw	r10,0(r8)
   4ac2c:	d8801c15 	stw	r2,112(sp)
   4ac30:	d9001b15 	stw	r4,108(sp)
   4ac34:	00c001c4 	movi	r3,7
   4ac38:	19003616 	blt	r3,r4,4ad14 <___vfiprintf_internal_r+0xd68>
   4ac3c:	42000204 	addi	r8,r8,8
   4ac40:	21000044 	addi	r4,r4,1
   4ac44:	003e5706 	br	4a5a4 <__alt_data_end+0xfffd85a4>
   4ac48:	d9402117 	ldw	r5,132(sp)
   4ac4c:	d9002017 	ldw	r4,128(sp)
   4ac50:	d9801a04 	addi	r6,sp,104
   4ac54:	d9c02b15 	stw	r7,172(sp)
   4ac58:	db402a15 	stw	r13,168(sp)
   4ac5c:	0049e980 	call	49e98 <__sprint_r.part.0>
   4ac60:	d9c02b17 	ldw	r7,172(sp)
   4ac64:	db402a17 	ldw	r13,168(sp)
   4ac68:	1000241e 	bne	r2,zero,4acfc <___vfiprintf_internal_r+0xd50>
   4ac6c:	d9401b17 	ldw	r5,108(sp)
   4ac70:	d8801c17 	ldw	r2,112(sp)
   4ac74:	d811883a 	mov	r8,sp
   4ac78:	29000044 	addi	r4,r5,1
   4ac7c:	003fd806 	br	4abe0 <__alt_data_end+0xfffd8be0>
   4ac80:	d9401b17 	ldw	r5,108(sp)
   4ac84:	00c00174 	movhi	r3,5
   4ac88:	18ca8a04 	addi	r3,r3,10792
   4ac8c:	d8c02415 	stw	r3,144(sp)
   4ac90:	29400044 	addi	r5,r5,1
   4ac94:	d8c02417 	ldw	r3,144(sp)
   4ac98:	14c5883a 	add	r2,r2,r19
   4ac9c:	44c00115 	stw	r19,4(r8)
   4aca0:	40c00015 	stw	r3,0(r8)
   4aca4:	d8801c15 	stw	r2,112(sp)
   4aca8:	d9401b15 	stw	r5,108(sp)
   4acac:	00c001c4 	movi	r3,7
   4acb0:	1940070e 	bge	r3,r5,4acd0 <___vfiprintf_internal_r+0xd24>
   4acb4:	103e4826 	beq	r2,zero,4a5d8 <__alt_data_end+0xfffd85d8>
   4acb8:	d9402117 	ldw	r5,132(sp)
   4acbc:	d9002017 	ldw	r4,128(sp)
   4acc0:	d9801a04 	addi	r6,sp,104
   4acc4:	0049e980 	call	49e98 <__sprint_r.part.0>
   4acc8:	10000c1e 	bne	r2,zero,4acfc <___vfiprintf_internal_r+0xd50>
   4accc:	d8801c17 	ldw	r2,112(sp)
   4acd0:	8c80010e 	bge	r17,r18,4acd8 <___vfiprintf_internal_r+0xd2c>
   4acd4:	9023883a 	mov	r17,r18
   4acd8:	da802317 	ldw	r10,140(sp)
   4acdc:	5455883a 	add	r10,r10,r17
   4ace0:	da802315 	stw	r10,140(sp)
   4ace4:	103e4126 	beq	r2,zero,4a5ec <__alt_data_end+0xfffd85ec>
   4ace8:	d9402117 	ldw	r5,132(sp)
   4acec:	d9002017 	ldw	r4,128(sp)
   4acf0:	d9801a04 	addi	r6,sp,104
   4acf4:	0049e980 	call	49e98 <__sprint_r.part.0>
   4acf8:	103e3c26 	beq	r2,zero,4a5ec <__alt_data_end+0xfffd85ec>
   4acfc:	dd002117 	ldw	r20,132(sp)
   4ad00:	a080030b 	ldhu	r2,12(r20)
   4ad04:	1080100c 	andi	r2,r2,64
   4ad08:	1001231e 	bne	r2,zero,4b198 <___vfiprintf_internal_r+0x11ec>
   4ad0c:	d8802317 	ldw	r2,140(sp)
   4ad10:	003d7b06 	br	4a300 <__alt_data_end+0xfffd8300>
   4ad14:	1000991e 	bne	r2,zero,4af7c <___vfiprintf_internal_r+0xfd0>
   4ad18:	00c00044 	movi	r3,1
   4ad1c:	9805883a 	mov	r2,r19
   4ad20:	dd400015 	stw	r21,0(sp)
   4ad24:	dcc00115 	stw	r19,4(sp)
   4ad28:	dcc01c15 	stw	r19,112(sp)
   4ad2c:	d8c01b15 	stw	r3,108(sp)
   4ad30:	d811883a 	mov	r8,sp
   4ad34:	42000204 	addi	r8,r8,8
   4ad38:	a2c0010c 	andi	r11,r20,4
   4ad3c:	583fe426 	beq	r11,zero,4acd0 <__alt_data_end+0xfffd8cd0>
   4ad40:	8ca7c83a 	sub	r19,r17,r18
   4ad44:	04ffe20e 	bge	zero,r19,4acd0 <__alt_data_end+0xfffd8cd0>
   4ad48:	01c00404 	movi	r7,16
   4ad4c:	3cffcc0e 	bge	r7,r19,4ac80 <__alt_data_end+0xfffd8c80>
   4ad50:	02800174 	movhi	r10,5
   4ad54:	528a8a04 	addi	r10,r10,10792
   4ad58:	d9001b17 	ldw	r4,108(sp)
   4ad5c:	da802415 	stw	r10,144(sp)
   4ad60:	382b883a 	mov	r21,r7
   4ad64:	050001c4 	movi	r20,7
   4ad68:	df002017 	ldw	fp,128(sp)
   4ad6c:	00000506 	br	4ad84 <___vfiprintf_internal_r+0xdd8>
   4ad70:	21400084 	addi	r5,r4,2
   4ad74:	42000204 	addi	r8,r8,8
   4ad78:	1809883a 	mov	r4,r3
   4ad7c:	9cfffc04 	addi	r19,r19,-16
   4ad80:	acffc40e 	bge	r21,r19,4ac94 <__alt_data_end+0xfffd8c94>
   4ad84:	10800404 	addi	r2,r2,16
   4ad88:	20c00044 	addi	r3,r4,1
   4ad8c:	45800015 	stw	r22,0(r8)
   4ad90:	45400115 	stw	r21,4(r8)
   4ad94:	d8801c15 	stw	r2,112(sp)
   4ad98:	d8c01b15 	stw	r3,108(sp)
   4ad9c:	a0fff40e 	bge	r20,r3,4ad70 <__alt_data_end+0xfffd8d70>
   4ada0:	1000041e 	bne	r2,zero,4adb4 <___vfiprintf_internal_r+0xe08>
   4ada4:	01400044 	movi	r5,1
   4ada8:	0009883a 	mov	r4,zero
   4adac:	d811883a 	mov	r8,sp
   4adb0:	003ff206 	br	4ad7c <__alt_data_end+0xfffd8d7c>
   4adb4:	d9402117 	ldw	r5,132(sp)
   4adb8:	d9801a04 	addi	r6,sp,104
   4adbc:	e009883a 	mov	r4,fp
   4adc0:	0049e980 	call	49e98 <__sprint_r.part.0>
   4adc4:	103fcd1e 	bne	r2,zero,4acfc <__alt_data_end+0xfffd8cfc>
   4adc8:	d9001b17 	ldw	r4,108(sp)
   4adcc:	d8801c17 	ldw	r2,112(sp)
   4add0:	d811883a 	mov	r8,sp
   4add4:	21400044 	addi	r5,r4,1
   4add8:	003fe806 	br	4ad7c <__alt_data_end+0xfffd8d7c>
   4addc:	d9402117 	ldw	r5,132(sp)
   4ade0:	d9002017 	ldw	r4,128(sp)
   4ade4:	d9801a04 	addi	r6,sp,104
   4ade8:	d9c02b15 	stw	r7,172(sp)
   4adec:	db402a15 	stw	r13,168(sp)
   4adf0:	0049e980 	call	49e98 <__sprint_r.part.0>
   4adf4:	d9c02b17 	ldw	r7,172(sp)
   4adf8:	db402a17 	ldw	r13,168(sp)
   4adfc:	103fbf1e 	bne	r2,zero,4acfc <__alt_data_end+0xfffd8cfc>
   4ae00:	d9401b17 	ldw	r5,108(sp)
   4ae04:	d8801c17 	ldw	r2,112(sp)
   4ae08:	d811883a 	mov	r8,sp
   4ae0c:	29800044 	addi	r6,r5,1
   4ae10:	003dc406 	br	4a524 <__alt_data_end+0xfffd8524>
   4ae14:	1000d21e 	bne	r2,zero,4b160 <___vfiprintf_internal_r+0x11b4>
   4ae18:	d8c01d87 	ldb	r3,118(sp)
   4ae1c:	18009526 	beq	r3,zero,4b074 <___vfiprintf_internal_r+0x10c8>
   4ae20:	00800044 	movi	r2,1
   4ae24:	d8c01d84 	addi	r3,sp,118
   4ae28:	1009883a 	mov	r4,r2
   4ae2c:	d8c00015 	stw	r3,0(sp)
   4ae30:	d8800115 	stw	r2,4(sp)
   4ae34:	d811883a 	mov	r8,sp
   4ae38:	200b883a 	mov	r5,r4
   4ae3c:	42000204 	addi	r8,r8,8
   4ae40:	21000044 	addi	r4,r4,1
   4ae44:	003d9706 	br	4a4a4 <__alt_data_end+0xfffd84a4>
   4ae48:	d9001d04 	addi	r4,sp,116
   4ae4c:	00800084 	movi	r2,2
   4ae50:	d9000015 	stw	r4,0(sp)
   4ae54:	d8800115 	stw	r2,4(sp)
   4ae58:	1809883a 	mov	r4,r3
   4ae5c:	d811883a 	mov	r8,sp
   4ae60:	200b883a 	mov	r5,r4
   4ae64:	42000204 	addi	r8,r8,8
   4ae68:	21000044 	addi	r4,r4,1
   4ae6c:	003f4e06 	br	4aba8 <__alt_data_end+0xfffd8ba8>
   4ae70:	d8001d85 	stb	zero,118(sp)
   4ae74:	48005016 	blt	r9,zero,4afb8 <___vfiprintf_internal_r+0x100c>
   4ae78:	00ffdfc4 	movi	r3,-129
   4ae7c:	94c4b03a 	or	r2,r18,r19
   4ae80:	a0e8703a 	and	r20,r20,r3
   4ae84:	103d4426 	beq	r2,zero,4a398 <__alt_data_end+0xfffd8398>
   4ae88:	0039883a 	mov	fp,zero
   4ae8c:	d9002617 	ldw	r4,152(sp)
   4ae90:	dd401a04 	addi	r21,sp,104
   4ae94:	908003cc 	andi	r2,r18,15
   4ae98:	9806973a 	slli	r3,r19,28
   4ae9c:	2085883a 	add	r2,r4,r2
   4aea0:	9024d13a 	srli	r18,r18,4
   4aea4:	10800003 	ldbu	r2,0(r2)
   4aea8:	9826d13a 	srli	r19,r19,4
   4aeac:	ad7fffc4 	addi	r21,r21,-1
   4aeb0:	1ca4b03a 	or	r18,r3,r18
   4aeb4:	a8800005 	stb	r2,0(r21)
   4aeb8:	94c4b03a 	or	r2,r18,r19
   4aebc:	103ff51e 	bne	r2,zero,4ae94 <__alt_data_end+0xfffd8e94>
   4aec0:	003e5906 	br	4a828 <__alt_data_end+0xfffd8828>
   4aec4:	d9402117 	ldw	r5,132(sp)
   4aec8:	d9002017 	ldw	r4,128(sp)
   4aecc:	d9801a04 	addi	r6,sp,104
   4aed0:	0049e980 	call	49e98 <__sprint_r.part.0>
   4aed4:	103f891e 	bne	r2,zero,4acfc <__alt_data_end+0xfffd8cfc>
   4aed8:	d8801c17 	ldw	r2,112(sp)
   4aedc:	d811883a 	mov	r8,sp
   4aee0:	003f9506 	br	4ad38 <__alt_data_end+0xfffd8d38>
   4aee4:	d9402117 	ldw	r5,132(sp)
   4aee8:	d9002017 	ldw	r4,128(sp)
   4aeec:	d9801a04 	addi	r6,sp,104
   4aef0:	0049e980 	call	49e98 <__sprint_r.part.0>
   4aef4:	103f811e 	bne	r2,zero,4acfc <__alt_data_end+0xfffd8cfc>
   4aef8:	d811883a 	mov	r8,sp
   4aefc:	003ced06 	br	4a2b4 <__alt_data_end+0xfffd82b4>
   4af00:	d9402117 	ldw	r5,132(sp)
   4af04:	d9002017 	ldw	r4,128(sp)
   4af08:	d9801a04 	addi	r6,sp,104
   4af0c:	da402c15 	stw	r9,176(sp)
   4af10:	db802a15 	stw	r14,168(sp)
   4af14:	0049e980 	call	49e98 <__sprint_r.part.0>
   4af18:	da402c17 	ldw	r9,176(sp)
   4af1c:	db802a17 	ldw	r14,168(sp)
   4af20:	103f761e 	bne	r2,zero,4acfc <__alt_data_end+0xfffd8cfc>
   4af24:	d9401b17 	ldw	r5,108(sp)
   4af28:	d8801c17 	ldw	r2,112(sp)
   4af2c:	d811883a 	mov	r8,sp
   4af30:	29000044 	addi	r4,r5,1
   4af34:	003d5b06 	br	4a4a4 <__alt_data_end+0xfffd84a4>
   4af38:	d9402117 	ldw	r5,132(sp)
   4af3c:	d9002017 	ldw	r4,128(sp)
   4af40:	d9801a04 	addi	r6,sp,104
   4af44:	da402c15 	stw	r9,176(sp)
   4af48:	0049e980 	call	49e98 <__sprint_r.part.0>
   4af4c:	da402c17 	ldw	r9,176(sp)
   4af50:	103f6a1e 	bne	r2,zero,4acfc <__alt_data_end+0xfffd8cfc>
   4af54:	d9401b17 	ldw	r5,108(sp)
   4af58:	d8801c17 	ldw	r2,112(sp)
   4af5c:	d811883a 	mov	r8,sp
   4af60:	29000044 	addi	r4,r5,1
   4af64:	003f1006 	br	4aba8 <__alt_data_end+0xfffd8ba8>
   4af68:	1000c31e 	bne	r2,zero,4b278 <___vfiprintf_internal_r+0x12cc>
   4af6c:	01000044 	movi	r4,1
   4af70:	000b883a 	mov	r5,zero
   4af74:	d811883a 	mov	r8,sp
   4af78:	003f0d06 	br	4abb0 <__alt_data_end+0xfffd8bb0>
   4af7c:	d9402117 	ldw	r5,132(sp)
   4af80:	d9002017 	ldw	r4,128(sp)
   4af84:	d9801a04 	addi	r6,sp,104
   4af88:	0049e980 	call	49e98 <__sprint_r.part.0>
   4af8c:	103f5b1e 	bne	r2,zero,4acfc <__alt_data_end+0xfffd8cfc>
   4af90:	d9001b17 	ldw	r4,108(sp)
   4af94:	d8801c17 	ldw	r2,112(sp)
   4af98:	d811883a 	mov	r8,sp
   4af9c:	21000044 	addi	r4,r4,1
   4afa0:	003d8006 	br	4a5a4 <__alt_data_end+0xfffd85a4>
   4afa4:	01000174 	movhi	r4,5
   4afa8:	210a2604 	addi	r4,r4,10392
   4afac:	d9002615 	stw	r4,152(sp)
   4afb0:	d8c02215 	stw	r3,136(sp)
   4afb4:	1029883a 	mov	r20,r2
   4afb8:	94c4b03a 	or	r2,r18,r19
   4afbc:	103fb21e 	bne	r2,zero,4ae88 <__alt_data_end+0xfffd8e88>
   4afc0:	0039883a 	mov	fp,zero
   4afc4:	00800084 	movi	r2,2
   4afc8:	003e6b06 	br	4a978 <__alt_data_end+0xfffd8978>
   4afcc:	da802217 	ldw	r10,136(sp)
   4afd0:	d8001d85 	stb	zero,118(sp)
   4afd4:	0027883a 	mov	r19,zero
   4afd8:	50800104 	addi	r2,r10,4
   4afdc:	54800017 	ldw	r18,0(r10)
   4afe0:	483e6016 	blt	r9,zero,4a964 <__alt_data_end+0xfffd8964>
   4afe4:	00ffdfc4 	movi	r3,-129
   4afe8:	d8802215 	stw	r2,136(sp)
   4afec:	a0e8703a 	and	r20,r20,r3
   4aff0:	0039883a 	mov	fp,zero
   4aff4:	903ebb26 	beq	r18,zero,4aae4 <__alt_data_end+0xfffd8ae4>
   4aff8:	00800244 	movi	r2,9
   4affc:	14bdee36 	bltu	r2,r18,4a7b8 <__alt_data_end+0xfffd87b8>
   4b000:	003eba06 	br	4aaec <__alt_data_end+0xfffd8aec>
   4b004:	00800c04 	movi	r2,48
   4b008:	d8c01d45 	stb	r3,117(sp)
   4b00c:	d8801d05 	stb	r2,116(sp)
   4b010:	d8001d85 	stb	zero,118(sp)
   4b014:	a0c00094 	ori	r3,r20,2
   4b018:	4800a916 	blt	r9,zero,4b2c0 <___vfiprintf_internal_r+0x1314>
   4b01c:	00bfdfc4 	movi	r2,-129
   4b020:	a096703a 	and	r11,r20,r2
   4b024:	5d000094 	ori	r20,r11,2
   4b028:	0039883a 	mov	fp,zero
   4b02c:	003f9706 	br	4ae8c <__alt_data_end+0xfffd8e8c>
   4b030:	8025883a 	mov	r18,r16
   4b034:	003c2e06 	br	4a0f0 <__alt_data_end+0xfffd80f0>
   4b038:	00800174 	movhi	r2,5
   4b03c:	108a2604 	addi	r2,r2,10392
   4b040:	0039883a 	mov	fp,zero
   4b044:	d8802615 	stw	r2,152(sp)
   4b048:	003f9006 	br	4ae8c <__alt_data_end+0xfffd8e8c>
   4b04c:	04a5c83a 	sub	r18,zero,r18
   4b050:	07000b44 	movi	fp,45
   4b054:	9004c03a 	cmpne	r2,r18,zero
   4b058:	04e7c83a 	sub	r19,zero,r19
   4b05c:	df001d85 	stb	fp,118(sp)
   4b060:	98a7c83a 	sub	r19,r19,r2
   4b064:	48009f16 	blt	r9,zero,4b2e4 <___vfiprintf_internal_r+0x1338>
   4b068:	00bfdfc4 	movi	r2,-129
   4b06c:	a0a8703a 	and	r20,r20,r2
   4b070:	003dd006 	br	4a7b4 <__alt_data_end+0xfffd87b4>
   4b074:	70004c26 	beq	r14,zero,4b1a8 <___vfiprintf_internal_r+0x11fc>
   4b078:	00800084 	movi	r2,2
   4b07c:	d8c01d04 	addi	r3,sp,116
   4b080:	d8c00015 	stw	r3,0(sp)
   4b084:	d8800115 	stw	r2,4(sp)
   4b088:	01000044 	movi	r4,1
   4b08c:	d811883a 	mov	r8,sp
   4b090:	003f7306 	br	4ae60 <__alt_data_end+0xfffd8e60>
   4b094:	a080100c 	andi	r2,r20,64
   4b098:	da802217 	ldw	r10,136(sp)
   4b09c:	103e0626 	beq	r2,zero,4a8b8 <__alt_data_end+0xfffd88b8>
   4b0a0:	5480000f 	ldh	r18,0(r10)
   4b0a4:	52800104 	addi	r10,r10,4
   4b0a8:	da802215 	stw	r10,136(sp)
   4b0ac:	9027d7fa 	srai	r19,r18,31
   4b0b0:	9805883a 	mov	r2,r19
   4b0b4:	003db806 	br	4a798 <__alt_data_end+0xfffd8798>
   4b0b8:	a080040c 	andi	r2,r20,16
   4b0bc:	1000091e 	bne	r2,zero,4b0e4 <___vfiprintf_internal_r+0x1138>
   4b0c0:	a2c0100c 	andi	r11,r20,64
   4b0c4:	58000726 	beq	r11,zero,4b0e4 <___vfiprintf_internal_r+0x1138>
   4b0c8:	da802217 	ldw	r10,136(sp)
   4b0cc:	50800017 	ldw	r2,0(r10)
   4b0d0:	52800104 	addi	r10,r10,4
   4b0d4:	da802215 	stw	r10,136(sp)
   4b0d8:	da802317 	ldw	r10,140(sp)
   4b0dc:	1280000d 	sth	r10,0(r2)
   4b0e0:	003be706 	br	4a080 <__alt_data_end+0xfffd8080>
   4b0e4:	da802217 	ldw	r10,136(sp)
   4b0e8:	50800017 	ldw	r2,0(r10)
   4b0ec:	52800104 	addi	r10,r10,4
   4b0f0:	da802215 	stw	r10,136(sp)
   4b0f4:	da802317 	ldw	r10,140(sp)
   4b0f8:	12800015 	stw	r10,0(r2)
   4b0fc:	003be006 	br	4a080 <__alt_data_end+0xfffd8080>
   4b100:	a080100c 	andi	r2,r20,64
   4b104:	da802217 	ldw	r10,136(sp)
   4b108:	10003026 	beq	r2,zero,4b1cc <___vfiprintf_internal_r+0x1220>
   4b10c:	5480000b 	ldhu	r18,0(r10)
   4b110:	52800104 	addi	r10,r10,4
   4b114:	0027883a 	mov	r19,zero
   4b118:	da802215 	stw	r10,136(sp)
   4b11c:	003d8006 	br	4a720 <__alt_data_end+0xfffd8720>
   4b120:	80c00007 	ldb	r3,0(r16)
   4b124:	003c0006 	br	4a128 <__alt_data_end+0xfffd8128>
   4b128:	a080100c 	andi	r2,r20,64
   4b12c:	d8001d85 	stb	zero,118(sp)
   4b130:	da802217 	ldw	r10,136(sp)
   4b134:	1000201e 	bne	r2,zero,4b1b8 <___vfiprintf_internal_r+0x120c>
   4b138:	50800104 	addi	r2,r10,4
   4b13c:	54800017 	ldw	r18,0(r10)
   4b140:	0027883a 	mov	r19,zero
   4b144:	483def0e 	bge	r9,zero,4a904 <__alt_data_end+0xfffd8904>
   4b148:	94c6b03a 	or	r3,r18,r19
   4b14c:	d8802215 	stw	r2,136(sp)
   4b150:	183d4e1e 	bne	r3,zero,4a68c <__alt_data_end+0xfffd868c>
   4b154:	0039883a 	mov	fp,zero
   4b158:	0005883a 	mov	r2,zero
   4b15c:	003e0606 	br	4a978 <__alt_data_end+0xfffd8978>
   4b160:	d9402117 	ldw	r5,132(sp)
   4b164:	d9002017 	ldw	r4,128(sp)
   4b168:	d9801a04 	addi	r6,sp,104
   4b16c:	da402c15 	stw	r9,176(sp)
   4b170:	db802a15 	stw	r14,168(sp)
   4b174:	0049e980 	call	49e98 <__sprint_r.part.0>
   4b178:	da402c17 	ldw	r9,176(sp)
   4b17c:	db802a17 	ldw	r14,168(sp)
   4b180:	103ede1e 	bne	r2,zero,4acfc <__alt_data_end+0xfffd8cfc>
   4b184:	d9401b17 	ldw	r5,108(sp)
   4b188:	d8801c17 	ldw	r2,112(sp)
   4b18c:	d811883a 	mov	r8,sp
   4b190:	29000044 	addi	r4,r5,1
   4b194:	003e7406 	br	4ab68 <__alt_data_end+0xfffd8b68>
   4b198:	00bfffc4 	movi	r2,-1
   4b19c:	003c5806 	br	4a300 <__alt_data_end+0xfffd8300>
   4b1a0:	d811883a 	mov	r8,sp
   4b1a4:	003ee806 	br	4ad48 <__alt_data_end+0xfffd8d48>
   4b1a8:	000b883a 	mov	r5,zero
   4b1ac:	01000044 	movi	r4,1
   4b1b0:	d811883a 	mov	r8,sp
   4b1b4:	003e7c06 	br	4aba8 <__alt_data_end+0xfffd8ba8>
   4b1b8:	50800104 	addi	r2,r10,4
   4b1bc:	5480000b 	ldhu	r18,0(r10)
   4b1c0:	0027883a 	mov	r19,zero
   4b1c4:	483dcf0e 	bge	r9,zero,4a904 <__alt_data_end+0xfffd8904>
   4b1c8:	003fdf06 	br	4b148 <__alt_data_end+0xfffd9148>
   4b1cc:	54800017 	ldw	r18,0(r10)
   4b1d0:	52800104 	addi	r10,r10,4
   4b1d4:	0027883a 	mov	r19,zero
   4b1d8:	da802215 	stw	r10,136(sp)
   4b1dc:	003d5006 	br	4a720 <__alt_data_end+0xfffd8720>
   4b1e0:	50800104 	addi	r2,r10,4
   4b1e4:	5480000b 	ldhu	r18,0(r10)
   4b1e8:	0027883a 	mov	r19,zero
   4b1ec:	483f7d0e 	bge	r9,zero,4afe4 <__alt_data_end+0xfffd8fe4>
   4b1f0:	003ddc06 	br	4a964 <__alt_data_end+0xfffd8964>
   4b1f4:	d8c02215 	stw	r3,136(sp)
   4b1f8:	0039883a 	mov	fp,zero
   4b1fc:	003ddb06 	br	4a96c <__alt_data_end+0xfffd896c>
   4b200:	02800174 	movhi	r10,5
   4b204:	528a8604 	addi	r10,r10,10776
   4b208:	da802415 	stw	r10,144(sp)
   4b20c:	003e8306 	br	4ac1c <__alt_data_end+0xfffd8c1c>
   4b210:	d8801c17 	ldw	r2,112(sp)
   4b214:	dd002117 	ldw	r20,132(sp)
   4b218:	103eb926 	beq	r2,zero,4ad00 <__alt_data_end+0xfffd8d00>
   4b21c:	d9002017 	ldw	r4,128(sp)
   4b220:	d9801a04 	addi	r6,sp,104
   4b224:	a00b883a 	mov	r5,r20
   4b228:	0049e980 	call	49e98 <__sprint_r.part.0>
   4b22c:	003eb406 	br	4ad00 <__alt_data_end+0xfffd8d00>
   4b230:	80c00043 	ldbu	r3,1(r16)
   4b234:	a5000814 	ori	r20,r20,32
   4b238:	84000044 	addi	r16,r16,1
   4b23c:	18c03fcc 	andi	r3,r3,255
   4b240:	18c0201c 	xori	r3,r3,128
   4b244:	18ffe004 	addi	r3,r3,-128
   4b248:	003bb706 	br	4a128 <__alt_data_end+0xfffd8128>
   4b24c:	a809883a 	mov	r4,r21
   4b250:	d8c02a15 	stw	r3,168(sp)
   4b254:	da002b15 	stw	r8,172(sp)
   4b258:	00432600 	call	43260 <strlen>
   4b25c:	d8c02a17 	ldw	r3,168(sp)
   4b260:	1027883a 	mov	r19,r2
   4b264:	df001d83 	ldbu	fp,118(sp)
   4b268:	d8c02215 	stw	r3,136(sp)
   4b26c:	0013883a 	mov	r9,zero
   4b270:	da002b17 	ldw	r8,172(sp)
   4b274:	003c4d06 	br	4a3ac <__alt_data_end+0xfffd83ac>
   4b278:	d9402117 	ldw	r5,132(sp)
   4b27c:	d9002017 	ldw	r4,128(sp)
   4b280:	d9801a04 	addi	r6,sp,104
   4b284:	da402c15 	stw	r9,176(sp)
   4b288:	0049e980 	call	49e98 <__sprint_r.part.0>
   4b28c:	da402c17 	ldw	r9,176(sp)
   4b290:	103e9a1e 	bne	r2,zero,4acfc <__alt_data_end+0xfffd8cfc>
   4b294:	d9401b17 	ldw	r5,108(sp)
   4b298:	d8801c17 	ldw	r2,112(sp)
   4b29c:	d811883a 	mov	r8,sp
   4b2a0:	29000044 	addi	r4,r5,1
   4b2a4:	003e4206 	br	4abb0 <__alt_data_end+0xfffd8bb0>
   4b2a8:	d9401b17 	ldw	r5,108(sp)
   4b2ac:	01000174 	movhi	r4,5
   4b2b0:	210a8a04 	addi	r4,r4,10792
   4b2b4:	d9002415 	stw	r4,144(sp)
   4b2b8:	29400044 	addi	r5,r5,1
   4b2bc:	003c6d06 	br	4a474 <__alt_data_end+0xfffd8474>
   4b2c0:	0039883a 	mov	fp,zero
   4b2c4:	00800084 	movi	r2,2
   4b2c8:	10803fcc 	andi	r2,r2,255
   4b2cc:	01000044 	movi	r4,1
   4b2d0:	11001e26 	beq	r2,r4,4b34c <___vfiprintf_internal_r+0x13a0>
   4b2d4:	01000084 	movi	r4,2
   4b2d8:	11001e1e 	bne	r2,r4,4b354 <___vfiprintf_internal_r+0x13a8>
   4b2dc:	1829883a 	mov	r20,r3
   4b2e0:	003eea06 	br	4ae8c <__alt_data_end+0xfffd8e8c>
   4b2e4:	a007883a 	mov	r3,r20
   4b2e8:	00800044 	movi	r2,1
   4b2ec:	003ff606 	br	4b2c8 <__alt_data_end+0xfffd92c8>
   4b2f0:	00800184 	movi	r2,6
   4b2f4:	1240012e 	bgeu	r2,r9,4b2fc <___vfiprintf_internal_r+0x1350>
   4b2f8:	1013883a 	mov	r9,r2
   4b2fc:	4827883a 	mov	r19,r9
   4b300:	4825883a 	mov	r18,r9
   4b304:	48001516 	blt	r9,zero,4b35c <___vfiprintf_internal_r+0x13b0>
   4b308:	05400174 	movhi	r21,5
   4b30c:	d8c02215 	stw	r3,136(sp)
   4b310:	ad4a2b04 	addi	r21,r21,10412
   4b314:	003d1406 	br	4a768 <__alt_data_end+0xfffd8768>
   4b318:	02800174 	movhi	r10,5
   4b31c:	528a8604 	addi	r10,r10,10776
   4b320:	da802415 	stw	r10,144(sp)
   4b324:	200d883a 	mov	r6,r4
   4b328:	003c9106 	br	4a570 <__alt_data_end+0xfffd8570>
   4b32c:	5021883a 	mov	r16,r10
   4b330:	0013883a 	mov	r9,zero
   4b334:	003b7d06 	br	4a12c <__alt_data_end+0xfffd812c>
   4b338:	4827883a 	mov	r19,r9
   4b33c:	df001d83 	ldbu	fp,118(sp)
   4b340:	d8c02215 	stw	r3,136(sp)
   4b344:	0013883a 	mov	r9,zero
   4b348:	003c1806 	br	4a3ac <__alt_data_end+0xfffd83ac>
   4b34c:	1829883a 	mov	r20,r3
   4b350:	003d1806 	br	4a7b4 <__alt_data_end+0xfffd87b4>
   4b354:	1829883a 	mov	r20,r3
   4b358:	003ccd06 	br	4a690 <__alt_data_end+0xfffd8690>
   4b35c:	0025883a 	mov	r18,zero
   4b360:	003fe906 	br	4b308 <__alt_data_end+0xfffd9308>
   4b364:	d8802217 	ldw	r2,136(sp)
   4b368:	80c00043 	ldbu	r3,1(r16)
   4b36c:	5021883a 	mov	r16,r10
   4b370:	12400017 	ldw	r9,0(r2)
   4b374:	10800104 	addi	r2,r2,4
   4b378:	d8802215 	stw	r2,136(sp)
   4b37c:	483faf0e 	bge	r9,zero,4b23c <__alt_data_end+0xfffd923c>
   4b380:	18c03fcc 	andi	r3,r3,255
   4b384:	18c0201c 	xori	r3,r3,128
   4b388:	027fffc4 	movi	r9,-1
   4b38c:	18ffe004 	addi	r3,r3,-128
   4b390:	003b6506 	br	4a128 <__alt_data_end+0xfffd8128>
   4b394:	d9c01d85 	stb	r7,118(sp)
   4b398:	003ca006 	br	4a61c <__alt_data_end+0xfffd861c>
   4b39c:	d9c01d85 	stb	r7,118(sp)
   4b3a0:	003cad06 	br	4a658 <__alt_data_end+0xfffd8658>
   4b3a4:	d9c01d85 	stb	r7,118(sp)
   4b3a8:	003d7d06 	br	4a9a0 <__alt_data_end+0xfffd89a0>
   4b3ac:	d9c01d85 	stb	r7,118(sp)
   4b3b0:	003d5f06 	br	4a930 <__alt_data_end+0xfffd8930>
   4b3b4:	a080004c 	andi	r2,r20,1
   4b3b8:	0039883a 	mov	fp,zero
   4b3bc:	10000526 	beq	r2,zero,4b3d4 <___vfiprintf_internal_r+0x1428>
   4b3c0:	00800c04 	movi	r2,48
   4b3c4:	d88019c5 	stb	r2,103(sp)
   4b3c8:	dcc02717 	ldw	r19,156(sp)
   4b3cc:	dd4019c4 	addi	r21,sp,103
   4b3d0:	003bf606 	br	4a3ac <__alt_data_end+0xfffd83ac>
   4b3d4:	0027883a 	mov	r19,zero
   4b3d8:	dd401a04 	addi	r21,sp,104
   4b3dc:	003bf306 	br	4a3ac <__alt_data_end+0xfffd83ac>
   4b3e0:	d9c01d85 	stb	r7,118(sp)
   4b3e4:	003dc806 	br	4ab08 <__alt_data_end+0xfffd8b08>
   4b3e8:	d9c01d85 	stb	r7,118(sp)
   4b3ec:	003d3a06 	br	4a8d8 <__alt_data_end+0xfffd88d8>
   4b3f0:	d9c01d85 	stb	r7,118(sp)
   4b3f4:	003d2a06 	br	4a8a0 <__alt_data_end+0xfffd88a0>
   4b3f8:	d9c01d85 	stb	r7,118(sp)
   4b3fc:	003cde06 	br	4a778 <__alt_data_end+0xfffd8778>
   4b400:	d9c01d85 	stb	r7,118(sp)
   4b404:	003cbc06 	br	4a6f8 <__alt_data_end+0xfffd86f8>

0004b408 <__vfiprintf_internal>:
   4b408:	00800174 	movhi	r2,5
   4b40c:	10931604 	addi	r2,r2,19544
   4b410:	300f883a 	mov	r7,r6
   4b414:	280d883a 	mov	r6,r5
   4b418:	200b883a 	mov	r5,r4
   4b41c:	11000017 	ldw	r4,0(r2)
   4b420:	0049fac1 	jmpi	49fac <___vfiprintf_internal_r>

0004b424 <__sbprintf>:
   4b424:	2880030b 	ldhu	r2,12(r5)
   4b428:	2ac01917 	ldw	r11,100(r5)
   4b42c:	2a80038b 	ldhu	r10,14(r5)
   4b430:	2a400717 	ldw	r9,28(r5)
   4b434:	2a000917 	ldw	r8,36(r5)
   4b438:	defee204 	addi	sp,sp,-1144
   4b43c:	00c10004 	movi	r3,1024
   4b440:	dc011a15 	stw	r16,1128(sp)
   4b444:	10bfff4c 	andi	r2,r2,65533
   4b448:	2821883a 	mov	r16,r5
   4b44c:	d8cb883a 	add	r5,sp,r3
   4b450:	dc811c15 	stw	r18,1136(sp)
   4b454:	dc411b15 	stw	r17,1132(sp)
   4b458:	dfc11d15 	stw	ra,1140(sp)
   4b45c:	2025883a 	mov	r18,r4
   4b460:	d881030d 	sth	r2,1036(sp)
   4b464:	dac11915 	stw	r11,1124(sp)
   4b468:	da81038d 	sth	r10,1038(sp)
   4b46c:	da410715 	stw	r9,1052(sp)
   4b470:	da010915 	stw	r8,1060(sp)
   4b474:	dec10015 	stw	sp,1024(sp)
   4b478:	dec10415 	stw	sp,1040(sp)
   4b47c:	d8c10215 	stw	r3,1032(sp)
   4b480:	d8c10515 	stw	r3,1044(sp)
   4b484:	d8010615 	stw	zero,1048(sp)
   4b488:	0049fac0 	call	49fac <___vfiprintf_internal_r>
   4b48c:	1023883a 	mov	r17,r2
   4b490:	10000416 	blt	r2,zero,4b4a4 <__sbprintf+0x80>
   4b494:	d9410004 	addi	r5,sp,1024
   4b498:	9009883a 	mov	r4,r18
   4b49c:	00472c40 	call	472c4 <_fflush_r>
   4b4a0:	10000d1e 	bne	r2,zero,4b4d8 <__sbprintf+0xb4>
   4b4a4:	d881030b 	ldhu	r2,1036(sp)
   4b4a8:	1080100c 	andi	r2,r2,64
   4b4ac:	10000326 	beq	r2,zero,4b4bc <__sbprintf+0x98>
   4b4b0:	8080030b 	ldhu	r2,12(r16)
   4b4b4:	10801014 	ori	r2,r2,64
   4b4b8:	8080030d 	sth	r2,12(r16)
   4b4bc:	8805883a 	mov	r2,r17
   4b4c0:	dfc11d17 	ldw	ra,1140(sp)
   4b4c4:	dc811c17 	ldw	r18,1136(sp)
   4b4c8:	dc411b17 	ldw	r17,1132(sp)
   4b4cc:	dc011a17 	ldw	r16,1128(sp)
   4b4d0:	dec11e04 	addi	sp,sp,1144
   4b4d4:	f800283a 	ret
   4b4d8:	047fffc4 	movi	r17,-1
   4b4dc:	003ff106 	br	4b4a4 <__alt_data_end+0xfffd94a4>

0004b4e0 <_calloc_r>:
   4b4e0:	298b383a 	mul	r5,r5,r6
   4b4e4:	defffe04 	addi	sp,sp,-8
   4b4e8:	dfc00115 	stw	ra,4(sp)
   4b4ec:	dc000015 	stw	r16,0(sp)
   4b4f0:	004227c0 	call	4227c <_malloc_r>
   4b4f4:	10002926 	beq	r2,zero,4b59c <_calloc_r+0xbc>
   4b4f8:	11bfff17 	ldw	r6,-4(r2)
   4b4fc:	1021883a 	mov	r16,r2
   4b500:	00bfff04 	movi	r2,-4
   4b504:	308c703a 	and	r6,r6,r2
   4b508:	00c00904 	movi	r3,36
   4b50c:	308d883a 	add	r6,r6,r2
   4b510:	19801636 	bltu	r3,r6,4b56c <_calloc_r+0x8c>
   4b514:	008004c4 	movi	r2,19
   4b518:	11800b2e 	bgeu	r2,r6,4b548 <_calloc_r+0x68>
   4b51c:	80000015 	stw	zero,0(r16)
   4b520:	80000115 	stw	zero,4(r16)
   4b524:	008006c4 	movi	r2,27
   4b528:	11801a2e 	bgeu	r2,r6,4b594 <_calloc_r+0xb4>
   4b52c:	80000215 	stw	zero,8(r16)
   4b530:	80000315 	stw	zero,12(r16)
   4b534:	30c0151e 	bne	r6,r3,4b58c <_calloc_r+0xac>
   4b538:	80000415 	stw	zero,16(r16)
   4b53c:	80800604 	addi	r2,r16,24
   4b540:	80000515 	stw	zero,20(r16)
   4b544:	00000106 	br	4b54c <_calloc_r+0x6c>
   4b548:	8005883a 	mov	r2,r16
   4b54c:	10000015 	stw	zero,0(r2)
   4b550:	10000115 	stw	zero,4(r2)
   4b554:	10000215 	stw	zero,8(r2)
   4b558:	8005883a 	mov	r2,r16
   4b55c:	dfc00117 	ldw	ra,4(sp)
   4b560:	dc000017 	ldw	r16,0(sp)
   4b564:	dec00204 	addi	sp,sp,8
   4b568:	f800283a 	ret
   4b56c:	000b883a 	mov	r5,zero
   4b570:	8009883a 	mov	r4,r16
   4b574:	0042a880 	call	42a88 <memset>
   4b578:	8005883a 	mov	r2,r16
   4b57c:	dfc00117 	ldw	ra,4(sp)
   4b580:	dc000017 	ldw	r16,0(sp)
   4b584:	dec00204 	addi	sp,sp,8
   4b588:	f800283a 	ret
   4b58c:	80800404 	addi	r2,r16,16
   4b590:	003fee06 	br	4b54c <__alt_data_end+0xfffd954c>
   4b594:	80800204 	addi	r2,r16,8
   4b598:	003fec06 	br	4b54c <__alt_data_end+0xfffd954c>
   4b59c:	0005883a 	mov	r2,zero
   4b5a0:	003fee06 	br	4b55c <__alt_data_end+0xfffd955c>

0004b5a4 <_fclose_r>:
   4b5a4:	28003926 	beq	r5,zero,4b68c <_fclose_r+0xe8>
   4b5a8:	defffc04 	addi	sp,sp,-16
   4b5ac:	dc400115 	stw	r17,4(sp)
   4b5b0:	dc000015 	stw	r16,0(sp)
   4b5b4:	dfc00315 	stw	ra,12(sp)
   4b5b8:	dc800215 	stw	r18,8(sp)
   4b5bc:	2023883a 	mov	r17,r4
   4b5c0:	2821883a 	mov	r16,r5
   4b5c4:	20000226 	beq	r4,zero,4b5d0 <_fclose_r+0x2c>
   4b5c8:	20800e17 	ldw	r2,56(r4)
   4b5cc:	10002726 	beq	r2,zero,4b66c <_fclose_r+0xc8>
   4b5d0:	8080030f 	ldh	r2,12(r16)
   4b5d4:	1000071e 	bne	r2,zero,4b5f4 <_fclose_r+0x50>
   4b5d8:	0005883a 	mov	r2,zero
   4b5dc:	dfc00317 	ldw	ra,12(sp)
   4b5e0:	dc800217 	ldw	r18,8(sp)
   4b5e4:	dc400117 	ldw	r17,4(sp)
   4b5e8:	dc000017 	ldw	r16,0(sp)
   4b5ec:	dec00404 	addi	sp,sp,16
   4b5f0:	f800283a 	ret
   4b5f4:	800b883a 	mov	r5,r16
   4b5f8:	8809883a 	mov	r4,r17
   4b5fc:	00470a80 	call	470a8 <__sflush_r>
   4b600:	1025883a 	mov	r18,r2
   4b604:	80800b17 	ldw	r2,44(r16)
   4b608:	10000426 	beq	r2,zero,4b61c <_fclose_r+0x78>
   4b60c:	81400717 	ldw	r5,28(r16)
   4b610:	8809883a 	mov	r4,r17
   4b614:	103ee83a 	callr	r2
   4b618:	10001616 	blt	r2,zero,4b674 <_fclose_r+0xd0>
   4b61c:	8080030b 	ldhu	r2,12(r16)
   4b620:	1080200c 	andi	r2,r2,128
   4b624:	1000151e 	bne	r2,zero,4b67c <_fclose_r+0xd8>
   4b628:	81400c17 	ldw	r5,48(r16)
   4b62c:	28000526 	beq	r5,zero,4b644 <_fclose_r+0xa0>
   4b630:	80801004 	addi	r2,r16,64
   4b634:	28800226 	beq	r5,r2,4b640 <_fclose_r+0x9c>
   4b638:	8809883a 	mov	r4,r17
   4b63c:	00478c00 	call	478c0 <_free_r>
   4b640:	80000c15 	stw	zero,48(r16)
   4b644:	81401117 	ldw	r5,68(r16)
   4b648:	28000326 	beq	r5,zero,4b658 <_fclose_r+0xb4>
   4b64c:	8809883a 	mov	r4,r17
   4b650:	00478c00 	call	478c0 <_free_r>
   4b654:	80001115 	stw	zero,68(r16)
   4b658:	00476b00 	call	476b0 <__sfp_lock_acquire>
   4b65c:	8000030d 	sth	zero,12(r16)
   4b660:	00476b40 	call	476b4 <__sfp_lock_release>
   4b664:	9005883a 	mov	r2,r18
   4b668:	003fdc06 	br	4b5dc <__alt_data_end+0xfffd95dc>
   4b66c:	00476a00 	call	476a0 <__sinit>
   4b670:	003fd706 	br	4b5d0 <__alt_data_end+0xfffd95d0>
   4b674:	04bfffc4 	movi	r18,-1
   4b678:	003fe806 	br	4b61c <__alt_data_end+0xfffd961c>
   4b67c:	81400417 	ldw	r5,16(r16)
   4b680:	8809883a 	mov	r4,r17
   4b684:	00478c00 	call	478c0 <_free_r>
   4b688:	003fe706 	br	4b628 <__alt_data_end+0xfffd9628>
   4b68c:	0005883a 	mov	r2,zero
   4b690:	f800283a 	ret

0004b694 <fclose>:
   4b694:	00800174 	movhi	r2,5
   4b698:	10931604 	addi	r2,r2,19544
   4b69c:	200b883a 	mov	r5,r4
   4b6a0:	11000017 	ldw	r4,0(r2)
   4b6a4:	004b5a41 	jmpi	4b5a4 <_fclose_r>

0004b6a8 <__fputwc>:
   4b6a8:	defff804 	addi	sp,sp,-32
   4b6ac:	dcc00415 	stw	r19,16(sp)
   4b6b0:	dc800315 	stw	r18,12(sp)
   4b6b4:	dc000115 	stw	r16,4(sp)
   4b6b8:	dfc00715 	stw	ra,28(sp)
   4b6bc:	dd400615 	stw	r21,24(sp)
   4b6c0:	dd000515 	stw	r20,20(sp)
   4b6c4:	dc400215 	stw	r17,8(sp)
   4b6c8:	2027883a 	mov	r19,r4
   4b6cc:	2825883a 	mov	r18,r5
   4b6d0:	3021883a 	mov	r16,r6
   4b6d4:	004834c0 	call	4834c <__locale_mb_cur_max>
   4b6d8:	00c00044 	movi	r3,1
   4b6dc:	10c03e26 	beq	r2,r3,4b7d8 <__fputwc+0x130>
   4b6e0:	81c01704 	addi	r7,r16,92
   4b6e4:	900d883a 	mov	r6,r18
   4b6e8:	d80b883a 	mov	r5,sp
   4b6ec:	9809883a 	mov	r4,r19
   4b6f0:	004ba080 	call	4ba08 <_wcrtomb_r>
   4b6f4:	1029883a 	mov	r20,r2
   4b6f8:	00bfffc4 	movi	r2,-1
   4b6fc:	a0802026 	beq	r20,r2,4b780 <__fputwc+0xd8>
   4b700:	d9400003 	ldbu	r5,0(sp)
   4b704:	a0001c26 	beq	r20,zero,4b778 <__fputwc+0xd0>
   4b708:	0023883a 	mov	r17,zero
   4b70c:	05400284 	movi	r21,10
   4b710:	00000906 	br	4b738 <__fputwc+0x90>
   4b714:	80800017 	ldw	r2,0(r16)
   4b718:	11400005 	stb	r5,0(r2)
   4b71c:	80c00017 	ldw	r3,0(r16)
   4b720:	18c00044 	addi	r3,r3,1
   4b724:	80c00015 	stw	r3,0(r16)
   4b728:	8c400044 	addi	r17,r17,1
   4b72c:	dc45883a 	add	r2,sp,r17
   4b730:	8d00112e 	bgeu	r17,r20,4b778 <__fputwc+0xd0>
   4b734:	11400003 	ldbu	r5,0(r2)
   4b738:	80c00217 	ldw	r3,8(r16)
   4b73c:	18ffffc4 	addi	r3,r3,-1
   4b740:	80c00215 	stw	r3,8(r16)
   4b744:	183ff30e 	bge	r3,zero,4b714 <__alt_data_end+0xfffd9714>
   4b748:	80800617 	ldw	r2,24(r16)
   4b74c:	18801916 	blt	r3,r2,4b7b4 <__fputwc+0x10c>
   4b750:	80800017 	ldw	r2,0(r16)
   4b754:	11400005 	stb	r5,0(r2)
   4b758:	80800017 	ldw	r2,0(r16)
   4b75c:	10c00003 	ldbu	r3,0(r2)
   4b760:	10800044 	addi	r2,r2,1
   4b764:	1d402326 	beq	r3,r21,4b7f4 <__fputwc+0x14c>
   4b768:	80800015 	stw	r2,0(r16)
   4b76c:	8c400044 	addi	r17,r17,1
   4b770:	dc45883a 	add	r2,sp,r17
   4b774:	8d3fef36 	bltu	r17,r20,4b734 <__alt_data_end+0xfffd9734>
   4b778:	9005883a 	mov	r2,r18
   4b77c:	00000406 	br	4b790 <__fputwc+0xe8>
   4b780:	80c0030b 	ldhu	r3,12(r16)
   4b784:	a005883a 	mov	r2,r20
   4b788:	18c01014 	ori	r3,r3,64
   4b78c:	80c0030d 	sth	r3,12(r16)
   4b790:	dfc00717 	ldw	ra,28(sp)
   4b794:	dd400617 	ldw	r21,24(sp)
   4b798:	dd000517 	ldw	r20,20(sp)
   4b79c:	dcc00417 	ldw	r19,16(sp)
   4b7a0:	dc800317 	ldw	r18,12(sp)
   4b7a4:	dc400217 	ldw	r17,8(sp)
   4b7a8:	dc000117 	ldw	r16,4(sp)
   4b7ac:	dec00804 	addi	sp,sp,32
   4b7b0:	f800283a 	ret
   4b7b4:	800d883a 	mov	r6,r16
   4b7b8:	29403fcc 	andi	r5,r5,255
   4b7bc:	9809883a 	mov	r4,r19
   4b7c0:	004b8b00 	call	4b8b0 <__swbuf_r>
   4b7c4:	10bfffe0 	cmpeqi	r2,r2,-1
   4b7c8:	10803fcc 	andi	r2,r2,255
   4b7cc:	103fd626 	beq	r2,zero,4b728 <__alt_data_end+0xfffd9728>
   4b7d0:	00bfffc4 	movi	r2,-1
   4b7d4:	003fee06 	br	4b790 <__alt_data_end+0xfffd9790>
   4b7d8:	90ffffc4 	addi	r3,r18,-1
   4b7dc:	01003f84 	movi	r4,254
   4b7e0:	20ffbf36 	bltu	r4,r3,4b6e0 <__alt_data_end+0xfffd96e0>
   4b7e4:	900b883a 	mov	r5,r18
   4b7e8:	dc800005 	stb	r18,0(sp)
   4b7ec:	1029883a 	mov	r20,r2
   4b7f0:	003fc506 	br	4b708 <__alt_data_end+0xfffd9708>
   4b7f4:	800d883a 	mov	r6,r16
   4b7f8:	a80b883a 	mov	r5,r21
   4b7fc:	9809883a 	mov	r4,r19
   4b800:	004b8b00 	call	4b8b0 <__swbuf_r>
   4b804:	10bfffe0 	cmpeqi	r2,r2,-1
   4b808:	003fef06 	br	4b7c8 <__alt_data_end+0xfffd97c8>

0004b80c <_fputwc_r>:
   4b80c:	3080030b 	ldhu	r2,12(r6)
   4b810:	10c8000c 	andi	r3,r2,8192
   4b814:	1800051e 	bne	r3,zero,4b82c <_fputwc_r+0x20>
   4b818:	30c01917 	ldw	r3,100(r6)
   4b81c:	10880014 	ori	r2,r2,8192
   4b820:	3080030d 	sth	r2,12(r6)
   4b824:	18880014 	ori	r2,r3,8192
   4b828:	30801915 	stw	r2,100(r6)
   4b82c:	004b6a81 	jmpi	4b6a8 <__fputwc>

0004b830 <fputwc>:
   4b830:	00800174 	movhi	r2,5
   4b834:	defffc04 	addi	sp,sp,-16
   4b838:	10931604 	addi	r2,r2,19544
   4b83c:	dc000115 	stw	r16,4(sp)
   4b840:	14000017 	ldw	r16,0(r2)
   4b844:	dc400215 	stw	r17,8(sp)
   4b848:	dfc00315 	stw	ra,12(sp)
   4b84c:	2023883a 	mov	r17,r4
   4b850:	80000226 	beq	r16,zero,4b85c <fputwc+0x2c>
   4b854:	80800e17 	ldw	r2,56(r16)
   4b858:	10001026 	beq	r2,zero,4b89c <fputwc+0x6c>
   4b85c:	2880030b 	ldhu	r2,12(r5)
   4b860:	10c8000c 	andi	r3,r2,8192
   4b864:	1800051e 	bne	r3,zero,4b87c <fputwc+0x4c>
   4b868:	28c01917 	ldw	r3,100(r5)
   4b86c:	10880014 	ori	r2,r2,8192
   4b870:	2880030d 	sth	r2,12(r5)
   4b874:	18880014 	ori	r2,r3,8192
   4b878:	28801915 	stw	r2,100(r5)
   4b87c:	280d883a 	mov	r6,r5
   4b880:	8009883a 	mov	r4,r16
   4b884:	880b883a 	mov	r5,r17
   4b888:	dfc00317 	ldw	ra,12(sp)
   4b88c:	dc400217 	ldw	r17,8(sp)
   4b890:	dc000117 	ldw	r16,4(sp)
   4b894:	dec00404 	addi	sp,sp,16
   4b898:	004b6a81 	jmpi	4b6a8 <__fputwc>
   4b89c:	8009883a 	mov	r4,r16
   4b8a0:	d9400015 	stw	r5,0(sp)
   4b8a4:	00476a00 	call	476a0 <__sinit>
   4b8a8:	d9400017 	ldw	r5,0(sp)
   4b8ac:	003feb06 	br	4b85c <__alt_data_end+0xfffd985c>

0004b8b0 <__swbuf_r>:
   4b8b0:	defffb04 	addi	sp,sp,-20
   4b8b4:	dcc00315 	stw	r19,12(sp)
   4b8b8:	dc800215 	stw	r18,8(sp)
   4b8bc:	dc000015 	stw	r16,0(sp)
   4b8c0:	dfc00415 	stw	ra,16(sp)
   4b8c4:	dc400115 	stw	r17,4(sp)
   4b8c8:	2025883a 	mov	r18,r4
   4b8cc:	2827883a 	mov	r19,r5
   4b8d0:	3021883a 	mov	r16,r6
   4b8d4:	20000226 	beq	r4,zero,4b8e0 <__swbuf_r+0x30>
   4b8d8:	20800e17 	ldw	r2,56(r4)
   4b8dc:	10004226 	beq	r2,zero,4b9e8 <__swbuf_r+0x138>
   4b8e0:	80800617 	ldw	r2,24(r16)
   4b8e4:	8100030b 	ldhu	r4,12(r16)
   4b8e8:	80800215 	stw	r2,8(r16)
   4b8ec:	2080020c 	andi	r2,r4,8
   4b8f0:	10003626 	beq	r2,zero,4b9cc <__swbuf_r+0x11c>
   4b8f4:	80c00417 	ldw	r3,16(r16)
   4b8f8:	18003426 	beq	r3,zero,4b9cc <__swbuf_r+0x11c>
   4b8fc:	2088000c 	andi	r2,r4,8192
   4b900:	9c403fcc 	andi	r17,r19,255
   4b904:	10001a26 	beq	r2,zero,4b970 <__swbuf_r+0xc0>
   4b908:	80800017 	ldw	r2,0(r16)
   4b90c:	81000517 	ldw	r4,20(r16)
   4b910:	10c7c83a 	sub	r3,r2,r3
   4b914:	1900200e 	bge	r3,r4,4b998 <__swbuf_r+0xe8>
   4b918:	18c00044 	addi	r3,r3,1
   4b91c:	81000217 	ldw	r4,8(r16)
   4b920:	11400044 	addi	r5,r2,1
   4b924:	81400015 	stw	r5,0(r16)
   4b928:	213fffc4 	addi	r4,r4,-1
   4b92c:	81000215 	stw	r4,8(r16)
   4b930:	14c00005 	stb	r19,0(r2)
   4b934:	80800517 	ldw	r2,20(r16)
   4b938:	10c01e26 	beq	r2,r3,4b9b4 <__swbuf_r+0x104>
   4b93c:	8080030b 	ldhu	r2,12(r16)
   4b940:	1080004c 	andi	r2,r2,1
   4b944:	10000226 	beq	r2,zero,4b950 <__swbuf_r+0xa0>
   4b948:	00800284 	movi	r2,10
   4b94c:	88801926 	beq	r17,r2,4b9b4 <__swbuf_r+0x104>
   4b950:	8805883a 	mov	r2,r17
   4b954:	dfc00417 	ldw	ra,16(sp)
   4b958:	dcc00317 	ldw	r19,12(sp)
   4b95c:	dc800217 	ldw	r18,8(sp)
   4b960:	dc400117 	ldw	r17,4(sp)
   4b964:	dc000017 	ldw	r16,0(sp)
   4b968:	dec00504 	addi	sp,sp,20
   4b96c:	f800283a 	ret
   4b970:	81401917 	ldw	r5,100(r16)
   4b974:	00b7ffc4 	movi	r2,-8193
   4b978:	21080014 	ori	r4,r4,8192
   4b97c:	2884703a 	and	r2,r5,r2
   4b980:	80801915 	stw	r2,100(r16)
   4b984:	80800017 	ldw	r2,0(r16)
   4b988:	8100030d 	sth	r4,12(r16)
   4b98c:	81000517 	ldw	r4,20(r16)
   4b990:	10c7c83a 	sub	r3,r2,r3
   4b994:	193fe016 	blt	r3,r4,4b918 <__alt_data_end+0xfffd9918>
   4b998:	800b883a 	mov	r5,r16
   4b99c:	9009883a 	mov	r4,r18
   4b9a0:	00472c40 	call	472c4 <_fflush_r>
   4b9a4:	1000071e 	bne	r2,zero,4b9c4 <__swbuf_r+0x114>
   4b9a8:	80800017 	ldw	r2,0(r16)
   4b9ac:	00c00044 	movi	r3,1
   4b9b0:	003fda06 	br	4b91c <__alt_data_end+0xfffd991c>
   4b9b4:	800b883a 	mov	r5,r16
   4b9b8:	9009883a 	mov	r4,r18
   4b9bc:	00472c40 	call	472c4 <_fflush_r>
   4b9c0:	103fe326 	beq	r2,zero,4b950 <__alt_data_end+0xfffd9950>
   4b9c4:	00bfffc4 	movi	r2,-1
   4b9c8:	003fe206 	br	4b954 <__alt_data_end+0xfffd9954>
   4b9cc:	800b883a 	mov	r5,r16
   4b9d0:	9009883a 	mov	r4,r18
   4b9d4:	00456780 	call	45678 <__swsetup_r>
   4b9d8:	103ffa1e 	bne	r2,zero,4b9c4 <__alt_data_end+0xfffd99c4>
   4b9dc:	8100030b 	ldhu	r4,12(r16)
   4b9e0:	80c00417 	ldw	r3,16(r16)
   4b9e4:	003fc506 	br	4b8fc <__alt_data_end+0xfffd98fc>
   4b9e8:	00476a00 	call	476a0 <__sinit>
   4b9ec:	003fbc06 	br	4b8e0 <__alt_data_end+0xfffd98e0>

0004b9f0 <__swbuf>:
   4b9f0:	00800174 	movhi	r2,5
   4b9f4:	10931604 	addi	r2,r2,19544
   4b9f8:	280d883a 	mov	r6,r5
   4b9fc:	200b883a 	mov	r5,r4
   4ba00:	11000017 	ldw	r4,0(r2)
   4ba04:	004b8b01 	jmpi	4b8b0 <__swbuf_r>

0004ba08 <_wcrtomb_r>:
   4ba08:	defff604 	addi	sp,sp,-40
   4ba0c:	00800174 	movhi	r2,5
   4ba10:	dc800815 	stw	r18,32(sp)
   4ba14:	dc400715 	stw	r17,28(sp)
   4ba18:	dc000615 	stw	r16,24(sp)
   4ba1c:	10931a04 	addi	r2,r2,19560
   4ba20:	dfc00915 	stw	ra,36(sp)
   4ba24:	2021883a 	mov	r16,r4
   4ba28:	3823883a 	mov	r17,r7
   4ba2c:	14800017 	ldw	r18,0(r2)
   4ba30:	28001426 	beq	r5,zero,4ba84 <_wcrtomb_r+0x7c>
   4ba34:	d9400415 	stw	r5,16(sp)
   4ba38:	d9800515 	stw	r6,20(sp)
   4ba3c:	00483400 	call	48340 <__locale_charset>
   4ba40:	d9800517 	ldw	r6,20(sp)
   4ba44:	d9400417 	ldw	r5,16(sp)
   4ba48:	100f883a 	mov	r7,r2
   4ba4c:	dc400015 	stw	r17,0(sp)
   4ba50:	8009883a 	mov	r4,r16
   4ba54:	903ee83a 	callr	r18
   4ba58:	00ffffc4 	movi	r3,-1
   4ba5c:	10c0031e 	bne	r2,r3,4ba6c <_wcrtomb_r+0x64>
   4ba60:	88000015 	stw	zero,0(r17)
   4ba64:	00c02284 	movi	r3,138
   4ba68:	80c00015 	stw	r3,0(r16)
   4ba6c:	dfc00917 	ldw	ra,36(sp)
   4ba70:	dc800817 	ldw	r18,32(sp)
   4ba74:	dc400717 	ldw	r17,28(sp)
   4ba78:	dc000617 	ldw	r16,24(sp)
   4ba7c:	dec00a04 	addi	sp,sp,40
   4ba80:	f800283a 	ret
   4ba84:	00483400 	call	48340 <__locale_charset>
   4ba88:	100f883a 	mov	r7,r2
   4ba8c:	dc400015 	stw	r17,0(sp)
   4ba90:	000d883a 	mov	r6,zero
   4ba94:	d9400104 	addi	r5,sp,4
   4ba98:	8009883a 	mov	r4,r16
   4ba9c:	903ee83a 	callr	r18
   4baa0:	003fed06 	br	4ba58 <__alt_data_end+0xfffd9a58>

0004baa4 <wcrtomb>:
   4baa4:	defff604 	addi	sp,sp,-40
   4baa8:	00800174 	movhi	r2,5
   4baac:	dc800615 	stw	r18,24(sp)
   4bab0:	dc400515 	stw	r17,20(sp)
   4bab4:	10931604 	addi	r2,r2,19544
   4bab8:	dfc00915 	stw	ra,36(sp)
   4babc:	dd000815 	stw	r20,32(sp)
   4bac0:	dcc00715 	stw	r19,28(sp)
   4bac4:	dc000415 	stw	r16,16(sp)
   4bac8:	3025883a 	mov	r18,r6
   4bacc:	14400017 	ldw	r17,0(r2)
   4bad0:	20001926 	beq	r4,zero,4bb38 <wcrtomb+0x94>
   4bad4:	00800174 	movhi	r2,5
   4bad8:	10931a04 	addi	r2,r2,19560
   4badc:	15000017 	ldw	r20,0(r2)
   4bae0:	2021883a 	mov	r16,r4
   4bae4:	2827883a 	mov	r19,r5
   4bae8:	00483400 	call	48340 <__locale_charset>
   4baec:	100f883a 	mov	r7,r2
   4baf0:	dc800015 	stw	r18,0(sp)
   4baf4:	980d883a 	mov	r6,r19
   4baf8:	800b883a 	mov	r5,r16
   4bafc:	8809883a 	mov	r4,r17
   4bb00:	a03ee83a 	callr	r20
   4bb04:	00ffffc4 	movi	r3,-1
   4bb08:	10c0031e 	bne	r2,r3,4bb18 <wcrtomb+0x74>
   4bb0c:	90000015 	stw	zero,0(r18)
   4bb10:	00c02284 	movi	r3,138
   4bb14:	88c00015 	stw	r3,0(r17)
   4bb18:	dfc00917 	ldw	ra,36(sp)
   4bb1c:	dd000817 	ldw	r20,32(sp)
   4bb20:	dcc00717 	ldw	r19,28(sp)
   4bb24:	dc800617 	ldw	r18,24(sp)
   4bb28:	dc400517 	ldw	r17,20(sp)
   4bb2c:	dc000417 	ldw	r16,16(sp)
   4bb30:	dec00a04 	addi	sp,sp,40
   4bb34:	f800283a 	ret
   4bb38:	00800174 	movhi	r2,5
   4bb3c:	10931a04 	addi	r2,r2,19560
   4bb40:	14000017 	ldw	r16,0(r2)
   4bb44:	00483400 	call	48340 <__locale_charset>
   4bb48:	100f883a 	mov	r7,r2
   4bb4c:	dc800015 	stw	r18,0(sp)
   4bb50:	000d883a 	mov	r6,zero
   4bb54:	d9400104 	addi	r5,sp,4
   4bb58:	8809883a 	mov	r4,r17
   4bb5c:	803ee83a 	callr	r16
   4bb60:	003fe806 	br	4bb04 <__alt_data_end+0xfffd9b04>

0004bb64 <__ascii_wctomb>:
   4bb64:	28000526 	beq	r5,zero,4bb7c <__ascii_wctomb+0x18>
   4bb68:	00803fc4 	movi	r2,255
   4bb6c:	11800536 	bltu	r2,r6,4bb84 <__ascii_wctomb+0x20>
   4bb70:	29800005 	stb	r6,0(r5)
   4bb74:	00800044 	movi	r2,1
   4bb78:	f800283a 	ret
   4bb7c:	0005883a 	mov	r2,zero
   4bb80:	f800283a 	ret
   4bb84:	00802284 	movi	r2,138
   4bb88:	20800015 	stw	r2,0(r4)
   4bb8c:	00bfffc4 	movi	r2,-1
   4bb90:	f800283a 	ret

0004bb94 <_wctomb_r>:
   4bb94:	00800174 	movhi	r2,5
   4bb98:	defff904 	addi	sp,sp,-28
   4bb9c:	10931a04 	addi	r2,r2,19560
   4bba0:	dfc00615 	stw	ra,24(sp)
   4bba4:	dc400515 	stw	r17,20(sp)
   4bba8:	dc000415 	stw	r16,16(sp)
   4bbac:	3823883a 	mov	r17,r7
   4bbb0:	14000017 	ldw	r16,0(r2)
   4bbb4:	d9000115 	stw	r4,4(sp)
   4bbb8:	d9400215 	stw	r5,8(sp)
   4bbbc:	d9800315 	stw	r6,12(sp)
   4bbc0:	00483400 	call	48340 <__locale_charset>
   4bbc4:	d9800317 	ldw	r6,12(sp)
   4bbc8:	d9400217 	ldw	r5,8(sp)
   4bbcc:	d9000117 	ldw	r4,4(sp)
   4bbd0:	100f883a 	mov	r7,r2
   4bbd4:	dc400015 	stw	r17,0(sp)
   4bbd8:	803ee83a 	callr	r16
   4bbdc:	dfc00617 	ldw	ra,24(sp)
   4bbe0:	dc400517 	ldw	r17,20(sp)
   4bbe4:	dc000417 	ldw	r16,16(sp)
   4bbe8:	dec00704 	addi	sp,sp,28
   4bbec:	f800283a 	ret

0004bbf0 <__muldi3>:
   4bbf0:	223fffcc 	andi	r8,r4,65535
   4bbf4:	2006d43a 	srli	r3,r4,16
   4bbf8:	32bfffcc 	andi	r10,r6,65535
   4bbfc:	3012d43a 	srli	r9,r6,16
   4bc00:	4297383a 	mul	r11,r8,r10
   4bc04:	1a95383a 	mul	r10,r3,r10
   4bc08:	4251383a 	mul	r8,r8,r9
   4bc0c:	5804d43a 	srli	r2,r11,16
   4bc10:	4291883a 	add	r8,r8,r10
   4bc14:	1205883a 	add	r2,r2,r8
   4bc18:	1a51383a 	mul	r8,r3,r9
   4bc1c:	1280022e 	bgeu	r2,r10,4bc28 <__muldi3+0x38>
   4bc20:	00c00074 	movhi	r3,1
   4bc24:	40d1883a 	add	r8,r8,r3
   4bc28:	1006d43a 	srli	r3,r2,16
   4bc2c:	21cf383a 	mul	r7,r4,r7
   4bc30:	314b383a 	mul	r5,r6,r5
   4bc34:	1004943a 	slli	r2,r2,16
   4bc38:	1a11883a 	add	r8,r3,r8
   4bc3c:	5affffcc 	andi	r11,r11,65535
   4bc40:	3947883a 	add	r3,r7,r5
   4bc44:	12c5883a 	add	r2,r2,r11
   4bc48:	1a07883a 	add	r3,r3,r8
   4bc4c:	f800283a 	ret

0004bc50 <__udivdi3>:
   4bc50:	defff504 	addi	sp,sp,-44
   4bc54:	dcc00415 	stw	r19,16(sp)
   4bc58:	dc000115 	stw	r16,4(sp)
   4bc5c:	dfc00a15 	stw	ra,40(sp)
   4bc60:	df000915 	stw	fp,36(sp)
   4bc64:	ddc00815 	stw	r23,32(sp)
   4bc68:	dd800715 	stw	r22,28(sp)
   4bc6c:	dd400615 	stw	r21,24(sp)
   4bc70:	dd000515 	stw	r20,20(sp)
   4bc74:	dc800315 	stw	r18,12(sp)
   4bc78:	dc400215 	stw	r17,8(sp)
   4bc7c:	2027883a 	mov	r19,r4
   4bc80:	2821883a 	mov	r16,r5
   4bc84:	3800411e 	bne	r7,zero,4bd8c <__udivdi3+0x13c>
   4bc88:	3023883a 	mov	r17,r6
   4bc8c:	2025883a 	mov	r18,r4
   4bc90:	2980522e 	bgeu	r5,r6,4bddc <__udivdi3+0x18c>
   4bc94:	00bfffd4 	movui	r2,65535
   4bc98:	282d883a 	mov	r22,r5
   4bc9c:	1180a836 	bltu	r2,r6,4bf40 <__udivdi3+0x2f0>
   4bca0:	00803fc4 	movi	r2,255
   4bca4:	1185803a 	cmpltu	r2,r2,r6
   4bca8:	100490fa 	slli	r2,r2,3
   4bcac:	3086d83a 	srl	r3,r6,r2
   4bcb0:	01000174 	movhi	r4,5
   4bcb4:	210a8e04 	addi	r4,r4,10808
   4bcb8:	20c7883a 	add	r3,r4,r3
   4bcbc:	18c00003 	ldbu	r3,0(r3)
   4bcc0:	1885883a 	add	r2,r3,r2
   4bcc4:	00c00804 	movi	r3,32
   4bcc8:	1887c83a 	sub	r3,r3,r2
   4bccc:	18000526 	beq	r3,zero,4bce4 <__udivdi3+0x94>
   4bcd0:	80e0983a 	sll	r16,r16,r3
   4bcd4:	9884d83a 	srl	r2,r19,r2
   4bcd8:	30e2983a 	sll	r17,r6,r3
   4bcdc:	98e4983a 	sll	r18,r19,r3
   4bce0:	142cb03a 	or	r22,r2,r16
   4bce4:	882ad43a 	srli	r21,r17,16
   4bce8:	b009883a 	mov	r4,r22
   4bcec:	8d3fffcc 	andi	r20,r17,65535
   4bcf0:	a80b883a 	mov	r5,r21
   4bcf4:	00419340 	call	41934 <__umodsi3>
   4bcf8:	b009883a 	mov	r4,r22
   4bcfc:	a80b883a 	mov	r5,r21
   4bd00:	1027883a 	mov	r19,r2
   4bd04:	00418d00 	call	418d0 <__udivsi3>
   4bd08:	102d883a 	mov	r22,r2
   4bd0c:	9826943a 	slli	r19,r19,16
   4bd10:	9004d43a 	srli	r2,r18,16
   4bd14:	a5a1383a 	mul	r16,r20,r22
   4bd18:	14c4b03a 	or	r2,r2,r19
   4bd1c:	1400052e 	bgeu	r2,r16,4bd34 <__udivdi3+0xe4>
   4bd20:	1445883a 	add	r2,r2,r17
   4bd24:	b0ffffc4 	addi	r3,r22,-1
   4bd28:	14400136 	bltu	r2,r17,4bd30 <__udivdi3+0xe0>
   4bd2c:	14012336 	bltu	r2,r16,4c1bc <__udivdi3+0x56c>
   4bd30:	182d883a 	mov	r22,r3
   4bd34:	1421c83a 	sub	r16,r2,r16
   4bd38:	a80b883a 	mov	r5,r21
   4bd3c:	8009883a 	mov	r4,r16
   4bd40:	00419340 	call	41934 <__umodsi3>
   4bd44:	1027883a 	mov	r19,r2
   4bd48:	a80b883a 	mov	r5,r21
   4bd4c:	8009883a 	mov	r4,r16
   4bd50:	00418d00 	call	418d0 <__udivsi3>
   4bd54:	9826943a 	slli	r19,r19,16
   4bd58:	a0a9383a 	mul	r20,r20,r2
   4bd5c:	94bfffcc 	andi	r18,r18,65535
   4bd60:	94e4b03a 	or	r18,r18,r19
   4bd64:	9500052e 	bgeu	r18,r20,4bd7c <__udivdi3+0x12c>
   4bd68:	8ca5883a 	add	r18,r17,r18
   4bd6c:	10ffffc4 	addi	r3,r2,-1
   4bd70:	9440f136 	bltu	r18,r17,4c138 <__udivdi3+0x4e8>
   4bd74:	9500f02e 	bgeu	r18,r20,4c138 <__udivdi3+0x4e8>
   4bd78:	10bfff84 	addi	r2,r2,-2
   4bd7c:	b00c943a 	slli	r6,r22,16
   4bd80:	0007883a 	mov	r3,zero
   4bd84:	3084b03a 	or	r2,r6,r2
   4bd88:	00005906 	br	4bef0 <__udivdi3+0x2a0>
   4bd8c:	29c05636 	bltu	r5,r7,4bee8 <__udivdi3+0x298>
   4bd90:	00bfffd4 	movui	r2,65535
   4bd94:	11c0622e 	bgeu	r2,r7,4bf20 <__udivdi3+0x2d0>
   4bd98:	00804034 	movhi	r2,256
   4bd9c:	10bfffc4 	addi	r2,r2,-1
   4bda0:	11c0ee36 	bltu	r2,r7,4c15c <__udivdi3+0x50c>
   4bda4:	00800404 	movi	r2,16
   4bda8:	3886d83a 	srl	r3,r7,r2
   4bdac:	01000174 	movhi	r4,5
   4bdb0:	210a8e04 	addi	r4,r4,10808
   4bdb4:	20c7883a 	add	r3,r4,r3
   4bdb8:	18c00003 	ldbu	r3,0(r3)
   4bdbc:	05400804 	movi	r21,32
   4bdc0:	1885883a 	add	r2,r3,r2
   4bdc4:	a8abc83a 	sub	r21,r21,r2
   4bdc8:	a800621e 	bne	r21,zero,4bf54 <__udivdi3+0x304>
   4bdcc:	3c00e936 	bltu	r7,r16,4c174 <__udivdi3+0x524>
   4bdd0:	9985403a 	cmpgeu	r2,r19,r6
   4bdd4:	0007883a 	mov	r3,zero
   4bdd8:	00004506 	br	4bef0 <__udivdi3+0x2a0>
   4bddc:	3000041e 	bne	r6,zero,4bdf0 <__udivdi3+0x1a0>
   4bde0:	000b883a 	mov	r5,zero
   4bde4:	01000044 	movi	r4,1
   4bde8:	00418d00 	call	418d0 <__udivsi3>
   4bdec:	1023883a 	mov	r17,r2
   4bdf0:	00bfffd4 	movui	r2,65535
   4bdf4:	14404e2e 	bgeu	r2,r17,4bf30 <__udivdi3+0x2e0>
   4bdf8:	00804034 	movhi	r2,256
   4bdfc:	10bfffc4 	addi	r2,r2,-1
   4be00:	1440d836 	bltu	r2,r17,4c164 <__udivdi3+0x514>
   4be04:	00800404 	movi	r2,16
   4be08:	8886d83a 	srl	r3,r17,r2
   4be0c:	01000174 	movhi	r4,5
   4be10:	210a8e04 	addi	r4,r4,10808
   4be14:	20c7883a 	add	r3,r4,r3
   4be18:	18c00003 	ldbu	r3,0(r3)
   4be1c:	1885883a 	add	r2,r3,r2
   4be20:	00c00804 	movi	r3,32
   4be24:	1887c83a 	sub	r3,r3,r2
   4be28:	18008f1e 	bne	r3,zero,4c068 <__udivdi3+0x418>
   4be2c:	882ad43a 	srli	r21,r17,16
   4be30:	8461c83a 	sub	r16,r16,r17
   4be34:	8d3fffcc 	andi	r20,r17,65535
   4be38:	00c00044 	movi	r3,1
   4be3c:	8009883a 	mov	r4,r16
   4be40:	a80b883a 	mov	r5,r21
   4be44:	d8c00015 	stw	r3,0(sp)
   4be48:	00419340 	call	41934 <__umodsi3>
   4be4c:	8009883a 	mov	r4,r16
   4be50:	a80b883a 	mov	r5,r21
   4be54:	1027883a 	mov	r19,r2
   4be58:	00418d00 	call	418d0 <__udivsi3>
   4be5c:	9826943a 	slli	r19,r19,16
   4be60:	9008d43a 	srli	r4,r18,16
   4be64:	1521383a 	mul	r16,r2,r20
   4be68:	102d883a 	mov	r22,r2
   4be6c:	24c8b03a 	or	r4,r4,r19
   4be70:	d8c00017 	ldw	r3,0(sp)
   4be74:	2400052e 	bgeu	r4,r16,4be8c <__udivdi3+0x23c>
   4be78:	2449883a 	add	r4,r4,r17
   4be7c:	b0bfffc4 	addi	r2,r22,-1
   4be80:	24400136 	bltu	r4,r17,4be88 <__udivdi3+0x238>
   4be84:	2400ca36 	bltu	r4,r16,4c1b0 <__udivdi3+0x560>
   4be88:	102d883a 	mov	r22,r2
   4be8c:	2421c83a 	sub	r16,r4,r16
   4be90:	a80b883a 	mov	r5,r21
   4be94:	8009883a 	mov	r4,r16
   4be98:	d8c00015 	stw	r3,0(sp)
   4be9c:	00419340 	call	41934 <__umodsi3>
   4bea0:	1027883a 	mov	r19,r2
   4bea4:	a80b883a 	mov	r5,r21
   4bea8:	8009883a 	mov	r4,r16
   4beac:	00418d00 	call	418d0 <__udivsi3>
   4beb0:	9826943a 	slli	r19,r19,16
   4beb4:	1529383a 	mul	r20,r2,r20
   4beb8:	94bfffcc 	andi	r18,r18,65535
   4bebc:	94e4b03a 	or	r18,r18,r19
   4bec0:	d8c00017 	ldw	r3,0(sp)
   4bec4:	9500052e 	bgeu	r18,r20,4bedc <__udivdi3+0x28c>
   4bec8:	8ca5883a 	add	r18,r17,r18
   4becc:	113fffc4 	addi	r4,r2,-1
   4bed0:	94409736 	bltu	r18,r17,4c130 <__udivdi3+0x4e0>
   4bed4:	9500962e 	bgeu	r18,r20,4c130 <__udivdi3+0x4e0>
   4bed8:	10bfff84 	addi	r2,r2,-2
   4bedc:	b00c943a 	slli	r6,r22,16
   4bee0:	3084b03a 	or	r2,r6,r2
   4bee4:	00000206 	br	4bef0 <__udivdi3+0x2a0>
   4bee8:	0007883a 	mov	r3,zero
   4beec:	0005883a 	mov	r2,zero
   4bef0:	dfc00a17 	ldw	ra,40(sp)
   4bef4:	df000917 	ldw	fp,36(sp)
   4bef8:	ddc00817 	ldw	r23,32(sp)
   4befc:	dd800717 	ldw	r22,28(sp)
   4bf00:	dd400617 	ldw	r21,24(sp)
   4bf04:	dd000517 	ldw	r20,20(sp)
   4bf08:	dcc00417 	ldw	r19,16(sp)
   4bf0c:	dc800317 	ldw	r18,12(sp)
   4bf10:	dc400217 	ldw	r17,8(sp)
   4bf14:	dc000117 	ldw	r16,4(sp)
   4bf18:	dec00b04 	addi	sp,sp,44
   4bf1c:	f800283a 	ret
   4bf20:	00803fc4 	movi	r2,255
   4bf24:	11c5803a 	cmpltu	r2,r2,r7
   4bf28:	100490fa 	slli	r2,r2,3
   4bf2c:	003f9e06 	br	4bda8 <__alt_data_end+0xfffd9da8>
   4bf30:	00803fc4 	movi	r2,255
   4bf34:	1445803a 	cmpltu	r2,r2,r17
   4bf38:	100490fa 	slli	r2,r2,3
   4bf3c:	003fb206 	br	4be08 <__alt_data_end+0xfffd9e08>
   4bf40:	00804034 	movhi	r2,256
   4bf44:	10bfffc4 	addi	r2,r2,-1
   4bf48:	11808836 	bltu	r2,r6,4c16c <__udivdi3+0x51c>
   4bf4c:	00800404 	movi	r2,16
   4bf50:	003f5606 	br	4bcac <__alt_data_end+0xfffd9cac>
   4bf54:	30aed83a 	srl	r23,r6,r2
   4bf58:	3d4e983a 	sll	r7,r7,r21
   4bf5c:	80acd83a 	srl	r22,r16,r2
   4bf60:	9884d83a 	srl	r2,r19,r2
   4bf64:	3deeb03a 	or	r23,r7,r23
   4bf68:	b824d43a 	srli	r18,r23,16
   4bf6c:	8560983a 	sll	r16,r16,r21
   4bf70:	b009883a 	mov	r4,r22
   4bf74:	900b883a 	mov	r5,r18
   4bf78:	3568983a 	sll	r20,r6,r21
   4bf7c:	1420b03a 	or	r16,r2,r16
   4bf80:	00419340 	call	41934 <__umodsi3>
   4bf84:	b009883a 	mov	r4,r22
   4bf88:	900b883a 	mov	r5,r18
   4bf8c:	1023883a 	mov	r17,r2
   4bf90:	00418d00 	call	418d0 <__udivsi3>
   4bf94:	8808943a 	slli	r4,r17,16
   4bf98:	bf3fffcc 	andi	fp,r23,65535
   4bf9c:	8006d43a 	srli	r3,r16,16
   4bfa0:	e0a3383a 	mul	r17,fp,r2
   4bfa4:	100d883a 	mov	r6,r2
   4bfa8:	1906b03a 	or	r3,r3,r4
   4bfac:	1c40042e 	bgeu	r3,r17,4bfc0 <__udivdi3+0x370>
   4bfb0:	1dc7883a 	add	r3,r3,r23
   4bfb4:	10bfffc4 	addi	r2,r2,-1
   4bfb8:	1dc0752e 	bgeu	r3,r23,4c190 <__udivdi3+0x540>
   4bfbc:	100d883a 	mov	r6,r2
   4bfc0:	1c63c83a 	sub	r17,r3,r17
   4bfc4:	900b883a 	mov	r5,r18
   4bfc8:	8809883a 	mov	r4,r17
   4bfcc:	d9800015 	stw	r6,0(sp)
   4bfd0:	00419340 	call	41934 <__umodsi3>
   4bfd4:	102d883a 	mov	r22,r2
   4bfd8:	8809883a 	mov	r4,r17
   4bfdc:	900b883a 	mov	r5,r18
   4bfe0:	00418d00 	call	418d0 <__udivsi3>
   4bfe4:	b02c943a 	slli	r22,r22,16
   4bfe8:	e089383a 	mul	r4,fp,r2
   4bfec:	843fffcc 	andi	r16,r16,65535
   4bff0:	85a0b03a 	or	r16,r16,r22
   4bff4:	d9800017 	ldw	r6,0(sp)
   4bff8:	8100042e 	bgeu	r16,r4,4c00c <__udivdi3+0x3bc>
   4bffc:	85e1883a 	add	r16,r16,r23
   4c000:	10ffffc4 	addi	r3,r2,-1
   4c004:	85c05e2e 	bgeu	r16,r23,4c180 <__udivdi3+0x530>
   4c008:	1805883a 	mov	r2,r3
   4c00c:	300c943a 	slli	r6,r6,16
   4c010:	a17fffcc 	andi	r5,r20,65535
   4c014:	a028d43a 	srli	r20,r20,16
   4c018:	3084b03a 	or	r2,r6,r2
   4c01c:	10ffffcc 	andi	r3,r2,65535
   4c020:	100cd43a 	srli	r6,r2,16
   4c024:	194f383a 	mul	r7,r3,r5
   4c028:	1d07383a 	mul	r3,r3,r20
   4c02c:	314b383a 	mul	r5,r6,r5
   4c030:	3810d43a 	srli	r8,r7,16
   4c034:	8121c83a 	sub	r16,r16,r4
   4c038:	1947883a 	add	r3,r3,r5
   4c03c:	40c7883a 	add	r3,r8,r3
   4c040:	350d383a 	mul	r6,r6,r20
   4c044:	1940022e 	bgeu	r3,r5,4c050 <__udivdi3+0x400>
   4c048:	01000074 	movhi	r4,1
   4c04c:	310d883a 	add	r6,r6,r4
   4c050:	1828d43a 	srli	r20,r3,16
   4c054:	a18d883a 	add	r6,r20,r6
   4c058:	81803e36 	bltu	r16,r6,4c154 <__udivdi3+0x504>
   4c05c:	81803826 	beq	r16,r6,4c140 <__udivdi3+0x4f0>
   4c060:	0007883a 	mov	r3,zero
   4c064:	003fa206 	br	4bef0 <__alt_data_end+0xfffd9ef0>
   4c068:	88e2983a 	sll	r17,r17,r3
   4c06c:	80a8d83a 	srl	r20,r16,r2
   4c070:	80e0983a 	sll	r16,r16,r3
   4c074:	882ad43a 	srli	r21,r17,16
   4c078:	9884d83a 	srl	r2,r19,r2
   4c07c:	a009883a 	mov	r4,r20
   4c080:	a80b883a 	mov	r5,r21
   4c084:	142eb03a 	or	r23,r2,r16
   4c088:	98e4983a 	sll	r18,r19,r3
   4c08c:	00419340 	call	41934 <__umodsi3>
   4c090:	a009883a 	mov	r4,r20
   4c094:	a80b883a 	mov	r5,r21
   4c098:	1021883a 	mov	r16,r2
   4c09c:	00418d00 	call	418d0 <__udivsi3>
   4c0a0:	1039883a 	mov	fp,r2
   4c0a4:	8d3fffcc 	andi	r20,r17,65535
   4c0a8:	8020943a 	slli	r16,r16,16
   4c0ac:	b804d43a 	srli	r2,r23,16
   4c0b0:	a72d383a 	mul	r22,r20,fp
   4c0b4:	1404b03a 	or	r2,r2,r16
   4c0b8:	1580062e 	bgeu	r2,r22,4c0d4 <__udivdi3+0x484>
   4c0bc:	1445883a 	add	r2,r2,r17
   4c0c0:	e0ffffc4 	addi	r3,fp,-1
   4c0c4:	14403836 	bltu	r2,r17,4c1a8 <__udivdi3+0x558>
   4c0c8:	1580372e 	bgeu	r2,r22,4c1a8 <__udivdi3+0x558>
   4c0cc:	e73fff84 	addi	fp,fp,-2
   4c0d0:	1445883a 	add	r2,r2,r17
   4c0d4:	15adc83a 	sub	r22,r2,r22
   4c0d8:	a80b883a 	mov	r5,r21
   4c0dc:	b009883a 	mov	r4,r22
   4c0e0:	00419340 	call	41934 <__umodsi3>
   4c0e4:	1027883a 	mov	r19,r2
   4c0e8:	b009883a 	mov	r4,r22
   4c0ec:	a80b883a 	mov	r5,r21
   4c0f0:	00418d00 	call	418d0 <__udivsi3>
   4c0f4:	9826943a 	slli	r19,r19,16
   4c0f8:	a0a1383a 	mul	r16,r20,r2
   4c0fc:	b93fffcc 	andi	r4,r23,65535
   4c100:	24c8b03a 	or	r4,r4,r19
   4c104:	2400062e 	bgeu	r4,r16,4c120 <__udivdi3+0x4d0>
   4c108:	2449883a 	add	r4,r4,r17
   4c10c:	10ffffc4 	addi	r3,r2,-1
   4c110:	24402336 	bltu	r4,r17,4c1a0 <__udivdi3+0x550>
   4c114:	2400222e 	bgeu	r4,r16,4c1a0 <__udivdi3+0x550>
   4c118:	10bfff84 	addi	r2,r2,-2
   4c11c:	2449883a 	add	r4,r4,r17
   4c120:	e038943a 	slli	fp,fp,16
   4c124:	2421c83a 	sub	r16,r4,r16
   4c128:	e086b03a 	or	r3,fp,r2
   4c12c:	003f4306 	br	4be3c <__alt_data_end+0xfffd9e3c>
   4c130:	2005883a 	mov	r2,r4
   4c134:	003f6906 	br	4bedc <__alt_data_end+0xfffd9edc>
   4c138:	1805883a 	mov	r2,r3
   4c13c:	003f0f06 	br	4bd7c <__alt_data_end+0xfffd9d7c>
   4c140:	1806943a 	slli	r3,r3,16
   4c144:	9d66983a 	sll	r19,r19,r21
   4c148:	39ffffcc 	andi	r7,r7,65535
   4c14c:	19c7883a 	add	r3,r3,r7
   4c150:	98ffc32e 	bgeu	r19,r3,4c060 <__alt_data_end+0xfffda060>
   4c154:	10bfffc4 	addi	r2,r2,-1
   4c158:	003fc106 	br	4c060 <__alt_data_end+0xfffda060>
   4c15c:	00800604 	movi	r2,24
   4c160:	003f1106 	br	4bda8 <__alt_data_end+0xfffd9da8>
   4c164:	00800604 	movi	r2,24
   4c168:	003f2706 	br	4be08 <__alt_data_end+0xfffd9e08>
   4c16c:	00800604 	movi	r2,24
   4c170:	003ece06 	br	4bcac <__alt_data_end+0xfffd9cac>
   4c174:	0007883a 	mov	r3,zero
   4c178:	00800044 	movi	r2,1
   4c17c:	003f5c06 	br	4bef0 <__alt_data_end+0xfffd9ef0>
   4c180:	813fa12e 	bgeu	r16,r4,4c008 <__alt_data_end+0xfffda008>
   4c184:	10bfff84 	addi	r2,r2,-2
   4c188:	85e1883a 	add	r16,r16,r23
   4c18c:	003f9f06 	br	4c00c <__alt_data_end+0xfffda00c>
   4c190:	1c7f8a2e 	bgeu	r3,r17,4bfbc <__alt_data_end+0xfffd9fbc>
   4c194:	31bfff84 	addi	r6,r6,-2
   4c198:	1dc7883a 	add	r3,r3,r23
   4c19c:	003f8806 	br	4bfc0 <__alt_data_end+0xfffd9fc0>
   4c1a0:	1805883a 	mov	r2,r3
   4c1a4:	003fde06 	br	4c120 <__alt_data_end+0xfffda120>
   4c1a8:	1839883a 	mov	fp,r3
   4c1ac:	003fc906 	br	4c0d4 <__alt_data_end+0xfffda0d4>
   4c1b0:	b5bfff84 	addi	r22,r22,-2
   4c1b4:	2449883a 	add	r4,r4,r17
   4c1b8:	003f3406 	br	4be8c <__alt_data_end+0xfffd9e8c>
   4c1bc:	b5bfff84 	addi	r22,r22,-2
   4c1c0:	1445883a 	add	r2,r2,r17
   4c1c4:	003edb06 	br	4bd34 <__alt_data_end+0xfffd9d34>

0004c1c8 <__umoddi3>:
   4c1c8:	defff404 	addi	sp,sp,-48
   4c1cc:	df000a15 	stw	fp,40(sp)
   4c1d0:	dc400315 	stw	r17,12(sp)
   4c1d4:	dc000215 	stw	r16,8(sp)
   4c1d8:	dfc00b15 	stw	ra,44(sp)
   4c1dc:	ddc00915 	stw	r23,36(sp)
   4c1e0:	dd800815 	stw	r22,32(sp)
   4c1e4:	dd400715 	stw	r21,28(sp)
   4c1e8:	dd000615 	stw	r20,24(sp)
   4c1ec:	dcc00515 	stw	r19,20(sp)
   4c1f0:	dc800415 	stw	r18,16(sp)
   4c1f4:	2021883a 	mov	r16,r4
   4c1f8:	2823883a 	mov	r17,r5
   4c1fc:	2839883a 	mov	fp,r5
   4c200:	38003c1e 	bne	r7,zero,4c2f4 <__umoddi3+0x12c>
   4c204:	3027883a 	mov	r19,r6
   4c208:	2029883a 	mov	r20,r4
   4c20c:	2980512e 	bgeu	r5,r6,4c354 <__umoddi3+0x18c>
   4c210:	00bfffd4 	movui	r2,65535
   4c214:	11809a36 	bltu	r2,r6,4c480 <__umoddi3+0x2b8>
   4c218:	01003fc4 	movi	r4,255
   4c21c:	2189803a 	cmpltu	r4,r4,r6
   4c220:	200890fa 	slli	r4,r4,3
   4c224:	3104d83a 	srl	r2,r6,r4
   4c228:	00c00174 	movhi	r3,5
   4c22c:	18ca8e04 	addi	r3,r3,10808
   4c230:	1885883a 	add	r2,r3,r2
   4c234:	10c00003 	ldbu	r3,0(r2)
   4c238:	00800804 	movi	r2,32
   4c23c:	1909883a 	add	r4,r3,r4
   4c240:	1125c83a 	sub	r18,r2,r4
   4c244:	90000526 	beq	r18,zero,4c25c <__umoddi3+0x94>
   4c248:	8ca2983a 	sll	r17,r17,r18
   4c24c:	8108d83a 	srl	r4,r16,r4
   4c250:	34a6983a 	sll	r19,r6,r18
   4c254:	84a8983a 	sll	r20,r16,r18
   4c258:	2478b03a 	or	fp,r4,r17
   4c25c:	982ed43a 	srli	r23,r19,16
   4c260:	e009883a 	mov	r4,fp
   4c264:	9dbfffcc 	andi	r22,r19,65535
   4c268:	b80b883a 	mov	r5,r23
   4c26c:	00419340 	call	41934 <__umodsi3>
   4c270:	e009883a 	mov	r4,fp
   4c274:	b80b883a 	mov	r5,r23
   4c278:	102b883a 	mov	r21,r2
   4c27c:	00418d00 	call	418d0 <__udivsi3>
   4c280:	a806943a 	slli	r3,r21,16
   4c284:	a008d43a 	srli	r4,r20,16
   4c288:	b085383a 	mul	r2,r22,r2
   4c28c:	20c8b03a 	or	r4,r4,r3
   4c290:	2080032e 	bgeu	r4,r2,4c2a0 <__umoddi3+0xd8>
   4c294:	24c9883a 	add	r4,r4,r19
   4c298:	24c00136 	bltu	r4,r19,4c2a0 <__umoddi3+0xd8>
   4c29c:	20811036 	bltu	r4,r2,4c6e0 <__umoddi3+0x518>
   4c2a0:	20abc83a 	sub	r21,r4,r2
   4c2a4:	b80b883a 	mov	r5,r23
   4c2a8:	a809883a 	mov	r4,r21
   4c2ac:	00419340 	call	41934 <__umodsi3>
   4c2b0:	1023883a 	mov	r17,r2
   4c2b4:	b80b883a 	mov	r5,r23
   4c2b8:	a809883a 	mov	r4,r21
   4c2bc:	00418d00 	call	418d0 <__udivsi3>
   4c2c0:	8822943a 	slli	r17,r17,16
   4c2c4:	b085383a 	mul	r2,r22,r2
   4c2c8:	a0ffffcc 	andi	r3,r20,65535
   4c2cc:	1c46b03a 	or	r3,r3,r17
   4c2d0:	1880042e 	bgeu	r3,r2,4c2e4 <__umoddi3+0x11c>
   4c2d4:	1cc7883a 	add	r3,r3,r19
   4c2d8:	1cc00236 	bltu	r3,r19,4c2e4 <__umoddi3+0x11c>
   4c2dc:	1880012e 	bgeu	r3,r2,4c2e4 <__umoddi3+0x11c>
   4c2e0:	1cc7883a 	add	r3,r3,r19
   4c2e4:	1885c83a 	sub	r2,r3,r2
   4c2e8:	1484d83a 	srl	r2,r2,r18
   4c2ec:	0007883a 	mov	r3,zero
   4c2f0:	00004f06 	br	4c430 <__umoddi3+0x268>
   4c2f4:	29c04c36 	bltu	r5,r7,4c428 <__umoddi3+0x260>
   4c2f8:	00bfffd4 	movui	r2,65535
   4c2fc:	11c0582e 	bgeu	r2,r7,4c460 <__umoddi3+0x298>
   4c300:	00804034 	movhi	r2,256
   4c304:	10bfffc4 	addi	r2,r2,-1
   4c308:	11c0e736 	bltu	r2,r7,4c6a8 <__umoddi3+0x4e0>
   4c30c:	01000404 	movi	r4,16
   4c310:	3904d83a 	srl	r2,r7,r4
   4c314:	00c00174 	movhi	r3,5
   4c318:	18ca8e04 	addi	r3,r3,10808
   4c31c:	1885883a 	add	r2,r3,r2
   4c320:	14c00003 	ldbu	r19,0(r2)
   4c324:	00c00804 	movi	r3,32
   4c328:	9927883a 	add	r19,r19,r4
   4c32c:	1ce9c83a 	sub	r20,r3,r19
   4c330:	a000581e 	bne	r20,zero,4c494 <__umoddi3+0x2cc>
   4c334:	3c400136 	bltu	r7,r17,4c33c <__umoddi3+0x174>
   4c338:	8180eb36 	bltu	r16,r6,4c6e8 <__umoddi3+0x520>
   4c33c:	8185c83a 	sub	r2,r16,r6
   4c340:	89e3c83a 	sub	r17,r17,r7
   4c344:	8089803a 	cmpltu	r4,r16,r2
   4c348:	8939c83a 	sub	fp,r17,r4
   4c34c:	e007883a 	mov	r3,fp
   4c350:	00003706 	br	4c430 <__umoddi3+0x268>
   4c354:	3000041e 	bne	r6,zero,4c368 <__umoddi3+0x1a0>
   4c358:	000b883a 	mov	r5,zero
   4c35c:	01000044 	movi	r4,1
   4c360:	00418d00 	call	418d0 <__udivsi3>
   4c364:	1027883a 	mov	r19,r2
   4c368:	00bfffd4 	movui	r2,65535
   4c36c:	14c0402e 	bgeu	r2,r19,4c470 <__umoddi3+0x2a8>
   4c370:	00804034 	movhi	r2,256
   4c374:	10bfffc4 	addi	r2,r2,-1
   4c378:	14c0cd36 	bltu	r2,r19,4c6b0 <__umoddi3+0x4e8>
   4c37c:	00800404 	movi	r2,16
   4c380:	9886d83a 	srl	r3,r19,r2
   4c384:	01000174 	movhi	r4,5
   4c388:	210a8e04 	addi	r4,r4,10808
   4c38c:	20c7883a 	add	r3,r4,r3
   4c390:	18c00003 	ldbu	r3,0(r3)
   4c394:	1887883a 	add	r3,r3,r2
   4c398:	00800804 	movi	r2,32
   4c39c:	10e5c83a 	sub	r18,r2,r3
   4c3a0:	9000901e 	bne	r18,zero,4c5e4 <__umoddi3+0x41c>
   4c3a4:	982cd43a 	srli	r22,r19,16
   4c3a8:	8ce3c83a 	sub	r17,r17,r19
   4c3ac:	9d7fffcc 	andi	r21,r19,65535
   4c3b0:	b00b883a 	mov	r5,r22
   4c3b4:	8809883a 	mov	r4,r17
   4c3b8:	00419340 	call	41934 <__umodsi3>
   4c3bc:	8809883a 	mov	r4,r17
   4c3c0:	b00b883a 	mov	r5,r22
   4c3c4:	1021883a 	mov	r16,r2
   4c3c8:	00418d00 	call	418d0 <__udivsi3>
   4c3cc:	8006943a 	slli	r3,r16,16
   4c3d0:	a008d43a 	srli	r4,r20,16
   4c3d4:	1545383a 	mul	r2,r2,r21
   4c3d8:	20c8b03a 	or	r4,r4,r3
   4c3dc:	2080042e 	bgeu	r4,r2,4c3f0 <__umoddi3+0x228>
   4c3e0:	24c9883a 	add	r4,r4,r19
   4c3e4:	24c00236 	bltu	r4,r19,4c3f0 <__umoddi3+0x228>
   4c3e8:	2080012e 	bgeu	r4,r2,4c3f0 <__umoddi3+0x228>
   4c3ec:	24c9883a 	add	r4,r4,r19
   4c3f0:	20a1c83a 	sub	r16,r4,r2
   4c3f4:	b00b883a 	mov	r5,r22
   4c3f8:	8009883a 	mov	r4,r16
   4c3fc:	00419340 	call	41934 <__umodsi3>
   4c400:	1023883a 	mov	r17,r2
   4c404:	b00b883a 	mov	r5,r22
   4c408:	8009883a 	mov	r4,r16
   4c40c:	00418d00 	call	418d0 <__udivsi3>
   4c410:	8822943a 	slli	r17,r17,16
   4c414:	1545383a 	mul	r2,r2,r21
   4c418:	a53fffcc 	andi	r20,r20,65535
   4c41c:	a446b03a 	or	r3,r20,r17
   4c420:	18bfb02e 	bgeu	r3,r2,4c2e4 <__alt_data_end+0xfffda2e4>
   4c424:	003fab06 	br	4c2d4 <__alt_data_end+0xfffda2d4>
   4c428:	2005883a 	mov	r2,r4
   4c42c:	2807883a 	mov	r3,r5
   4c430:	dfc00b17 	ldw	ra,44(sp)
   4c434:	df000a17 	ldw	fp,40(sp)
   4c438:	ddc00917 	ldw	r23,36(sp)
   4c43c:	dd800817 	ldw	r22,32(sp)
   4c440:	dd400717 	ldw	r21,28(sp)
   4c444:	dd000617 	ldw	r20,24(sp)
   4c448:	dcc00517 	ldw	r19,20(sp)
   4c44c:	dc800417 	ldw	r18,16(sp)
   4c450:	dc400317 	ldw	r17,12(sp)
   4c454:	dc000217 	ldw	r16,8(sp)
   4c458:	dec00c04 	addi	sp,sp,48
   4c45c:	f800283a 	ret
   4c460:	04c03fc4 	movi	r19,255
   4c464:	99c9803a 	cmpltu	r4,r19,r7
   4c468:	200890fa 	slli	r4,r4,3
   4c46c:	003fa806 	br	4c310 <__alt_data_end+0xfffda310>
   4c470:	00803fc4 	movi	r2,255
   4c474:	14c5803a 	cmpltu	r2,r2,r19
   4c478:	100490fa 	slli	r2,r2,3
   4c47c:	003fc006 	br	4c380 <__alt_data_end+0xfffda380>
   4c480:	00804034 	movhi	r2,256
   4c484:	10bfffc4 	addi	r2,r2,-1
   4c488:	11808b36 	bltu	r2,r6,4c6b8 <__umoddi3+0x4f0>
   4c48c:	01000404 	movi	r4,16
   4c490:	003f6406 	br	4c224 <__alt_data_end+0xfffda224>
   4c494:	34c4d83a 	srl	r2,r6,r19
   4c498:	3d0e983a 	sll	r7,r7,r20
   4c49c:	8cf8d83a 	srl	fp,r17,r19
   4c4a0:	8d10983a 	sll	r8,r17,r20
   4c4a4:	38aab03a 	or	r21,r7,r2
   4c4a8:	a82cd43a 	srli	r22,r21,16
   4c4ac:	84e2d83a 	srl	r17,r16,r19
   4c4b0:	e009883a 	mov	r4,fp
   4c4b4:	b00b883a 	mov	r5,r22
   4c4b8:	8a22b03a 	or	r17,r17,r8
   4c4bc:	3524983a 	sll	r18,r6,r20
   4c4c0:	00419340 	call	41934 <__umodsi3>
   4c4c4:	e009883a 	mov	r4,fp
   4c4c8:	b00b883a 	mov	r5,r22
   4c4cc:	102f883a 	mov	r23,r2
   4c4d0:	00418d00 	call	418d0 <__udivsi3>
   4c4d4:	100d883a 	mov	r6,r2
   4c4d8:	b808943a 	slli	r4,r23,16
   4c4dc:	aa3fffcc 	andi	r8,r21,65535
   4c4e0:	8804d43a 	srli	r2,r17,16
   4c4e4:	41af383a 	mul	r23,r8,r6
   4c4e8:	8520983a 	sll	r16,r16,r20
   4c4ec:	1104b03a 	or	r2,r2,r4
   4c4f0:	15c0042e 	bgeu	r2,r23,4c504 <__umoddi3+0x33c>
   4c4f4:	1545883a 	add	r2,r2,r21
   4c4f8:	30ffffc4 	addi	r3,r6,-1
   4c4fc:	1540742e 	bgeu	r2,r21,4c6d0 <__umoddi3+0x508>
   4c500:	180d883a 	mov	r6,r3
   4c504:	15efc83a 	sub	r23,r2,r23
   4c508:	b00b883a 	mov	r5,r22
   4c50c:	b809883a 	mov	r4,r23
   4c510:	d9800115 	stw	r6,4(sp)
   4c514:	da000015 	stw	r8,0(sp)
   4c518:	00419340 	call	41934 <__umodsi3>
   4c51c:	b00b883a 	mov	r5,r22
   4c520:	b809883a 	mov	r4,r23
   4c524:	1039883a 	mov	fp,r2
   4c528:	00418d00 	call	418d0 <__udivsi3>
   4c52c:	da000017 	ldw	r8,0(sp)
   4c530:	e038943a 	slli	fp,fp,16
   4c534:	100b883a 	mov	r5,r2
   4c538:	4089383a 	mul	r4,r8,r2
   4c53c:	8a3fffcc 	andi	r8,r17,65535
   4c540:	4710b03a 	or	r8,r8,fp
   4c544:	d9800117 	ldw	r6,4(sp)
   4c548:	4100042e 	bgeu	r8,r4,4c55c <__umoddi3+0x394>
   4c54c:	4551883a 	add	r8,r8,r21
   4c550:	10bfffc4 	addi	r2,r2,-1
   4c554:	45405a2e 	bgeu	r8,r21,4c6c0 <__umoddi3+0x4f8>
   4c558:	100b883a 	mov	r5,r2
   4c55c:	300c943a 	slli	r6,r6,16
   4c560:	91ffffcc 	andi	r7,r18,65535
   4c564:	9004d43a 	srli	r2,r18,16
   4c568:	314cb03a 	or	r6,r6,r5
   4c56c:	317fffcc 	andi	r5,r6,65535
   4c570:	300cd43a 	srli	r6,r6,16
   4c574:	29d3383a 	mul	r9,r5,r7
   4c578:	288b383a 	mul	r5,r5,r2
   4c57c:	31cf383a 	mul	r7,r6,r7
   4c580:	4806d43a 	srli	r3,r9,16
   4c584:	4111c83a 	sub	r8,r8,r4
   4c588:	29cb883a 	add	r5,r5,r7
   4c58c:	194b883a 	add	r5,r3,r5
   4c590:	3085383a 	mul	r2,r6,r2
   4c594:	29c0022e 	bgeu	r5,r7,4c5a0 <__umoddi3+0x3d8>
   4c598:	00c00074 	movhi	r3,1
   4c59c:	10c5883a 	add	r2,r2,r3
   4c5a0:	2808d43a 	srli	r4,r5,16
   4c5a4:	280a943a 	slli	r5,r5,16
   4c5a8:	4a7fffcc 	andi	r9,r9,65535
   4c5ac:	2085883a 	add	r2,r4,r2
   4c5b0:	2a4b883a 	add	r5,r5,r9
   4c5b4:	40803636 	bltu	r8,r2,4c690 <__umoddi3+0x4c8>
   4c5b8:	40804d26 	beq	r8,r2,4c6f0 <__umoddi3+0x528>
   4c5bc:	4089c83a 	sub	r4,r8,r2
   4c5c0:	280f883a 	mov	r7,r5
   4c5c4:	81cfc83a 	sub	r7,r16,r7
   4c5c8:	81c7803a 	cmpltu	r3,r16,r7
   4c5cc:	20c7c83a 	sub	r3,r4,r3
   4c5d0:	1cc4983a 	sll	r2,r3,r19
   4c5d4:	3d0ed83a 	srl	r7,r7,r20
   4c5d8:	1d06d83a 	srl	r3,r3,r20
   4c5dc:	11c4b03a 	or	r2,r2,r7
   4c5e0:	003f9306 	br	4c430 <__alt_data_end+0xfffda430>
   4c5e4:	9ca6983a 	sll	r19,r19,r18
   4c5e8:	88e8d83a 	srl	r20,r17,r3
   4c5ec:	80c4d83a 	srl	r2,r16,r3
   4c5f0:	982cd43a 	srli	r22,r19,16
   4c5f4:	8ca2983a 	sll	r17,r17,r18
   4c5f8:	a009883a 	mov	r4,r20
   4c5fc:	b00b883a 	mov	r5,r22
   4c600:	1478b03a 	or	fp,r2,r17
   4c604:	00419340 	call	41934 <__umodsi3>
   4c608:	a009883a 	mov	r4,r20
   4c60c:	b00b883a 	mov	r5,r22
   4c610:	1023883a 	mov	r17,r2
   4c614:	00418d00 	call	418d0 <__udivsi3>
   4c618:	9d7fffcc 	andi	r21,r19,65535
   4c61c:	880a943a 	slli	r5,r17,16
   4c620:	e008d43a 	srli	r4,fp,16
   4c624:	a885383a 	mul	r2,r21,r2
   4c628:	84a8983a 	sll	r20,r16,r18
   4c62c:	2148b03a 	or	r4,r4,r5
   4c630:	2080042e 	bgeu	r4,r2,4c644 <__umoddi3+0x47c>
   4c634:	24c9883a 	add	r4,r4,r19
   4c638:	24c00236 	bltu	r4,r19,4c644 <__umoddi3+0x47c>
   4c63c:	2080012e 	bgeu	r4,r2,4c644 <__umoddi3+0x47c>
   4c640:	24c9883a 	add	r4,r4,r19
   4c644:	20a3c83a 	sub	r17,r4,r2
   4c648:	b00b883a 	mov	r5,r22
   4c64c:	8809883a 	mov	r4,r17
   4c650:	00419340 	call	41934 <__umodsi3>
   4c654:	102f883a 	mov	r23,r2
   4c658:	8809883a 	mov	r4,r17
   4c65c:	b00b883a 	mov	r5,r22
   4c660:	00418d00 	call	418d0 <__udivsi3>
   4c664:	b82e943a 	slli	r23,r23,16
   4c668:	a885383a 	mul	r2,r21,r2
   4c66c:	e13fffcc 	andi	r4,fp,65535
   4c670:	25c8b03a 	or	r4,r4,r23
   4c674:	2080042e 	bgeu	r4,r2,4c688 <__umoddi3+0x4c0>
   4c678:	24c9883a 	add	r4,r4,r19
   4c67c:	24c00236 	bltu	r4,r19,4c688 <__umoddi3+0x4c0>
   4c680:	2080012e 	bgeu	r4,r2,4c688 <__umoddi3+0x4c0>
   4c684:	24c9883a 	add	r4,r4,r19
   4c688:	20a3c83a 	sub	r17,r4,r2
   4c68c:	003f4806 	br	4c3b0 <__alt_data_end+0xfffda3b0>
   4c690:	2c8fc83a 	sub	r7,r5,r18
   4c694:	1545c83a 	sub	r2,r2,r21
   4c698:	29cb803a 	cmpltu	r5,r5,r7
   4c69c:	1145c83a 	sub	r2,r2,r5
   4c6a0:	4089c83a 	sub	r4,r8,r2
   4c6a4:	003fc706 	br	4c5c4 <__alt_data_end+0xfffda5c4>
   4c6a8:	01000604 	movi	r4,24
   4c6ac:	003f1806 	br	4c310 <__alt_data_end+0xfffda310>
   4c6b0:	00800604 	movi	r2,24
   4c6b4:	003f3206 	br	4c380 <__alt_data_end+0xfffda380>
   4c6b8:	01000604 	movi	r4,24
   4c6bc:	003ed906 	br	4c224 <__alt_data_end+0xfffda224>
   4c6c0:	413fa52e 	bgeu	r8,r4,4c558 <__alt_data_end+0xfffda558>
   4c6c4:	297fff84 	addi	r5,r5,-2
   4c6c8:	4551883a 	add	r8,r8,r21
   4c6cc:	003fa306 	br	4c55c <__alt_data_end+0xfffda55c>
   4c6d0:	15ff8b2e 	bgeu	r2,r23,4c500 <__alt_data_end+0xfffda500>
   4c6d4:	31bfff84 	addi	r6,r6,-2
   4c6d8:	1545883a 	add	r2,r2,r21
   4c6dc:	003f8906 	br	4c504 <__alt_data_end+0xfffda504>
   4c6e0:	24c9883a 	add	r4,r4,r19
   4c6e4:	003eee06 	br	4c2a0 <__alt_data_end+0xfffda2a0>
   4c6e8:	8005883a 	mov	r2,r16
   4c6ec:	003f1706 	br	4c34c <__alt_data_end+0xfffda34c>
   4c6f0:	817fe736 	bltu	r16,r5,4c690 <__alt_data_end+0xfffda690>
   4c6f4:	280f883a 	mov	r7,r5
   4c6f8:	0009883a 	mov	r4,zero
   4c6fc:	003fb106 	br	4c5c4 <__alt_data_end+0xfffda5c4>

0004c700 <__adddf3>:
   4c700:	02c00434 	movhi	r11,16
   4c704:	5affffc4 	addi	r11,r11,-1
   4c708:	2806d7fa 	srli	r3,r5,31
   4c70c:	2ad4703a 	and	r10,r5,r11
   4c710:	3ad2703a 	and	r9,r7,r11
   4c714:	3804d53a 	srli	r2,r7,20
   4c718:	3018d77a 	srli	r12,r6,29
   4c71c:	280ad53a 	srli	r5,r5,20
   4c720:	501490fa 	slli	r10,r10,3
   4c724:	2010d77a 	srli	r8,r4,29
   4c728:	481290fa 	slli	r9,r9,3
   4c72c:	380ed7fa 	srli	r7,r7,31
   4c730:	defffb04 	addi	sp,sp,-20
   4c734:	dc800215 	stw	r18,8(sp)
   4c738:	dc400115 	stw	r17,4(sp)
   4c73c:	dc000015 	stw	r16,0(sp)
   4c740:	dfc00415 	stw	ra,16(sp)
   4c744:	dcc00315 	stw	r19,12(sp)
   4c748:	1c803fcc 	andi	r18,r3,255
   4c74c:	2c01ffcc 	andi	r16,r5,2047
   4c750:	5210b03a 	or	r8,r10,r8
   4c754:	202290fa 	slli	r17,r4,3
   4c758:	1081ffcc 	andi	r2,r2,2047
   4c75c:	4b12b03a 	or	r9,r9,r12
   4c760:	300c90fa 	slli	r6,r6,3
   4c764:	91c07526 	beq	r18,r7,4c93c <__adddf3+0x23c>
   4c768:	8087c83a 	sub	r3,r16,r2
   4c76c:	00c0ab0e 	bge	zero,r3,4ca1c <__adddf3+0x31c>
   4c770:	10002a1e 	bne	r2,zero,4c81c <__adddf3+0x11c>
   4c774:	4984b03a 	or	r2,r9,r6
   4c778:	1000961e 	bne	r2,zero,4c9d4 <__adddf3+0x2d4>
   4c77c:	888001cc 	andi	r2,r17,7
   4c780:	10000726 	beq	r2,zero,4c7a0 <__adddf3+0xa0>
   4c784:	888003cc 	andi	r2,r17,15
   4c788:	00c00104 	movi	r3,4
   4c78c:	10c00426 	beq	r2,r3,4c7a0 <__adddf3+0xa0>
   4c790:	88c7883a 	add	r3,r17,r3
   4c794:	1c63803a 	cmpltu	r17,r3,r17
   4c798:	4451883a 	add	r8,r8,r17
   4c79c:	1823883a 	mov	r17,r3
   4c7a0:	4080202c 	andhi	r2,r8,128
   4c7a4:	10005926 	beq	r2,zero,4c90c <__adddf3+0x20c>
   4c7a8:	84000044 	addi	r16,r16,1
   4c7ac:	0081ffc4 	movi	r2,2047
   4c7b0:	8080ba26 	beq	r16,r2,4ca9c <__adddf3+0x39c>
   4c7b4:	00bfe034 	movhi	r2,65408
   4c7b8:	10bfffc4 	addi	r2,r2,-1
   4c7bc:	4090703a 	and	r8,r8,r2
   4c7c0:	4004977a 	slli	r2,r8,29
   4c7c4:	4010927a 	slli	r8,r8,9
   4c7c8:	8822d0fa 	srli	r17,r17,3
   4c7cc:	8401ffcc 	andi	r16,r16,2047
   4c7d0:	4010d33a 	srli	r8,r8,12
   4c7d4:	9007883a 	mov	r3,r18
   4c7d8:	1444b03a 	or	r2,r2,r17
   4c7dc:	8401ffcc 	andi	r16,r16,2047
   4c7e0:	8020953a 	slli	r16,r16,20
   4c7e4:	18c03fcc 	andi	r3,r3,255
   4c7e8:	01000434 	movhi	r4,16
   4c7ec:	213fffc4 	addi	r4,r4,-1
   4c7f0:	180697fa 	slli	r3,r3,31
   4c7f4:	4110703a 	and	r8,r8,r4
   4c7f8:	4410b03a 	or	r8,r8,r16
   4c7fc:	40c6b03a 	or	r3,r8,r3
   4c800:	dfc00417 	ldw	ra,16(sp)
   4c804:	dcc00317 	ldw	r19,12(sp)
   4c808:	dc800217 	ldw	r18,8(sp)
   4c80c:	dc400117 	ldw	r17,4(sp)
   4c810:	dc000017 	ldw	r16,0(sp)
   4c814:	dec00504 	addi	sp,sp,20
   4c818:	f800283a 	ret
   4c81c:	0081ffc4 	movi	r2,2047
   4c820:	80bfd626 	beq	r16,r2,4c77c <__alt_data_end+0xfffda77c>
   4c824:	4a402034 	orhi	r9,r9,128
   4c828:	00800e04 	movi	r2,56
   4c82c:	10c09f16 	blt	r2,r3,4caac <__adddf3+0x3ac>
   4c830:	008007c4 	movi	r2,31
   4c834:	10c0c216 	blt	r2,r3,4cb40 <__adddf3+0x440>
   4c838:	00800804 	movi	r2,32
   4c83c:	10c5c83a 	sub	r2,r2,r3
   4c840:	488a983a 	sll	r5,r9,r2
   4c844:	30c8d83a 	srl	r4,r6,r3
   4c848:	3084983a 	sll	r2,r6,r2
   4c84c:	48c6d83a 	srl	r3,r9,r3
   4c850:	290cb03a 	or	r6,r5,r4
   4c854:	1004c03a 	cmpne	r2,r2,zero
   4c858:	308cb03a 	or	r6,r6,r2
   4c85c:	898dc83a 	sub	r6,r17,r6
   4c860:	89a3803a 	cmpltu	r17,r17,r6
   4c864:	40d1c83a 	sub	r8,r8,r3
   4c868:	4451c83a 	sub	r8,r8,r17
   4c86c:	3023883a 	mov	r17,r6
   4c870:	4080202c 	andhi	r2,r8,128
   4c874:	10002326 	beq	r2,zero,4c904 <__adddf3+0x204>
   4c878:	04c02034 	movhi	r19,128
   4c87c:	9cffffc4 	addi	r19,r19,-1
   4c880:	44e6703a 	and	r19,r8,r19
   4c884:	98007626 	beq	r19,zero,4ca60 <__adddf3+0x360>
   4c888:	9809883a 	mov	r4,r19
   4c88c:	004ed040 	call	4ed04 <__clzsi2>
   4c890:	10fffe04 	addi	r3,r2,-8
   4c894:	010007c4 	movi	r4,31
   4c898:	20c07716 	blt	r4,r3,4ca78 <__adddf3+0x378>
   4c89c:	00800804 	movi	r2,32
   4c8a0:	10c5c83a 	sub	r2,r2,r3
   4c8a4:	8884d83a 	srl	r2,r17,r2
   4c8a8:	98d0983a 	sll	r8,r19,r3
   4c8ac:	88e2983a 	sll	r17,r17,r3
   4c8b0:	1204b03a 	or	r2,r2,r8
   4c8b4:	1c007416 	blt	r3,r16,4ca88 <__adddf3+0x388>
   4c8b8:	1c21c83a 	sub	r16,r3,r16
   4c8bc:	82000044 	addi	r8,r16,1
   4c8c0:	00c007c4 	movi	r3,31
   4c8c4:	1a009116 	blt	r3,r8,4cb0c <__adddf3+0x40c>
   4c8c8:	00c00804 	movi	r3,32
   4c8cc:	1a07c83a 	sub	r3,r3,r8
   4c8d0:	8a08d83a 	srl	r4,r17,r8
   4c8d4:	88e2983a 	sll	r17,r17,r3
   4c8d8:	10c6983a 	sll	r3,r2,r3
   4c8dc:	1210d83a 	srl	r8,r2,r8
   4c8e0:	8804c03a 	cmpne	r2,r17,zero
   4c8e4:	1906b03a 	or	r3,r3,r4
   4c8e8:	18a2b03a 	or	r17,r3,r2
   4c8ec:	0021883a 	mov	r16,zero
   4c8f0:	003fa206 	br	4c77c <__alt_data_end+0xfffda77c>
   4c8f4:	1890b03a 	or	r8,r3,r2
   4c8f8:	40017d26 	beq	r8,zero,4cef0 <__adddf3+0x7f0>
   4c8fc:	1011883a 	mov	r8,r2
   4c900:	1823883a 	mov	r17,r3
   4c904:	888001cc 	andi	r2,r17,7
   4c908:	103f9e1e 	bne	r2,zero,4c784 <__alt_data_end+0xfffda784>
   4c90c:	4004977a 	slli	r2,r8,29
   4c910:	8822d0fa 	srli	r17,r17,3
   4c914:	4010d0fa 	srli	r8,r8,3
   4c918:	9007883a 	mov	r3,r18
   4c91c:	1444b03a 	or	r2,r2,r17
   4c920:	0101ffc4 	movi	r4,2047
   4c924:	81002426 	beq	r16,r4,4c9b8 <__adddf3+0x2b8>
   4c928:	8120703a 	and	r16,r16,r4
   4c92c:	01000434 	movhi	r4,16
   4c930:	213fffc4 	addi	r4,r4,-1
   4c934:	4110703a 	and	r8,r8,r4
   4c938:	003fa806 	br	4c7dc <__alt_data_end+0xfffda7dc>
   4c93c:	8089c83a 	sub	r4,r16,r2
   4c940:	01005e0e 	bge	zero,r4,4cabc <__adddf3+0x3bc>
   4c944:	10002b26 	beq	r2,zero,4c9f4 <__adddf3+0x2f4>
   4c948:	0081ffc4 	movi	r2,2047
   4c94c:	80bf8b26 	beq	r16,r2,4c77c <__alt_data_end+0xfffda77c>
   4c950:	4a402034 	orhi	r9,r9,128
   4c954:	00800e04 	movi	r2,56
   4c958:	1100a40e 	bge	r2,r4,4cbec <__adddf3+0x4ec>
   4c95c:	498cb03a 	or	r6,r9,r6
   4c960:	300ac03a 	cmpne	r5,r6,zero
   4c964:	0013883a 	mov	r9,zero
   4c968:	2c4b883a 	add	r5,r5,r17
   4c96c:	2c63803a 	cmpltu	r17,r5,r17
   4c970:	4a11883a 	add	r8,r9,r8
   4c974:	8a11883a 	add	r8,r17,r8
   4c978:	2823883a 	mov	r17,r5
   4c97c:	4080202c 	andhi	r2,r8,128
   4c980:	103fe026 	beq	r2,zero,4c904 <__alt_data_end+0xfffda904>
   4c984:	84000044 	addi	r16,r16,1
   4c988:	0081ffc4 	movi	r2,2047
   4c98c:	8080d226 	beq	r16,r2,4ccd8 <__adddf3+0x5d8>
   4c990:	00bfe034 	movhi	r2,65408
   4c994:	10bfffc4 	addi	r2,r2,-1
   4c998:	4090703a 	and	r8,r8,r2
   4c99c:	880ad07a 	srli	r5,r17,1
   4c9a0:	400897fa 	slli	r4,r8,31
   4c9a4:	88c0004c 	andi	r3,r17,1
   4c9a8:	28e2b03a 	or	r17,r5,r3
   4c9ac:	4010d07a 	srli	r8,r8,1
   4c9b0:	2462b03a 	or	r17,r4,r17
   4c9b4:	003f7106 	br	4c77c <__alt_data_end+0xfffda77c>
   4c9b8:	4088b03a 	or	r4,r8,r2
   4c9bc:	20014526 	beq	r4,zero,4ced4 <__adddf3+0x7d4>
   4c9c0:	01000434 	movhi	r4,16
   4c9c4:	42000234 	orhi	r8,r8,8
   4c9c8:	213fffc4 	addi	r4,r4,-1
   4c9cc:	4110703a 	and	r8,r8,r4
   4c9d0:	003f8206 	br	4c7dc <__alt_data_end+0xfffda7dc>
   4c9d4:	18ffffc4 	addi	r3,r3,-1
   4c9d8:	1800491e 	bne	r3,zero,4cb00 <__adddf3+0x400>
   4c9dc:	898bc83a 	sub	r5,r17,r6
   4c9e0:	8963803a 	cmpltu	r17,r17,r5
   4c9e4:	4251c83a 	sub	r8,r8,r9
   4c9e8:	4451c83a 	sub	r8,r8,r17
   4c9ec:	2823883a 	mov	r17,r5
   4c9f0:	003f9f06 	br	4c870 <__alt_data_end+0xfffda870>
   4c9f4:	4984b03a 	or	r2,r9,r6
   4c9f8:	103f6026 	beq	r2,zero,4c77c <__alt_data_end+0xfffda77c>
   4c9fc:	213fffc4 	addi	r4,r4,-1
   4ca00:	2000931e 	bne	r4,zero,4cc50 <__adddf3+0x550>
   4ca04:	898d883a 	add	r6,r17,r6
   4ca08:	3463803a 	cmpltu	r17,r6,r17
   4ca0c:	4251883a 	add	r8,r8,r9
   4ca10:	8a11883a 	add	r8,r17,r8
   4ca14:	3023883a 	mov	r17,r6
   4ca18:	003fd806 	br	4c97c <__alt_data_end+0xfffda97c>
   4ca1c:	1800541e 	bne	r3,zero,4cb70 <__adddf3+0x470>
   4ca20:	80800044 	addi	r2,r16,1
   4ca24:	1081ffcc 	andi	r2,r2,2047
   4ca28:	00c00044 	movi	r3,1
   4ca2c:	1880a00e 	bge	r3,r2,4ccb0 <__adddf3+0x5b0>
   4ca30:	8989c83a 	sub	r4,r17,r6
   4ca34:	8905803a 	cmpltu	r2,r17,r4
   4ca38:	4267c83a 	sub	r19,r8,r9
   4ca3c:	98a7c83a 	sub	r19,r19,r2
   4ca40:	9880202c 	andhi	r2,r19,128
   4ca44:	10006326 	beq	r2,zero,4cbd4 <__adddf3+0x4d4>
   4ca48:	3463c83a 	sub	r17,r6,r17
   4ca4c:	4a07c83a 	sub	r3,r9,r8
   4ca50:	344d803a 	cmpltu	r6,r6,r17
   4ca54:	19a7c83a 	sub	r19,r3,r6
   4ca58:	3825883a 	mov	r18,r7
   4ca5c:	983f8a1e 	bne	r19,zero,4c888 <__alt_data_end+0xfffda888>
   4ca60:	8809883a 	mov	r4,r17
   4ca64:	004ed040 	call	4ed04 <__clzsi2>
   4ca68:	10800804 	addi	r2,r2,32
   4ca6c:	10fffe04 	addi	r3,r2,-8
   4ca70:	010007c4 	movi	r4,31
   4ca74:	20ff890e 	bge	r4,r3,4c89c <__alt_data_end+0xfffda89c>
   4ca78:	10bff604 	addi	r2,r2,-40
   4ca7c:	8884983a 	sll	r2,r17,r2
   4ca80:	0023883a 	mov	r17,zero
   4ca84:	1c3f8c0e 	bge	r3,r16,4c8b8 <__alt_data_end+0xfffda8b8>
   4ca88:	023fe034 	movhi	r8,65408
   4ca8c:	423fffc4 	addi	r8,r8,-1
   4ca90:	80e1c83a 	sub	r16,r16,r3
   4ca94:	1210703a 	and	r8,r2,r8
   4ca98:	003f3806 	br	4c77c <__alt_data_end+0xfffda77c>
   4ca9c:	9007883a 	mov	r3,r18
   4caa0:	0011883a 	mov	r8,zero
   4caa4:	0005883a 	mov	r2,zero
   4caa8:	003f4c06 	br	4c7dc <__alt_data_end+0xfffda7dc>
   4caac:	498cb03a 	or	r6,r9,r6
   4cab0:	300cc03a 	cmpne	r6,r6,zero
   4cab4:	0007883a 	mov	r3,zero
   4cab8:	003f6806 	br	4c85c <__alt_data_end+0xfffda85c>
   4cabc:	20009c1e 	bne	r4,zero,4cd30 <__adddf3+0x630>
   4cac0:	80800044 	addi	r2,r16,1
   4cac4:	1141ffcc 	andi	r5,r2,2047
   4cac8:	01000044 	movi	r4,1
   4cacc:	2140670e 	bge	r4,r5,4cc6c <__adddf3+0x56c>
   4cad0:	0101ffc4 	movi	r4,2047
   4cad4:	11007f26 	beq	r2,r4,4ccd4 <__adddf3+0x5d4>
   4cad8:	898d883a 	add	r6,r17,r6
   4cadc:	4247883a 	add	r3,r8,r9
   4cae0:	3451803a 	cmpltu	r8,r6,r17
   4cae4:	40d1883a 	add	r8,r8,r3
   4cae8:	402297fa 	slli	r17,r8,31
   4caec:	300cd07a 	srli	r6,r6,1
   4caf0:	4010d07a 	srli	r8,r8,1
   4caf4:	1021883a 	mov	r16,r2
   4caf8:	89a2b03a 	or	r17,r17,r6
   4cafc:	003f1f06 	br	4c77c <__alt_data_end+0xfffda77c>
   4cb00:	0081ffc4 	movi	r2,2047
   4cb04:	80bf481e 	bne	r16,r2,4c828 <__alt_data_end+0xfffda828>
   4cb08:	003f1c06 	br	4c77c <__alt_data_end+0xfffda77c>
   4cb0c:	843ff844 	addi	r16,r16,-31
   4cb10:	01000804 	movi	r4,32
   4cb14:	1406d83a 	srl	r3,r2,r16
   4cb18:	41005026 	beq	r8,r4,4cc5c <__adddf3+0x55c>
   4cb1c:	01001004 	movi	r4,64
   4cb20:	2211c83a 	sub	r8,r4,r8
   4cb24:	1204983a 	sll	r2,r2,r8
   4cb28:	88a2b03a 	or	r17,r17,r2
   4cb2c:	8822c03a 	cmpne	r17,r17,zero
   4cb30:	1c62b03a 	or	r17,r3,r17
   4cb34:	0011883a 	mov	r8,zero
   4cb38:	0021883a 	mov	r16,zero
   4cb3c:	003f7106 	br	4c904 <__alt_data_end+0xfffda904>
   4cb40:	193ff804 	addi	r4,r3,-32
   4cb44:	00800804 	movi	r2,32
   4cb48:	4908d83a 	srl	r4,r9,r4
   4cb4c:	18804526 	beq	r3,r2,4cc64 <__adddf3+0x564>
   4cb50:	00801004 	movi	r2,64
   4cb54:	10c5c83a 	sub	r2,r2,r3
   4cb58:	4886983a 	sll	r3,r9,r2
   4cb5c:	198cb03a 	or	r6,r3,r6
   4cb60:	300cc03a 	cmpne	r6,r6,zero
   4cb64:	218cb03a 	or	r6,r4,r6
   4cb68:	0007883a 	mov	r3,zero
   4cb6c:	003f3b06 	br	4c85c <__alt_data_end+0xfffda85c>
   4cb70:	80002a26 	beq	r16,zero,4cc1c <__adddf3+0x51c>
   4cb74:	0101ffc4 	movi	r4,2047
   4cb78:	11006826 	beq	r2,r4,4cd1c <__adddf3+0x61c>
   4cb7c:	00c7c83a 	sub	r3,zero,r3
   4cb80:	42002034 	orhi	r8,r8,128
   4cb84:	01000e04 	movi	r4,56
   4cb88:	20c07c16 	blt	r4,r3,4cd7c <__adddf3+0x67c>
   4cb8c:	010007c4 	movi	r4,31
   4cb90:	20c0da16 	blt	r4,r3,4cefc <__adddf3+0x7fc>
   4cb94:	01000804 	movi	r4,32
   4cb98:	20c9c83a 	sub	r4,r4,r3
   4cb9c:	4114983a 	sll	r10,r8,r4
   4cba0:	88cad83a 	srl	r5,r17,r3
   4cba4:	8908983a 	sll	r4,r17,r4
   4cba8:	40c6d83a 	srl	r3,r8,r3
   4cbac:	5162b03a 	or	r17,r10,r5
   4cbb0:	2008c03a 	cmpne	r4,r4,zero
   4cbb4:	8922b03a 	or	r17,r17,r4
   4cbb8:	3463c83a 	sub	r17,r6,r17
   4cbbc:	48c7c83a 	sub	r3,r9,r3
   4cbc0:	344d803a 	cmpltu	r6,r6,r17
   4cbc4:	1991c83a 	sub	r8,r3,r6
   4cbc8:	1021883a 	mov	r16,r2
   4cbcc:	3825883a 	mov	r18,r7
   4cbd0:	003f2706 	br	4c870 <__alt_data_end+0xfffda870>
   4cbd4:	24d0b03a 	or	r8,r4,r19
   4cbd8:	40001b1e 	bne	r8,zero,4cc48 <__adddf3+0x548>
   4cbdc:	0005883a 	mov	r2,zero
   4cbe0:	0007883a 	mov	r3,zero
   4cbe4:	0021883a 	mov	r16,zero
   4cbe8:	003f4d06 	br	4c920 <__alt_data_end+0xfffda920>
   4cbec:	008007c4 	movi	r2,31
   4cbf0:	11003c16 	blt	r2,r4,4cce4 <__adddf3+0x5e4>
   4cbf4:	00800804 	movi	r2,32
   4cbf8:	1105c83a 	sub	r2,r2,r4
   4cbfc:	488e983a 	sll	r7,r9,r2
   4cc00:	310ad83a 	srl	r5,r6,r4
   4cc04:	3084983a 	sll	r2,r6,r2
   4cc08:	4912d83a 	srl	r9,r9,r4
   4cc0c:	394ab03a 	or	r5,r7,r5
   4cc10:	1004c03a 	cmpne	r2,r2,zero
   4cc14:	288ab03a 	or	r5,r5,r2
   4cc18:	003f5306 	br	4c968 <__alt_data_end+0xfffda968>
   4cc1c:	4448b03a 	or	r4,r8,r17
   4cc20:	20003e26 	beq	r4,zero,4cd1c <__adddf3+0x61c>
   4cc24:	00c6303a 	nor	r3,zero,r3
   4cc28:	18003a1e 	bne	r3,zero,4cd14 <__adddf3+0x614>
   4cc2c:	3463c83a 	sub	r17,r6,r17
   4cc30:	4a07c83a 	sub	r3,r9,r8
   4cc34:	344d803a 	cmpltu	r6,r6,r17
   4cc38:	1991c83a 	sub	r8,r3,r6
   4cc3c:	1021883a 	mov	r16,r2
   4cc40:	3825883a 	mov	r18,r7
   4cc44:	003f0a06 	br	4c870 <__alt_data_end+0xfffda870>
   4cc48:	2023883a 	mov	r17,r4
   4cc4c:	003f0d06 	br	4c884 <__alt_data_end+0xfffda884>
   4cc50:	0081ffc4 	movi	r2,2047
   4cc54:	80bf3f1e 	bne	r16,r2,4c954 <__alt_data_end+0xfffda954>
   4cc58:	003ec806 	br	4c77c <__alt_data_end+0xfffda77c>
   4cc5c:	0005883a 	mov	r2,zero
   4cc60:	003fb106 	br	4cb28 <__alt_data_end+0xfffdab28>
   4cc64:	0007883a 	mov	r3,zero
   4cc68:	003fbc06 	br	4cb5c <__alt_data_end+0xfffdab5c>
   4cc6c:	4444b03a 	or	r2,r8,r17
   4cc70:	8000871e 	bne	r16,zero,4ce90 <__adddf3+0x790>
   4cc74:	1000ba26 	beq	r2,zero,4cf60 <__adddf3+0x860>
   4cc78:	4984b03a 	or	r2,r9,r6
   4cc7c:	103ebf26 	beq	r2,zero,4c77c <__alt_data_end+0xfffda77c>
   4cc80:	8985883a 	add	r2,r17,r6
   4cc84:	4247883a 	add	r3,r8,r9
   4cc88:	1451803a 	cmpltu	r8,r2,r17
   4cc8c:	40d1883a 	add	r8,r8,r3
   4cc90:	40c0202c 	andhi	r3,r8,128
   4cc94:	1023883a 	mov	r17,r2
   4cc98:	183f1a26 	beq	r3,zero,4c904 <__alt_data_end+0xfffda904>
   4cc9c:	00bfe034 	movhi	r2,65408
   4cca0:	10bfffc4 	addi	r2,r2,-1
   4cca4:	2021883a 	mov	r16,r4
   4cca8:	4090703a 	and	r8,r8,r2
   4ccac:	003eb306 	br	4c77c <__alt_data_end+0xfffda77c>
   4ccb0:	4444b03a 	or	r2,r8,r17
   4ccb4:	8000291e 	bne	r16,zero,4cd5c <__adddf3+0x65c>
   4ccb8:	10004b1e 	bne	r2,zero,4cde8 <__adddf3+0x6e8>
   4ccbc:	4990b03a 	or	r8,r9,r6
   4ccc0:	40008b26 	beq	r8,zero,4cef0 <__adddf3+0x7f0>
   4ccc4:	4811883a 	mov	r8,r9
   4ccc8:	3023883a 	mov	r17,r6
   4cccc:	3825883a 	mov	r18,r7
   4ccd0:	003eaa06 	br	4c77c <__alt_data_end+0xfffda77c>
   4ccd4:	1021883a 	mov	r16,r2
   4ccd8:	0011883a 	mov	r8,zero
   4ccdc:	0005883a 	mov	r2,zero
   4cce0:	003f0f06 	br	4c920 <__alt_data_end+0xfffda920>
   4cce4:	217ff804 	addi	r5,r4,-32
   4cce8:	00800804 	movi	r2,32
   4ccec:	494ad83a 	srl	r5,r9,r5
   4ccf0:	20807d26 	beq	r4,r2,4cee8 <__adddf3+0x7e8>
   4ccf4:	00801004 	movi	r2,64
   4ccf8:	1109c83a 	sub	r4,r2,r4
   4ccfc:	4912983a 	sll	r9,r9,r4
   4cd00:	498cb03a 	or	r6,r9,r6
   4cd04:	300cc03a 	cmpne	r6,r6,zero
   4cd08:	298ab03a 	or	r5,r5,r6
   4cd0c:	0013883a 	mov	r9,zero
   4cd10:	003f1506 	br	4c968 <__alt_data_end+0xfffda968>
   4cd14:	0101ffc4 	movi	r4,2047
   4cd18:	113f9a1e 	bne	r2,r4,4cb84 <__alt_data_end+0xfffdab84>
   4cd1c:	4811883a 	mov	r8,r9
   4cd20:	3023883a 	mov	r17,r6
   4cd24:	1021883a 	mov	r16,r2
   4cd28:	3825883a 	mov	r18,r7
   4cd2c:	003e9306 	br	4c77c <__alt_data_end+0xfffda77c>
   4cd30:	8000161e 	bne	r16,zero,4cd8c <__adddf3+0x68c>
   4cd34:	444ab03a 	or	r5,r8,r17
   4cd38:	28005126 	beq	r5,zero,4ce80 <__adddf3+0x780>
   4cd3c:	0108303a 	nor	r4,zero,r4
   4cd40:	20004d1e 	bne	r4,zero,4ce78 <__adddf3+0x778>
   4cd44:	89a3883a 	add	r17,r17,r6
   4cd48:	4253883a 	add	r9,r8,r9
   4cd4c:	898d803a 	cmpltu	r6,r17,r6
   4cd50:	3251883a 	add	r8,r6,r9
   4cd54:	1021883a 	mov	r16,r2
   4cd58:	003f0806 	br	4c97c <__alt_data_end+0xfffda97c>
   4cd5c:	1000301e 	bne	r2,zero,4ce20 <__adddf3+0x720>
   4cd60:	4984b03a 	or	r2,r9,r6
   4cd64:	10007126 	beq	r2,zero,4cf2c <__adddf3+0x82c>
   4cd68:	4811883a 	mov	r8,r9
   4cd6c:	3023883a 	mov	r17,r6
   4cd70:	3825883a 	mov	r18,r7
   4cd74:	0401ffc4 	movi	r16,2047
   4cd78:	003e8006 	br	4c77c <__alt_data_end+0xfffda77c>
   4cd7c:	4462b03a 	or	r17,r8,r17
   4cd80:	8822c03a 	cmpne	r17,r17,zero
   4cd84:	0007883a 	mov	r3,zero
   4cd88:	003f8b06 	br	4cbb8 <__alt_data_end+0xfffdabb8>
   4cd8c:	0141ffc4 	movi	r5,2047
   4cd90:	11403b26 	beq	r2,r5,4ce80 <__adddf3+0x780>
   4cd94:	0109c83a 	sub	r4,zero,r4
   4cd98:	42002034 	orhi	r8,r8,128
   4cd9c:	01400e04 	movi	r5,56
   4cda0:	29006716 	blt	r5,r4,4cf40 <__adddf3+0x840>
   4cda4:	014007c4 	movi	r5,31
   4cda8:	29007016 	blt	r5,r4,4cf6c <__adddf3+0x86c>
   4cdac:	01400804 	movi	r5,32
   4cdb0:	290bc83a 	sub	r5,r5,r4
   4cdb4:	4154983a 	sll	r10,r8,r5
   4cdb8:	890ed83a 	srl	r7,r17,r4
   4cdbc:	894a983a 	sll	r5,r17,r5
   4cdc0:	4108d83a 	srl	r4,r8,r4
   4cdc4:	51e2b03a 	or	r17,r10,r7
   4cdc8:	280ac03a 	cmpne	r5,r5,zero
   4cdcc:	8962b03a 	or	r17,r17,r5
   4cdd0:	89a3883a 	add	r17,r17,r6
   4cdd4:	2253883a 	add	r9,r4,r9
   4cdd8:	898d803a 	cmpltu	r6,r17,r6
   4cddc:	3251883a 	add	r8,r6,r9
   4cde0:	1021883a 	mov	r16,r2
   4cde4:	003ee506 	br	4c97c <__alt_data_end+0xfffda97c>
   4cde8:	4984b03a 	or	r2,r9,r6
   4cdec:	103e6326 	beq	r2,zero,4c77c <__alt_data_end+0xfffda77c>
   4cdf0:	8987c83a 	sub	r3,r17,r6
   4cdf4:	88c9803a 	cmpltu	r4,r17,r3
   4cdf8:	4245c83a 	sub	r2,r8,r9
   4cdfc:	1105c83a 	sub	r2,r2,r4
   4ce00:	1100202c 	andhi	r4,r2,128
   4ce04:	203ebb26 	beq	r4,zero,4c8f4 <__alt_data_end+0xfffda8f4>
   4ce08:	3463c83a 	sub	r17,r6,r17
   4ce0c:	4a07c83a 	sub	r3,r9,r8
   4ce10:	344d803a 	cmpltu	r6,r6,r17
   4ce14:	1991c83a 	sub	r8,r3,r6
   4ce18:	3825883a 	mov	r18,r7
   4ce1c:	003e5706 	br	4c77c <__alt_data_end+0xfffda77c>
   4ce20:	4984b03a 	or	r2,r9,r6
   4ce24:	10002e26 	beq	r2,zero,4cee0 <__adddf3+0x7e0>
   4ce28:	4004d0fa 	srli	r2,r8,3
   4ce2c:	8822d0fa 	srli	r17,r17,3
   4ce30:	4010977a 	slli	r8,r8,29
   4ce34:	10c0022c 	andhi	r3,r2,8
   4ce38:	4462b03a 	or	r17,r8,r17
   4ce3c:	18000826 	beq	r3,zero,4ce60 <__adddf3+0x760>
   4ce40:	4808d0fa 	srli	r4,r9,3
   4ce44:	20c0022c 	andhi	r3,r4,8
   4ce48:	1800051e 	bne	r3,zero,4ce60 <__adddf3+0x760>
   4ce4c:	300cd0fa 	srli	r6,r6,3
   4ce50:	4806977a 	slli	r3,r9,29
   4ce54:	2005883a 	mov	r2,r4
   4ce58:	3825883a 	mov	r18,r7
   4ce5c:	19a2b03a 	or	r17,r3,r6
   4ce60:	8810d77a 	srli	r8,r17,29
   4ce64:	100490fa 	slli	r2,r2,3
   4ce68:	882290fa 	slli	r17,r17,3
   4ce6c:	0401ffc4 	movi	r16,2047
   4ce70:	4090b03a 	or	r8,r8,r2
   4ce74:	003e4106 	br	4c77c <__alt_data_end+0xfffda77c>
   4ce78:	0141ffc4 	movi	r5,2047
   4ce7c:	117fc71e 	bne	r2,r5,4cd9c <__alt_data_end+0xfffdad9c>
   4ce80:	4811883a 	mov	r8,r9
   4ce84:	3023883a 	mov	r17,r6
   4ce88:	1021883a 	mov	r16,r2
   4ce8c:	003e3b06 	br	4c77c <__alt_data_end+0xfffda77c>
   4ce90:	10002f26 	beq	r2,zero,4cf50 <__adddf3+0x850>
   4ce94:	4984b03a 	or	r2,r9,r6
   4ce98:	10001126 	beq	r2,zero,4cee0 <__adddf3+0x7e0>
   4ce9c:	4004d0fa 	srli	r2,r8,3
   4cea0:	8822d0fa 	srli	r17,r17,3
   4cea4:	4010977a 	slli	r8,r8,29
   4cea8:	10c0022c 	andhi	r3,r2,8
   4ceac:	4462b03a 	or	r17,r8,r17
   4ceb0:	183feb26 	beq	r3,zero,4ce60 <__alt_data_end+0xfffdae60>
   4ceb4:	4808d0fa 	srli	r4,r9,3
   4ceb8:	20c0022c 	andhi	r3,r4,8
   4cebc:	183fe81e 	bne	r3,zero,4ce60 <__alt_data_end+0xfffdae60>
   4cec0:	300cd0fa 	srli	r6,r6,3
   4cec4:	4806977a 	slli	r3,r9,29
   4cec8:	2005883a 	mov	r2,r4
   4cecc:	19a2b03a 	or	r17,r3,r6
   4ced0:	003fe306 	br	4ce60 <__alt_data_end+0xfffdae60>
   4ced4:	0011883a 	mov	r8,zero
   4ced8:	0005883a 	mov	r2,zero
   4cedc:	003e3f06 	br	4c7dc <__alt_data_end+0xfffda7dc>
   4cee0:	0401ffc4 	movi	r16,2047
   4cee4:	003e2506 	br	4c77c <__alt_data_end+0xfffda77c>
   4cee8:	0013883a 	mov	r9,zero
   4ceec:	003f8406 	br	4cd00 <__alt_data_end+0xfffdad00>
   4cef0:	0005883a 	mov	r2,zero
   4cef4:	0007883a 	mov	r3,zero
   4cef8:	003e8906 	br	4c920 <__alt_data_end+0xfffda920>
   4cefc:	197ff804 	addi	r5,r3,-32
   4cf00:	01000804 	movi	r4,32
   4cf04:	414ad83a 	srl	r5,r8,r5
   4cf08:	19002426 	beq	r3,r4,4cf9c <__adddf3+0x89c>
   4cf0c:	01001004 	movi	r4,64
   4cf10:	20c7c83a 	sub	r3,r4,r3
   4cf14:	40c6983a 	sll	r3,r8,r3
   4cf18:	1c46b03a 	or	r3,r3,r17
   4cf1c:	1806c03a 	cmpne	r3,r3,zero
   4cf20:	28e2b03a 	or	r17,r5,r3
   4cf24:	0007883a 	mov	r3,zero
   4cf28:	003f2306 	br	4cbb8 <__alt_data_end+0xfffdabb8>
   4cf2c:	0007883a 	mov	r3,zero
   4cf30:	5811883a 	mov	r8,r11
   4cf34:	00bfffc4 	movi	r2,-1
   4cf38:	0401ffc4 	movi	r16,2047
   4cf3c:	003e7806 	br	4c920 <__alt_data_end+0xfffda920>
   4cf40:	4462b03a 	or	r17,r8,r17
   4cf44:	8822c03a 	cmpne	r17,r17,zero
   4cf48:	0009883a 	mov	r4,zero
   4cf4c:	003fa006 	br	4cdd0 <__alt_data_end+0xfffdadd0>
   4cf50:	4811883a 	mov	r8,r9
   4cf54:	3023883a 	mov	r17,r6
   4cf58:	0401ffc4 	movi	r16,2047
   4cf5c:	003e0706 	br	4c77c <__alt_data_end+0xfffda77c>
   4cf60:	4811883a 	mov	r8,r9
   4cf64:	3023883a 	mov	r17,r6
   4cf68:	003e0406 	br	4c77c <__alt_data_end+0xfffda77c>
   4cf6c:	21fff804 	addi	r7,r4,-32
   4cf70:	01400804 	movi	r5,32
   4cf74:	41ced83a 	srl	r7,r8,r7
   4cf78:	21400a26 	beq	r4,r5,4cfa4 <__adddf3+0x8a4>
   4cf7c:	01401004 	movi	r5,64
   4cf80:	2909c83a 	sub	r4,r5,r4
   4cf84:	4108983a 	sll	r4,r8,r4
   4cf88:	2448b03a 	or	r4,r4,r17
   4cf8c:	2008c03a 	cmpne	r4,r4,zero
   4cf90:	3922b03a 	or	r17,r7,r4
   4cf94:	0009883a 	mov	r4,zero
   4cf98:	003f8d06 	br	4cdd0 <__alt_data_end+0xfffdadd0>
   4cf9c:	0007883a 	mov	r3,zero
   4cfa0:	003fdd06 	br	4cf18 <__alt_data_end+0xfffdaf18>
   4cfa4:	0009883a 	mov	r4,zero
   4cfa8:	003ff706 	br	4cf88 <__alt_data_end+0xfffdaf88>

0004cfac <__divdf3>:
   4cfac:	defff204 	addi	sp,sp,-56
   4cfb0:	dd400915 	stw	r21,36(sp)
   4cfb4:	282ad53a 	srli	r21,r5,20
   4cfb8:	dd000815 	stw	r20,32(sp)
   4cfbc:	2828d7fa 	srli	r20,r5,31
   4cfc0:	dc000415 	stw	r16,16(sp)
   4cfc4:	04000434 	movhi	r16,16
   4cfc8:	df000c15 	stw	fp,48(sp)
   4cfcc:	843fffc4 	addi	r16,r16,-1
   4cfd0:	dfc00d15 	stw	ra,52(sp)
   4cfd4:	ddc00b15 	stw	r23,44(sp)
   4cfd8:	dd800a15 	stw	r22,40(sp)
   4cfdc:	dcc00715 	stw	r19,28(sp)
   4cfe0:	dc800615 	stw	r18,24(sp)
   4cfe4:	dc400515 	stw	r17,20(sp)
   4cfe8:	ad41ffcc 	andi	r21,r21,2047
   4cfec:	2c20703a 	and	r16,r5,r16
   4cff0:	a7003fcc 	andi	fp,r20,255
   4cff4:	a8006126 	beq	r21,zero,4d17c <__divdf3+0x1d0>
   4cff8:	0081ffc4 	movi	r2,2047
   4cffc:	2025883a 	mov	r18,r4
   4d000:	a8803726 	beq	r21,r2,4d0e0 <__divdf3+0x134>
   4d004:	80800434 	orhi	r2,r16,16
   4d008:	100490fa 	slli	r2,r2,3
   4d00c:	2020d77a 	srli	r16,r4,29
   4d010:	202490fa 	slli	r18,r4,3
   4d014:	ad7f0044 	addi	r21,r21,-1023
   4d018:	80a0b03a 	or	r16,r16,r2
   4d01c:	0027883a 	mov	r19,zero
   4d020:	0013883a 	mov	r9,zero
   4d024:	3804d53a 	srli	r2,r7,20
   4d028:	382cd7fa 	srli	r22,r7,31
   4d02c:	04400434 	movhi	r17,16
   4d030:	8c7fffc4 	addi	r17,r17,-1
   4d034:	1081ffcc 	andi	r2,r2,2047
   4d038:	3011883a 	mov	r8,r6
   4d03c:	3c62703a 	and	r17,r7,r17
   4d040:	b5c03fcc 	andi	r23,r22,255
   4d044:	10006c26 	beq	r2,zero,4d1f8 <__divdf3+0x24c>
   4d048:	00c1ffc4 	movi	r3,2047
   4d04c:	10c06426 	beq	r2,r3,4d1e0 <__divdf3+0x234>
   4d050:	88c00434 	orhi	r3,r17,16
   4d054:	180690fa 	slli	r3,r3,3
   4d058:	3022d77a 	srli	r17,r6,29
   4d05c:	301090fa 	slli	r8,r6,3
   4d060:	10bf0044 	addi	r2,r2,-1023
   4d064:	88e2b03a 	or	r17,r17,r3
   4d068:	000f883a 	mov	r7,zero
   4d06c:	a58cf03a 	xor	r6,r20,r22
   4d070:	3cc8b03a 	or	r4,r7,r19
   4d074:	a8abc83a 	sub	r21,r21,r2
   4d078:	008003c4 	movi	r2,15
   4d07c:	3007883a 	mov	r3,r6
   4d080:	34c03fcc 	andi	r19,r6,255
   4d084:	11009036 	bltu	r2,r4,4d2c8 <__divdf3+0x31c>
   4d088:	200890ba 	slli	r4,r4,2
   4d08c:	00800174 	movhi	r2,5
   4d090:	10b42804 	addi	r2,r2,-12128
   4d094:	2089883a 	add	r4,r4,r2
   4d098:	20800017 	ldw	r2,0(r4)
   4d09c:	1000683a 	jmp	r2
   4d0a0:	0004d2c8 	cmpgei	zero,zero,4939
   4d0a4:	0004d118 	cmpnei	zero,zero,4932
   4d0a8:	0004d2b8 	rdprs	zero,zero,4938
   4d0ac:	0004d10c 	andi	zero,zero,4932
   4d0b0:	0004d2b8 	rdprs	zero,zero,4938
   4d0b4:	0004d28c 	andi	zero,zero,4938
   4d0b8:	0004d2b8 	rdprs	zero,zero,4938
   4d0bc:	0004d10c 	andi	zero,zero,4932
   4d0c0:	0004d118 	cmpnei	zero,zero,4932
   4d0c4:	0004d118 	cmpnei	zero,zero,4932
   4d0c8:	0004d28c 	andi	zero,zero,4938
   4d0cc:	0004d10c 	andi	zero,zero,4932
   4d0d0:	0004d0fc 	xorhi	zero,zero,4931
   4d0d4:	0004d0fc 	xorhi	zero,zero,4931
   4d0d8:	0004d0fc 	xorhi	zero,zero,4931
   4d0dc:	0004d5ac 	andhi	zero,zero,4950
   4d0e0:	2404b03a 	or	r2,r4,r16
   4d0e4:	1000661e 	bne	r2,zero,4d280 <__divdf3+0x2d4>
   4d0e8:	04c00204 	movi	r19,8
   4d0ec:	0021883a 	mov	r16,zero
   4d0f0:	0025883a 	mov	r18,zero
   4d0f4:	02400084 	movi	r9,2
   4d0f8:	003fca06 	br	4d024 <__alt_data_end+0xfffdb024>
   4d0fc:	8023883a 	mov	r17,r16
   4d100:	9011883a 	mov	r8,r18
   4d104:	e02f883a 	mov	r23,fp
   4d108:	480f883a 	mov	r7,r9
   4d10c:	00800084 	movi	r2,2
   4d110:	3881311e 	bne	r7,r2,4d5d8 <__divdf3+0x62c>
   4d114:	b827883a 	mov	r19,r23
   4d118:	98c0004c 	andi	r3,r19,1
   4d11c:	0081ffc4 	movi	r2,2047
   4d120:	000b883a 	mov	r5,zero
   4d124:	0025883a 	mov	r18,zero
   4d128:	1004953a 	slli	r2,r2,20
   4d12c:	18c03fcc 	andi	r3,r3,255
   4d130:	04400434 	movhi	r17,16
   4d134:	8c7fffc4 	addi	r17,r17,-1
   4d138:	180697fa 	slli	r3,r3,31
   4d13c:	2c4a703a 	and	r5,r5,r17
   4d140:	288ab03a 	or	r5,r5,r2
   4d144:	28c6b03a 	or	r3,r5,r3
   4d148:	9005883a 	mov	r2,r18
   4d14c:	dfc00d17 	ldw	ra,52(sp)
   4d150:	df000c17 	ldw	fp,48(sp)
   4d154:	ddc00b17 	ldw	r23,44(sp)
   4d158:	dd800a17 	ldw	r22,40(sp)
   4d15c:	dd400917 	ldw	r21,36(sp)
   4d160:	dd000817 	ldw	r20,32(sp)
   4d164:	dcc00717 	ldw	r19,28(sp)
   4d168:	dc800617 	ldw	r18,24(sp)
   4d16c:	dc400517 	ldw	r17,20(sp)
   4d170:	dc000417 	ldw	r16,16(sp)
   4d174:	dec00e04 	addi	sp,sp,56
   4d178:	f800283a 	ret
   4d17c:	2404b03a 	or	r2,r4,r16
   4d180:	2027883a 	mov	r19,r4
   4d184:	10003926 	beq	r2,zero,4d26c <__divdf3+0x2c0>
   4d188:	80012e26 	beq	r16,zero,4d644 <__divdf3+0x698>
   4d18c:	8009883a 	mov	r4,r16
   4d190:	d9800315 	stw	r6,12(sp)
   4d194:	d9c00215 	stw	r7,8(sp)
   4d198:	004ed040 	call	4ed04 <__clzsi2>
   4d19c:	d9800317 	ldw	r6,12(sp)
   4d1a0:	d9c00217 	ldw	r7,8(sp)
   4d1a4:	113ffd44 	addi	r4,r2,-11
   4d1a8:	00c00704 	movi	r3,28
   4d1ac:	19012116 	blt	r3,r4,4d634 <__divdf3+0x688>
   4d1b0:	00c00744 	movi	r3,29
   4d1b4:	147ffe04 	addi	r17,r2,-8
   4d1b8:	1907c83a 	sub	r3,r3,r4
   4d1bc:	8460983a 	sll	r16,r16,r17
   4d1c0:	98c6d83a 	srl	r3,r19,r3
   4d1c4:	9c64983a 	sll	r18,r19,r17
   4d1c8:	1c20b03a 	or	r16,r3,r16
   4d1cc:	1080fcc4 	addi	r2,r2,1011
   4d1d0:	00abc83a 	sub	r21,zero,r2
   4d1d4:	0027883a 	mov	r19,zero
   4d1d8:	0013883a 	mov	r9,zero
   4d1dc:	003f9106 	br	4d024 <__alt_data_end+0xfffdb024>
   4d1e0:	3446b03a 	or	r3,r6,r17
   4d1e4:	18001f1e 	bne	r3,zero,4d264 <__divdf3+0x2b8>
   4d1e8:	0023883a 	mov	r17,zero
   4d1ec:	0011883a 	mov	r8,zero
   4d1f0:	01c00084 	movi	r7,2
   4d1f4:	003f9d06 	br	4d06c <__alt_data_end+0xfffdb06c>
   4d1f8:	3446b03a 	or	r3,r6,r17
   4d1fc:	18001526 	beq	r3,zero,4d254 <__divdf3+0x2a8>
   4d200:	88011b26 	beq	r17,zero,4d670 <__divdf3+0x6c4>
   4d204:	8809883a 	mov	r4,r17
   4d208:	d9800315 	stw	r6,12(sp)
   4d20c:	da400115 	stw	r9,4(sp)
   4d210:	004ed040 	call	4ed04 <__clzsi2>
   4d214:	d9800317 	ldw	r6,12(sp)
   4d218:	da400117 	ldw	r9,4(sp)
   4d21c:	113ffd44 	addi	r4,r2,-11
   4d220:	00c00704 	movi	r3,28
   4d224:	19010e16 	blt	r3,r4,4d660 <__divdf3+0x6b4>
   4d228:	00c00744 	movi	r3,29
   4d22c:	123ffe04 	addi	r8,r2,-8
   4d230:	1907c83a 	sub	r3,r3,r4
   4d234:	8a22983a 	sll	r17,r17,r8
   4d238:	30c6d83a 	srl	r3,r6,r3
   4d23c:	3210983a 	sll	r8,r6,r8
   4d240:	1c62b03a 	or	r17,r3,r17
   4d244:	1080fcc4 	addi	r2,r2,1011
   4d248:	0085c83a 	sub	r2,zero,r2
   4d24c:	000f883a 	mov	r7,zero
   4d250:	003f8606 	br	4d06c <__alt_data_end+0xfffdb06c>
   4d254:	0023883a 	mov	r17,zero
   4d258:	0011883a 	mov	r8,zero
   4d25c:	01c00044 	movi	r7,1
   4d260:	003f8206 	br	4d06c <__alt_data_end+0xfffdb06c>
   4d264:	01c000c4 	movi	r7,3
   4d268:	003f8006 	br	4d06c <__alt_data_end+0xfffdb06c>
   4d26c:	04c00104 	movi	r19,4
   4d270:	0021883a 	mov	r16,zero
   4d274:	0025883a 	mov	r18,zero
   4d278:	02400044 	movi	r9,1
   4d27c:	003f6906 	br	4d024 <__alt_data_end+0xfffdb024>
   4d280:	04c00304 	movi	r19,12
   4d284:	024000c4 	movi	r9,3
   4d288:	003f6606 	br	4d024 <__alt_data_end+0xfffdb024>
   4d28c:	01400434 	movhi	r5,16
   4d290:	0007883a 	mov	r3,zero
   4d294:	297fffc4 	addi	r5,r5,-1
   4d298:	04bfffc4 	movi	r18,-1
   4d29c:	0081ffc4 	movi	r2,2047
   4d2a0:	003fa106 	br	4d128 <__alt_data_end+0xfffdb128>
   4d2a4:	00c00044 	movi	r3,1
   4d2a8:	1887c83a 	sub	r3,r3,r2
   4d2ac:	01000e04 	movi	r4,56
   4d2b0:	20c1210e 	bge	r4,r3,4d738 <__divdf3+0x78c>
   4d2b4:	98c0004c 	andi	r3,r19,1
   4d2b8:	0005883a 	mov	r2,zero
   4d2bc:	000b883a 	mov	r5,zero
   4d2c0:	0025883a 	mov	r18,zero
   4d2c4:	003f9806 	br	4d128 <__alt_data_end+0xfffdb128>
   4d2c8:	8c00fd36 	bltu	r17,r16,4d6c0 <__divdf3+0x714>
   4d2cc:	8440fb26 	beq	r16,r17,4d6bc <__divdf3+0x710>
   4d2d0:	8007883a 	mov	r3,r16
   4d2d4:	ad7fffc4 	addi	r21,r21,-1
   4d2d8:	0021883a 	mov	r16,zero
   4d2dc:	4004d63a 	srli	r2,r8,24
   4d2e0:	8822923a 	slli	r17,r17,8
   4d2e4:	1809883a 	mov	r4,r3
   4d2e8:	402c923a 	slli	r22,r8,8
   4d2ec:	88b8b03a 	or	fp,r17,r2
   4d2f0:	e028d43a 	srli	r20,fp,16
   4d2f4:	d8c00015 	stw	r3,0(sp)
   4d2f8:	e5ffffcc 	andi	r23,fp,65535
   4d2fc:	a00b883a 	mov	r5,r20
   4d300:	00418d00 	call	418d0 <__udivsi3>
   4d304:	d8c00017 	ldw	r3,0(sp)
   4d308:	a00b883a 	mov	r5,r20
   4d30c:	d8800315 	stw	r2,12(sp)
   4d310:	1809883a 	mov	r4,r3
   4d314:	00419340 	call	41934 <__umodsi3>
   4d318:	d9800317 	ldw	r6,12(sp)
   4d31c:	1006943a 	slli	r3,r2,16
   4d320:	9004d43a 	srli	r2,r18,16
   4d324:	b9a3383a 	mul	r17,r23,r6
   4d328:	10c4b03a 	or	r2,r2,r3
   4d32c:	1440062e 	bgeu	r2,r17,4d348 <__divdf3+0x39c>
   4d330:	1705883a 	add	r2,r2,fp
   4d334:	30ffffc4 	addi	r3,r6,-1
   4d338:	1700ee36 	bltu	r2,fp,4d6f4 <__divdf3+0x748>
   4d33c:	1440ed2e 	bgeu	r2,r17,4d6f4 <__divdf3+0x748>
   4d340:	31bfff84 	addi	r6,r6,-2
   4d344:	1705883a 	add	r2,r2,fp
   4d348:	1463c83a 	sub	r17,r2,r17
   4d34c:	a00b883a 	mov	r5,r20
   4d350:	8809883a 	mov	r4,r17
   4d354:	d9800315 	stw	r6,12(sp)
   4d358:	00418d00 	call	418d0 <__udivsi3>
   4d35c:	a00b883a 	mov	r5,r20
   4d360:	8809883a 	mov	r4,r17
   4d364:	d8800215 	stw	r2,8(sp)
   4d368:	00419340 	call	41934 <__umodsi3>
   4d36c:	d9c00217 	ldw	r7,8(sp)
   4d370:	1004943a 	slli	r2,r2,16
   4d374:	94bfffcc 	andi	r18,r18,65535
   4d378:	b9d1383a 	mul	r8,r23,r7
   4d37c:	90a4b03a 	or	r18,r18,r2
   4d380:	d9800317 	ldw	r6,12(sp)
   4d384:	9200062e 	bgeu	r18,r8,4d3a0 <__divdf3+0x3f4>
   4d388:	9725883a 	add	r18,r18,fp
   4d38c:	38bfffc4 	addi	r2,r7,-1
   4d390:	9700d636 	bltu	r18,fp,4d6ec <__divdf3+0x740>
   4d394:	9200d52e 	bgeu	r18,r8,4d6ec <__divdf3+0x740>
   4d398:	39ffff84 	addi	r7,r7,-2
   4d39c:	9725883a 	add	r18,r18,fp
   4d3a0:	3004943a 	slli	r2,r6,16
   4d3a4:	b012d43a 	srli	r9,r22,16
   4d3a8:	b1bfffcc 	andi	r6,r22,65535
   4d3ac:	11e2b03a 	or	r17,r2,r7
   4d3b0:	8806d43a 	srli	r3,r17,16
   4d3b4:	893fffcc 	andi	r4,r17,65535
   4d3b8:	218b383a 	mul	r5,r4,r6
   4d3bc:	30c5383a 	mul	r2,r6,r3
   4d3c0:	2249383a 	mul	r4,r4,r9
   4d3c4:	280ed43a 	srli	r7,r5,16
   4d3c8:	9225c83a 	sub	r18,r18,r8
   4d3cc:	2089883a 	add	r4,r4,r2
   4d3d0:	3909883a 	add	r4,r7,r4
   4d3d4:	1a47383a 	mul	r3,r3,r9
   4d3d8:	2080022e 	bgeu	r4,r2,4d3e4 <__divdf3+0x438>
   4d3dc:	00800074 	movhi	r2,1
   4d3e0:	1887883a 	add	r3,r3,r2
   4d3e4:	2004d43a 	srli	r2,r4,16
   4d3e8:	2008943a 	slli	r4,r4,16
   4d3ec:	297fffcc 	andi	r5,r5,65535
   4d3f0:	10c7883a 	add	r3,r2,r3
   4d3f4:	2149883a 	add	r4,r4,r5
   4d3f8:	90c0a536 	bltu	r18,r3,4d690 <__divdf3+0x6e4>
   4d3fc:	90c0bf26 	beq	r18,r3,4d6fc <__divdf3+0x750>
   4d400:	90c7c83a 	sub	r3,r18,r3
   4d404:	810fc83a 	sub	r7,r16,r4
   4d408:	81e5803a 	cmpltu	r18,r16,r7
   4d40c:	1ca5c83a 	sub	r18,r3,r18
   4d410:	e480c126 	beq	fp,r18,4d718 <__divdf3+0x76c>
   4d414:	a00b883a 	mov	r5,r20
   4d418:	9009883a 	mov	r4,r18
   4d41c:	d9800315 	stw	r6,12(sp)
   4d420:	d9c00215 	stw	r7,8(sp)
   4d424:	da400115 	stw	r9,4(sp)
   4d428:	00418d00 	call	418d0 <__udivsi3>
   4d42c:	a00b883a 	mov	r5,r20
   4d430:	9009883a 	mov	r4,r18
   4d434:	d8800015 	stw	r2,0(sp)
   4d438:	00419340 	call	41934 <__umodsi3>
   4d43c:	d9c00217 	ldw	r7,8(sp)
   4d440:	da000017 	ldw	r8,0(sp)
   4d444:	1006943a 	slli	r3,r2,16
   4d448:	3804d43a 	srli	r2,r7,16
   4d44c:	ba21383a 	mul	r16,r23,r8
   4d450:	d9800317 	ldw	r6,12(sp)
   4d454:	10c4b03a 	or	r2,r2,r3
   4d458:	da400117 	ldw	r9,4(sp)
   4d45c:	1400062e 	bgeu	r2,r16,4d478 <__divdf3+0x4cc>
   4d460:	1705883a 	add	r2,r2,fp
   4d464:	40ffffc4 	addi	r3,r8,-1
   4d468:	1700ad36 	bltu	r2,fp,4d720 <__divdf3+0x774>
   4d46c:	1400ac2e 	bgeu	r2,r16,4d720 <__divdf3+0x774>
   4d470:	423fff84 	addi	r8,r8,-2
   4d474:	1705883a 	add	r2,r2,fp
   4d478:	1421c83a 	sub	r16,r2,r16
   4d47c:	a00b883a 	mov	r5,r20
   4d480:	8009883a 	mov	r4,r16
   4d484:	d9800315 	stw	r6,12(sp)
   4d488:	d9c00215 	stw	r7,8(sp)
   4d48c:	da000015 	stw	r8,0(sp)
   4d490:	da400115 	stw	r9,4(sp)
   4d494:	00418d00 	call	418d0 <__udivsi3>
   4d498:	8009883a 	mov	r4,r16
   4d49c:	a00b883a 	mov	r5,r20
   4d4a0:	1025883a 	mov	r18,r2
   4d4a4:	00419340 	call	41934 <__umodsi3>
   4d4a8:	d9c00217 	ldw	r7,8(sp)
   4d4ac:	1004943a 	slli	r2,r2,16
   4d4b0:	bcaf383a 	mul	r23,r23,r18
   4d4b4:	393fffcc 	andi	r4,r7,65535
   4d4b8:	2088b03a 	or	r4,r4,r2
   4d4bc:	d9800317 	ldw	r6,12(sp)
   4d4c0:	da000017 	ldw	r8,0(sp)
   4d4c4:	da400117 	ldw	r9,4(sp)
   4d4c8:	25c0062e 	bgeu	r4,r23,4d4e4 <__divdf3+0x538>
   4d4cc:	2709883a 	add	r4,r4,fp
   4d4d0:	90bfffc4 	addi	r2,r18,-1
   4d4d4:	27009436 	bltu	r4,fp,4d728 <__divdf3+0x77c>
   4d4d8:	25c0932e 	bgeu	r4,r23,4d728 <__divdf3+0x77c>
   4d4dc:	94bfff84 	addi	r18,r18,-2
   4d4e0:	2709883a 	add	r4,r4,fp
   4d4e4:	4004943a 	slli	r2,r8,16
   4d4e8:	25efc83a 	sub	r23,r4,r23
   4d4ec:	1490b03a 	or	r8,r2,r18
   4d4f0:	4008d43a 	srli	r4,r8,16
   4d4f4:	40ffffcc 	andi	r3,r8,65535
   4d4f8:	30c5383a 	mul	r2,r6,r3
   4d4fc:	1a47383a 	mul	r3,r3,r9
   4d500:	310d383a 	mul	r6,r6,r4
   4d504:	100ad43a 	srli	r5,r2,16
   4d508:	4913383a 	mul	r9,r9,r4
   4d50c:	1987883a 	add	r3,r3,r6
   4d510:	28c7883a 	add	r3,r5,r3
   4d514:	1980022e 	bgeu	r3,r6,4d520 <__divdf3+0x574>
   4d518:	01000074 	movhi	r4,1
   4d51c:	4913883a 	add	r9,r9,r4
   4d520:	1808d43a 	srli	r4,r3,16
   4d524:	1806943a 	slli	r3,r3,16
   4d528:	10bfffcc 	andi	r2,r2,65535
   4d52c:	2253883a 	add	r9,r4,r9
   4d530:	1887883a 	add	r3,r3,r2
   4d534:	ba403836 	bltu	r23,r9,4d618 <__divdf3+0x66c>
   4d538:	ba403626 	beq	r23,r9,4d614 <__divdf3+0x668>
   4d53c:	42000054 	ori	r8,r8,1
   4d540:	a880ffc4 	addi	r2,r21,1023
   4d544:	00bf570e 	bge	zero,r2,4d2a4 <__alt_data_end+0xfffdb2a4>
   4d548:	40c001cc 	andi	r3,r8,7
   4d54c:	18000726 	beq	r3,zero,4d56c <__divdf3+0x5c0>
   4d550:	40c003cc 	andi	r3,r8,15
   4d554:	01000104 	movi	r4,4
   4d558:	19000426 	beq	r3,r4,4d56c <__divdf3+0x5c0>
   4d55c:	4107883a 	add	r3,r8,r4
   4d560:	1a11803a 	cmpltu	r8,r3,r8
   4d564:	8a23883a 	add	r17,r17,r8
   4d568:	1811883a 	mov	r8,r3
   4d56c:	88c0402c 	andhi	r3,r17,256
   4d570:	18000426 	beq	r3,zero,4d584 <__divdf3+0x5d8>
   4d574:	00ffc034 	movhi	r3,65280
   4d578:	18ffffc4 	addi	r3,r3,-1
   4d57c:	a8810004 	addi	r2,r21,1024
   4d580:	88e2703a 	and	r17,r17,r3
   4d584:	00c1ff84 	movi	r3,2046
   4d588:	18bee316 	blt	r3,r2,4d118 <__alt_data_end+0xfffdb118>
   4d58c:	8824977a 	slli	r18,r17,29
   4d590:	4010d0fa 	srli	r8,r8,3
   4d594:	8822927a 	slli	r17,r17,9
   4d598:	1081ffcc 	andi	r2,r2,2047
   4d59c:	9224b03a 	or	r18,r18,r8
   4d5a0:	880ad33a 	srli	r5,r17,12
   4d5a4:	98c0004c 	andi	r3,r19,1
   4d5a8:	003edf06 	br	4d128 <__alt_data_end+0xfffdb128>
   4d5ac:	8080022c 	andhi	r2,r16,8
   4d5b0:	10001226 	beq	r2,zero,4d5fc <__divdf3+0x650>
   4d5b4:	8880022c 	andhi	r2,r17,8
   4d5b8:	1000101e 	bne	r2,zero,4d5fc <__divdf3+0x650>
   4d5bc:	00800434 	movhi	r2,16
   4d5c0:	89400234 	orhi	r5,r17,8
   4d5c4:	10bfffc4 	addi	r2,r2,-1
   4d5c8:	b007883a 	mov	r3,r22
   4d5cc:	288a703a 	and	r5,r5,r2
   4d5d0:	4025883a 	mov	r18,r8
   4d5d4:	003f3106 	br	4d29c <__alt_data_end+0xfffdb29c>
   4d5d8:	008000c4 	movi	r2,3
   4d5dc:	3880a626 	beq	r7,r2,4d878 <__divdf3+0x8cc>
   4d5e0:	00800044 	movi	r2,1
   4d5e4:	3880521e 	bne	r7,r2,4d730 <__divdf3+0x784>
   4d5e8:	b807883a 	mov	r3,r23
   4d5ec:	0005883a 	mov	r2,zero
   4d5f0:	000b883a 	mov	r5,zero
   4d5f4:	0025883a 	mov	r18,zero
   4d5f8:	003ecb06 	br	4d128 <__alt_data_end+0xfffdb128>
   4d5fc:	00800434 	movhi	r2,16
   4d600:	81400234 	orhi	r5,r16,8
   4d604:	10bfffc4 	addi	r2,r2,-1
   4d608:	a007883a 	mov	r3,r20
   4d60c:	288a703a 	and	r5,r5,r2
   4d610:	003f2206 	br	4d29c <__alt_data_end+0xfffdb29c>
   4d614:	183fca26 	beq	r3,zero,4d540 <__alt_data_end+0xfffdb540>
   4d618:	e5ef883a 	add	r23,fp,r23
   4d61c:	40bfffc4 	addi	r2,r8,-1
   4d620:	bf00392e 	bgeu	r23,fp,4d708 <__divdf3+0x75c>
   4d624:	1011883a 	mov	r8,r2
   4d628:	ba7fc41e 	bne	r23,r9,4d53c <__alt_data_end+0xfffdb53c>
   4d62c:	b0ffc31e 	bne	r22,r3,4d53c <__alt_data_end+0xfffdb53c>
   4d630:	003fc306 	br	4d540 <__alt_data_end+0xfffdb540>
   4d634:	143ff604 	addi	r16,r2,-40
   4d638:	9c20983a 	sll	r16,r19,r16
   4d63c:	0025883a 	mov	r18,zero
   4d640:	003ee206 	br	4d1cc <__alt_data_end+0xfffdb1cc>
   4d644:	d9800315 	stw	r6,12(sp)
   4d648:	d9c00215 	stw	r7,8(sp)
   4d64c:	004ed040 	call	4ed04 <__clzsi2>
   4d650:	10800804 	addi	r2,r2,32
   4d654:	d9c00217 	ldw	r7,8(sp)
   4d658:	d9800317 	ldw	r6,12(sp)
   4d65c:	003ed106 	br	4d1a4 <__alt_data_end+0xfffdb1a4>
   4d660:	147ff604 	addi	r17,r2,-40
   4d664:	3462983a 	sll	r17,r6,r17
   4d668:	0011883a 	mov	r8,zero
   4d66c:	003ef506 	br	4d244 <__alt_data_end+0xfffdb244>
   4d670:	3009883a 	mov	r4,r6
   4d674:	d9800315 	stw	r6,12(sp)
   4d678:	da400115 	stw	r9,4(sp)
   4d67c:	004ed040 	call	4ed04 <__clzsi2>
   4d680:	10800804 	addi	r2,r2,32
   4d684:	da400117 	ldw	r9,4(sp)
   4d688:	d9800317 	ldw	r6,12(sp)
   4d68c:	003ee306 	br	4d21c <__alt_data_end+0xfffdb21c>
   4d690:	85a1883a 	add	r16,r16,r22
   4d694:	8585803a 	cmpltu	r2,r16,r22
   4d698:	1705883a 	add	r2,r2,fp
   4d69c:	14a5883a 	add	r18,r2,r18
   4d6a0:	88bfffc4 	addi	r2,r17,-1
   4d6a4:	e4800c2e 	bgeu	fp,r18,4d6d8 <__divdf3+0x72c>
   4d6a8:	90c03e36 	bltu	r18,r3,4d7a4 <__divdf3+0x7f8>
   4d6ac:	1c806926 	beq	r3,r18,4d854 <__divdf3+0x8a8>
   4d6b0:	90c7c83a 	sub	r3,r18,r3
   4d6b4:	1023883a 	mov	r17,r2
   4d6b8:	003f5206 	br	4d404 <__alt_data_end+0xfffdb404>
   4d6bc:	923f0436 	bltu	r18,r8,4d2d0 <__alt_data_end+0xfffdb2d0>
   4d6c0:	800897fa 	slli	r4,r16,31
   4d6c4:	9004d07a 	srli	r2,r18,1
   4d6c8:	8006d07a 	srli	r3,r16,1
   4d6cc:	902097fa 	slli	r16,r18,31
   4d6d0:	20a4b03a 	or	r18,r4,r2
   4d6d4:	003f0106 	br	4d2dc <__alt_data_end+0xfffdb2dc>
   4d6d8:	e4bff51e 	bne	fp,r18,4d6b0 <__alt_data_end+0xfffdb6b0>
   4d6dc:	85bff22e 	bgeu	r16,r22,4d6a8 <__alt_data_end+0xfffdb6a8>
   4d6e0:	e0c7c83a 	sub	r3,fp,r3
   4d6e4:	1023883a 	mov	r17,r2
   4d6e8:	003f4606 	br	4d404 <__alt_data_end+0xfffdb404>
   4d6ec:	100f883a 	mov	r7,r2
   4d6f0:	003f2b06 	br	4d3a0 <__alt_data_end+0xfffdb3a0>
   4d6f4:	180d883a 	mov	r6,r3
   4d6f8:	003f1306 	br	4d348 <__alt_data_end+0xfffdb348>
   4d6fc:	813fe436 	bltu	r16,r4,4d690 <__alt_data_end+0xfffdb690>
   4d700:	0007883a 	mov	r3,zero
   4d704:	003f3f06 	br	4d404 <__alt_data_end+0xfffdb404>
   4d708:	ba402c36 	bltu	r23,r9,4d7bc <__divdf3+0x810>
   4d70c:	4dc05426 	beq	r9,r23,4d860 <__divdf3+0x8b4>
   4d710:	1011883a 	mov	r8,r2
   4d714:	003f8906 	br	4d53c <__alt_data_end+0xfffdb53c>
   4d718:	023fffc4 	movi	r8,-1
   4d71c:	003f8806 	br	4d540 <__alt_data_end+0xfffdb540>
   4d720:	1811883a 	mov	r8,r3
   4d724:	003f5406 	br	4d478 <__alt_data_end+0xfffdb478>
   4d728:	1025883a 	mov	r18,r2
   4d72c:	003f6d06 	br	4d4e4 <__alt_data_end+0xfffdb4e4>
   4d730:	b827883a 	mov	r19,r23
   4d734:	003f8206 	br	4d540 <__alt_data_end+0xfffdb540>
   4d738:	010007c4 	movi	r4,31
   4d73c:	20c02616 	blt	r4,r3,4d7d8 <__divdf3+0x82c>
   4d740:	00800804 	movi	r2,32
   4d744:	10c5c83a 	sub	r2,r2,r3
   4d748:	888a983a 	sll	r5,r17,r2
   4d74c:	40c8d83a 	srl	r4,r8,r3
   4d750:	4084983a 	sll	r2,r8,r2
   4d754:	88e2d83a 	srl	r17,r17,r3
   4d758:	2906b03a 	or	r3,r5,r4
   4d75c:	1004c03a 	cmpne	r2,r2,zero
   4d760:	1886b03a 	or	r3,r3,r2
   4d764:	188001cc 	andi	r2,r3,7
   4d768:	10000726 	beq	r2,zero,4d788 <__divdf3+0x7dc>
   4d76c:	188003cc 	andi	r2,r3,15
   4d770:	01000104 	movi	r4,4
   4d774:	11000426 	beq	r2,r4,4d788 <__divdf3+0x7dc>
   4d778:	1805883a 	mov	r2,r3
   4d77c:	10c00104 	addi	r3,r2,4
   4d780:	1885803a 	cmpltu	r2,r3,r2
   4d784:	88a3883a 	add	r17,r17,r2
   4d788:	8880202c 	andhi	r2,r17,128
   4d78c:	10002726 	beq	r2,zero,4d82c <__divdf3+0x880>
   4d790:	98c0004c 	andi	r3,r19,1
   4d794:	00800044 	movi	r2,1
   4d798:	000b883a 	mov	r5,zero
   4d79c:	0025883a 	mov	r18,zero
   4d7a0:	003e6106 	br	4d128 <__alt_data_end+0xfffdb128>
   4d7a4:	85a1883a 	add	r16,r16,r22
   4d7a8:	8585803a 	cmpltu	r2,r16,r22
   4d7ac:	1705883a 	add	r2,r2,fp
   4d7b0:	14a5883a 	add	r18,r2,r18
   4d7b4:	8c7fff84 	addi	r17,r17,-2
   4d7b8:	003f1106 	br	4d400 <__alt_data_end+0xfffdb400>
   4d7bc:	b589883a 	add	r4,r22,r22
   4d7c0:	25ad803a 	cmpltu	r22,r4,r22
   4d7c4:	b739883a 	add	fp,r22,fp
   4d7c8:	40bfff84 	addi	r2,r8,-2
   4d7cc:	bf2f883a 	add	r23,r23,fp
   4d7d0:	202d883a 	mov	r22,r4
   4d7d4:	003f9306 	br	4d624 <__alt_data_end+0xfffdb624>
   4d7d8:	013ff844 	movi	r4,-31
   4d7dc:	2085c83a 	sub	r2,r4,r2
   4d7e0:	8888d83a 	srl	r4,r17,r2
   4d7e4:	00800804 	movi	r2,32
   4d7e8:	18802126 	beq	r3,r2,4d870 <__divdf3+0x8c4>
   4d7ec:	00801004 	movi	r2,64
   4d7f0:	10c5c83a 	sub	r2,r2,r3
   4d7f4:	8884983a 	sll	r2,r17,r2
   4d7f8:	1204b03a 	or	r2,r2,r8
   4d7fc:	1004c03a 	cmpne	r2,r2,zero
   4d800:	2084b03a 	or	r2,r4,r2
   4d804:	144001cc 	andi	r17,r2,7
   4d808:	88000d1e 	bne	r17,zero,4d840 <__divdf3+0x894>
   4d80c:	000b883a 	mov	r5,zero
   4d810:	1024d0fa 	srli	r18,r2,3
   4d814:	98c0004c 	andi	r3,r19,1
   4d818:	0005883a 	mov	r2,zero
   4d81c:	9464b03a 	or	r18,r18,r17
   4d820:	003e4106 	br	4d128 <__alt_data_end+0xfffdb128>
   4d824:	1007883a 	mov	r3,r2
   4d828:	0023883a 	mov	r17,zero
   4d82c:	880a927a 	slli	r5,r17,9
   4d830:	1805883a 	mov	r2,r3
   4d834:	8822977a 	slli	r17,r17,29
   4d838:	280ad33a 	srli	r5,r5,12
   4d83c:	003ff406 	br	4d810 <__alt_data_end+0xfffdb810>
   4d840:	10c003cc 	andi	r3,r2,15
   4d844:	01000104 	movi	r4,4
   4d848:	193ff626 	beq	r3,r4,4d824 <__alt_data_end+0xfffdb824>
   4d84c:	0023883a 	mov	r17,zero
   4d850:	003fca06 	br	4d77c <__alt_data_end+0xfffdb77c>
   4d854:	813fd336 	bltu	r16,r4,4d7a4 <__alt_data_end+0xfffdb7a4>
   4d858:	1023883a 	mov	r17,r2
   4d85c:	003fa806 	br	4d700 <__alt_data_end+0xfffdb700>
   4d860:	b0ffd636 	bltu	r22,r3,4d7bc <__alt_data_end+0xfffdb7bc>
   4d864:	1011883a 	mov	r8,r2
   4d868:	b0ff341e 	bne	r22,r3,4d53c <__alt_data_end+0xfffdb53c>
   4d86c:	003f3406 	br	4d540 <__alt_data_end+0xfffdb540>
   4d870:	0005883a 	mov	r2,zero
   4d874:	003fe006 	br	4d7f8 <__alt_data_end+0xfffdb7f8>
   4d878:	00800434 	movhi	r2,16
   4d87c:	89400234 	orhi	r5,r17,8
   4d880:	10bfffc4 	addi	r2,r2,-1
   4d884:	b807883a 	mov	r3,r23
   4d888:	288a703a 	and	r5,r5,r2
   4d88c:	4025883a 	mov	r18,r8
   4d890:	003e8206 	br	4d29c <__alt_data_end+0xfffdb29c>

0004d894 <__eqdf2>:
   4d894:	2804d53a 	srli	r2,r5,20
   4d898:	3806d53a 	srli	r3,r7,20
   4d89c:	02000434 	movhi	r8,16
   4d8a0:	423fffc4 	addi	r8,r8,-1
   4d8a4:	1081ffcc 	andi	r2,r2,2047
   4d8a8:	0281ffc4 	movi	r10,2047
   4d8ac:	2a12703a 	and	r9,r5,r8
   4d8b0:	18c1ffcc 	andi	r3,r3,2047
   4d8b4:	3a10703a 	and	r8,r7,r8
   4d8b8:	280ad7fa 	srli	r5,r5,31
   4d8bc:	380ed7fa 	srli	r7,r7,31
   4d8c0:	12801026 	beq	r2,r10,4d904 <__eqdf2+0x70>
   4d8c4:	0281ffc4 	movi	r10,2047
   4d8c8:	1a800a26 	beq	r3,r10,4d8f4 <__eqdf2+0x60>
   4d8cc:	10c00226 	beq	r2,r3,4d8d8 <__eqdf2+0x44>
   4d8d0:	00800044 	movi	r2,1
   4d8d4:	f800283a 	ret
   4d8d8:	4a3ffd1e 	bne	r9,r8,4d8d0 <__alt_data_end+0xfffdb8d0>
   4d8dc:	21bffc1e 	bne	r4,r6,4d8d0 <__alt_data_end+0xfffdb8d0>
   4d8e0:	29c00c26 	beq	r5,r7,4d914 <__eqdf2+0x80>
   4d8e4:	103ffa1e 	bne	r2,zero,4d8d0 <__alt_data_end+0xfffdb8d0>
   4d8e8:	2244b03a 	or	r2,r4,r9
   4d8ec:	1004c03a 	cmpne	r2,r2,zero
   4d8f0:	f800283a 	ret
   4d8f4:	3214b03a 	or	r10,r6,r8
   4d8f8:	503ff426 	beq	r10,zero,4d8cc <__alt_data_end+0xfffdb8cc>
   4d8fc:	00800044 	movi	r2,1
   4d900:	f800283a 	ret
   4d904:	2254b03a 	or	r10,r4,r9
   4d908:	503fee26 	beq	r10,zero,4d8c4 <__alt_data_end+0xfffdb8c4>
   4d90c:	00800044 	movi	r2,1
   4d910:	f800283a 	ret
   4d914:	0005883a 	mov	r2,zero
   4d918:	f800283a 	ret

0004d91c <__gedf2>:
   4d91c:	2804d53a 	srli	r2,r5,20
   4d920:	3806d53a 	srli	r3,r7,20
   4d924:	02000434 	movhi	r8,16
   4d928:	423fffc4 	addi	r8,r8,-1
   4d92c:	1081ffcc 	andi	r2,r2,2047
   4d930:	0241ffc4 	movi	r9,2047
   4d934:	2a14703a 	and	r10,r5,r8
   4d938:	18c1ffcc 	andi	r3,r3,2047
   4d93c:	3a10703a 	and	r8,r7,r8
   4d940:	280ad7fa 	srli	r5,r5,31
   4d944:	380ed7fa 	srli	r7,r7,31
   4d948:	12401d26 	beq	r2,r9,4d9c0 <__gedf2+0xa4>
   4d94c:	0241ffc4 	movi	r9,2047
   4d950:	1a401226 	beq	r3,r9,4d99c <__gedf2+0x80>
   4d954:	1000081e 	bne	r2,zero,4d978 <__gedf2+0x5c>
   4d958:	2296b03a 	or	r11,r4,r10
   4d95c:	5813003a 	cmpeq	r9,r11,zero
   4d960:	1800091e 	bne	r3,zero,4d988 <__gedf2+0x6c>
   4d964:	3218b03a 	or	r12,r6,r8
   4d968:	6000071e 	bne	r12,zero,4d988 <__gedf2+0x6c>
   4d96c:	0005883a 	mov	r2,zero
   4d970:	5800101e 	bne	r11,zero,4d9b4 <__gedf2+0x98>
   4d974:	f800283a 	ret
   4d978:	18000c1e 	bne	r3,zero,4d9ac <__gedf2+0x90>
   4d97c:	3212b03a 	or	r9,r6,r8
   4d980:	48000c26 	beq	r9,zero,4d9b4 <__gedf2+0x98>
   4d984:	0013883a 	mov	r9,zero
   4d988:	39c03fcc 	andi	r7,r7,255
   4d98c:	48000826 	beq	r9,zero,4d9b0 <__gedf2+0x94>
   4d990:	38000926 	beq	r7,zero,4d9b8 <__gedf2+0x9c>
   4d994:	00800044 	movi	r2,1
   4d998:	f800283a 	ret
   4d99c:	3212b03a 	or	r9,r6,r8
   4d9a0:	483fec26 	beq	r9,zero,4d954 <__alt_data_end+0xfffdb954>
   4d9a4:	00bfff84 	movi	r2,-2
   4d9a8:	f800283a 	ret
   4d9ac:	39c03fcc 	andi	r7,r7,255
   4d9b0:	29c00626 	beq	r5,r7,4d9cc <__gedf2+0xb0>
   4d9b4:	283ff726 	beq	r5,zero,4d994 <__alt_data_end+0xfffdb994>
   4d9b8:	00bfffc4 	movi	r2,-1
   4d9bc:	f800283a 	ret
   4d9c0:	2292b03a 	or	r9,r4,r10
   4d9c4:	483fe126 	beq	r9,zero,4d94c <__alt_data_end+0xfffdb94c>
   4d9c8:	003ff606 	br	4d9a4 <__alt_data_end+0xfffdb9a4>
   4d9cc:	18bff916 	blt	r3,r2,4d9b4 <__alt_data_end+0xfffdb9b4>
   4d9d0:	10c00316 	blt	r2,r3,4d9e0 <__gedf2+0xc4>
   4d9d4:	42bff736 	bltu	r8,r10,4d9b4 <__alt_data_end+0xfffdb9b4>
   4d9d8:	52000326 	beq	r10,r8,4d9e8 <__gedf2+0xcc>
   4d9dc:	5200042e 	bgeu	r10,r8,4d9f0 <__gedf2+0xd4>
   4d9e0:	283fec1e 	bne	r5,zero,4d994 <__alt_data_end+0xfffdb994>
   4d9e4:	003ff406 	br	4d9b8 <__alt_data_end+0xfffdb9b8>
   4d9e8:	313ff236 	bltu	r6,r4,4d9b4 <__alt_data_end+0xfffdb9b4>
   4d9ec:	21bffc36 	bltu	r4,r6,4d9e0 <__alt_data_end+0xfffdb9e0>
   4d9f0:	0005883a 	mov	r2,zero
   4d9f4:	f800283a 	ret

0004d9f8 <__ledf2>:
   4d9f8:	2804d53a 	srli	r2,r5,20
   4d9fc:	3810d53a 	srli	r8,r7,20
   4da00:	00c00434 	movhi	r3,16
   4da04:	18ffffc4 	addi	r3,r3,-1
   4da08:	1081ffcc 	andi	r2,r2,2047
   4da0c:	0241ffc4 	movi	r9,2047
   4da10:	28d4703a 	and	r10,r5,r3
   4da14:	4201ffcc 	andi	r8,r8,2047
   4da18:	38c6703a 	and	r3,r7,r3
   4da1c:	280ad7fa 	srli	r5,r5,31
   4da20:	380ed7fa 	srli	r7,r7,31
   4da24:	12401f26 	beq	r2,r9,4daa4 <__ledf2+0xac>
   4da28:	0241ffc4 	movi	r9,2047
   4da2c:	42401426 	beq	r8,r9,4da80 <__ledf2+0x88>
   4da30:	1000091e 	bne	r2,zero,4da58 <__ledf2+0x60>
   4da34:	2296b03a 	or	r11,r4,r10
   4da38:	5813003a 	cmpeq	r9,r11,zero
   4da3c:	29403fcc 	andi	r5,r5,255
   4da40:	40000a1e 	bne	r8,zero,4da6c <__ledf2+0x74>
   4da44:	30d8b03a 	or	r12,r6,r3
   4da48:	6000081e 	bne	r12,zero,4da6c <__ledf2+0x74>
   4da4c:	0005883a 	mov	r2,zero
   4da50:	5800111e 	bne	r11,zero,4da98 <__ledf2+0xa0>
   4da54:	f800283a 	ret
   4da58:	29403fcc 	andi	r5,r5,255
   4da5c:	40000c1e 	bne	r8,zero,4da90 <__ledf2+0x98>
   4da60:	30d2b03a 	or	r9,r6,r3
   4da64:	48000c26 	beq	r9,zero,4da98 <__ledf2+0xa0>
   4da68:	0013883a 	mov	r9,zero
   4da6c:	39c03fcc 	andi	r7,r7,255
   4da70:	48000826 	beq	r9,zero,4da94 <__ledf2+0x9c>
   4da74:	38001126 	beq	r7,zero,4dabc <__ledf2+0xc4>
   4da78:	00800044 	movi	r2,1
   4da7c:	f800283a 	ret
   4da80:	30d2b03a 	or	r9,r6,r3
   4da84:	483fea26 	beq	r9,zero,4da30 <__alt_data_end+0xfffdba30>
   4da88:	00800084 	movi	r2,2
   4da8c:	f800283a 	ret
   4da90:	39c03fcc 	andi	r7,r7,255
   4da94:	39400726 	beq	r7,r5,4dab4 <__ledf2+0xbc>
   4da98:	2800081e 	bne	r5,zero,4dabc <__ledf2+0xc4>
   4da9c:	00800044 	movi	r2,1
   4daa0:	f800283a 	ret
   4daa4:	2292b03a 	or	r9,r4,r10
   4daa8:	483fdf26 	beq	r9,zero,4da28 <__alt_data_end+0xfffdba28>
   4daac:	00800084 	movi	r2,2
   4dab0:	f800283a 	ret
   4dab4:	4080030e 	bge	r8,r2,4dac4 <__ledf2+0xcc>
   4dab8:	383fef26 	beq	r7,zero,4da78 <__alt_data_end+0xfffdba78>
   4dabc:	00bfffc4 	movi	r2,-1
   4dac0:	f800283a 	ret
   4dac4:	123feb16 	blt	r2,r8,4da74 <__alt_data_end+0xfffdba74>
   4dac8:	1abff336 	bltu	r3,r10,4da98 <__alt_data_end+0xfffdba98>
   4dacc:	50c00326 	beq	r10,r3,4dadc <__ledf2+0xe4>
   4dad0:	50c0042e 	bgeu	r10,r3,4dae4 <__ledf2+0xec>
   4dad4:	283fe81e 	bne	r5,zero,4da78 <__alt_data_end+0xfffdba78>
   4dad8:	003ff806 	br	4dabc <__alt_data_end+0xfffdbabc>
   4dadc:	313fee36 	bltu	r6,r4,4da98 <__alt_data_end+0xfffdba98>
   4dae0:	21bffc36 	bltu	r4,r6,4dad4 <__alt_data_end+0xfffdbad4>
   4dae4:	0005883a 	mov	r2,zero
   4dae8:	f800283a 	ret

0004daec <__muldf3>:
   4daec:	defff304 	addi	sp,sp,-52
   4daf0:	2804d53a 	srli	r2,r5,20
   4daf4:	dd800915 	stw	r22,36(sp)
   4daf8:	282cd7fa 	srli	r22,r5,31
   4dafc:	dc000315 	stw	r16,12(sp)
   4db00:	04000434 	movhi	r16,16
   4db04:	dd400815 	stw	r21,32(sp)
   4db08:	dc800515 	stw	r18,20(sp)
   4db0c:	843fffc4 	addi	r16,r16,-1
   4db10:	dfc00c15 	stw	ra,48(sp)
   4db14:	df000b15 	stw	fp,44(sp)
   4db18:	ddc00a15 	stw	r23,40(sp)
   4db1c:	dd000715 	stw	r20,28(sp)
   4db20:	dcc00615 	stw	r19,24(sp)
   4db24:	dc400415 	stw	r17,16(sp)
   4db28:	1481ffcc 	andi	r18,r2,2047
   4db2c:	2c20703a 	and	r16,r5,r16
   4db30:	b02b883a 	mov	r21,r22
   4db34:	b2403fcc 	andi	r9,r22,255
   4db38:	90006026 	beq	r18,zero,4dcbc <__muldf3+0x1d0>
   4db3c:	0081ffc4 	movi	r2,2047
   4db40:	2029883a 	mov	r20,r4
   4db44:	90803626 	beq	r18,r2,4dc20 <__muldf3+0x134>
   4db48:	80800434 	orhi	r2,r16,16
   4db4c:	100490fa 	slli	r2,r2,3
   4db50:	2020d77a 	srli	r16,r4,29
   4db54:	202890fa 	slli	r20,r4,3
   4db58:	94bf0044 	addi	r18,r18,-1023
   4db5c:	80a0b03a 	or	r16,r16,r2
   4db60:	0027883a 	mov	r19,zero
   4db64:	0039883a 	mov	fp,zero
   4db68:	3804d53a 	srli	r2,r7,20
   4db6c:	382ed7fa 	srli	r23,r7,31
   4db70:	04400434 	movhi	r17,16
   4db74:	8c7fffc4 	addi	r17,r17,-1
   4db78:	1081ffcc 	andi	r2,r2,2047
   4db7c:	3011883a 	mov	r8,r6
   4db80:	3c62703a 	and	r17,r7,r17
   4db84:	ba803fcc 	andi	r10,r23,255
   4db88:	10006d26 	beq	r2,zero,4dd40 <__muldf3+0x254>
   4db8c:	00c1ffc4 	movi	r3,2047
   4db90:	10c06526 	beq	r2,r3,4dd28 <__muldf3+0x23c>
   4db94:	88c00434 	orhi	r3,r17,16
   4db98:	180690fa 	slli	r3,r3,3
   4db9c:	3022d77a 	srli	r17,r6,29
   4dba0:	301090fa 	slli	r8,r6,3
   4dba4:	10bf0044 	addi	r2,r2,-1023
   4dba8:	88e2b03a 	or	r17,r17,r3
   4dbac:	000b883a 	mov	r5,zero
   4dbb0:	9085883a 	add	r2,r18,r2
   4dbb4:	2cc8b03a 	or	r4,r5,r19
   4dbb8:	00c003c4 	movi	r3,15
   4dbbc:	bdacf03a 	xor	r22,r23,r22
   4dbc0:	12c00044 	addi	r11,r2,1
   4dbc4:	19009936 	bltu	r3,r4,4de2c <__muldf3+0x340>
   4dbc8:	200890ba 	slli	r4,r4,2
   4dbcc:	00c00174 	movhi	r3,5
   4dbd0:	18f6f804 	addi	r3,r3,-9248
   4dbd4:	20c9883a 	add	r4,r4,r3
   4dbd8:	20c00017 	ldw	r3,0(r4)
   4dbdc:	1800683a 	jmp	r3
   4dbe0:	0004de2c 	andhi	zero,zero,4984
   4dbe4:	0004dc40 	call	4dc4 <__alt_mem_onchip_memory2-0x3b23c>
   4dbe8:	0004dc40 	call	4dc4 <__alt_mem_onchip_memory2-0x3b23c>
   4dbec:	0004dc3c 	xorhi	zero,zero,4976
   4dbf0:	0004de08 	cmpgei	zero,zero,4984
   4dbf4:	0004de08 	cmpgei	zero,zero,4984
   4dbf8:	0004ddf0 	cmpltui	zero,zero,4983
   4dbfc:	0004dc3c 	xorhi	zero,zero,4976
   4dc00:	0004de08 	cmpgei	zero,zero,4984
   4dc04:	0004ddf0 	cmpltui	zero,zero,4983
   4dc08:	0004de08 	cmpgei	zero,zero,4984
   4dc0c:	0004dc3c 	xorhi	zero,zero,4976
   4dc10:	0004de18 	cmpnei	zero,zero,4984
   4dc14:	0004de18 	cmpnei	zero,zero,4984
   4dc18:	0004de18 	cmpnei	zero,zero,4984
   4dc1c:	0004e034 	movhi	zero,4992
   4dc20:	2404b03a 	or	r2,r4,r16
   4dc24:	10006f1e 	bne	r2,zero,4dde4 <__muldf3+0x2f8>
   4dc28:	04c00204 	movi	r19,8
   4dc2c:	0021883a 	mov	r16,zero
   4dc30:	0029883a 	mov	r20,zero
   4dc34:	07000084 	movi	fp,2
   4dc38:	003fcb06 	br	4db68 <__alt_data_end+0xfffdbb68>
   4dc3c:	502d883a 	mov	r22,r10
   4dc40:	00800084 	movi	r2,2
   4dc44:	28805726 	beq	r5,r2,4dda4 <__muldf3+0x2b8>
   4dc48:	008000c4 	movi	r2,3
   4dc4c:	28816626 	beq	r5,r2,4e1e8 <__muldf3+0x6fc>
   4dc50:	00800044 	movi	r2,1
   4dc54:	2881411e 	bne	r5,r2,4e15c <__muldf3+0x670>
   4dc58:	b02b883a 	mov	r21,r22
   4dc5c:	0005883a 	mov	r2,zero
   4dc60:	000b883a 	mov	r5,zero
   4dc64:	0029883a 	mov	r20,zero
   4dc68:	1004953a 	slli	r2,r2,20
   4dc6c:	a8c03fcc 	andi	r3,r21,255
   4dc70:	04400434 	movhi	r17,16
   4dc74:	8c7fffc4 	addi	r17,r17,-1
   4dc78:	180697fa 	slli	r3,r3,31
   4dc7c:	2c4a703a 	and	r5,r5,r17
   4dc80:	288ab03a 	or	r5,r5,r2
   4dc84:	28c6b03a 	or	r3,r5,r3
   4dc88:	a005883a 	mov	r2,r20
   4dc8c:	dfc00c17 	ldw	ra,48(sp)
   4dc90:	df000b17 	ldw	fp,44(sp)
   4dc94:	ddc00a17 	ldw	r23,40(sp)
   4dc98:	dd800917 	ldw	r22,36(sp)
   4dc9c:	dd400817 	ldw	r21,32(sp)
   4dca0:	dd000717 	ldw	r20,28(sp)
   4dca4:	dcc00617 	ldw	r19,24(sp)
   4dca8:	dc800517 	ldw	r18,20(sp)
   4dcac:	dc400417 	ldw	r17,16(sp)
   4dcb0:	dc000317 	ldw	r16,12(sp)
   4dcb4:	dec00d04 	addi	sp,sp,52
   4dcb8:	f800283a 	ret
   4dcbc:	2404b03a 	or	r2,r4,r16
   4dcc0:	2027883a 	mov	r19,r4
   4dcc4:	10004226 	beq	r2,zero,4ddd0 <__muldf3+0x2e4>
   4dcc8:	8000fc26 	beq	r16,zero,4e0bc <__muldf3+0x5d0>
   4dccc:	8009883a 	mov	r4,r16
   4dcd0:	d9800215 	stw	r6,8(sp)
   4dcd4:	d9c00015 	stw	r7,0(sp)
   4dcd8:	da400115 	stw	r9,4(sp)
   4dcdc:	004ed040 	call	4ed04 <__clzsi2>
   4dce0:	d9800217 	ldw	r6,8(sp)
   4dce4:	d9c00017 	ldw	r7,0(sp)
   4dce8:	da400117 	ldw	r9,4(sp)
   4dcec:	113ffd44 	addi	r4,r2,-11
   4dcf0:	00c00704 	movi	r3,28
   4dcf4:	1900ed16 	blt	r3,r4,4e0ac <__muldf3+0x5c0>
   4dcf8:	00c00744 	movi	r3,29
   4dcfc:	147ffe04 	addi	r17,r2,-8
   4dd00:	1907c83a 	sub	r3,r3,r4
   4dd04:	8460983a 	sll	r16,r16,r17
   4dd08:	98c6d83a 	srl	r3,r19,r3
   4dd0c:	9c68983a 	sll	r20,r19,r17
   4dd10:	1c20b03a 	or	r16,r3,r16
   4dd14:	1080fcc4 	addi	r2,r2,1011
   4dd18:	00a5c83a 	sub	r18,zero,r2
   4dd1c:	0027883a 	mov	r19,zero
   4dd20:	0039883a 	mov	fp,zero
   4dd24:	003f9006 	br	4db68 <__alt_data_end+0xfffdbb68>
   4dd28:	3446b03a 	or	r3,r6,r17
   4dd2c:	1800261e 	bne	r3,zero,4ddc8 <__muldf3+0x2dc>
   4dd30:	0023883a 	mov	r17,zero
   4dd34:	0011883a 	mov	r8,zero
   4dd38:	01400084 	movi	r5,2
   4dd3c:	003f9c06 	br	4dbb0 <__alt_data_end+0xfffdbbb0>
   4dd40:	3446b03a 	or	r3,r6,r17
   4dd44:	18001c26 	beq	r3,zero,4ddb8 <__muldf3+0x2cc>
   4dd48:	8800ce26 	beq	r17,zero,4e084 <__muldf3+0x598>
   4dd4c:	8809883a 	mov	r4,r17
   4dd50:	d9800215 	stw	r6,8(sp)
   4dd54:	da400115 	stw	r9,4(sp)
   4dd58:	da800015 	stw	r10,0(sp)
   4dd5c:	004ed040 	call	4ed04 <__clzsi2>
   4dd60:	d9800217 	ldw	r6,8(sp)
   4dd64:	da400117 	ldw	r9,4(sp)
   4dd68:	da800017 	ldw	r10,0(sp)
   4dd6c:	113ffd44 	addi	r4,r2,-11
   4dd70:	00c00704 	movi	r3,28
   4dd74:	1900bf16 	blt	r3,r4,4e074 <__muldf3+0x588>
   4dd78:	00c00744 	movi	r3,29
   4dd7c:	123ffe04 	addi	r8,r2,-8
   4dd80:	1907c83a 	sub	r3,r3,r4
   4dd84:	8a22983a 	sll	r17,r17,r8
   4dd88:	30c6d83a 	srl	r3,r6,r3
   4dd8c:	3210983a 	sll	r8,r6,r8
   4dd90:	1c62b03a 	or	r17,r3,r17
   4dd94:	1080fcc4 	addi	r2,r2,1011
   4dd98:	0085c83a 	sub	r2,zero,r2
   4dd9c:	000b883a 	mov	r5,zero
   4dda0:	003f8306 	br	4dbb0 <__alt_data_end+0xfffdbbb0>
   4dda4:	b02b883a 	mov	r21,r22
   4dda8:	0081ffc4 	movi	r2,2047
   4ddac:	000b883a 	mov	r5,zero
   4ddb0:	0029883a 	mov	r20,zero
   4ddb4:	003fac06 	br	4dc68 <__alt_data_end+0xfffdbc68>
   4ddb8:	0023883a 	mov	r17,zero
   4ddbc:	0011883a 	mov	r8,zero
   4ddc0:	01400044 	movi	r5,1
   4ddc4:	003f7a06 	br	4dbb0 <__alt_data_end+0xfffdbbb0>
   4ddc8:	014000c4 	movi	r5,3
   4ddcc:	003f7806 	br	4dbb0 <__alt_data_end+0xfffdbbb0>
   4ddd0:	04c00104 	movi	r19,4
   4ddd4:	0021883a 	mov	r16,zero
   4ddd8:	0029883a 	mov	r20,zero
   4dddc:	07000044 	movi	fp,1
   4dde0:	003f6106 	br	4db68 <__alt_data_end+0xfffdbb68>
   4dde4:	04c00304 	movi	r19,12
   4dde8:	070000c4 	movi	fp,3
   4ddec:	003f5e06 	br	4db68 <__alt_data_end+0xfffdbb68>
   4ddf0:	01400434 	movhi	r5,16
   4ddf4:	002b883a 	mov	r21,zero
   4ddf8:	297fffc4 	addi	r5,r5,-1
   4ddfc:	053fffc4 	movi	r20,-1
   4de00:	0081ffc4 	movi	r2,2047
   4de04:	003f9806 	br	4dc68 <__alt_data_end+0xfffdbc68>
   4de08:	8023883a 	mov	r17,r16
   4de0c:	a011883a 	mov	r8,r20
   4de10:	e00b883a 	mov	r5,fp
   4de14:	003f8a06 	br	4dc40 <__alt_data_end+0xfffdbc40>
   4de18:	8023883a 	mov	r17,r16
   4de1c:	a011883a 	mov	r8,r20
   4de20:	482d883a 	mov	r22,r9
   4de24:	e00b883a 	mov	r5,fp
   4de28:	003f8506 	br	4dc40 <__alt_data_end+0xfffdbc40>
   4de2c:	a00ad43a 	srli	r5,r20,16
   4de30:	401ad43a 	srli	r13,r8,16
   4de34:	a53fffcc 	andi	r20,r20,65535
   4de38:	423fffcc 	andi	r8,r8,65535
   4de3c:	4519383a 	mul	r12,r8,r20
   4de40:	4147383a 	mul	r3,r8,r5
   4de44:	6d09383a 	mul	r4,r13,r20
   4de48:	600cd43a 	srli	r6,r12,16
   4de4c:	2b5d383a 	mul	r14,r5,r13
   4de50:	20c9883a 	add	r4,r4,r3
   4de54:	310d883a 	add	r6,r6,r4
   4de58:	30c0022e 	bgeu	r6,r3,4de64 <__muldf3+0x378>
   4de5c:	00c00074 	movhi	r3,1
   4de60:	70dd883a 	add	r14,r14,r3
   4de64:	8826d43a 	srli	r19,r17,16
   4de68:	8bffffcc 	andi	r15,r17,65535
   4de6c:	7d23383a 	mul	r17,r15,r20
   4de70:	7949383a 	mul	r4,r15,r5
   4de74:	9d29383a 	mul	r20,r19,r20
   4de78:	8814d43a 	srli	r10,r17,16
   4de7c:	3012943a 	slli	r9,r6,16
   4de80:	a129883a 	add	r20,r20,r4
   4de84:	633fffcc 	andi	r12,r12,65535
   4de88:	5515883a 	add	r10,r10,r20
   4de8c:	3006d43a 	srli	r3,r6,16
   4de90:	4b13883a 	add	r9,r9,r12
   4de94:	2ccb383a 	mul	r5,r5,r19
   4de98:	5100022e 	bgeu	r10,r4,4dea4 <__muldf3+0x3b8>
   4de9c:	01000074 	movhi	r4,1
   4dea0:	290b883a 	add	r5,r5,r4
   4dea4:	802ad43a 	srli	r21,r16,16
   4dea8:	843fffcc 	andi	r16,r16,65535
   4deac:	440d383a 	mul	r6,r8,r16
   4deb0:	4565383a 	mul	r18,r8,r21
   4deb4:	8349383a 	mul	r4,r16,r13
   4deb8:	500e943a 	slli	r7,r10,16
   4debc:	3010d43a 	srli	r8,r6,16
   4dec0:	5028d43a 	srli	r20,r10,16
   4dec4:	2489883a 	add	r4,r4,r18
   4dec8:	8abfffcc 	andi	r10,r17,65535
   4decc:	3a95883a 	add	r10,r7,r10
   4ded0:	4119883a 	add	r12,r8,r4
   4ded4:	a169883a 	add	r20,r20,r5
   4ded8:	1a87883a 	add	r3,r3,r10
   4dedc:	6d5b383a 	mul	r13,r13,r21
   4dee0:	6480022e 	bgeu	r12,r18,4deec <__muldf3+0x400>
   4dee4:	01000074 	movhi	r4,1
   4dee8:	691b883a 	add	r13,r13,r4
   4deec:	7c25383a 	mul	r18,r15,r16
   4def0:	7d4b383a 	mul	r5,r15,r21
   4def4:	84cf383a 	mul	r7,r16,r19
   4def8:	901ed43a 	srli	r15,r18,16
   4defc:	6008d43a 	srli	r4,r12,16
   4df00:	6010943a 	slli	r8,r12,16
   4df04:	394f883a 	add	r7,r7,r5
   4df08:	333fffcc 	andi	r12,r6,65535
   4df0c:	79df883a 	add	r15,r15,r7
   4df10:	235b883a 	add	r13,r4,r13
   4df14:	9d63383a 	mul	r17,r19,r21
   4df18:	4309883a 	add	r4,r8,r12
   4df1c:	7940022e 	bgeu	r15,r5,4df28 <__muldf3+0x43c>
   4df20:	01400074 	movhi	r5,1
   4df24:	8963883a 	add	r17,r17,r5
   4df28:	780a943a 	slli	r5,r15,16
   4df2c:	91bfffcc 	andi	r6,r18,65535
   4df30:	70c7883a 	add	r3,r14,r3
   4df34:	298d883a 	add	r6,r5,r6
   4df38:	1a8f803a 	cmpltu	r7,r3,r10
   4df3c:	350b883a 	add	r5,r6,r20
   4df40:	20c7883a 	add	r3,r4,r3
   4df44:	3955883a 	add	r10,r7,r5
   4df48:	1909803a 	cmpltu	r4,r3,r4
   4df4c:	6a91883a 	add	r8,r13,r10
   4df50:	780cd43a 	srli	r6,r15,16
   4df54:	2219883a 	add	r12,r4,r8
   4df58:	2d0b803a 	cmpltu	r5,r5,r20
   4df5c:	51cf803a 	cmpltu	r7,r10,r7
   4df60:	29ceb03a 	or	r7,r5,r7
   4df64:	4351803a 	cmpltu	r8,r8,r13
   4df68:	610b803a 	cmpltu	r5,r12,r4
   4df6c:	4148b03a 	or	r4,r8,r5
   4df70:	398f883a 	add	r7,r7,r6
   4df74:	3909883a 	add	r4,r7,r4
   4df78:	1810927a 	slli	r8,r3,9
   4df7c:	2449883a 	add	r4,r4,r17
   4df80:	2008927a 	slli	r4,r4,9
   4df84:	6022d5fa 	srli	r17,r12,23
   4df88:	1806d5fa 	srli	r3,r3,23
   4df8c:	4252b03a 	or	r9,r8,r9
   4df90:	600a927a 	slli	r5,r12,9
   4df94:	4810c03a 	cmpne	r8,r9,zero
   4df98:	2462b03a 	or	r17,r4,r17
   4df9c:	40c6b03a 	or	r3,r8,r3
   4dfa0:	8900402c 	andhi	r4,r17,256
   4dfa4:	1950b03a 	or	r8,r3,r5
   4dfa8:	20000726 	beq	r4,zero,4dfc8 <__muldf3+0x4dc>
   4dfac:	4006d07a 	srli	r3,r8,1
   4dfb0:	880497fa 	slli	r2,r17,31
   4dfb4:	4200004c 	andi	r8,r8,1
   4dfb8:	8822d07a 	srli	r17,r17,1
   4dfbc:	1a10b03a 	or	r8,r3,r8
   4dfc0:	1210b03a 	or	r8,r2,r8
   4dfc4:	5805883a 	mov	r2,r11
   4dfc8:	1140ffc4 	addi	r5,r2,1023
   4dfcc:	0140440e 	bge	zero,r5,4e0e0 <__muldf3+0x5f4>
   4dfd0:	40c001cc 	andi	r3,r8,7
   4dfd4:	18000726 	beq	r3,zero,4dff4 <__muldf3+0x508>
   4dfd8:	40c003cc 	andi	r3,r8,15
   4dfdc:	01000104 	movi	r4,4
   4dfe0:	19000426 	beq	r3,r4,4dff4 <__muldf3+0x508>
   4dfe4:	4107883a 	add	r3,r8,r4
   4dfe8:	1a11803a 	cmpltu	r8,r3,r8
   4dfec:	8a23883a 	add	r17,r17,r8
   4dff0:	1811883a 	mov	r8,r3
   4dff4:	88c0402c 	andhi	r3,r17,256
   4dff8:	18000426 	beq	r3,zero,4e00c <__muldf3+0x520>
   4dffc:	11410004 	addi	r5,r2,1024
   4e000:	00bfc034 	movhi	r2,65280
   4e004:	10bfffc4 	addi	r2,r2,-1
   4e008:	88a2703a 	and	r17,r17,r2
   4e00c:	0081ff84 	movi	r2,2046
   4e010:	117f6416 	blt	r2,r5,4dda4 <__alt_data_end+0xfffdbda4>
   4e014:	8828977a 	slli	r20,r17,29
   4e018:	4010d0fa 	srli	r8,r8,3
   4e01c:	8822927a 	slli	r17,r17,9
   4e020:	2881ffcc 	andi	r2,r5,2047
   4e024:	a228b03a 	or	r20,r20,r8
   4e028:	880ad33a 	srli	r5,r17,12
   4e02c:	b02b883a 	mov	r21,r22
   4e030:	003f0d06 	br	4dc68 <__alt_data_end+0xfffdbc68>
   4e034:	8080022c 	andhi	r2,r16,8
   4e038:	10000926 	beq	r2,zero,4e060 <__muldf3+0x574>
   4e03c:	8880022c 	andhi	r2,r17,8
   4e040:	1000071e 	bne	r2,zero,4e060 <__muldf3+0x574>
   4e044:	00800434 	movhi	r2,16
   4e048:	89400234 	orhi	r5,r17,8
   4e04c:	10bfffc4 	addi	r2,r2,-1
   4e050:	b82b883a 	mov	r21,r23
   4e054:	288a703a 	and	r5,r5,r2
   4e058:	4029883a 	mov	r20,r8
   4e05c:	003f6806 	br	4de00 <__alt_data_end+0xfffdbe00>
   4e060:	00800434 	movhi	r2,16
   4e064:	81400234 	orhi	r5,r16,8
   4e068:	10bfffc4 	addi	r2,r2,-1
   4e06c:	288a703a 	and	r5,r5,r2
   4e070:	003f6306 	br	4de00 <__alt_data_end+0xfffdbe00>
   4e074:	147ff604 	addi	r17,r2,-40
   4e078:	3462983a 	sll	r17,r6,r17
   4e07c:	0011883a 	mov	r8,zero
   4e080:	003f4406 	br	4dd94 <__alt_data_end+0xfffdbd94>
   4e084:	3009883a 	mov	r4,r6
   4e088:	d9800215 	stw	r6,8(sp)
   4e08c:	da400115 	stw	r9,4(sp)
   4e090:	da800015 	stw	r10,0(sp)
   4e094:	004ed040 	call	4ed04 <__clzsi2>
   4e098:	10800804 	addi	r2,r2,32
   4e09c:	da800017 	ldw	r10,0(sp)
   4e0a0:	da400117 	ldw	r9,4(sp)
   4e0a4:	d9800217 	ldw	r6,8(sp)
   4e0a8:	003f3006 	br	4dd6c <__alt_data_end+0xfffdbd6c>
   4e0ac:	143ff604 	addi	r16,r2,-40
   4e0b0:	9c20983a 	sll	r16,r19,r16
   4e0b4:	0029883a 	mov	r20,zero
   4e0b8:	003f1606 	br	4dd14 <__alt_data_end+0xfffdbd14>
   4e0bc:	d9800215 	stw	r6,8(sp)
   4e0c0:	d9c00015 	stw	r7,0(sp)
   4e0c4:	da400115 	stw	r9,4(sp)
   4e0c8:	004ed040 	call	4ed04 <__clzsi2>
   4e0cc:	10800804 	addi	r2,r2,32
   4e0d0:	da400117 	ldw	r9,4(sp)
   4e0d4:	d9c00017 	ldw	r7,0(sp)
   4e0d8:	d9800217 	ldw	r6,8(sp)
   4e0dc:	003f0306 	br	4dcec <__alt_data_end+0xfffdbcec>
   4e0e0:	00c00044 	movi	r3,1
   4e0e4:	1947c83a 	sub	r3,r3,r5
   4e0e8:	00800e04 	movi	r2,56
   4e0ec:	10feda16 	blt	r2,r3,4dc58 <__alt_data_end+0xfffdbc58>
   4e0f0:	008007c4 	movi	r2,31
   4e0f4:	10c01b16 	blt	r2,r3,4e164 <__muldf3+0x678>
   4e0f8:	00800804 	movi	r2,32
   4e0fc:	10c5c83a 	sub	r2,r2,r3
   4e100:	888a983a 	sll	r5,r17,r2
   4e104:	40c8d83a 	srl	r4,r8,r3
   4e108:	4084983a 	sll	r2,r8,r2
   4e10c:	88e2d83a 	srl	r17,r17,r3
   4e110:	2906b03a 	or	r3,r5,r4
   4e114:	1004c03a 	cmpne	r2,r2,zero
   4e118:	1886b03a 	or	r3,r3,r2
   4e11c:	188001cc 	andi	r2,r3,7
   4e120:	10000726 	beq	r2,zero,4e140 <__muldf3+0x654>
   4e124:	188003cc 	andi	r2,r3,15
   4e128:	01000104 	movi	r4,4
   4e12c:	11000426 	beq	r2,r4,4e140 <__muldf3+0x654>
   4e130:	1805883a 	mov	r2,r3
   4e134:	10c00104 	addi	r3,r2,4
   4e138:	1885803a 	cmpltu	r2,r3,r2
   4e13c:	88a3883a 	add	r17,r17,r2
   4e140:	8880202c 	andhi	r2,r17,128
   4e144:	10001c26 	beq	r2,zero,4e1b8 <__muldf3+0x6cc>
   4e148:	b02b883a 	mov	r21,r22
   4e14c:	00800044 	movi	r2,1
   4e150:	000b883a 	mov	r5,zero
   4e154:	0029883a 	mov	r20,zero
   4e158:	003ec306 	br	4dc68 <__alt_data_end+0xfffdbc68>
   4e15c:	5805883a 	mov	r2,r11
   4e160:	003f9906 	br	4dfc8 <__alt_data_end+0xfffdbfc8>
   4e164:	00bff844 	movi	r2,-31
   4e168:	1145c83a 	sub	r2,r2,r5
   4e16c:	8888d83a 	srl	r4,r17,r2
   4e170:	00800804 	movi	r2,32
   4e174:	18801a26 	beq	r3,r2,4e1e0 <__muldf3+0x6f4>
   4e178:	00801004 	movi	r2,64
   4e17c:	10c5c83a 	sub	r2,r2,r3
   4e180:	8884983a 	sll	r2,r17,r2
   4e184:	1204b03a 	or	r2,r2,r8
   4e188:	1004c03a 	cmpne	r2,r2,zero
   4e18c:	2084b03a 	or	r2,r4,r2
   4e190:	144001cc 	andi	r17,r2,7
   4e194:	88000d1e 	bne	r17,zero,4e1cc <__muldf3+0x6e0>
   4e198:	000b883a 	mov	r5,zero
   4e19c:	1028d0fa 	srli	r20,r2,3
   4e1a0:	b02b883a 	mov	r21,r22
   4e1a4:	0005883a 	mov	r2,zero
   4e1a8:	a468b03a 	or	r20,r20,r17
   4e1ac:	003eae06 	br	4dc68 <__alt_data_end+0xfffdbc68>
   4e1b0:	1007883a 	mov	r3,r2
   4e1b4:	0023883a 	mov	r17,zero
   4e1b8:	880a927a 	slli	r5,r17,9
   4e1bc:	1805883a 	mov	r2,r3
   4e1c0:	8822977a 	slli	r17,r17,29
   4e1c4:	280ad33a 	srli	r5,r5,12
   4e1c8:	003ff406 	br	4e19c <__alt_data_end+0xfffdc19c>
   4e1cc:	10c003cc 	andi	r3,r2,15
   4e1d0:	01000104 	movi	r4,4
   4e1d4:	193ff626 	beq	r3,r4,4e1b0 <__alt_data_end+0xfffdc1b0>
   4e1d8:	0023883a 	mov	r17,zero
   4e1dc:	003fd506 	br	4e134 <__alt_data_end+0xfffdc134>
   4e1e0:	0005883a 	mov	r2,zero
   4e1e4:	003fe706 	br	4e184 <__alt_data_end+0xfffdc184>
   4e1e8:	00800434 	movhi	r2,16
   4e1ec:	89400234 	orhi	r5,r17,8
   4e1f0:	10bfffc4 	addi	r2,r2,-1
   4e1f4:	b02b883a 	mov	r21,r22
   4e1f8:	288a703a 	and	r5,r5,r2
   4e1fc:	4029883a 	mov	r20,r8
   4e200:	003eff06 	br	4de00 <__alt_data_end+0xfffdbe00>

0004e204 <__subdf3>:
   4e204:	02000434 	movhi	r8,16
   4e208:	423fffc4 	addi	r8,r8,-1
   4e20c:	defffb04 	addi	sp,sp,-20
   4e210:	2a14703a 	and	r10,r5,r8
   4e214:	3812d53a 	srli	r9,r7,20
   4e218:	3a10703a 	and	r8,r7,r8
   4e21c:	2006d77a 	srli	r3,r4,29
   4e220:	3004d77a 	srli	r2,r6,29
   4e224:	dc000015 	stw	r16,0(sp)
   4e228:	501490fa 	slli	r10,r10,3
   4e22c:	2820d53a 	srli	r16,r5,20
   4e230:	401090fa 	slli	r8,r8,3
   4e234:	dc800215 	stw	r18,8(sp)
   4e238:	dc400115 	stw	r17,4(sp)
   4e23c:	dfc00415 	stw	ra,16(sp)
   4e240:	202290fa 	slli	r17,r4,3
   4e244:	dcc00315 	stw	r19,12(sp)
   4e248:	4a41ffcc 	andi	r9,r9,2047
   4e24c:	0101ffc4 	movi	r4,2047
   4e250:	2824d7fa 	srli	r18,r5,31
   4e254:	8401ffcc 	andi	r16,r16,2047
   4e258:	50c6b03a 	or	r3,r10,r3
   4e25c:	380ed7fa 	srli	r7,r7,31
   4e260:	408ab03a 	or	r5,r8,r2
   4e264:	300c90fa 	slli	r6,r6,3
   4e268:	49009626 	beq	r9,r4,4e4c4 <__subdf3+0x2c0>
   4e26c:	39c0005c 	xori	r7,r7,1
   4e270:	8245c83a 	sub	r2,r16,r9
   4e274:	3c807426 	beq	r7,r18,4e448 <__subdf3+0x244>
   4e278:	0080af0e 	bge	zero,r2,4e538 <__subdf3+0x334>
   4e27c:	48002a1e 	bne	r9,zero,4e328 <__subdf3+0x124>
   4e280:	2988b03a 	or	r4,r5,r6
   4e284:	20009a1e 	bne	r4,zero,4e4f0 <__subdf3+0x2ec>
   4e288:	888001cc 	andi	r2,r17,7
   4e28c:	10000726 	beq	r2,zero,4e2ac <__subdf3+0xa8>
   4e290:	888003cc 	andi	r2,r17,15
   4e294:	01000104 	movi	r4,4
   4e298:	11000426 	beq	r2,r4,4e2ac <__subdf3+0xa8>
   4e29c:	890b883a 	add	r5,r17,r4
   4e2a0:	2c63803a 	cmpltu	r17,r5,r17
   4e2a4:	1c47883a 	add	r3,r3,r17
   4e2a8:	2823883a 	mov	r17,r5
   4e2ac:	1880202c 	andhi	r2,r3,128
   4e2b0:	10005926 	beq	r2,zero,4e418 <__subdf3+0x214>
   4e2b4:	84000044 	addi	r16,r16,1
   4e2b8:	0081ffc4 	movi	r2,2047
   4e2bc:	8080be26 	beq	r16,r2,4e5b8 <__subdf3+0x3b4>
   4e2c0:	017fe034 	movhi	r5,65408
   4e2c4:	297fffc4 	addi	r5,r5,-1
   4e2c8:	1946703a 	and	r3,r3,r5
   4e2cc:	1804977a 	slli	r2,r3,29
   4e2d0:	1806927a 	slli	r3,r3,9
   4e2d4:	8822d0fa 	srli	r17,r17,3
   4e2d8:	8401ffcc 	andi	r16,r16,2047
   4e2dc:	180ad33a 	srli	r5,r3,12
   4e2e0:	9100004c 	andi	r4,r18,1
   4e2e4:	1444b03a 	or	r2,r2,r17
   4e2e8:	80c1ffcc 	andi	r3,r16,2047
   4e2ec:	1820953a 	slli	r16,r3,20
   4e2f0:	20c03fcc 	andi	r3,r4,255
   4e2f4:	180897fa 	slli	r4,r3,31
   4e2f8:	00c00434 	movhi	r3,16
   4e2fc:	18ffffc4 	addi	r3,r3,-1
   4e300:	28c6703a 	and	r3,r5,r3
   4e304:	1c06b03a 	or	r3,r3,r16
   4e308:	1906b03a 	or	r3,r3,r4
   4e30c:	dfc00417 	ldw	ra,16(sp)
   4e310:	dcc00317 	ldw	r19,12(sp)
   4e314:	dc800217 	ldw	r18,8(sp)
   4e318:	dc400117 	ldw	r17,4(sp)
   4e31c:	dc000017 	ldw	r16,0(sp)
   4e320:	dec00504 	addi	sp,sp,20
   4e324:	f800283a 	ret
   4e328:	0101ffc4 	movi	r4,2047
   4e32c:	813fd626 	beq	r16,r4,4e288 <__alt_data_end+0xfffdc288>
   4e330:	29402034 	orhi	r5,r5,128
   4e334:	01000e04 	movi	r4,56
   4e338:	2080a316 	blt	r4,r2,4e5c8 <__subdf3+0x3c4>
   4e33c:	010007c4 	movi	r4,31
   4e340:	2080c616 	blt	r4,r2,4e65c <__subdf3+0x458>
   4e344:	01000804 	movi	r4,32
   4e348:	2089c83a 	sub	r4,r4,r2
   4e34c:	2910983a 	sll	r8,r5,r4
   4e350:	308ed83a 	srl	r7,r6,r2
   4e354:	3108983a 	sll	r4,r6,r4
   4e358:	2884d83a 	srl	r2,r5,r2
   4e35c:	41ccb03a 	or	r6,r8,r7
   4e360:	2008c03a 	cmpne	r4,r4,zero
   4e364:	310cb03a 	or	r6,r6,r4
   4e368:	898dc83a 	sub	r6,r17,r6
   4e36c:	89a3803a 	cmpltu	r17,r17,r6
   4e370:	1887c83a 	sub	r3,r3,r2
   4e374:	1c47c83a 	sub	r3,r3,r17
   4e378:	3023883a 	mov	r17,r6
   4e37c:	1880202c 	andhi	r2,r3,128
   4e380:	10002326 	beq	r2,zero,4e410 <__subdf3+0x20c>
   4e384:	04c02034 	movhi	r19,128
   4e388:	9cffffc4 	addi	r19,r19,-1
   4e38c:	1ce6703a 	and	r19,r3,r19
   4e390:	98007a26 	beq	r19,zero,4e57c <__subdf3+0x378>
   4e394:	9809883a 	mov	r4,r19
   4e398:	004ed040 	call	4ed04 <__clzsi2>
   4e39c:	113ffe04 	addi	r4,r2,-8
   4e3a0:	00c007c4 	movi	r3,31
   4e3a4:	19007b16 	blt	r3,r4,4e594 <__subdf3+0x390>
   4e3a8:	00800804 	movi	r2,32
   4e3ac:	1105c83a 	sub	r2,r2,r4
   4e3b0:	8884d83a 	srl	r2,r17,r2
   4e3b4:	9906983a 	sll	r3,r19,r4
   4e3b8:	8922983a 	sll	r17,r17,r4
   4e3bc:	10c4b03a 	or	r2,r2,r3
   4e3c0:	24007816 	blt	r4,r16,4e5a4 <__subdf3+0x3a0>
   4e3c4:	2421c83a 	sub	r16,r4,r16
   4e3c8:	80c00044 	addi	r3,r16,1
   4e3cc:	010007c4 	movi	r4,31
   4e3d0:	20c09516 	blt	r4,r3,4e628 <__subdf3+0x424>
   4e3d4:	01400804 	movi	r5,32
   4e3d8:	28cbc83a 	sub	r5,r5,r3
   4e3dc:	88c8d83a 	srl	r4,r17,r3
   4e3e0:	8962983a 	sll	r17,r17,r5
   4e3e4:	114a983a 	sll	r5,r2,r5
   4e3e8:	10c6d83a 	srl	r3,r2,r3
   4e3ec:	8804c03a 	cmpne	r2,r17,zero
   4e3f0:	290ab03a 	or	r5,r5,r4
   4e3f4:	28a2b03a 	or	r17,r5,r2
   4e3f8:	0021883a 	mov	r16,zero
   4e3fc:	003fa206 	br	4e288 <__alt_data_end+0xfffdc288>
   4e400:	2090b03a 	or	r8,r4,r2
   4e404:	40018e26 	beq	r8,zero,4ea40 <__subdf3+0x83c>
   4e408:	1007883a 	mov	r3,r2
   4e40c:	2023883a 	mov	r17,r4
   4e410:	888001cc 	andi	r2,r17,7
   4e414:	103f9e1e 	bne	r2,zero,4e290 <__alt_data_end+0xfffdc290>
   4e418:	1804977a 	slli	r2,r3,29
   4e41c:	8822d0fa 	srli	r17,r17,3
   4e420:	1810d0fa 	srli	r8,r3,3
   4e424:	9100004c 	andi	r4,r18,1
   4e428:	1444b03a 	or	r2,r2,r17
   4e42c:	00c1ffc4 	movi	r3,2047
   4e430:	80c02826 	beq	r16,r3,4e4d4 <__subdf3+0x2d0>
   4e434:	01400434 	movhi	r5,16
   4e438:	297fffc4 	addi	r5,r5,-1
   4e43c:	80e0703a 	and	r16,r16,r3
   4e440:	414a703a 	and	r5,r8,r5
   4e444:	003fa806 	br	4e2e8 <__alt_data_end+0xfffdc2e8>
   4e448:	0080630e 	bge	zero,r2,4e5d8 <__subdf3+0x3d4>
   4e44c:	48003026 	beq	r9,zero,4e510 <__subdf3+0x30c>
   4e450:	0101ffc4 	movi	r4,2047
   4e454:	813f8c26 	beq	r16,r4,4e288 <__alt_data_end+0xfffdc288>
   4e458:	29402034 	orhi	r5,r5,128
   4e45c:	01000e04 	movi	r4,56
   4e460:	2080a90e 	bge	r4,r2,4e708 <__subdf3+0x504>
   4e464:	298cb03a 	or	r6,r5,r6
   4e468:	3012c03a 	cmpne	r9,r6,zero
   4e46c:	0005883a 	mov	r2,zero
   4e470:	4c53883a 	add	r9,r9,r17
   4e474:	4c63803a 	cmpltu	r17,r9,r17
   4e478:	10c7883a 	add	r3,r2,r3
   4e47c:	88c7883a 	add	r3,r17,r3
   4e480:	4823883a 	mov	r17,r9
   4e484:	1880202c 	andhi	r2,r3,128
   4e488:	1000d026 	beq	r2,zero,4e7cc <__subdf3+0x5c8>
   4e48c:	84000044 	addi	r16,r16,1
   4e490:	0081ffc4 	movi	r2,2047
   4e494:	8080fe26 	beq	r16,r2,4e890 <__subdf3+0x68c>
   4e498:	00bfe034 	movhi	r2,65408
   4e49c:	10bfffc4 	addi	r2,r2,-1
   4e4a0:	1886703a 	and	r3,r3,r2
   4e4a4:	880ad07a 	srli	r5,r17,1
   4e4a8:	180497fa 	slli	r2,r3,31
   4e4ac:	8900004c 	andi	r4,r17,1
   4e4b0:	2922b03a 	or	r17,r5,r4
   4e4b4:	1806d07a 	srli	r3,r3,1
   4e4b8:	1462b03a 	or	r17,r2,r17
   4e4bc:	3825883a 	mov	r18,r7
   4e4c0:	003f7106 	br	4e288 <__alt_data_end+0xfffdc288>
   4e4c4:	2984b03a 	or	r2,r5,r6
   4e4c8:	103f6826 	beq	r2,zero,4e26c <__alt_data_end+0xfffdc26c>
   4e4cc:	39c03fcc 	andi	r7,r7,255
   4e4d0:	003f6706 	br	4e270 <__alt_data_end+0xfffdc270>
   4e4d4:	4086b03a 	or	r3,r8,r2
   4e4d8:	18015226 	beq	r3,zero,4ea24 <__subdf3+0x820>
   4e4dc:	00c00434 	movhi	r3,16
   4e4e0:	41400234 	orhi	r5,r8,8
   4e4e4:	18ffffc4 	addi	r3,r3,-1
   4e4e8:	28ca703a 	and	r5,r5,r3
   4e4ec:	003f7e06 	br	4e2e8 <__alt_data_end+0xfffdc2e8>
   4e4f0:	10bfffc4 	addi	r2,r2,-1
   4e4f4:	1000491e 	bne	r2,zero,4e61c <__subdf3+0x418>
   4e4f8:	898fc83a 	sub	r7,r17,r6
   4e4fc:	89e3803a 	cmpltu	r17,r17,r7
   4e500:	1947c83a 	sub	r3,r3,r5
   4e504:	1c47c83a 	sub	r3,r3,r17
   4e508:	3823883a 	mov	r17,r7
   4e50c:	003f9b06 	br	4e37c <__alt_data_end+0xfffdc37c>
   4e510:	2988b03a 	or	r4,r5,r6
   4e514:	203f5c26 	beq	r4,zero,4e288 <__alt_data_end+0xfffdc288>
   4e518:	10bfffc4 	addi	r2,r2,-1
   4e51c:	1000931e 	bne	r2,zero,4e76c <__subdf3+0x568>
   4e520:	898d883a 	add	r6,r17,r6
   4e524:	3463803a 	cmpltu	r17,r6,r17
   4e528:	1947883a 	add	r3,r3,r5
   4e52c:	88c7883a 	add	r3,r17,r3
   4e530:	3023883a 	mov	r17,r6
   4e534:	003fd306 	br	4e484 <__alt_data_end+0xfffdc484>
   4e538:	1000541e 	bne	r2,zero,4e68c <__subdf3+0x488>
   4e53c:	80800044 	addi	r2,r16,1
   4e540:	1081ffcc 	andi	r2,r2,2047
   4e544:	01000044 	movi	r4,1
   4e548:	2080a20e 	bge	r4,r2,4e7d4 <__subdf3+0x5d0>
   4e54c:	8989c83a 	sub	r4,r17,r6
   4e550:	8905803a 	cmpltu	r2,r17,r4
   4e554:	1967c83a 	sub	r19,r3,r5
   4e558:	98a7c83a 	sub	r19,r19,r2
   4e55c:	9880202c 	andhi	r2,r19,128
   4e560:	10006326 	beq	r2,zero,4e6f0 <__subdf3+0x4ec>
   4e564:	3463c83a 	sub	r17,r6,r17
   4e568:	28c7c83a 	sub	r3,r5,r3
   4e56c:	344d803a 	cmpltu	r6,r6,r17
   4e570:	19a7c83a 	sub	r19,r3,r6
   4e574:	3825883a 	mov	r18,r7
   4e578:	983f861e 	bne	r19,zero,4e394 <__alt_data_end+0xfffdc394>
   4e57c:	8809883a 	mov	r4,r17
   4e580:	004ed040 	call	4ed04 <__clzsi2>
   4e584:	10800804 	addi	r2,r2,32
   4e588:	113ffe04 	addi	r4,r2,-8
   4e58c:	00c007c4 	movi	r3,31
   4e590:	193f850e 	bge	r3,r4,4e3a8 <__alt_data_end+0xfffdc3a8>
   4e594:	10bff604 	addi	r2,r2,-40
   4e598:	8884983a 	sll	r2,r17,r2
   4e59c:	0023883a 	mov	r17,zero
   4e5a0:	243f880e 	bge	r4,r16,4e3c4 <__alt_data_end+0xfffdc3c4>
   4e5a4:	00ffe034 	movhi	r3,65408
   4e5a8:	18ffffc4 	addi	r3,r3,-1
   4e5ac:	8121c83a 	sub	r16,r16,r4
   4e5b0:	10c6703a 	and	r3,r2,r3
   4e5b4:	003f3406 	br	4e288 <__alt_data_end+0xfffdc288>
   4e5b8:	9100004c 	andi	r4,r18,1
   4e5bc:	000b883a 	mov	r5,zero
   4e5c0:	0005883a 	mov	r2,zero
   4e5c4:	003f4806 	br	4e2e8 <__alt_data_end+0xfffdc2e8>
   4e5c8:	298cb03a 	or	r6,r5,r6
   4e5cc:	300cc03a 	cmpne	r6,r6,zero
   4e5d0:	0005883a 	mov	r2,zero
   4e5d4:	003f6406 	br	4e368 <__alt_data_end+0xfffdc368>
   4e5d8:	10009a1e 	bne	r2,zero,4e844 <__subdf3+0x640>
   4e5dc:	82400044 	addi	r9,r16,1
   4e5e0:	4881ffcc 	andi	r2,r9,2047
   4e5e4:	02800044 	movi	r10,1
   4e5e8:	5080670e 	bge	r10,r2,4e788 <__subdf3+0x584>
   4e5ec:	0081ffc4 	movi	r2,2047
   4e5f0:	4880af26 	beq	r9,r2,4e8b0 <__subdf3+0x6ac>
   4e5f4:	898d883a 	add	r6,r17,r6
   4e5f8:	1945883a 	add	r2,r3,r5
   4e5fc:	3447803a 	cmpltu	r3,r6,r17
   4e600:	1887883a 	add	r3,r3,r2
   4e604:	182297fa 	slli	r17,r3,31
   4e608:	300cd07a 	srli	r6,r6,1
   4e60c:	1806d07a 	srli	r3,r3,1
   4e610:	4821883a 	mov	r16,r9
   4e614:	89a2b03a 	or	r17,r17,r6
   4e618:	003f1b06 	br	4e288 <__alt_data_end+0xfffdc288>
   4e61c:	0101ffc4 	movi	r4,2047
   4e620:	813f441e 	bne	r16,r4,4e334 <__alt_data_end+0xfffdc334>
   4e624:	003f1806 	br	4e288 <__alt_data_end+0xfffdc288>
   4e628:	843ff844 	addi	r16,r16,-31
   4e62c:	01400804 	movi	r5,32
   4e630:	1408d83a 	srl	r4,r2,r16
   4e634:	19405026 	beq	r3,r5,4e778 <__subdf3+0x574>
   4e638:	01401004 	movi	r5,64
   4e63c:	28c7c83a 	sub	r3,r5,r3
   4e640:	10c4983a 	sll	r2,r2,r3
   4e644:	88a2b03a 	or	r17,r17,r2
   4e648:	8822c03a 	cmpne	r17,r17,zero
   4e64c:	2462b03a 	or	r17,r4,r17
   4e650:	0007883a 	mov	r3,zero
   4e654:	0021883a 	mov	r16,zero
   4e658:	003f6d06 	br	4e410 <__alt_data_end+0xfffdc410>
   4e65c:	11fff804 	addi	r7,r2,-32
   4e660:	01000804 	movi	r4,32
   4e664:	29ced83a 	srl	r7,r5,r7
   4e668:	11004526 	beq	r2,r4,4e780 <__subdf3+0x57c>
   4e66c:	01001004 	movi	r4,64
   4e670:	2089c83a 	sub	r4,r4,r2
   4e674:	2904983a 	sll	r2,r5,r4
   4e678:	118cb03a 	or	r6,r2,r6
   4e67c:	300cc03a 	cmpne	r6,r6,zero
   4e680:	398cb03a 	or	r6,r7,r6
   4e684:	0005883a 	mov	r2,zero
   4e688:	003f3706 	br	4e368 <__alt_data_end+0xfffdc368>
   4e68c:	80002a26 	beq	r16,zero,4e738 <__subdf3+0x534>
   4e690:	0101ffc4 	movi	r4,2047
   4e694:	49006626 	beq	r9,r4,4e830 <__subdf3+0x62c>
   4e698:	0085c83a 	sub	r2,zero,r2
   4e69c:	18c02034 	orhi	r3,r3,128
   4e6a0:	01000e04 	movi	r4,56
   4e6a4:	20807e16 	blt	r4,r2,4e8a0 <__subdf3+0x69c>
   4e6a8:	010007c4 	movi	r4,31
   4e6ac:	2080e716 	blt	r4,r2,4ea4c <__subdf3+0x848>
   4e6b0:	01000804 	movi	r4,32
   4e6b4:	2089c83a 	sub	r4,r4,r2
   4e6b8:	1914983a 	sll	r10,r3,r4
   4e6bc:	8890d83a 	srl	r8,r17,r2
   4e6c0:	8908983a 	sll	r4,r17,r4
   4e6c4:	1884d83a 	srl	r2,r3,r2
   4e6c8:	5222b03a 	or	r17,r10,r8
   4e6cc:	2006c03a 	cmpne	r3,r4,zero
   4e6d0:	88e2b03a 	or	r17,r17,r3
   4e6d4:	3463c83a 	sub	r17,r6,r17
   4e6d8:	2885c83a 	sub	r2,r5,r2
   4e6dc:	344d803a 	cmpltu	r6,r6,r17
   4e6e0:	1187c83a 	sub	r3,r2,r6
   4e6e4:	4821883a 	mov	r16,r9
   4e6e8:	3825883a 	mov	r18,r7
   4e6ec:	003f2306 	br	4e37c <__alt_data_end+0xfffdc37c>
   4e6f0:	24d0b03a 	or	r8,r4,r19
   4e6f4:	40001b1e 	bne	r8,zero,4e764 <__subdf3+0x560>
   4e6f8:	0005883a 	mov	r2,zero
   4e6fc:	0009883a 	mov	r4,zero
   4e700:	0021883a 	mov	r16,zero
   4e704:	003f4906 	br	4e42c <__alt_data_end+0xfffdc42c>
   4e708:	010007c4 	movi	r4,31
   4e70c:	20803a16 	blt	r4,r2,4e7f8 <__subdf3+0x5f4>
   4e710:	01000804 	movi	r4,32
   4e714:	2089c83a 	sub	r4,r4,r2
   4e718:	2912983a 	sll	r9,r5,r4
   4e71c:	3090d83a 	srl	r8,r6,r2
   4e720:	3108983a 	sll	r4,r6,r4
   4e724:	2884d83a 	srl	r2,r5,r2
   4e728:	4a12b03a 	or	r9,r9,r8
   4e72c:	2008c03a 	cmpne	r4,r4,zero
   4e730:	4912b03a 	or	r9,r9,r4
   4e734:	003f4e06 	br	4e470 <__alt_data_end+0xfffdc470>
   4e738:	1c48b03a 	or	r4,r3,r17
   4e73c:	20003c26 	beq	r4,zero,4e830 <__subdf3+0x62c>
   4e740:	0084303a 	nor	r2,zero,r2
   4e744:	1000381e 	bne	r2,zero,4e828 <__subdf3+0x624>
   4e748:	3463c83a 	sub	r17,r6,r17
   4e74c:	28c5c83a 	sub	r2,r5,r3
   4e750:	344d803a 	cmpltu	r6,r6,r17
   4e754:	1187c83a 	sub	r3,r2,r6
   4e758:	4821883a 	mov	r16,r9
   4e75c:	3825883a 	mov	r18,r7
   4e760:	003f0606 	br	4e37c <__alt_data_end+0xfffdc37c>
   4e764:	2023883a 	mov	r17,r4
   4e768:	003f0906 	br	4e390 <__alt_data_end+0xfffdc390>
   4e76c:	0101ffc4 	movi	r4,2047
   4e770:	813f3a1e 	bne	r16,r4,4e45c <__alt_data_end+0xfffdc45c>
   4e774:	003ec406 	br	4e288 <__alt_data_end+0xfffdc288>
   4e778:	0005883a 	mov	r2,zero
   4e77c:	003fb106 	br	4e644 <__alt_data_end+0xfffdc644>
   4e780:	0005883a 	mov	r2,zero
   4e784:	003fbc06 	br	4e678 <__alt_data_end+0xfffdc678>
   4e788:	1c44b03a 	or	r2,r3,r17
   4e78c:	80008e1e 	bne	r16,zero,4e9c8 <__subdf3+0x7c4>
   4e790:	1000c826 	beq	r2,zero,4eab4 <__subdf3+0x8b0>
   4e794:	2984b03a 	or	r2,r5,r6
   4e798:	103ebb26 	beq	r2,zero,4e288 <__alt_data_end+0xfffdc288>
   4e79c:	8989883a 	add	r4,r17,r6
   4e7a0:	1945883a 	add	r2,r3,r5
   4e7a4:	2447803a 	cmpltu	r3,r4,r17
   4e7a8:	1887883a 	add	r3,r3,r2
   4e7ac:	1880202c 	andhi	r2,r3,128
   4e7b0:	2023883a 	mov	r17,r4
   4e7b4:	103f1626 	beq	r2,zero,4e410 <__alt_data_end+0xfffdc410>
   4e7b8:	00bfe034 	movhi	r2,65408
   4e7bc:	10bfffc4 	addi	r2,r2,-1
   4e7c0:	5021883a 	mov	r16,r10
   4e7c4:	1886703a 	and	r3,r3,r2
   4e7c8:	003eaf06 	br	4e288 <__alt_data_end+0xfffdc288>
   4e7cc:	3825883a 	mov	r18,r7
   4e7d0:	003f0f06 	br	4e410 <__alt_data_end+0xfffdc410>
   4e7d4:	1c44b03a 	or	r2,r3,r17
   4e7d8:	8000251e 	bne	r16,zero,4e870 <__subdf3+0x66c>
   4e7dc:	1000661e 	bne	r2,zero,4e978 <__subdf3+0x774>
   4e7e0:	2990b03a 	or	r8,r5,r6
   4e7e4:	40009626 	beq	r8,zero,4ea40 <__subdf3+0x83c>
   4e7e8:	2807883a 	mov	r3,r5
   4e7ec:	3023883a 	mov	r17,r6
   4e7f0:	3825883a 	mov	r18,r7
   4e7f4:	003ea406 	br	4e288 <__alt_data_end+0xfffdc288>
   4e7f8:	127ff804 	addi	r9,r2,-32
   4e7fc:	01000804 	movi	r4,32
   4e800:	2a52d83a 	srl	r9,r5,r9
   4e804:	11008c26 	beq	r2,r4,4ea38 <__subdf3+0x834>
   4e808:	01001004 	movi	r4,64
   4e80c:	2085c83a 	sub	r2,r4,r2
   4e810:	2884983a 	sll	r2,r5,r2
   4e814:	118cb03a 	or	r6,r2,r6
   4e818:	300cc03a 	cmpne	r6,r6,zero
   4e81c:	4992b03a 	or	r9,r9,r6
   4e820:	0005883a 	mov	r2,zero
   4e824:	003f1206 	br	4e470 <__alt_data_end+0xfffdc470>
   4e828:	0101ffc4 	movi	r4,2047
   4e82c:	493f9c1e 	bne	r9,r4,4e6a0 <__alt_data_end+0xfffdc6a0>
   4e830:	2807883a 	mov	r3,r5
   4e834:	3023883a 	mov	r17,r6
   4e838:	4821883a 	mov	r16,r9
   4e83c:	3825883a 	mov	r18,r7
   4e840:	003e9106 	br	4e288 <__alt_data_end+0xfffdc288>
   4e844:	80001f1e 	bne	r16,zero,4e8c4 <__subdf3+0x6c0>
   4e848:	1c48b03a 	or	r4,r3,r17
   4e84c:	20005a26 	beq	r4,zero,4e9b8 <__subdf3+0x7b4>
   4e850:	0084303a 	nor	r2,zero,r2
   4e854:	1000561e 	bne	r2,zero,4e9b0 <__subdf3+0x7ac>
   4e858:	89a3883a 	add	r17,r17,r6
   4e85c:	1945883a 	add	r2,r3,r5
   4e860:	898d803a 	cmpltu	r6,r17,r6
   4e864:	3087883a 	add	r3,r6,r2
   4e868:	4821883a 	mov	r16,r9
   4e86c:	003f0506 	br	4e484 <__alt_data_end+0xfffdc484>
   4e870:	10002b1e 	bne	r2,zero,4e920 <__subdf3+0x71c>
   4e874:	2984b03a 	or	r2,r5,r6
   4e878:	10008026 	beq	r2,zero,4ea7c <__subdf3+0x878>
   4e87c:	2807883a 	mov	r3,r5
   4e880:	3023883a 	mov	r17,r6
   4e884:	3825883a 	mov	r18,r7
   4e888:	0401ffc4 	movi	r16,2047
   4e88c:	003e7e06 	br	4e288 <__alt_data_end+0xfffdc288>
   4e890:	3809883a 	mov	r4,r7
   4e894:	0011883a 	mov	r8,zero
   4e898:	0005883a 	mov	r2,zero
   4e89c:	003ee306 	br	4e42c <__alt_data_end+0xfffdc42c>
   4e8a0:	1c62b03a 	or	r17,r3,r17
   4e8a4:	8822c03a 	cmpne	r17,r17,zero
   4e8a8:	0005883a 	mov	r2,zero
   4e8ac:	003f8906 	br	4e6d4 <__alt_data_end+0xfffdc6d4>
   4e8b0:	3809883a 	mov	r4,r7
   4e8b4:	4821883a 	mov	r16,r9
   4e8b8:	0011883a 	mov	r8,zero
   4e8bc:	0005883a 	mov	r2,zero
   4e8c0:	003eda06 	br	4e42c <__alt_data_end+0xfffdc42c>
   4e8c4:	0101ffc4 	movi	r4,2047
   4e8c8:	49003b26 	beq	r9,r4,4e9b8 <__subdf3+0x7b4>
   4e8cc:	0085c83a 	sub	r2,zero,r2
   4e8d0:	18c02034 	orhi	r3,r3,128
   4e8d4:	01000e04 	movi	r4,56
   4e8d8:	20806e16 	blt	r4,r2,4ea94 <__subdf3+0x890>
   4e8dc:	010007c4 	movi	r4,31
   4e8e0:	20807716 	blt	r4,r2,4eac0 <__subdf3+0x8bc>
   4e8e4:	01000804 	movi	r4,32
   4e8e8:	2089c83a 	sub	r4,r4,r2
   4e8ec:	1914983a 	sll	r10,r3,r4
   4e8f0:	8890d83a 	srl	r8,r17,r2
   4e8f4:	8908983a 	sll	r4,r17,r4
   4e8f8:	1884d83a 	srl	r2,r3,r2
   4e8fc:	5222b03a 	or	r17,r10,r8
   4e900:	2006c03a 	cmpne	r3,r4,zero
   4e904:	88e2b03a 	or	r17,r17,r3
   4e908:	89a3883a 	add	r17,r17,r6
   4e90c:	1145883a 	add	r2,r2,r5
   4e910:	898d803a 	cmpltu	r6,r17,r6
   4e914:	3087883a 	add	r3,r6,r2
   4e918:	4821883a 	mov	r16,r9
   4e91c:	003ed906 	br	4e484 <__alt_data_end+0xfffdc484>
   4e920:	2984b03a 	or	r2,r5,r6
   4e924:	10004226 	beq	r2,zero,4ea30 <__subdf3+0x82c>
   4e928:	1808d0fa 	srli	r4,r3,3
   4e92c:	8822d0fa 	srli	r17,r17,3
   4e930:	1806977a 	slli	r3,r3,29
   4e934:	2080022c 	andhi	r2,r4,8
   4e938:	1c62b03a 	or	r17,r3,r17
   4e93c:	10000826 	beq	r2,zero,4e960 <__subdf3+0x75c>
   4e940:	2812d0fa 	srli	r9,r5,3
   4e944:	4880022c 	andhi	r2,r9,8
   4e948:	1000051e 	bne	r2,zero,4e960 <__subdf3+0x75c>
   4e94c:	300cd0fa 	srli	r6,r6,3
   4e950:	2804977a 	slli	r2,r5,29
   4e954:	4809883a 	mov	r4,r9
   4e958:	3825883a 	mov	r18,r7
   4e95c:	11a2b03a 	or	r17,r2,r6
   4e960:	8806d77a 	srli	r3,r17,29
   4e964:	200890fa 	slli	r4,r4,3
   4e968:	882290fa 	slli	r17,r17,3
   4e96c:	0401ffc4 	movi	r16,2047
   4e970:	1906b03a 	or	r3,r3,r4
   4e974:	003e4406 	br	4e288 <__alt_data_end+0xfffdc288>
   4e978:	2984b03a 	or	r2,r5,r6
   4e97c:	103e4226 	beq	r2,zero,4e288 <__alt_data_end+0xfffdc288>
   4e980:	8989c83a 	sub	r4,r17,r6
   4e984:	8911803a 	cmpltu	r8,r17,r4
   4e988:	1945c83a 	sub	r2,r3,r5
   4e98c:	1205c83a 	sub	r2,r2,r8
   4e990:	1200202c 	andhi	r8,r2,128
   4e994:	403e9a26 	beq	r8,zero,4e400 <__alt_data_end+0xfffdc400>
   4e998:	3463c83a 	sub	r17,r6,r17
   4e99c:	28c5c83a 	sub	r2,r5,r3
   4e9a0:	344d803a 	cmpltu	r6,r6,r17
   4e9a4:	1187c83a 	sub	r3,r2,r6
   4e9a8:	3825883a 	mov	r18,r7
   4e9ac:	003e3606 	br	4e288 <__alt_data_end+0xfffdc288>
   4e9b0:	0101ffc4 	movi	r4,2047
   4e9b4:	493fc71e 	bne	r9,r4,4e8d4 <__alt_data_end+0xfffdc8d4>
   4e9b8:	2807883a 	mov	r3,r5
   4e9bc:	3023883a 	mov	r17,r6
   4e9c0:	4821883a 	mov	r16,r9
   4e9c4:	003e3006 	br	4e288 <__alt_data_end+0xfffdc288>
   4e9c8:	10003626 	beq	r2,zero,4eaa4 <__subdf3+0x8a0>
   4e9cc:	2984b03a 	or	r2,r5,r6
   4e9d0:	10001726 	beq	r2,zero,4ea30 <__subdf3+0x82c>
   4e9d4:	1808d0fa 	srli	r4,r3,3
   4e9d8:	8822d0fa 	srli	r17,r17,3
   4e9dc:	1806977a 	slli	r3,r3,29
   4e9e0:	2080022c 	andhi	r2,r4,8
   4e9e4:	1c62b03a 	or	r17,r3,r17
   4e9e8:	10000726 	beq	r2,zero,4ea08 <__subdf3+0x804>
   4e9ec:	2812d0fa 	srli	r9,r5,3
   4e9f0:	4880022c 	andhi	r2,r9,8
   4e9f4:	1000041e 	bne	r2,zero,4ea08 <__subdf3+0x804>
   4e9f8:	300cd0fa 	srli	r6,r6,3
   4e9fc:	2804977a 	slli	r2,r5,29
   4ea00:	4809883a 	mov	r4,r9
   4ea04:	11a2b03a 	or	r17,r2,r6
   4ea08:	8806d77a 	srli	r3,r17,29
   4ea0c:	200890fa 	slli	r4,r4,3
   4ea10:	882290fa 	slli	r17,r17,3
   4ea14:	3825883a 	mov	r18,r7
   4ea18:	1906b03a 	or	r3,r3,r4
   4ea1c:	0401ffc4 	movi	r16,2047
   4ea20:	003e1906 	br	4e288 <__alt_data_end+0xfffdc288>
   4ea24:	000b883a 	mov	r5,zero
   4ea28:	0005883a 	mov	r2,zero
   4ea2c:	003e2e06 	br	4e2e8 <__alt_data_end+0xfffdc2e8>
   4ea30:	0401ffc4 	movi	r16,2047
   4ea34:	003e1406 	br	4e288 <__alt_data_end+0xfffdc288>
   4ea38:	0005883a 	mov	r2,zero
   4ea3c:	003f7506 	br	4e814 <__alt_data_end+0xfffdc814>
   4ea40:	0005883a 	mov	r2,zero
   4ea44:	0009883a 	mov	r4,zero
   4ea48:	003e7806 	br	4e42c <__alt_data_end+0xfffdc42c>
   4ea4c:	123ff804 	addi	r8,r2,-32
   4ea50:	01000804 	movi	r4,32
   4ea54:	1a10d83a 	srl	r8,r3,r8
   4ea58:	11002526 	beq	r2,r4,4eaf0 <__subdf3+0x8ec>
   4ea5c:	01001004 	movi	r4,64
   4ea60:	2085c83a 	sub	r2,r4,r2
   4ea64:	1884983a 	sll	r2,r3,r2
   4ea68:	1444b03a 	or	r2,r2,r17
   4ea6c:	1004c03a 	cmpne	r2,r2,zero
   4ea70:	40a2b03a 	or	r17,r8,r2
   4ea74:	0005883a 	mov	r2,zero
   4ea78:	003f1606 	br	4e6d4 <__alt_data_end+0xfffdc6d4>
   4ea7c:	02000434 	movhi	r8,16
   4ea80:	0009883a 	mov	r4,zero
   4ea84:	423fffc4 	addi	r8,r8,-1
   4ea88:	00bfffc4 	movi	r2,-1
   4ea8c:	0401ffc4 	movi	r16,2047
   4ea90:	003e6606 	br	4e42c <__alt_data_end+0xfffdc42c>
   4ea94:	1c62b03a 	or	r17,r3,r17
   4ea98:	8822c03a 	cmpne	r17,r17,zero
   4ea9c:	0005883a 	mov	r2,zero
   4eaa0:	003f9906 	br	4e908 <__alt_data_end+0xfffdc908>
   4eaa4:	2807883a 	mov	r3,r5
   4eaa8:	3023883a 	mov	r17,r6
   4eaac:	0401ffc4 	movi	r16,2047
   4eab0:	003df506 	br	4e288 <__alt_data_end+0xfffdc288>
   4eab4:	2807883a 	mov	r3,r5
   4eab8:	3023883a 	mov	r17,r6
   4eabc:	003df206 	br	4e288 <__alt_data_end+0xfffdc288>
   4eac0:	123ff804 	addi	r8,r2,-32
   4eac4:	01000804 	movi	r4,32
   4eac8:	1a10d83a 	srl	r8,r3,r8
   4eacc:	11000a26 	beq	r2,r4,4eaf8 <__subdf3+0x8f4>
   4ead0:	01001004 	movi	r4,64
   4ead4:	2085c83a 	sub	r2,r4,r2
   4ead8:	1884983a 	sll	r2,r3,r2
   4eadc:	1444b03a 	or	r2,r2,r17
   4eae0:	1004c03a 	cmpne	r2,r2,zero
   4eae4:	40a2b03a 	or	r17,r8,r2
   4eae8:	0005883a 	mov	r2,zero
   4eaec:	003f8606 	br	4e908 <__alt_data_end+0xfffdc908>
   4eaf0:	0005883a 	mov	r2,zero
   4eaf4:	003fdc06 	br	4ea68 <__alt_data_end+0xfffdca68>
   4eaf8:	0005883a 	mov	r2,zero
   4eafc:	003ff706 	br	4eadc <__alt_data_end+0xfffdcadc>

0004eb00 <__fixdfsi>:
   4eb00:	280cd53a 	srli	r6,r5,20
   4eb04:	00c00434 	movhi	r3,16
   4eb08:	18ffffc4 	addi	r3,r3,-1
   4eb0c:	3181ffcc 	andi	r6,r6,2047
   4eb10:	01c0ff84 	movi	r7,1022
   4eb14:	28c6703a 	and	r3,r5,r3
   4eb18:	280ad7fa 	srli	r5,r5,31
   4eb1c:	3980120e 	bge	r7,r6,4eb68 <__fixdfsi+0x68>
   4eb20:	00810744 	movi	r2,1053
   4eb24:	11800c16 	blt	r2,r6,4eb58 <__fixdfsi+0x58>
   4eb28:	00810cc4 	movi	r2,1075
   4eb2c:	1185c83a 	sub	r2,r2,r6
   4eb30:	01c007c4 	movi	r7,31
   4eb34:	18c00434 	orhi	r3,r3,16
   4eb38:	38800d16 	blt	r7,r2,4eb70 <__fixdfsi+0x70>
   4eb3c:	31befb44 	addi	r6,r6,-1043
   4eb40:	2084d83a 	srl	r2,r4,r2
   4eb44:	1986983a 	sll	r3,r3,r6
   4eb48:	1884b03a 	or	r2,r3,r2
   4eb4c:	28000726 	beq	r5,zero,4eb6c <__fixdfsi+0x6c>
   4eb50:	0085c83a 	sub	r2,zero,r2
   4eb54:	f800283a 	ret
   4eb58:	00a00034 	movhi	r2,32768
   4eb5c:	10bfffc4 	addi	r2,r2,-1
   4eb60:	2885883a 	add	r2,r5,r2
   4eb64:	f800283a 	ret
   4eb68:	0005883a 	mov	r2,zero
   4eb6c:	f800283a 	ret
   4eb70:	008104c4 	movi	r2,1043
   4eb74:	1185c83a 	sub	r2,r2,r6
   4eb78:	1884d83a 	srl	r2,r3,r2
   4eb7c:	003ff306 	br	4eb4c <__alt_data_end+0xfffdcb4c>

0004eb80 <__floatsidf>:
   4eb80:	defffd04 	addi	sp,sp,-12
   4eb84:	dfc00215 	stw	ra,8(sp)
   4eb88:	dc400115 	stw	r17,4(sp)
   4eb8c:	dc000015 	stw	r16,0(sp)
   4eb90:	20002b26 	beq	r4,zero,4ec40 <__floatsidf+0xc0>
   4eb94:	2023883a 	mov	r17,r4
   4eb98:	2020d7fa 	srli	r16,r4,31
   4eb9c:	20002d16 	blt	r4,zero,4ec54 <__floatsidf+0xd4>
   4eba0:	8809883a 	mov	r4,r17
   4eba4:	004ed040 	call	4ed04 <__clzsi2>
   4eba8:	01410784 	movi	r5,1054
   4ebac:	288bc83a 	sub	r5,r5,r2
   4ebb0:	01010cc4 	movi	r4,1075
   4ebb4:	2149c83a 	sub	r4,r4,r5
   4ebb8:	00c007c4 	movi	r3,31
   4ebbc:	1900160e 	bge	r3,r4,4ec18 <__floatsidf+0x98>
   4ebc0:	00c104c4 	movi	r3,1043
   4ebc4:	1947c83a 	sub	r3,r3,r5
   4ebc8:	88c6983a 	sll	r3,r17,r3
   4ebcc:	00800434 	movhi	r2,16
   4ebd0:	10bfffc4 	addi	r2,r2,-1
   4ebd4:	1886703a 	and	r3,r3,r2
   4ebd8:	2941ffcc 	andi	r5,r5,2047
   4ebdc:	800d883a 	mov	r6,r16
   4ebe0:	0005883a 	mov	r2,zero
   4ebe4:	280a953a 	slli	r5,r5,20
   4ebe8:	31803fcc 	andi	r6,r6,255
   4ebec:	01000434 	movhi	r4,16
   4ebf0:	300c97fa 	slli	r6,r6,31
   4ebf4:	213fffc4 	addi	r4,r4,-1
   4ebf8:	1906703a 	and	r3,r3,r4
   4ebfc:	1946b03a 	or	r3,r3,r5
   4ec00:	1986b03a 	or	r3,r3,r6
   4ec04:	dfc00217 	ldw	ra,8(sp)
   4ec08:	dc400117 	ldw	r17,4(sp)
   4ec0c:	dc000017 	ldw	r16,0(sp)
   4ec10:	dec00304 	addi	sp,sp,12
   4ec14:	f800283a 	ret
   4ec18:	00c002c4 	movi	r3,11
   4ec1c:	1887c83a 	sub	r3,r3,r2
   4ec20:	88c6d83a 	srl	r3,r17,r3
   4ec24:	8904983a 	sll	r2,r17,r4
   4ec28:	01000434 	movhi	r4,16
   4ec2c:	213fffc4 	addi	r4,r4,-1
   4ec30:	2941ffcc 	andi	r5,r5,2047
   4ec34:	1906703a 	and	r3,r3,r4
   4ec38:	800d883a 	mov	r6,r16
   4ec3c:	003fe906 	br	4ebe4 <__alt_data_end+0xfffdcbe4>
   4ec40:	000d883a 	mov	r6,zero
   4ec44:	000b883a 	mov	r5,zero
   4ec48:	0007883a 	mov	r3,zero
   4ec4c:	0005883a 	mov	r2,zero
   4ec50:	003fe406 	br	4ebe4 <__alt_data_end+0xfffdcbe4>
   4ec54:	0123c83a 	sub	r17,zero,r4
   4ec58:	003fd106 	br	4eba0 <__alt_data_end+0xfffdcba0>

0004ec5c <__floatunsidf>:
   4ec5c:	defffe04 	addi	sp,sp,-8
   4ec60:	dc000015 	stw	r16,0(sp)
   4ec64:	dfc00115 	stw	ra,4(sp)
   4ec68:	2021883a 	mov	r16,r4
   4ec6c:	20002226 	beq	r4,zero,4ecf8 <__floatunsidf+0x9c>
   4ec70:	004ed040 	call	4ed04 <__clzsi2>
   4ec74:	01010784 	movi	r4,1054
   4ec78:	2089c83a 	sub	r4,r4,r2
   4ec7c:	01810cc4 	movi	r6,1075
   4ec80:	310dc83a 	sub	r6,r6,r4
   4ec84:	00c007c4 	movi	r3,31
   4ec88:	1980120e 	bge	r3,r6,4ecd4 <__floatunsidf+0x78>
   4ec8c:	00c104c4 	movi	r3,1043
   4ec90:	1907c83a 	sub	r3,r3,r4
   4ec94:	80ca983a 	sll	r5,r16,r3
   4ec98:	00800434 	movhi	r2,16
   4ec9c:	10bfffc4 	addi	r2,r2,-1
   4eca0:	2101ffcc 	andi	r4,r4,2047
   4eca4:	0021883a 	mov	r16,zero
   4eca8:	288a703a 	and	r5,r5,r2
   4ecac:	2008953a 	slli	r4,r4,20
   4ecb0:	00c00434 	movhi	r3,16
   4ecb4:	18ffffc4 	addi	r3,r3,-1
   4ecb8:	28c6703a 	and	r3,r5,r3
   4ecbc:	8005883a 	mov	r2,r16
   4ecc0:	1906b03a 	or	r3,r3,r4
   4ecc4:	dfc00117 	ldw	ra,4(sp)
   4ecc8:	dc000017 	ldw	r16,0(sp)
   4eccc:	dec00204 	addi	sp,sp,8
   4ecd0:	f800283a 	ret
   4ecd4:	00c002c4 	movi	r3,11
   4ecd8:	188bc83a 	sub	r5,r3,r2
   4ecdc:	814ad83a 	srl	r5,r16,r5
   4ece0:	00c00434 	movhi	r3,16
   4ece4:	18ffffc4 	addi	r3,r3,-1
   4ece8:	81a0983a 	sll	r16,r16,r6
   4ecec:	2101ffcc 	andi	r4,r4,2047
   4ecf0:	28ca703a 	and	r5,r5,r3
   4ecf4:	003fed06 	br	4ecac <__alt_data_end+0xfffdccac>
   4ecf8:	0009883a 	mov	r4,zero
   4ecfc:	000b883a 	mov	r5,zero
   4ed00:	003fea06 	br	4ecac <__alt_data_end+0xfffdccac>

0004ed04 <__clzsi2>:
   4ed04:	00bfffd4 	movui	r2,65535
   4ed08:	11000536 	bltu	r2,r4,4ed20 <__clzsi2+0x1c>
   4ed0c:	00803fc4 	movi	r2,255
   4ed10:	11000f36 	bltu	r2,r4,4ed50 <__clzsi2+0x4c>
   4ed14:	00800804 	movi	r2,32
   4ed18:	0007883a 	mov	r3,zero
   4ed1c:	00000506 	br	4ed34 <__clzsi2+0x30>
   4ed20:	00804034 	movhi	r2,256
   4ed24:	10bfffc4 	addi	r2,r2,-1
   4ed28:	11000c2e 	bgeu	r2,r4,4ed5c <__clzsi2+0x58>
   4ed2c:	00800204 	movi	r2,8
   4ed30:	00c00604 	movi	r3,24
   4ed34:	20c8d83a 	srl	r4,r4,r3
   4ed38:	00c00174 	movhi	r3,5
   4ed3c:	18ca8e04 	addi	r3,r3,10808
   4ed40:	1909883a 	add	r4,r3,r4
   4ed44:	20c00003 	ldbu	r3,0(r4)
   4ed48:	10c5c83a 	sub	r2,r2,r3
   4ed4c:	f800283a 	ret
   4ed50:	00800604 	movi	r2,24
   4ed54:	00c00204 	movi	r3,8
   4ed58:	003ff606 	br	4ed34 <__alt_data_end+0xfffdcd34>
   4ed5c:	00800404 	movi	r2,16
   4ed60:	1007883a 	mov	r3,r2
   4ed64:	003ff306 	br	4ed34 <__alt_data_end+0xfffdcd34>

0004ed68 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4ed68:	defffe04 	addi	sp,sp,-8
   4ed6c:	dfc00115 	stw	ra,4(sp)
   4ed70:	df000015 	stw	fp,0(sp)
   4ed74:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4ed78:	d0a00f17 	ldw	r2,-32708(gp)
   4ed7c:	10000326 	beq	r2,zero,4ed8c <alt_get_errno+0x24>
   4ed80:	d0a00f17 	ldw	r2,-32708(gp)
   4ed84:	103ee83a 	callr	r2
   4ed88:	00000106 	br	4ed90 <alt_get_errno+0x28>
   4ed8c:	d0a7c704 	addi	r2,gp,-24804
}
   4ed90:	e037883a 	mov	sp,fp
   4ed94:	dfc00117 	ldw	ra,4(sp)
   4ed98:	df000017 	ldw	fp,0(sp)
   4ed9c:	dec00204 	addi	sp,sp,8
   4eda0:	f800283a 	ret

0004eda4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   4eda4:	defffb04 	addi	sp,sp,-20
   4eda8:	dfc00415 	stw	ra,16(sp)
   4edac:	df000315 	stw	fp,12(sp)
   4edb0:	df000304 	addi	fp,sp,12
   4edb4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   4edb8:	e0bfff17 	ldw	r2,-4(fp)
   4edbc:	10000616 	blt	r2,zero,4edd8 <close+0x34>
   4edc0:	e0bfff17 	ldw	r2,-4(fp)
   4edc4:	10c00324 	muli	r3,r2,12
   4edc8:	00800174 	movhi	r2,5
   4edcc:	108e5104 	addi	r2,r2,14660
   4edd0:	1885883a 	add	r2,r3,r2
   4edd4:	00000106 	br	4eddc <close+0x38>
   4edd8:	0005883a 	mov	r2,zero
   4eddc:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   4ede0:	e0bffd17 	ldw	r2,-12(fp)
   4ede4:	10001926 	beq	r2,zero,4ee4c <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   4ede8:	e0bffd17 	ldw	r2,-12(fp)
   4edec:	10800017 	ldw	r2,0(r2)
   4edf0:	10800417 	ldw	r2,16(r2)
   4edf4:	10000626 	beq	r2,zero,4ee10 <close+0x6c>
   4edf8:	e0bffd17 	ldw	r2,-12(fp)
   4edfc:	10800017 	ldw	r2,0(r2)
   4ee00:	10800417 	ldw	r2,16(r2)
   4ee04:	e13ffd17 	ldw	r4,-12(fp)
   4ee08:	103ee83a 	callr	r2
   4ee0c:	00000106 	br	4ee14 <close+0x70>
   4ee10:	0005883a 	mov	r2,zero
   4ee14:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   4ee18:	e13fff17 	ldw	r4,-4(fp)
   4ee1c:	004fb4c0 	call	4fb4c <alt_release_fd>
    if (rval < 0)
   4ee20:	e0bffe17 	ldw	r2,-8(fp)
   4ee24:	1000070e 	bge	r2,zero,4ee44 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   4ee28:	004ed680 	call	4ed68 <alt_get_errno>
   4ee2c:	1007883a 	mov	r3,r2
   4ee30:	e0bffe17 	ldw	r2,-8(fp)
   4ee34:	0085c83a 	sub	r2,zero,r2
   4ee38:	18800015 	stw	r2,0(r3)
      return -1;
   4ee3c:	00bfffc4 	movi	r2,-1
   4ee40:	00000706 	br	4ee60 <close+0xbc>
    }
    return 0;
   4ee44:	0005883a 	mov	r2,zero
   4ee48:	00000506 	br	4ee60 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   4ee4c:	004ed680 	call	4ed68 <alt_get_errno>
   4ee50:	1007883a 	mov	r3,r2
   4ee54:	00801444 	movi	r2,81
   4ee58:	18800015 	stw	r2,0(r3)
    return -1;
   4ee5c:	00bfffc4 	movi	r2,-1
  }
}
   4ee60:	e037883a 	mov	sp,fp
   4ee64:	dfc00117 	ldw	ra,4(sp)
   4ee68:	df000017 	ldw	fp,0(sp)
   4ee6c:	dec00204 	addi	sp,sp,8
   4ee70:	f800283a 	ret

0004ee74 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   4ee74:	defffc04 	addi	sp,sp,-16
   4ee78:	df000315 	stw	fp,12(sp)
   4ee7c:	df000304 	addi	fp,sp,12
   4ee80:	e13ffd15 	stw	r4,-12(fp)
   4ee84:	e17ffe15 	stw	r5,-8(fp)
   4ee88:	e1bfff15 	stw	r6,-4(fp)
  return len;
   4ee8c:	e0bfff17 	ldw	r2,-4(fp)
}
   4ee90:	e037883a 	mov	sp,fp
   4ee94:	df000017 	ldw	fp,0(sp)
   4ee98:	dec00104 	addi	sp,sp,4
   4ee9c:	f800283a 	ret

0004eea0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4eea0:	defffe04 	addi	sp,sp,-8
   4eea4:	dfc00115 	stw	ra,4(sp)
   4eea8:	df000015 	stw	fp,0(sp)
   4eeac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4eeb0:	d0a00f17 	ldw	r2,-32708(gp)
   4eeb4:	10000326 	beq	r2,zero,4eec4 <alt_get_errno+0x24>
   4eeb8:	d0a00f17 	ldw	r2,-32708(gp)
   4eebc:	103ee83a 	callr	r2
   4eec0:	00000106 	br	4eec8 <alt_get_errno+0x28>
   4eec4:	d0a7c704 	addi	r2,gp,-24804
}
   4eec8:	e037883a 	mov	sp,fp
   4eecc:	dfc00117 	ldw	ra,4(sp)
   4eed0:	df000017 	ldw	fp,0(sp)
   4eed4:	dec00204 	addi	sp,sp,8
   4eed8:	f800283a 	ret

0004eedc <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   4eedc:	defffb04 	addi	sp,sp,-20
   4eee0:	dfc00415 	stw	ra,16(sp)
   4eee4:	df000315 	stw	fp,12(sp)
   4eee8:	df000304 	addi	fp,sp,12
   4eeec:	e13ffe15 	stw	r4,-8(fp)
   4eef0:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4eef4:	e0bffe17 	ldw	r2,-8(fp)
   4eef8:	10000616 	blt	r2,zero,4ef14 <fstat+0x38>
   4eefc:	e0bffe17 	ldw	r2,-8(fp)
   4ef00:	10c00324 	muli	r3,r2,12
   4ef04:	00800174 	movhi	r2,5
   4ef08:	108e5104 	addi	r2,r2,14660
   4ef0c:	1885883a 	add	r2,r3,r2
   4ef10:	00000106 	br	4ef18 <fstat+0x3c>
   4ef14:	0005883a 	mov	r2,zero
   4ef18:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   4ef1c:	e0bffd17 	ldw	r2,-12(fp)
   4ef20:	10001026 	beq	r2,zero,4ef64 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   4ef24:	e0bffd17 	ldw	r2,-12(fp)
   4ef28:	10800017 	ldw	r2,0(r2)
   4ef2c:	10800817 	ldw	r2,32(r2)
   4ef30:	10000726 	beq	r2,zero,4ef50 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
   4ef34:	e0bffd17 	ldw	r2,-12(fp)
   4ef38:	10800017 	ldw	r2,0(r2)
   4ef3c:	10800817 	ldw	r2,32(r2)
   4ef40:	e17fff17 	ldw	r5,-4(fp)
   4ef44:	e13ffd17 	ldw	r4,-12(fp)
   4ef48:	103ee83a 	callr	r2
   4ef4c:	00000a06 	br	4ef78 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   4ef50:	e0bfff17 	ldw	r2,-4(fp)
   4ef54:	00c80004 	movi	r3,8192
   4ef58:	10c00115 	stw	r3,4(r2)
      return 0;
   4ef5c:	0005883a 	mov	r2,zero
   4ef60:	00000506 	br	4ef78 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   4ef64:	004eea00 	call	4eea0 <alt_get_errno>
   4ef68:	1007883a 	mov	r3,r2
   4ef6c:	00801444 	movi	r2,81
   4ef70:	18800015 	stw	r2,0(r3)
    return -1;
   4ef74:	00bfffc4 	movi	r2,-1
  }
}
   4ef78:	e037883a 	mov	sp,fp
   4ef7c:	dfc00117 	ldw	ra,4(sp)
   4ef80:	df000017 	ldw	fp,0(sp)
   4ef84:	dec00204 	addi	sp,sp,8
   4ef88:	f800283a 	ret

0004ef8c <gettimeofday>:
 */
 

#if defined (__GNUC__) && (__GNUC__ >= 4)
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, void *ptimezone_vptr)
{
   4ef8c:	defff404 	addi	sp,sp,-48
   4ef90:	dfc00b15 	stw	ra,44(sp)
   4ef94:	df000a15 	stw	fp,40(sp)
   4ef98:	dd000915 	stw	r20,36(sp)
   4ef9c:	dcc00815 	stw	r19,32(sp)
   4efa0:	dc800715 	stw	r18,28(sp)
   4efa4:	dc400615 	stw	r17,24(sp)
   4efa8:	dc000515 	stw	r16,20(sp)
   4efac:	df000a04 	addi	fp,sp,40
   4efb0:	e13ff915 	stw	r4,-28(fp)
   4efb4:	e17ffa15 	stw	r5,-24(fp)
  struct timezone *ptimezone = (struct timezone*)ptimezone_vptr;
   4efb8:	e0bffa17 	ldw	r2,-24(fp)
   4efbc:	e0bff615 	stw	r2,-40(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   4efc0:	d0a7d717 	ldw	r2,-24740(gp)
#else
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, struct timezone *ptimezone)
{
#endif
  
  alt_u32 nticks = alt_nticks (); 
   4efc4:	e0bff715 	stw	r2,-36(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   4efc8:	d0a7d617 	ldw	r2,-24744(gp)
  alt_u32 tick_rate = alt_ticks_per_second ();
   4efcc:	e0bff815 	stw	r2,-32(fp)
   * non-zero system clock rate. If the system clock is not running, an error
   * is generated and the contents of "ptimeval" and "ptimezone" are not
   * updated.
   */

  if (tick_rate)
   4efd0:	e0bff817 	ldw	r2,-32(fp)
   4efd4:	10005f26 	beq	r2,zero,4f154 <gettimeofday+0x1c8>
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
   4efd8:	d0a7d017 	ldw	r2,-24768(gp)
   4efdc:	1029883a 	mov	r20,r2
   4efe0:	e17ff817 	ldw	r5,-32(fp)
   4efe4:	e13ff717 	ldw	r4,-36(fp)
   4efe8:	00418d00 	call	418d0 <__udivsi3>
   4efec:	a085883a 	add	r2,r20,r2
   4eff0:	1007883a 	mov	r3,r2
   4eff4:	e0bff917 	ldw	r2,-28(fp)
   4eff8:	10c00015 	stw	r3,0(r2)
    ptimeval->tv_usec = alt_resettime.tv_usec +
   4effc:	d0a7d117 	ldw	r2,-24764(gp)
   4f000:	1029883a 	mov	r20,r2
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
   4f004:	e0bff717 	ldw	r2,-36(fp)
   4f008:	1021883a 	mov	r16,r2
   4f00c:	0023883a 	mov	r17,zero
   4f010:	e17ff817 	ldw	r5,-32(fp)
   4f014:	010003f4 	movhi	r4,15
   4f018:	21109004 	addi	r4,r4,16960
   4f01c:	00418d00 	call	418d0 <__udivsi3>
   4f020:	1025883a 	mov	r18,r2
   4f024:	0027883a 	mov	r19,zero
   4f028:	900d883a 	mov	r6,r18
   4f02c:	980f883a 	mov	r7,r19
   4f030:	8009883a 	mov	r4,r16
   4f034:	880b883a 	mov	r5,r17
   4f038:	004bbf00 	call	4bbf0 <__muldi3>
   4f03c:	1009883a 	mov	r4,r2
   4f040:	180b883a 	mov	r5,r3
   4f044:	2005883a 	mov	r2,r4
   4f048:	2807883a 	mov	r3,r5
   4f04c:	018003f4 	movhi	r6,15
   4f050:	31909004 	addi	r6,r6,16960
   4f054:	000f883a 	mov	r7,zero
   4f058:	1009883a 	mov	r4,r2
   4f05c:	180b883a 	mov	r5,r3
   4f060:	004c1c80 	call	4c1c8 <__umoddi3>
   4f064:	1009883a 	mov	r4,r2
   4f068:	180b883a 	mov	r5,r3
   4f06c:	2005883a 	mov	r2,r4
   4f070:	2807883a 	mov	r3,r5
   */

  if (tick_rate)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    ptimeval->tv_usec = alt_resettime.tv_usec +
   4f074:	a085883a 	add	r2,r20,r2
   4f078:	1007883a 	mov	r3,r2
   4f07c:	e0bff917 	ldw	r2,-28(fp)
   4f080:	10c00115 	stw	r3,4(r2)
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
   4f084:	00001406 	br	4f0d8 <gettimeofday+0x14c>
      if (ptimeval->tv_sec <= 0)
   4f088:	e0bff917 	ldw	r2,-28(fp)
   4f08c:	10800017 	ldw	r2,0(r2)
   4f090:	00800516 	blt	zero,r2,4f0a8 <gettimeofday+0x11c>
      {
          ptimeval->tv_sec = 0;
   4f094:	e0bff917 	ldw	r2,-28(fp)
   4f098:	10000015 	stw	zero,0(r2)
          ptimeval->tv_usec = 0;
   4f09c:	e0bff917 	ldw	r2,-28(fp)
   4f0a0:	10000115 	stw	zero,4(r2)
          break;
   4f0a4:	00000f06 	br	4f0e4 <gettimeofday+0x158>
      }
      else
      {
          ptimeval->tv_sec--;
   4f0a8:	e0bff917 	ldw	r2,-28(fp)
   4f0ac:	10800017 	ldw	r2,0(r2)
   4f0b0:	10ffffc4 	addi	r3,r2,-1
   4f0b4:	e0bff917 	ldw	r2,-28(fp)
   4f0b8:	10c00015 	stw	r3,0(r2)
          ptimeval->tv_usec += ALT_US;
   4f0bc:	e0bff917 	ldw	r2,-28(fp)
   4f0c0:	10c00117 	ldw	r3,4(r2)
   4f0c4:	008003f4 	movhi	r2,15
   4f0c8:	10909004 	addi	r2,r2,16960
   4f0cc:	1887883a 	add	r3,r3,r2
   4f0d0:	e0bff917 	ldw	r2,-28(fp)
   4f0d4:	10c00115 	stw	r3,4(r2)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    ptimeval->tv_usec = alt_resettime.tv_usec +
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
   4f0d8:	e0bff917 	ldw	r2,-28(fp)
   4f0dc:	10800117 	ldw	r2,4(r2)
   4f0e0:	103fe916 	blt	r2,zero,4f088 <__alt_data_end+0xfffdd088>
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
   4f0e4:	00000c06 	br	4f118 <gettimeofday+0x18c>
      ptimeval->tv_sec++;
   4f0e8:	e0bff917 	ldw	r2,-28(fp)
   4f0ec:	10800017 	ldw	r2,0(r2)
   4f0f0:	10c00044 	addi	r3,r2,1
   4f0f4:	e0bff917 	ldw	r2,-28(fp)
   4f0f8:	10c00015 	stw	r3,0(r2)
      ptimeval->tv_usec -= ALT_US;
   4f0fc:	e0bff917 	ldw	r2,-28(fp)
   4f100:	10c00117 	ldw	r3,4(r2)
   4f104:	00bffc74 	movhi	r2,65521
   4f108:	10af7004 	addi	r2,r2,-16960
   4f10c:	1887883a 	add	r3,r3,r2
   4f110:	e0bff917 	ldw	r2,-28(fp)
   4f114:	10c00115 	stw	r3,4(r2)
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
   4f118:	e0bff917 	ldw	r2,-28(fp)
   4f11c:	10c00117 	ldw	r3,4(r2)
   4f120:	008003f4 	movhi	r2,15
   4f124:	10908fc4 	addi	r2,r2,16959
   4f128:	10ffef16 	blt	r2,r3,4f0e8 <__alt_data_end+0xfffdd0e8>
      ptimeval->tv_sec++;
      ptimeval->tv_usec -= ALT_US;
    }
      
    if (ptimezone)
   4f12c:	e0bff617 	ldw	r2,-40(fp)
   4f130:	10000626 	beq	r2,zero,4f14c <gettimeofday+0x1c0>
    { 
      ptimezone->tz_minuteswest = alt_timezone.tz_minuteswest;
   4f134:	d0e7ce17 	ldw	r3,-24776(gp)
   4f138:	e0bff617 	ldw	r2,-40(fp)
   4f13c:	10c00015 	stw	r3,0(r2)
      ptimezone->tz_dsttime     = alt_timezone.tz_dsttime;
   4f140:	d0e7cf17 	ldw	r3,-24772(gp)
   4f144:	e0bff617 	ldw	r2,-40(fp)
   4f148:	10c00115 	stw	r3,4(r2)
    }

    return 0;
   4f14c:	0005883a 	mov	r2,zero
   4f150:	00000106 	br	4f158 <gettimeofday+0x1cc>
  }

  return -ENOTSUP;
   4f154:	00bfde84 	movi	r2,-134
}
   4f158:	e6fffb04 	addi	sp,fp,-20
   4f15c:	dfc00617 	ldw	ra,24(sp)
   4f160:	df000517 	ldw	fp,20(sp)
   4f164:	dd000417 	ldw	r20,16(sp)
   4f168:	dcc00317 	ldw	r19,12(sp)
   4f16c:	dc800217 	ldw	r18,8(sp)
   4f170:	dc400117 	ldw	r17,4(sp)
   4f174:	dc000017 	ldw	r16,0(sp)
   4f178:	dec00704 	addi	sp,sp,28
   4f17c:	f800283a 	ret

0004f180 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   4f180:	defff904 	addi	sp,sp,-28
   4f184:	dfc00615 	stw	ra,24(sp)
   4f188:	df000515 	stw	fp,20(sp)
   4f18c:	df000504 	addi	fp,sp,20
   4f190:	e13ffc15 	stw	r4,-16(fp)
   4f194:	e17ffd15 	stw	r5,-12(fp)
   4f198:	e1bffe15 	stw	r6,-8(fp)
   4f19c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   4f1a0:	e0800217 	ldw	r2,8(fp)
   4f1a4:	d8800015 	stw	r2,0(sp)
   4f1a8:	e1ffff17 	ldw	r7,-4(fp)
   4f1ac:	e1bffe17 	ldw	r6,-8(fp)
   4f1b0:	e17ffd17 	ldw	r5,-12(fp)
   4f1b4:	e13ffc17 	ldw	r4,-16(fp)
   4f1b8:	004f3300 	call	4f330 <alt_iic_isr_register>
}  
   4f1bc:	e037883a 	mov	sp,fp
   4f1c0:	dfc00117 	ldw	ra,4(sp)
   4f1c4:	df000017 	ldw	fp,0(sp)
   4f1c8:	dec00204 	addi	sp,sp,8
   4f1cc:	f800283a 	ret

0004f1d0 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   4f1d0:	defff904 	addi	sp,sp,-28
   4f1d4:	df000615 	stw	fp,24(sp)
   4f1d8:	df000604 	addi	fp,sp,24
   4f1dc:	e13ffe15 	stw	r4,-8(fp)
   4f1e0:	e17fff15 	stw	r5,-4(fp)
   4f1e4:	e0bfff17 	ldw	r2,-4(fp)
   4f1e8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4f1ec:	0005303a 	rdctl	r2,status
   4f1f0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4f1f4:	e0fffb17 	ldw	r3,-20(fp)
   4f1f8:	00bfff84 	movi	r2,-2
   4f1fc:	1884703a 	and	r2,r3,r2
   4f200:	1001703a 	wrctl	status,r2
  
  return context;
   4f204:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   4f208:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   4f20c:	00c00044 	movi	r3,1
   4f210:	e0bffa17 	ldw	r2,-24(fp)
   4f214:	1884983a 	sll	r2,r3,r2
   4f218:	1007883a 	mov	r3,r2
   4f21c:	d0a7d217 	ldw	r2,-24760(gp)
   4f220:	1884b03a 	or	r2,r3,r2
   4f224:	d0a7d215 	stw	r2,-24760(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   4f228:	d0a7d217 	ldw	r2,-24760(gp)
   4f22c:	100170fa 	wrctl	ienable,r2
   4f230:	e0bffc17 	ldw	r2,-16(fp)
   4f234:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4f238:	e0bffd17 	ldw	r2,-12(fp)
   4f23c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   4f240:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   4f244:	0001883a 	nop
}
   4f248:	e037883a 	mov	sp,fp
   4f24c:	df000017 	ldw	fp,0(sp)
   4f250:	dec00104 	addi	sp,sp,4
   4f254:	f800283a 	ret

0004f258 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   4f258:	defff904 	addi	sp,sp,-28
   4f25c:	df000615 	stw	fp,24(sp)
   4f260:	df000604 	addi	fp,sp,24
   4f264:	e13ffe15 	stw	r4,-8(fp)
   4f268:	e17fff15 	stw	r5,-4(fp)
   4f26c:	e0bfff17 	ldw	r2,-4(fp)
   4f270:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4f274:	0005303a 	rdctl	r2,status
   4f278:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4f27c:	e0fffb17 	ldw	r3,-20(fp)
   4f280:	00bfff84 	movi	r2,-2
   4f284:	1884703a 	and	r2,r3,r2
   4f288:	1001703a 	wrctl	status,r2
  
  return context;
   4f28c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   4f290:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   4f294:	00c00044 	movi	r3,1
   4f298:	e0bffa17 	ldw	r2,-24(fp)
   4f29c:	1884983a 	sll	r2,r3,r2
   4f2a0:	0084303a 	nor	r2,zero,r2
   4f2a4:	1007883a 	mov	r3,r2
   4f2a8:	d0a7d217 	ldw	r2,-24760(gp)
   4f2ac:	1884703a 	and	r2,r3,r2
   4f2b0:	d0a7d215 	stw	r2,-24760(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   4f2b4:	d0a7d217 	ldw	r2,-24760(gp)
   4f2b8:	100170fa 	wrctl	ienable,r2
   4f2bc:	e0bffc17 	ldw	r2,-16(fp)
   4f2c0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4f2c4:	e0bffd17 	ldw	r2,-12(fp)
   4f2c8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   4f2cc:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   4f2d0:	0001883a 	nop
}
   4f2d4:	e037883a 	mov	sp,fp
   4f2d8:	df000017 	ldw	fp,0(sp)
   4f2dc:	dec00104 	addi	sp,sp,4
   4f2e0:	f800283a 	ret

0004f2e4 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   4f2e4:	defffc04 	addi	sp,sp,-16
   4f2e8:	df000315 	stw	fp,12(sp)
   4f2ec:	df000304 	addi	fp,sp,12
   4f2f0:	e13ffe15 	stw	r4,-8(fp)
   4f2f4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   4f2f8:	000530fa 	rdctl	r2,ienable
   4f2fc:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   4f300:	00c00044 	movi	r3,1
   4f304:	e0bfff17 	ldw	r2,-4(fp)
   4f308:	1884983a 	sll	r2,r3,r2
   4f30c:	1007883a 	mov	r3,r2
   4f310:	e0bffd17 	ldw	r2,-12(fp)
   4f314:	1884703a 	and	r2,r3,r2
   4f318:	1004c03a 	cmpne	r2,r2,zero
   4f31c:	10803fcc 	andi	r2,r2,255
}
   4f320:	e037883a 	mov	sp,fp
   4f324:	df000017 	ldw	fp,0(sp)
   4f328:	dec00104 	addi	sp,sp,4
   4f32c:	f800283a 	ret

0004f330 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   4f330:	defff504 	addi	sp,sp,-44
   4f334:	dfc00a15 	stw	ra,40(sp)
   4f338:	df000915 	stw	fp,36(sp)
   4f33c:	df000904 	addi	fp,sp,36
   4f340:	e13ffc15 	stw	r4,-16(fp)
   4f344:	e17ffd15 	stw	r5,-12(fp)
   4f348:	e1bffe15 	stw	r6,-8(fp)
   4f34c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   4f350:	00bffa84 	movi	r2,-22
   4f354:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   4f358:	e0bffd17 	ldw	r2,-12(fp)
   4f35c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   4f360:	e0bff817 	ldw	r2,-32(fp)
   4f364:	10800808 	cmpgei	r2,r2,32
   4f368:	1000271e 	bne	r2,zero,4f408 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4f36c:	0005303a 	rdctl	r2,status
   4f370:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4f374:	e0fffb17 	ldw	r3,-20(fp)
   4f378:	00bfff84 	movi	r2,-2
   4f37c:	1884703a 	and	r2,r3,r2
   4f380:	1001703a 	wrctl	status,r2
  
  return context;
   4f384:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   4f388:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   4f38c:	00800174 	movhi	r2,5
   4f390:	109b5d04 	addi	r2,r2,28020
   4f394:	e0fff817 	ldw	r3,-32(fp)
   4f398:	180690fa 	slli	r3,r3,3
   4f39c:	10c5883a 	add	r2,r2,r3
   4f3a0:	e0fffe17 	ldw	r3,-8(fp)
   4f3a4:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   4f3a8:	00800174 	movhi	r2,5
   4f3ac:	109b5d04 	addi	r2,r2,28020
   4f3b0:	e0fff817 	ldw	r3,-32(fp)
   4f3b4:	180690fa 	slli	r3,r3,3
   4f3b8:	10c5883a 	add	r2,r2,r3
   4f3bc:	10800104 	addi	r2,r2,4
   4f3c0:	e0ffff17 	ldw	r3,-4(fp)
   4f3c4:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   4f3c8:	e0bffe17 	ldw	r2,-8(fp)
   4f3cc:	10000526 	beq	r2,zero,4f3e4 <alt_iic_isr_register+0xb4>
   4f3d0:	e0bff817 	ldw	r2,-32(fp)
   4f3d4:	100b883a 	mov	r5,r2
   4f3d8:	e13ffc17 	ldw	r4,-16(fp)
   4f3dc:	004f1d00 	call	4f1d0 <alt_ic_irq_enable>
   4f3e0:	00000406 	br	4f3f4 <alt_iic_isr_register+0xc4>
   4f3e4:	e0bff817 	ldw	r2,-32(fp)
   4f3e8:	100b883a 	mov	r5,r2
   4f3ec:	e13ffc17 	ldw	r4,-16(fp)
   4f3f0:	004f2580 	call	4f258 <alt_ic_irq_disable>
   4f3f4:	e0bff715 	stw	r2,-36(fp)
   4f3f8:	e0bffa17 	ldw	r2,-24(fp)
   4f3fc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4f400:	e0bff917 	ldw	r2,-28(fp)
   4f404:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   4f408:	e0bff717 	ldw	r2,-36(fp)
}
   4f40c:	e037883a 	mov	sp,fp
   4f410:	dfc00117 	ldw	ra,4(sp)
   4f414:	df000017 	ldw	fp,0(sp)
   4f418:	dec00204 	addi	sp,sp,8
   4f41c:	f800283a 	ret

0004f420 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4f420:	defffe04 	addi	sp,sp,-8
   4f424:	dfc00115 	stw	ra,4(sp)
   4f428:	df000015 	stw	fp,0(sp)
   4f42c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4f430:	d0a00f17 	ldw	r2,-32708(gp)
   4f434:	10000326 	beq	r2,zero,4f444 <alt_get_errno+0x24>
   4f438:	d0a00f17 	ldw	r2,-32708(gp)
   4f43c:	103ee83a 	callr	r2
   4f440:	00000106 	br	4f448 <alt_get_errno+0x28>
   4f444:	d0a7c704 	addi	r2,gp,-24804
}
   4f448:	e037883a 	mov	sp,fp
   4f44c:	dfc00117 	ldw	ra,4(sp)
   4f450:	df000017 	ldw	fp,0(sp)
   4f454:	dec00204 	addi	sp,sp,8
   4f458:	f800283a 	ret

0004f45c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   4f45c:	deffed04 	addi	sp,sp,-76
   4f460:	dfc01215 	stw	ra,72(sp)
   4f464:	df001115 	stw	fp,68(sp)
   4f468:	df001104 	addi	fp,sp,68
   4f46c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4f470:	e0bfff17 	ldw	r2,-4(fp)
   4f474:	10000616 	blt	r2,zero,4f490 <isatty+0x34>
   4f478:	e0bfff17 	ldw	r2,-4(fp)
   4f47c:	10c00324 	muli	r3,r2,12
   4f480:	00800174 	movhi	r2,5
   4f484:	108e5104 	addi	r2,r2,14660
   4f488:	1885883a 	add	r2,r3,r2
   4f48c:	00000106 	br	4f494 <isatty+0x38>
   4f490:	0005883a 	mov	r2,zero
   4f494:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   4f498:	e0bfef17 	ldw	r2,-68(fp)
   4f49c:	10000e26 	beq	r2,zero,4f4d8 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   4f4a0:	e0bfef17 	ldw	r2,-68(fp)
   4f4a4:	10800017 	ldw	r2,0(r2)
   4f4a8:	10800817 	ldw	r2,32(r2)
   4f4ac:	1000021e 	bne	r2,zero,4f4b8 <isatty+0x5c>
    {
      return 1;
   4f4b0:	00800044 	movi	r2,1
   4f4b4:	00000d06 	br	4f4ec <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   4f4b8:	e0bff004 	addi	r2,fp,-64
   4f4bc:	100b883a 	mov	r5,r2
   4f4c0:	e13fff17 	ldw	r4,-4(fp)
   4f4c4:	004eedc0 	call	4eedc <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   4f4c8:	e0bff117 	ldw	r2,-60(fp)
   4f4cc:	10880020 	cmpeqi	r2,r2,8192
   4f4d0:	10803fcc 	andi	r2,r2,255
   4f4d4:	00000506 	br	4f4ec <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   4f4d8:	004f4200 	call	4f420 <alt_get_errno>
   4f4dc:	1007883a 	mov	r3,r2
   4f4e0:	00801444 	movi	r2,81
   4f4e4:	18800015 	stw	r2,0(r3)
    return 0;
   4f4e8:	0005883a 	mov	r2,zero
  }
}
   4f4ec:	e037883a 	mov	sp,fp
   4f4f0:	dfc00117 	ldw	ra,4(sp)
   4f4f4:	df000017 	ldw	fp,0(sp)
   4f4f8:	dec00204 	addi	sp,sp,8
   4f4fc:	f800283a 	ret

0004f500 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   4f500:	defffc04 	addi	sp,sp,-16
   4f504:	df000315 	stw	fp,12(sp)
   4f508:	df000304 	addi	fp,sp,12
   4f50c:	e13ffd15 	stw	r4,-12(fp)
   4f510:	e17ffe15 	stw	r5,-8(fp)
   4f514:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   4f518:	e0fffe17 	ldw	r3,-8(fp)
   4f51c:	e0bffd17 	ldw	r2,-12(fp)
   4f520:	18800c26 	beq	r3,r2,4f554 <alt_load_section+0x54>
  {
    while( to != end )
   4f524:	00000806 	br	4f548 <alt_load_section+0x48>
    {
      *to++ = *from++;
   4f528:	e0bffe17 	ldw	r2,-8(fp)
   4f52c:	10c00104 	addi	r3,r2,4
   4f530:	e0fffe15 	stw	r3,-8(fp)
   4f534:	e0fffd17 	ldw	r3,-12(fp)
   4f538:	19000104 	addi	r4,r3,4
   4f53c:	e13ffd15 	stw	r4,-12(fp)
   4f540:	18c00017 	ldw	r3,0(r3)
   4f544:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   4f548:	e0fffe17 	ldw	r3,-8(fp)
   4f54c:	e0bfff17 	ldw	r2,-4(fp)
   4f550:	18bff51e 	bne	r3,r2,4f528 <__alt_data_end+0xfffdd528>
    {
      *to++ = *from++;
    }
  }
}
   4f554:	0001883a 	nop
   4f558:	e037883a 	mov	sp,fp
   4f55c:	df000017 	ldw	fp,0(sp)
   4f560:	dec00104 	addi	sp,sp,4
   4f564:	f800283a 	ret

0004f568 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   4f568:	defffe04 	addi	sp,sp,-8
   4f56c:	dfc00115 	stw	ra,4(sp)
   4f570:	df000015 	stw	fp,0(sp)
   4f574:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   4f578:	01800174 	movhi	r6,5
   4f57c:	31932704 	addi	r6,r6,19612
   4f580:	01400174 	movhi	r5,5
   4f584:	294b7e04 	addi	r5,r5,11768
   4f588:	01000174 	movhi	r4,5
   4f58c:	21132704 	addi	r4,r4,19612
   4f590:	004f5000 	call	4f500 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   4f594:	01800134 	movhi	r6,4
   4f598:	31809104 	addi	r6,r6,580
   4f59c:	01400134 	movhi	r5,4
   4f5a0:	29400804 	addi	r5,r5,32
   4f5a4:	01000134 	movhi	r4,4
   4f5a8:	21000804 	addi	r4,r4,32
   4f5ac:	004f5000 	call	4f500 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   4f5b0:	01800174 	movhi	r6,5
   4f5b4:	318b7e04 	addi	r6,r6,11768
   4f5b8:	01400174 	movhi	r5,5
   4f5bc:	29499e04 	addi	r5,r5,9848
   4f5c0:	01000174 	movhi	r4,5
   4f5c4:	21099e04 	addi	r4,r4,9848
   4f5c8:	004f5000 	call	4f500 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   4f5cc:	0051bfc0 	call	51bfc <alt_dcache_flush_all>
  alt_icache_flush_all();
   4f5d0:	00520200 	call	52020 <alt_icache_flush_all>
}
   4f5d4:	0001883a 	nop
   4f5d8:	e037883a 	mov	sp,fp
   4f5dc:	dfc00117 	ldw	ra,4(sp)
   4f5e0:	df000017 	ldw	fp,0(sp)
   4f5e4:	dec00204 	addi	sp,sp,8
   4f5e8:	f800283a 	ret

0004f5ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4f5ec:	defffe04 	addi	sp,sp,-8
   4f5f0:	dfc00115 	stw	ra,4(sp)
   4f5f4:	df000015 	stw	fp,0(sp)
   4f5f8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4f5fc:	d0a00f17 	ldw	r2,-32708(gp)
   4f600:	10000326 	beq	r2,zero,4f610 <alt_get_errno+0x24>
   4f604:	d0a00f17 	ldw	r2,-32708(gp)
   4f608:	103ee83a 	callr	r2
   4f60c:	00000106 	br	4f614 <alt_get_errno+0x28>
   4f610:	d0a7c704 	addi	r2,gp,-24804
}
   4f614:	e037883a 	mov	sp,fp
   4f618:	dfc00117 	ldw	ra,4(sp)
   4f61c:	df000017 	ldw	fp,0(sp)
   4f620:	dec00204 	addi	sp,sp,8
   4f624:	f800283a 	ret

0004f628 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   4f628:	defff904 	addi	sp,sp,-28
   4f62c:	dfc00615 	stw	ra,24(sp)
   4f630:	df000515 	stw	fp,20(sp)
   4f634:	df000504 	addi	fp,sp,20
   4f638:	e13ffd15 	stw	r4,-12(fp)
   4f63c:	e17ffe15 	stw	r5,-8(fp)
   4f640:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   4f644:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4f648:	e0bffd17 	ldw	r2,-12(fp)
   4f64c:	10000616 	blt	r2,zero,4f668 <lseek+0x40>
   4f650:	e0bffd17 	ldw	r2,-12(fp)
   4f654:	10c00324 	muli	r3,r2,12
   4f658:	00800174 	movhi	r2,5
   4f65c:	108e5104 	addi	r2,r2,14660
   4f660:	1885883a 	add	r2,r3,r2
   4f664:	00000106 	br	4f66c <lseek+0x44>
   4f668:	0005883a 	mov	r2,zero
   4f66c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   4f670:	e0bffc17 	ldw	r2,-16(fp)
   4f674:	10001026 	beq	r2,zero,4f6b8 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   4f678:	e0bffc17 	ldw	r2,-16(fp)
   4f67c:	10800017 	ldw	r2,0(r2)
   4f680:	10800717 	ldw	r2,28(r2)
   4f684:	10000926 	beq	r2,zero,4f6ac <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   4f688:	e0bffc17 	ldw	r2,-16(fp)
   4f68c:	10800017 	ldw	r2,0(r2)
   4f690:	10800717 	ldw	r2,28(r2)
   4f694:	e1bfff17 	ldw	r6,-4(fp)
   4f698:	e17ffe17 	ldw	r5,-8(fp)
   4f69c:	e13ffc17 	ldw	r4,-16(fp)
   4f6a0:	103ee83a 	callr	r2
   4f6a4:	e0bffb15 	stw	r2,-20(fp)
   4f6a8:	00000506 	br	4f6c0 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   4f6ac:	00bfde84 	movi	r2,-134
   4f6b0:	e0bffb15 	stw	r2,-20(fp)
   4f6b4:	00000206 	br	4f6c0 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
   4f6b8:	00bfebc4 	movi	r2,-81
   4f6bc:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   4f6c0:	e0bffb17 	ldw	r2,-20(fp)
   4f6c4:	1000070e 	bge	r2,zero,4f6e4 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   4f6c8:	004f5ec0 	call	4f5ec <alt_get_errno>
   4f6cc:	1007883a 	mov	r3,r2
   4f6d0:	e0bffb17 	ldw	r2,-20(fp)
   4f6d4:	0085c83a 	sub	r2,zero,r2
   4f6d8:	18800015 	stw	r2,0(r3)
    rc = -1;
   4f6dc:	00bfffc4 	movi	r2,-1
   4f6e0:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   4f6e4:	e0bffb17 	ldw	r2,-20(fp)
}
   4f6e8:	e037883a 	mov	sp,fp
   4f6ec:	dfc00117 	ldw	ra,4(sp)
   4f6f0:	df000017 	ldw	fp,0(sp)
   4f6f4:	dec00204 	addi	sp,sp,8
   4f6f8:	f800283a 	ret

0004f6fc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   4f6fc:	defffd04 	addi	sp,sp,-12
   4f700:	dfc00215 	stw	ra,8(sp)
   4f704:	df000115 	stw	fp,4(sp)
   4f708:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   4f70c:	0009883a 	mov	r4,zero
   4f710:	004ff9c0 	call	4ff9c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   4f714:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   4f718:	004ffd40 	call	4ffd4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   4f71c:	01800174 	movhi	r6,5
   4f720:	318ad104 	addi	r6,r6,11076
   4f724:	01400174 	movhi	r5,5
   4f728:	294ad104 	addi	r5,r5,11076
   4f72c:	01000174 	movhi	r4,5
   4f730:	210ad104 	addi	r4,r4,11076
   4f734:	00521b40 	call	521b4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   4f738:	0051d240 	call	51d24 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   4f73c:	01000174 	movhi	r4,5
   4f740:	21076104 	addi	r4,r4,7556
   4f744:	00522e40 	call	522e4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   4f748:	d0a7d317 	ldw	r2,-24756(gp)
   4f74c:	d0e7d417 	ldw	r3,-24752(gp)
   4f750:	d127d517 	ldw	r4,-24748(gp)
   4f754:	200d883a 	mov	r6,r4
   4f758:	180b883a 	mov	r5,r3
   4f75c:	1009883a 	mov	r4,r2
   4f760:	00413ec0 	call	413ec <main>
   4f764:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   4f768:	01000044 	movi	r4,1
   4f76c:	004eda40 	call	4eda4 <close>
  exit (result);
   4f770:	e13fff17 	ldw	r4,-4(fp)
   4f774:	00522f80 	call	522f8 <exit>

0004f778 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   4f778:	defffe04 	addi	sp,sp,-8
   4f77c:	df000115 	stw	fp,4(sp)
   4f780:	df000104 	addi	fp,sp,4
   4f784:	e13fff15 	stw	r4,-4(fp)
}
   4f788:	0001883a 	nop
   4f78c:	e037883a 	mov	sp,fp
   4f790:	df000017 	ldw	fp,0(sp)
   4f794:	dec00104 	addi	sp,sp,4
   4f798:	f800283a 	ret

0004f79c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   4f79c:	defffe04 	addi	sp,sp,-8
   4f7a0:	df000115 	stw	fp,4(sp)
   4f7a4:	df000104 	addi	fp,sp,4
   4f7a8:	e13fff15 	stw	r4,-4(fp)
}
   4f7ac:	0001883a 	nop
   4f7b0:	e037883a 	mov	sp,fp
   4f7b4:	df000017 	ldw	fp,0(sp)
   4f7b8:	dec00104 	addi	sp,sp,4
   4f7bc:	f800283a 	ret

0004f7c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4f7c0:	defffe04 	addi	sp,sp,-8
   4f7c4:	dfc00115 	stw	ra,4(sp)
   4f7c8:	df000015 	stw	fp,0(sp)
   4f7cc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4f7d0:	d0a00f17 	ldw	r2,-32708(gp)
   4f7d4:	10000326 	beq	r2,zero,4f7e4 <alt_get_errno+0x24>
   4f7d8:	d0a00f17 	ldw	r2,-32708(gp)
   4f7dc:	103ee83a 	callr	r2
   4f7e0:	00000106 	br	4f7e8 <alt_get_errno+0x28>
   4f7e4:	d0a7c704 	addi	r2,gp,-24804
}
   4f7e8:	e037883a 	mov	sp,fp
   4f7ec:	dfc00117 	ldw	ra,4(sp)
   4f7f0:	df000017 	ldw	fp,0(sp)
   4f7f4:	dec00204 	addi	sp,sp,8
   4f7f8:	f800283a 	ret

0004f7fc <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   4f7fc:	defffd04 	addi	sp,sp,-12
   4f800:	df000215 	stw	fp,8(sp)
   4f804:	df000204 	addi	fp,sp,8
   4f808:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   4f80c:	e0bfff17 	ldw	r2,-4(fp)
   4f810:	10800217 	ldw	r2,8(r2)
   4f814:	10d00034 	orhi	r3,r2,16384
   4f818:	e0bfff17 	ldw	r2,-4(fp)
   4f81c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   4f820:	e03ffe15 	stw	zero,-8(fp)
   4f824:	00001d06 	br	4f89c <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   4f828:	00800174 	movhi	r2,5
   4f82c:	108e5104 	addi	r2,r2,14660
   4f830:	e0fffe17 	ldw	r3,-8(fp)
   4f834:	18c00324 	muli	r3,r3,12
   4f838:	10c5883a 	add	r2,r2,r3
   4f83c:	10c00017 	ldw	r3,0(r2)
   4f840:	e0bfff17 	ldw	r2,-4(fp)
   4f844:	10800017 	ldw	r2,0(r2)
   4f848:	1880111e 	bne	r3,r2,4f890 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   4f84c:	00800174 	movhi	r2,5
   4f850:	108e5104 	addi	r2,r2,14660
   4f854:	e0fffe17 	ldw	r3,-8(fp)
   4f858:	18c00324 	muli	r3,r3,12
   4f85c:	10c5883a 	add	r2,r2,r3
   4f860:	10800204 	addi	r2,r2,8
   4f864:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   4f868:	1000090e 	bge	r2,zero,4f890 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   4f86c:	e0bffe17 	ldw	r2,-8(fp)
   4f870:	10c00324 	muli	r3,r2,12
   4f874:	00800174 	movhi	r2,5
   4f878:	108e5104 	addi	r2,r2,14660
   4f87c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   4f880:	e0bfff17 	ldw	r2,-4(fp)
   4f884:	18800226 	beq	r3,r2,4f890 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   4f888:	00bffcc4 	movi	r2,-13
   4f88c:	00000806 	br	4f8b0 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   4f890:	e0bffe17 	ldw	r2,-8(fp)
   4f894:	10800044 	addi	r2,r2,1
   4f898:	e0bffe15 	stw	r2,-8(fp)
   4f89c:	d0a00e17 	ldw	r2,-32712(gp)
   4f8a0:	1007883a 	mov	r3,r2
   4f8a4:	e0bffe17 	ldw	r2,-8(fp)
   4f8a8:	18bfdf2e 	bgeu	r3,r2,4f828 <__alt_data_end+0xfffdd828>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   4f8ac:	0005883a 	mov	r2,zero
}
   4f8b0:	e037883a 	mov	sp,fp
   4f8b4:	df000017 	ldw	fp,0(sp)
   4f8b8:	dec00104 	addi	sp,sp,4
   4f8bc:	f800283a 	ret

0004f8c0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   4f8c0:	defff604 	addi	sp,sp,-40
   4f8c4:	dfc00915 	stw	ra,36(sp)
   4f8c8:	df000815 	stw	fp,32(sp)
   4f8cc:	df000804 	addi	fp,sp,32
   4f8d0:	e13ffd15 	stw	r4,-12(fp)
   4f8d4:	e17ffe15 	stw	r5,-8(fp)
   4f8d8:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   4f8dc:	00bfffc4 	movi	r2,-1
   4f8e0:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   4f8e4:	00bffb44 	movi	r2,-19
   4f8e8:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   4f8ec:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   4f8f0:	d1600c04 	addi	r5,gp,-32720
   4f8f4:	e13ffd17 	ldw	r4,-12(fp)
   4f8f8:	0051de40 	call	51de4 <alt_find_dev>
   4f8fc:	e0bff815 	stw	r2,-32(fp)
   4f900:	e0bff817 	ldw	r2,-32(fp)
   4f904:	1000051e 	bne	r2,zero,4f91c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   4f908:	e13ffd17 	ldw	r4,-12(fp)
   4f90c:	0051e740 	call	51e74 <alt_find_file>
   4f910:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   4f914:	00800044 	movi	r2,1
   4f918:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   4f91c:	e0bff817 	ldw	r2,-32(fp)
   4f920:	10002926 	beq	r2,zero,4f9c8 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   4f924:	e13ff817 	ldw	r4,-32(fp)
   4f928:	0051f7c0 	call	51f7c <alt_get_fd>
   4f92c:	e0bff915 	stw	r2,-28(fp)
   4f930:	e0bff917 	ldw	r2,-28(fp)
   4f934:	1000030e 	bge	r2,zero,4f944 <open+0x84>
    {
      status = index;
   4f938:	e0bff917 	ldw	r2,-28(fp)
   4f93c:	e0bffa15 	stw	r2,-24(fp)
   4f940:	00002306 	br	4f9d0 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   4f944:	e0bff917 	ldw	r2,-28(fp)
   4f948:	10c00324 	muli	r3,r2,12
   4f94c:	00800174 	movhi	r2,5
   4f950:	108e5104 	addi	r2,r2,14660
   4f954:	1885883a 	add	r2,r3,r2
   4f958:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   4f95c:	e0fffe17 	ldw	r3,-8(fp)
   4f960:	00900034 	movhi	r2,16384
   4f964:	10bfffc4 	addi	r2,r2,-1
   4f968:	1886703a 	and	r3,r3,r2
   4f96c:	e0bffc17 	ldw	r2,-16(fp)
   4f970:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   4f974:	e0bffb17 	ldw	r2,-20(fp)
   4f978:	1000051e 	bne	r2,zero,4f990 <open+0xd0>
   4f97c:	e13ffc17 	ldw	r4,-16(fp)
   4f980:	004f7fc0 	call	4f7fc <alt_file_locked>
   4f984:	e0bffa15 	stw	r2,-24(fp)
   4f988:	e0bffa17 	ldw	r2,-24(fp)
   4f98c:	10001016 	blt	r2,zero,4f9d0 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   4f990:	e0bff817 	ldw	r2,-32(fp)
   4f994:	10800317 	ldw	r2,12(r2)
   4f998:	10000826 	beq	r2,zero,4f9bc <open+0xfc>
   4f99c:	e0bff817 	ldw	r2,-32(fp)
   4f9a0:	10800317 	ldw	r2,12(r2)
   4f9a4:	e1ffff17 	ldw	r7,-4(fp)
   4f9a8:	e1bffe17 	ldw	r6,-8(fp)
   4f9ac:	e17ffd17 	ldw	r5,-12(fp)
   4f9b0:	e13ffc17 	ldw	r4,-16(fp)
   4f9b4:	103ee83a 	callr	r2
   4f9b8:	00000106 	br	4f9c0 <open+0x100>
   4f9bc:	0005883a 	mov	r2,zero
   4f9c0:	e0bffa15 	stw	r2,-24(fp)
   4f9c4:	00000206 	br	4f9d0 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   4f9c8:	00bffb44 	movi	r2,-19
   4f9cc:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   4f9d0:	e0bffa17 	ldw	r2,-24(fp)
   4f9d4:	1000090e 	bge	r2,zero,4f9fc <open+0x13c>
  {
    alt_release_fd (index);  
   4f9d8:	e13ff917 	ldw	r4,-28(fp)
   4f9dc:	004fb4c0 	call	4fb4c <alt_release_fd>
    ALT_ERRNO = -status;
   4f9e0:	004f7c00 	call	4f7c0 <alt_get_errno>
   4f9e4:	1007883a 	mov	r3,r2
   4f9e8:	e0bffa17 	ldw	r2,-24(fp)
   4f9ec:	0085c83a 	sub	r2,zero,r2
   4f9f0:	18800015 	stw	r2,0(r3)
    return -1;
   4f9f4:	00bfffc4 	movi	r2,-1
   4f9f8:	00000106 	br	4fa00 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   4f9fc:	e0bff917 	ldw	r2,-28(fp)
}
   4fa00:	e037883a 	mov	sp,fp
   4fa04:	dfc00117 	ldw	ra,4(sp)
   4fa08:	df000017 	ldw	fp,0(sp)
   4fa0c:	dec00204 	addi	sp,sp,8
   4fa10:	f800283a 	ret

0004fa14 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4fa14:	defffe04 	addi	sp,sp,-8
   4fa18:	dfc00115 	stw	ra,4(sp)
   4fa1c:	df000015 	stw	fp,0(sp)
   4fa20:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4fa24:	d0a00f17 	ldw	r2,-32708(gp)
   4fa28:	10000326 	beq	r2,zero,4fa38 <alt_get_errno+0x24>
   4fa2c:	d0a00f17 	ldw	r2,-32708(gp)
   4fa30:	103ee83a 	callr	r2
   4fa34:	00000106 	br	4fa3c <alt_get_errno+0x28>
   4fa38:	d0a7c704 	addi	r2,gp,-24804
}
   4fa3c:	e037883a 	mov	sp,fp
   4fa40:	dfc00117 	ldw	ra,4(sp)
   4fa44:	df000017 	ldw	fp,0(sp)
   4fa48:	dec00204 	addi	sp,sp,8
   4fa4c:	f800283a 	ret

0004fa50 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   4fa50:	defff904 	addi	sp,sp,-28
   4fa54:	dfc00615 	stw	ra,24(sp)
   4fa58:	df000515 	stw	fp,20(sp)
   4fa5c:	df000504 	addi	fp,sp,20
   4fa60:	e13ffd15 	stw	r4,-12(fp)
   4fa64:	e17ffe15 	stw	r5,-8(fp)
   4fa68:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4fa6c:	e0bffd17 	ldw	r2,-12(fp)
   4fa70:	10000616 	blt	r2,zero,4fa8c <read+0x3c>
   4fa74:	e0bffd17 	ldw	r2,-12(fp)
   4fa78:	10c00324 	muli	r3,r2,12
   4fa7c:	00800174 	movhi	r2,5
   4fa80:	108e5104 	addi	r2,r2,14660
   4fa84:	1885883a 	add	r2,r3,r2
   4fa88:	00000106 	br	4fa90 <read+0x40>
   4fa8c:	0005883a 	mov	r2,zero
   4fa90:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   4fa94:	e0bffb17 	ldw	r2,-20(fp)
   4fa98:	10002226 	beq	r2,zero,4fb24 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   4fa9c:	e0bffb17 	ldw	r2,-20(fp)
   4faa0:	10800217 	ldw	r2,8(r2)
   4faa4:	108000cc 	andi	r2,r2,3
   4faa8:	10800060 	cmpeqi	r2,r2,1
   4faac:	1000181e 	bne	r2,zero,4fb10 <read+0xc0>
        (fd->dev->read))
   4fab0:	e0bffb17 	ldw	r2,-20(fp)
   4fab4:	10800017 	ldw	r2,0(r2)
   4fab8:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   4fabc:	10001426 	beq	r2,zero,4fb10 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   4fac0:	e0bffb17 	ldw	r2,-20(fp)
   4fac4:	10800017 	ldw	r2,0(r2)
   4fac8:	10800517 	ldw	r2,20(r2)
   4facc:	e0ffff17 	ldw	r3,-4(fp)
   4fad0:	180d883a 	mov	r6,r3
   4fad4:	e17ffe17 	ldw	r5,-8(fp)
   4fad8:	e13ffb17 	ldw	r4,-20(fp)
   4fadc:	103ee83a 	callr	r2
   4fae0:	e0bffc15 	stw	r2,-16(fp)
   4fae4:	e0bffc17 	ldw	r2,-16(fp)
   4fae8:	1000070e 	bge	r2,zero,4fb08 <read+0xb8>
        {
          ALT_ERRNO = -rval;
   4faec:	004fa140 	call	4fa14 <alt_get_errno>
   4faf0:	1007883a 	mov	r3,r2
   4faf4:	e0bffc17 	ldw	r2,-16(fp)
   4faf8:	0085c83a 	sub	r2,zero,r2
   4fafc:	18800015 	stw	r2,0(r3)
          return -1;
   4fb00:	00bfffc4 	movi	r2,-1
   4fb04:	00000c06 	br	4fb38 <read+0xe8>
        }
        return rval;
   4fb08:	e0bffc17 	ldw	r2,-16(fp)
   4fb0c:	00000a06 	br	4fb38 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
   4fb10:	004fa140 	call	4fa14 <alt_get_errno>
   4fb14:	1007883a 	mov	r3,r2
   4fb18:	00800344 	movi	r2,13
   4fb1c:	18800015 	stw	r2,0(r3)
   4fb20:	00000406 	br	4fb34 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   4fb24:	004fa140 	call	4fa14 <alt_get_errno>
   4fb28:	1007883a 	mov	r3,r2
   4fb2c:	00801444 	movi	r2,81
   4fb30:	18800015 	stw	r2,0(r3)
  }
  return -1;
   4fb34:	00bfffc4 	movi	r2,-1
}
   4fb38:	e037883a 	mov	sp,fp
   4fb3c:	dfc00117 	ldw	ra,4(sp)
   4fb40:	df000017 	ldw	fp,0(sp)
   4fb44:	dec00204 	addi	sp,sp,8
   4fb48:	f800283a 	ret

0004fb4c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   4fb4c:	defffe04 	addi	sp,sp,-8
   4fb50:	df000115 	stw	fp,4(sp)
   4fb54:	df000104 	addi	fp,sp,4
   4fb58:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   4fb5c:	e0bfff17 	ldw	r2,-4(fp)
   4fb60:	108000d0 	cmplti	r2,r2,3
   4fb64:	10000d1e 	bne	r2,zero,4fb9c <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   4fb68:	00800174 	movhi	r2,5
   4fb6c:	108e5104 	addi	r2,r2,14660
   4fb70:	e0ffff17 	ldw	r3,-4(fp)
   4fb74:	18c00324 	muli	r3,r3,12
   4fb78:	10c5883a 	add	r2,r2,r3
   4fb7c:	10800204 	addi	r2,r2,8
   4fb80:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   4fb84:	00800174 	movhi	r2,5
   4fb88:	108e5104 	addi	r2,r2,14660
   4fb8c:	e0ffff17 	ldw	r3,-4(fp)
   4fb90:	18c00324 	muli	r3,r3,12
   4fb94:	10c5883a 	add	r2,r2,r3
   4fb98:	10000015 	stw	zero,0(r2)
  }
}
   4fb9c:	0001883a 	nop
   4fba0:	e037883a 	mov	sp,fp
   4fba4:	df000017 	ldw	fp,0(sp)
   4fba8:	dec00104 	addi	sp,sp,4
   4fbac:	f800283a 	ret

0004fbb0 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   4fbb0:	defff904 	addi	sp,sp,-28
   4fbb4:	df000615 	stw	fp,24(sp)
   4fbb8:	df000604 	addi	fp,sp,24
   4fbbc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4fbc0:	0005303a 	rdctl	r2,status
   4fbc4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4fbc8:	e0fffe17 	ldw	r3,-8(fp)
   4fbcc:	00bfff84 	movi	r2,-2
   4fbd0:	1884703a 	and	r2,r3,r2
   4fbd4:	1001703a 	wrctl	status,r2
  
  return context;
   4fbd8:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   4fbdc:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   4fbe0:	d0a01117 	ldw	r2,-32700(gp)
   4fbe4:	10c000c4 	addi	r3,r2,3
   4fbe8:	00bfff04 	movi	r2,-4
   4fbec:	1884703a 	and	r2,r3,r2
   4fbf0:	d0a01115 	stw	r2,-32700(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   4fbf4:	d0e01117 	ldw	r3,-32700(gp)
   4fbf8:	e0bfff17 	ldw	r2,-4(fp)
   4fbfc:	1887883a 	add	r3,r3,r2
   4fc00:	008001f4 	movhi	r2,7
   4fc04:	10880004 	addi	r2,r2,8192
   4fc08:	10c0062e 	bgeu	r2,r3,4fc24 <sbrk+0x74>
   4fc0c:	e0bffb17 	ldw	r2,-20(fp)
   4fc10:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4fc14:	e0bffa17 	ldw	r2,-24(fp)
   4fc18:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   4fc1c:	00bfffc4 	movi	r2,-1
   4fc20:	00000b06 	br	4fc50 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   4fc24:	d0a01117 	ldw	r2,-32700(gp)
   4fc28:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   4fc2c:	d0e01117 	ldw	r3,-32700(gp)
   4fc30:	e0bfff17 	ldw	r2,-4(fp)
   4fc34:	1885883a 	add	r2,r3,r2
   4fc38:	d0a01115 	stw	r2,-32700(gp)
   4fc3c:	e0bffb17 	ldw	r2,-20(fp)
   4fc40:	e0bffc15 	stw	r2,-16(fp)
   4fc44:	e0bffc17 	ldw	r2,-16(fp)
   4fc48:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   4fc4c:	e0bffd17 	ldw	r2,-12(fp)
} 
   4fc50:	e037883a 	mov	sp,fp
   4fc54:	df000017 	ldw	fp,0(sp)
   4fc58:	dec00104 	addi	sp,sp,4
   4fc5c:	f800283a 	ret

0004fc60 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   4fc60:	defffa04 	addi	sp,sp,-24
   4fc64:	df000515 	stw	fp,20(sp)
   4fc68:	df000504 	addi	fp,sp,20
   4fc6c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4fc70:	0005303a 	rdctl	r2,status
   4fc74:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4fc78:	e0fffc17 	ldw	r3,-16(fp)
   4fc7c:	00bfff84 	movi	r2,-2
   4fc80:	1884703a 	and	r2,r3,r2
   4fc84:	1001703a 	wrctl	status,r2
  
  return context;
   4fc88:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   4fc8c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   4fc90:	e0bfff17 	ldw	r2,-4(fp)
   4fc94:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   4fc98:	e0bffd17 	ldw	r2,-12(fp)
   4fc9c:	10800017 	ldw	r2,0(r2)
   4fca0:	e0fffd17 	ldw	r3,-12(fp)
   4fca4:	18c00117 	ldw	r3,4(r3)
   4fca8:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   4fcac:	e0bffd17 	ldw	r2,-12(fp)
   4fcb0:	10800117 	ldw	r2,4(r2)
   4fcb4:	e0fffd17 	ldw	r3,-12(fp)
   4fcb8:	18c00017 	ldw	r3,0(r3)
   4fcbc:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   4fcc0:	e0bffd17 	ldw	r2,-12(fp)
   4fcc4:	e0fffd17 	ldw	r3,-12(fp)
   4fcc8:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   4fccc:	e0bffd17 	ldw	r2,-12(fp)
   4fcd0:	e0fffd17 	ldw	r3,-12(fp)
   4fcd4:	10c00015 	stw	r3,0(r2)
   4fcd8:	e0bffb17 	ldw	r2,-20(fp)
   4fcdc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4fce0:	e0bffe17 	ldw	r2,-8(fp)
   4fce4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   4fce8:	0001883a 	nop
   4fcec:	e037883a 	mov	sp,fp
   4fcf0:	df000017 	ldw	fp,0(sp)
   4fcf4:	dec00104 	addi	sp,sp,4
   4fcf8:	f800283a 	ret

0004fcfc <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   4fcfc:	defffb04 	addi	sp,sp,-20
   4fd00:	dfc00415 	stw	ra,16(sp)
   4fd04:	df000315 	stw	fp,12(sp)
   4fd08:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   4fd0c:	d0a01217 	ldw	r2,-32696(gp)
   4fd10:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   4fd14:	d0a7d717 	ldw	r2,-24740(gp)
   4fd18:	10800044 	addi	r2,r2,1
   4fd1c:	d0a7d715 	stw	r2,-24740(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   4fd20:	00002e06 	br	4fddc <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   4fd24:	e0bffd17 	ldw	r2,-12(fp)
   4fd28:	10800017 	ldw	r2,0(r2)
   4fd2c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   4fd30:	e0bffd17 	ldw	r2,-12(fp)
   4fd34:	10800403 	ldbu	r2,16(r2)
   4fd38:	10803fcc 	andi	r2,r2,255
   4fd3c:	10000426 	beq	r2,zero,4fd50 <alt_tick+0x54>
   4fd40:	d0a7d717 	ldw	r2,-24740(gp)
   4fd44:	1000021e 	bne	r2,zero,4fd50 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   4fd48:	e0bffd17 	ldw	r2,-12(fp)
   4fd4c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   4fd50:	e0bffd17 	ldw	r2,-12(fp)
   4fd54:	10800217 	ldw	r2,8(r2)
   4fd58:	d0e7d717 	ldw	r3,-24740(gp)
   4fd5c:	18801d36 	bltu	r3,r2,4fdd4 <alt_tick+0xd8>
   4fd60:	e0bffd17 	ldw	r2,-12(fp)
   4fd64:	10800403 	ldbu	r2,16(r2)
   4fd68:	10803fcc 	andi	r2,r2,255
   4fd6c:	1000191e 	bne	r2,zero,4fdd4 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   4fd70:	e0bffd17 	ldw	r2,-12(fp)
   4fd74:	10800317 	ldw	r2,12(r2)
   4fd78:	e0fffd17 	ldw	r3,-12(fp)
   4fd7c:	18c00517 	ldw	r3,20(r3)
   4fd80:	1809883a 	mov	r4,r3
   4fd84:	103ee83a 	callr	r2
   4fd88:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   4fd8c:	e0bfff17 	ldw	r2,-4(fp)
   4fd90:	1000031e 	bne	r2,zero,4fda0 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   4fd94:	e13ffd17 	ldw	r4,-12(fp)
   4fd98:	004fc600 	call	4fc60 <alt_alarm_stop>
   4fd9c:	00000d06 	br	4fdd4 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   4fda0:	e0bffd17 	ldw	r2,-12(fp)
   4fda4:	10c00217 	ldw	r3,8(r2)
   4fda8:	e0bfff17 	ldw	r2,-4(fp)
   4fdac:	1887883a 	add	r3,r3,r2
   4fdb0:	e0bffd17 	ldw	r2,-12(fp)
   4fdb4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   4fdb8:	e0bffd17 	ldw	r2,-12(fp)
   4fdbc:	10c00217 	ldw	r3,8(r2)
   4fdc0:	d0a7d717 	ldw	r2,-24740(gp)
   4fdc4:	1880032e 	bgeu	r3,r2,4fdd4 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   4fdc8:	e0bffd17 	ldw	r2,-12(fp)
   4fdcc:	00c00044 	movi	r3,1
   4fdd0:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   4fdd4:	e0bffe17 	ldw	r2,-8(fp)
   4fdd8:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   4fddc:	e0fffd17 	ldw	r3,-12(fp)
   4fde0:	d0a01204 	addi	r2,gp,-32696
   4fde4:	18bfcf1e 	bne	r3,r2,4fd24 <__alt_data_end+0xfffddd24>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   4fde8:	0001883a 	nop
}
   4fdec:	0001883a 	nop
   4fdf0:	e037883a 	mov	sp,fp
   4fdf4:	dfc00117 	ldw	ra,4(sp)
   4fdf8:	df000017 	ldw	fp,0(sp)
   4fdfc:	dec00204 	addi	sp,sp,8
   4fe00:	f800283a 	ret

0004fe04 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   4fe04:	defffd04 	addi	sp,sp,-12
   4fe08:	dfc00215 	stw	ra,8(sp)
   4fe0c:	df000115 	stw	fp,4(sp)
   4fe10:	df000104 	addi	fp,sp,4
   4fe14:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   4fe18:	e13fff17 	ldw	r4,-4(fp)
   4fe1c:	0051aa40 	call	51aa4 <alt_busy_sleep>
}
   4fe20:	e037883a 	mov	sp,fp
   4fe24:	dfc00117 	ldw	ra,4(sp)
   4fe28:	df000017 	ldw	fp,0(sp)
   4fe2c:	dec00204 	addi	sp,sp,8
   4fe30:	f800283a 	ret

0004fe34 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4fe34:	defffe04 	addi	sp,sp,-8
   4fe38:	dfc00115 	stw	ra,4(sp)
   4fe3c:	df000015 	stw	fp,0(sp)
   4fe40:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4fe44:	d0a00f17 	ldw	r2,-32708(gp)
   4fe48:	10000326 	beq	r2,zero,4fe58 <alt_get_errno+0x24>
   4fe4c:	d0a00f17 	ldw	r2,-32708(gp)
   4fe50:	103ee83a 	callr	r2
   4fe54:	00000106 	br	4fe5c <alt_get_errno+0x28>
   4fe58:	d0a7c704 	addi	r2,gp,-24804
}
   4fe5c:	e037883a 	mov	sp,fp
   4fe60:	dfc00117 	ldw	ra,4(sp)
   4fe64:	df000017 	ldw	fp,0(sp)
   4fe68:	dec00204 	addi	sp,sp,8
   4fe6c:	f800283a 	ret

0004fe70 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   4fe70:	defff904 	addi	sp,sp,-28
   4fe74:	dfc00615 	stw	ra,24(sp)
   4fe78:	df000515 	stw	fp,20(sp)
   4fe7c:	df000504 	addi	fp,sp,20
   4fe80:	e13ffd15 	stw	r4,-12(fp)
   4fe84:	e17ffe15 	stw	r5,-8(fp)
   4fe88:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4fe8c:	e0bffd17 	ldw	r2,-12(fp)
   4fe90:	10000616 	blt	r2,zero,4feac <write+0x3c>
   4fe94:	e0bffd17 	ldw	r2,-12(fp)
   4fe98:	10c00324 	muli	r3,r2,12
   4fe9c:	00800174 	movhi	r2,5
   4fea0:	108e5104 	addi	r2,r2,14660
   4fea4:	1885883a 	add	r2,r3,r2
   4fea8:	00000106 	br	4feb0 <write+0x40>
   4feac:	0005883a 	mov	r2,zero
   4feb0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   4feb4:	e0bffb17 	ldw	r2,-20(fp)
   4feb8:	10002126 	beq	r2,zero,4ff40 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   4febc:	e0bffb17 	ldw	r2,-20(fp)
   4fec0:	10800217 	ldw	r2,8(r2)
   4fec4:	108000cc 	andi	r2,r2,3
   4fec8:	10001826 	beq	r2,zero,4ff2c <write+0xbc>
   4fecc:	e0bffb17 	ldw	r2,-20(fp)
   4fed0:	10800017 	ldw	r2,0(r2)
   4fed4:	10800617 	ldw	r2,24(r2)
   4fed8:	10001426 	beq	r2,zero,4ff2c <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   4fedc:	e0bffb17 	ldw	r2,-20(fp)
   4fee0:	10800017 	ldw	r2,0(r2)
   4fee4:	10800617 	ldw	r2,24(r2)
   4fee8:	e0ffff17 	ldw	r3,-4(fp)
   4feec:	180d883a 	mov	r6,r3
   4fef0:	e17ffe17 	ldw	r5,-8(fp)
   4fef4:	e13ffb17 	ldw	r4,-20(fp)
   4fef8:	103ee83a 	callr	r2
   4fefc:	e0bffc15 	stw	r2,-16(fp)
   4ff00:	e0bffc17 	ldw	r2,-16(fp)
   4ff04:	1000070e 	bge	r2,zero,4ff24 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   4ff08:	004fe340 	call	4fe34 <alt_get_errno>
   4ff0c:	1007883a 	mov	r3,r2
   4ff10:	e0bffc17 	ldw	r2,-16(fp)
   4ff14:	0085c83a 	sub	r2,zero,r2
   4ff18:	18800015 	stw	r2,0(r3)
        return -1;
   4ff1c:	00bfffc4 	movi	r2,-1
   4ff20:	00000c06 	br	4ff54 <write+0xe4>
      }
      return rval;
   4ff24:	e0bffc17 	ldw	r2,-16(fp)
   4ff28:	00000a06 	br	4ff54 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   4ff2c:	004fe340 	call	4fe34 <alt_get_errno>
   4ff30:	1007883a 	mov	r3,r2
   4ff34:	00800344 	movi	r2,13
   4ff38:	18800015 	stw	r2,0(r3)
   4ff3c:	00000406 	br	4ff50 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   4ff40:	004fe340 	call	4fe34 <alt_get_errno>
   4ff44:	1007883a 	mov	r3,r2
   4ff48:	00801444 	movi	r2,81
   4ff4c:	18800015 	stw	r2,0(r3)
  }
  return -1;
   4ff50:	00bfffc4 	movi	r2,-1
}
   4ff54:	e037883a 	mov	sp,fp
   4ff58:	dfc00117 	ldw	ra,4(sp)
   4ff5c:	df000017 	ldw	fp,0(sp)
   4ff60:	dec00204 	addi	sp,sp,8
   4ff64:	f800283a 	ret

0004ff68 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   4ff68:	defffd04 	addi	sp,sp,-12
   4ff6c:	dfc00215 	stw	ra,8(sp)
   4ff70:	df000115 	stw	fp,4(sp)
   4ff74:	df000104 	addi	fp,sp,4
   4ff78:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   4ff7c:	d1600c04 	addi	r5,gp,-32720
   4ff80:	e13fff17 	ldw	r4,-4(fp)
   4ff84:	0051c800 	call	51c80 <alt_dev_llist_insert>
}
   4ff88:	e037883a 	mov	sp,fp
   4ff8c:	dfc00117 	ldw	ra,4(sp)
   4ff90:	df000017 	ldw	fp,0(sp)
   4ff94:	dec00204 	addi	sp,sp,8
   4ff98:	f800283a 	ret

0004ff9c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   4ff9c:	defffd04 	addi	sp,sp,-12
   4ffa0:	dfc00215 	stw	ra,8(sp)
   4ffa4:	df000115 	stw	fp,4(sp)
   4ffa8:	df000104 	addi	fp,sp,4
   4ffac:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU_LAB5, cpu_lab5);
   4ffb0:	00522300 	call	52230 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   4ffb4:	00800044 	movi	r2,1
   4ffb8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   4ffbc:	0001883a 	nop
   4ffc0:	e037883a 	mov	sp,fp
   4ffc4:	dfc00117 	ldw	ra,4(sp)
   4ffc8:	df000017 	ldw	fp,0(sp)
   4ffcc:	dec00204 	addi	sp,sp,8
   4ffd0:	f800283a 	ret

0004ffd4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   4ffd4:	defffe04 	addi	sp,sp,-8
   4ffd8:	dfc00115 	stw	ra,4(sp)
   4ffdc:	df000015 	stw	fp,0(sp)
   4ffe0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   4ffe4:	000d883a 	mov	r6,zero
   4ffe8:	000b883a 	mov	r5,zero
   4ffec:	01000174 	movhi	r4,5
   4fff0:	210ebb04 	addi	r4,r4,15084
   4fff4:	00501980 	call	50198 <altera_avalon_jtag_uart_init>
   4fff8:	01000174 	movhi	r4,5
   4fffc:	210eb104 	addi	r4,r4,15044
   50000:	004ff680 	call	4ff68 <alt_dev_reg>
    ALTERA_AVALON_LCD_16207_INIT ( LCD_DISPLAY, lcd_display);
   50004:	01000174 	movhi	r4,5
   50008:	2112d304 	addi	r4,r4,19276
   5000c:	00517e40 	call	517e4 <altera_avalon_lcd_16207_init>
   50010:	01000174 	movhi	r4,5
   50014:	2112c904 	addi	r4,r4,19236
   50018:	004ff680 	call	4ff68 <alt_dev_reg>
}
   5001c:	0001883a 	nop
   50020:	e037883a 	mov	sp,fp
   50024:	dfc00117 	ldw	ra,4(sp)
   50028:	df000017 	ldw	fp,0(sp)
   5002c:	dec00204 	addi	sp,sp,8
   50030:	f800283a 	ret

00050034 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   50034:	defffa04 	addi	sp,sp,-24
   50038:	dfc00515 	stw	ra,20(sp)
   5003c:	df000415 	stw	fp,16(sp)
   50040:	df000404 	addi	fp,sp,16
   50044:	e13ffd15 	stw	r4,-12(fp)
   50048:	e17ffe15 	stw	r5,-8(fp)
   5004c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   50050:	e0bffd17 	ldw	r2,-12(fp)
   50054:	10800017 	ldw	r2,0(r2)
   50058:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   5005c:	e0bffc17 	ldw	r2,-16(fp)
   50060:	10c00a04 	addi	r3,r2,40
   50064:	e0bffd17 	ldw	r2,-12(fp)
   50068:	10800217 	ldw	r2,8(r2)
   5006c:	100f883a 	mov	r7,r2
   50070:	e1bfff17 	ldw	r6,-4(fp)
   50074:	e17ffe17 	ldw	r5,-8(fp)
   50078:	1809883a 	mov	r4,r3
   5007c:	005065c0 	call	5065c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   50080:	e037883a 	mov	sp,fp
   50084:	dfc00117 	ldw	ra,4(sp)
   50088:	df000017 	ldw	fp,0(sp)
   5008c:	dec00204 	addi	sp,sp,8
   50090:	f800283a 	ret

00050094 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   50094:	defffa04 	addi	sp,sp,-24
   50098:	dfc00515 	stw	ra,20(sp)
   5009c:	df000415 	stw	fp,16(sp)
   500a0:	df000404 	addi	fp,sp,16
   500a4:	e13ffd15 	stw	r4,-12(fp)
   500a8:	e17ffe15 	stw	r5,-8(fp)
   500ac:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   500b0:	e0bffd17 	ldw	r2,-12(fp)
   500b4:	10800017 	ldw	r2,0(r2)
   500b8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   500bc:	e0bffc17 	ldw	r2,-16(fp)
   500c0:	10c00a04 	addi	r3,r2,40
   500c4:	e0bffd17 	ldw	r2,-12(fp)
   500c8:	10800217 	ldw	r2,8(r2)
   500cc:	100f883a 	mov	r7,r2
   500d0:	e1bfff17 	ldw	r6,-4(fp)
   500d4:	e17ffe17 	ldw	r5,-8(fp)
   500d8:	1809883a 	mov	r4,r3
   500dc:	00508780 	call	50878 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   500e0:	e037883a 	mov	sp,fp
   500e4:	dfc00117 	ldw	ra,4(sp)
   500e8:	df000017 	ldw	fp,0(sp)
   500ec:	dec00204 	addi	sp,sp,8
   500f0:	f800283a 	ret

000500f4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   500f4:	defffc04 	addi	sp,sp,-16
   500f8:	dfc00315 	stw	ra,12(sp)
   500fc:	df000215 	stw	fp,8(sp)
   50100:	df000204 	addi	fp,sp,8
   50104:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   50108:	e0bfff17 	ldw	r2,-4(fp)
   5010c:	10800017 	ldw	r2,0(r2)
   50110:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   50114:	e0bffe17 	ldw	r2,-8(fp)
   50118:	10c00a04 	addi	r3,r2,40
   5011c:	e0bfff17 	ldw	r2,-4(fp)
   50120:	10800217 	ldw	r2,8(r2)
   50124:	100b883a 	mov	r5,r2
   50128:	1809883a 	mov	r4,r3
   5012c:	00505040 	call	50504 <altera_avalon_jtag_uart_close>
}
   50130:	e037883a 	mov	sp,fp
   50134:	dfc00117 	ldw	ra,4(sp)
   50138:	df000017 	ldw	fp,0(sp)
   5013c:	dec00204 	addi	sp,sp,8
   50140:	f800283a 	ret

00050144 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   50144:	defffa04 	addi	sp,sp,-24
   50148:	dfc00515 	stw	ra,20(sp)
   5014c:	df000415 	stw	fp,16(sp)
   50150:	df000404 	addi	fp,sp,16
   50154:	e13ffd15 	stw	r4,-12(fp)
   50158:	e17ffe15 	stw	r5,-8(fp)
   5015c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   50160:	e0bffd17 	ldw	r2,-12(fp)
   50164:	10800017 	ldw	r2,0(r2)
   50168:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   5016c:	e0bffc17 	ldw	r2,-16(fp)
   50170:	10800a04 	addi	r2,r2,40
   50174:	e1bfff17 	ldw	r6,-4(fp)
   50178:	e17ffe17 	ldw	r5,-8(fp)
   5017c:	1009883a 	mov	r4,r2
   50180:	005056c0 	call	5056c <altera_avalon_jtag_uart_ioctl>
}
   50184:	e037883a 	mov	sp,fp
   50188:	dfc00117 	ldw	ra,4(sp)
   5018c:	df000017 	ldw	fp,0(sp)
   50190:	dec00204 	addi	sp,sp,8
   50194:	f800283a 	ret

00050198 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   50198:	defffa04 	addi	sp,sp,-24
   5019c:	dfc00515 	stw	ra,20(sp)
   501a0:	df000415 	stw	fp,16(sp)
   501a4:	df000404 	addi	fp,sp,16
   501a8:	e13ffd15 	stw	r4,-12(fp)
   501ac:	e17ffe15 	stw	r5,-8(fp)
   501b0:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   501b4:	e0bffd17 	ldw	r2,-12(fp)
   501b8:	00c00044 	movi	r3,1
   501bc:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   501c0:	e0bffd17 	ldw	r2,-12(fp)
   501c4:	10800017 	ldw	r2,0(r2)
   501c8:	10800104 	addi	r2,r2,4
   501cc:	1007883a 	mov	r3,r2
   501d0:	e0bffd17 	ldw	r2,-12(fp)
   501d4:	10800817 	ldw	r2,32(r2)
   501d8:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   501dc:	e0bffe17 	ldw	r2,-8(fp)
   501e0:	e0ffff17 	ldw	r3,-4(fp)
   501e4:	d8000015 	stw	zero,0(sp)
   501e8:	e1fffd17 	ldw	r7,-12(fp)
   501ec:	01800174 	movhi	r6,5
   501f0:	31809604 	addi	r6,r6,600
   501f4:	180b883a 	mov	r5,r3
   501f8:	1009883a 	mov	r4,r2
   501fc:	004f1800 	call	4f180 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   50200:	e0bffd17 	ldw	r2,-12(fp)
   50204:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   50208:	e0bffd17 	ldw	r2,-12(fp)
   5020c:	10800204 	addi	r2,r2,8
   50210:	d0e7d617 	ldw	r3,-24744(gp)
   50214:	e1fffd17 	ldw	r7,-12(fp)
   50218:	01800174 	movhi	r6,5
   5021c:	31811904 	addi	r6,r6,1124
   50220:	180b883a 	mov	r5,r3
   50224:	1009883a 	mov	r4,r2
   50228:	00519780 	call	51978 <alt_alarm_start>
   5022c:	1000040e 	bge	r2,zero,50240 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   50230:	e0fffd17 	ldw	r3,-12(fp)
   50234:	00a00034 	movhi	r2,32768
   50238:	10bfffc4 	addi	r2,r2,-1
   5023c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   50240:	0001883a 	nop
   50244:	e037883a 	mov	sp,fp
   50248:	dfc00117 	ldw	ra,4(sp)
   5024c:	df000017 	ldw	fp,0(sp)
   50250:	dec00204 	addi	sp,sp,8
   50254:	f800283a 	ret

00050258 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   50258:	defff804 	addi	sp,sp,-32
   5025c:	df000715 	stw	fp,28(sp)
   50260:	df000704 	addi	fp,sp,28
   50264:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   50268:	e0bfff17 	ldw	r2,-4(fp)
   5026c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   50270:	e0bffb17 	ldw	r2,-20(fp)
   50274:	10800017 	ldw	r2,0(r2)
   50278:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   5027c:	e0bffc17 	ldw	r2,-16(fp)
   50280:	10800104 	addi	r2,r2,4
   50284:	10800037 	ldwio	r2,0(r2)
   50288:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   5028c:	e0bffd17 	ldw	r2,-12(fp)
   50290:	1080c00c 	andi	r2,r2,768
   50294:	10006d26 	beq	r2,zero,5044c <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   50298:	e0bffd17 	ldw	r2,-12(fp)
   5029c:	1080400c 	andi	r2,r2,256
   502a0:	10003526 	beq	r2,zero,50378 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   502a4:	00800074 	movhi	r2,1
   502a8:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   502ac:	e0bffb17 	ldw	r2,-20(fp)
   502b0:	10800a17 	ldw	r2,40(r2)
   502b4:	10800044 	addi	r2,r2,1
   502b8:	1081ffcc 	andi	r2,r2,2047
   502bc:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   502c0:	e0bffb17 	ldw	r2,-20(fp)
   502c4:	10c00b17 	ldw	r3,44(r2)
   502c8:	e0bffe17 	ldw	r2,-8(fp)
   502cc:	18801526 	beq	r3,r2,50324 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   502d0:	e0bffc17 	ldw	r2,-16(fp)
   502d4:	10800037 	ldwio	r2,0(r2)
   502d8:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   502dc:	e0bff917 	ldw	r2,-28(fp)
   502e0:	10a0000c 	andi	r2,r2,32768
   502e4:	10001126 	beq	r2,zero,5032c <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   502e8:	e0bffb17 	ldw	r2,-20(fp)
   502ec:	10800a17 	ldw	r2,40(r2)
   502f0:	e0fff917 	ldw	r3,-28(fp)
   502f4:	1809883a 	mov	r4,r3
   502f8:	e0fffb17 	ldw	r3,-20(fp)
   502fc:	1885883a 	add	r2,r3,r2
   50300:	10800e04 	addi	r2,r2,56
   50304:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   50308:	e0bffb17 	ldw	r2,-20(fp)
   5030c:	10800a17 	ldw	r2,40(r2)
   50310:	10800044 	addi	r2,r2,1
   50314:	10c1ffcc 	andi	r3,r2,2047
   50318:	e0bffb17 	ldw	r2,-20(fp)
   5031c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   50320:	003fe206 	br	502ac <__alt_data_end+0xfffde2ac>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   50324:	0001883a 	nop
   50328:	00000106 	br	50330 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   5032c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   50330:	e0bff917 	ldw	r2,-28(fp)
   50334:	10bfffec 	andhi	r2,r2,65535
   50338:	10000f26 	beq	r2,zero,50378 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   5033c:	e0bffb17 	ldw	r2,-20(fp)
   50340:	10c00817 	ldw	r3,32(r2)
   50344:	00bfff84 	movi	r2,-2
   50348:	1886703a 	and	r3,r3,r2
   5034c:	e0bffb17 	ldw	r2,-20(fp)
   50350:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   50354:	e0bffc17 	ldw	r2,-16(fp)
   50358:	10800104 	addi	r2,r2,4
   5035c:	1007883a 	mov	r3,r2
   50360:	e0bffb17 	ldw	r2,-20(fp)
   50364:	10800817 	ldw	r2,32(r2)
   50368:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   5036c:	e0bffc17 	ldw	r2,-16(fp)
   50370:	10800104 	addi	r2,r2,4
   50374:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   50378:	e0bffd17 	ldw	r2,-12(fp)
   5037c:	1080800c 	andi	r2,r2,512
   50380:	103fbe26 	beq	r2,zero,5027c <__alt_data_end+0xfffde27c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   50384:	e0bffd17 	ldw	r2,-12(fp)
   50388:	1004d43a 	srli	r2,r2,16
   5038c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   50390:	00001406 	br	503e4 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   50394:	e0bffc17 	ldw	r2,-16(fp)
   50398:	e0fffb17 	ldw	r3,-20(fp)
   5039c:	18c00d17 	ldw	r3,52(r3)
   503a0:	e13ffb17 	ldw	r4,-20(fp)
   503a4:	20c7883a 	add	r3,r4,r3
   503a8:	18c20e04 	addi	r3,r3,2104
   503ac:	18c00003 	ldbu	r3,0(r3)
   503b0:	18c03fcc 	andi	r3,r3,255
   503b4:	18c0201c 	xori	r3,r3,128
   503b8:	18ffe004 	addi	r3,r3,-128
   503bc:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   503c0:	e0bffb17 	ldw	r2,-20(fp)
   503c4:	10800d17 	ldw	r2,52(r2)
   503c8:	10800044 	addi	r2,r2,1
   503cc:	10c1ffcc 	andi	r3,r2,2047
   503d0:	e0bffb17 	ldw	r2,-20(fp)
   503d4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   503d8:	e0bffa17 	ldw	r2,-24(fp)
   503dc:	10bfffc4 	addi	r2,r2,-1
   503e0:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   503e4:	e0bffa17 	ldw	r2,-24(fp)
   503e8:	10000526 	beq	r2,zero,50400 <altera_avalon_jtag_uart_irq+0x1a8>
   503ec:	e0bffb17 	ldw	r2,-20(fp)
   503f0:	10c00d17 	ldw	r3,52(r2)
   503f4:	e0bffb17 	ldw	r2,-20(fp)
   503f8:	10800c17 	ldw	r2,48(r2)
   503fc:	18bfe51e 	bne	r3,r2,50394 <__alt_data_end+0xfffde394>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   50400:	e0bffa17 	ldw	r2,-24(fp)
   50404:	103f9d26 	beq	r2,zero,5027c <__alt_data_end+0xfffde27c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   50408:	e0bffb17 	ldw	r2,-20(fp)
   5040c:	10c00817 	ldw	r3,32(r2)
   50410:	00bfff44 	movi	r2,-3
   50414:	1886703a 	and	r3,r3,r2
   50418:	e0bffb17 	ldw	r2,-20(fp)
   5041c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   50420:	e0bffb17 	ldw	r2,-20(fp)
   50424:	10800017 	ldw	r2,0(r2)
   50428:	10800104 	addi	r2,r2,4
   5042c:	1007883a 	mov	r3,r2
   50430:	e0bffb17 	ldw	r2,-20(fp)
   50434:	10800817 	ldw	r2,32(r2)
   50438:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   5043c:	e0bffc17 	ldw	r2,-16(fp)
   50440:	10800104 	addi	r2,r2,4
   50444:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   50448:	003f8c06 	br	5027c <__alt_data_end+0xfffde27c>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   5044c:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   50450:	0001883a 	nop
   50454:	e037883a 	mov	sp,fp
   50458:	df000017 	ldw	fp,0(sp)
   5045c:	dec00104 	addi	sp,sp,4
   50460:	f800283a 	ret

00050464 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   50464:	defff804 	addi	sp,sp,-32
   50468:	df000715 	stw	fp,28(sp)
   5046c:	df000704 	addi	fp,sp,28
   50470:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   50474:	e0bffb17 	ldw	r2,-20(fp)
   50478:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   5047c:	e0bff917 	ldw	r2,-28(fp)
   50480:	10800017 	ldw	r2,0(r2)
   50484:	10800104 	addi	r2,r2,4
   50488:	10800037 	ldwio	r2,0(r2)
   5048c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   50490:	e0bffa17 	ldw	r2,-24(fp)
   50494:	1081000c 	andi	r2,r2,1024
   50498:	10000b26 	beq	r2,zero,504c8 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   5049c:	e0bff917 	ldw	r2,-28(fp)
   504a0:	10800017 	ldw	r2,0(r2)
   504a4:	10800104 	addi	r2,r2,4
   504a8:	1007883a 	mov	r3,r2
   504ac:	e0bff917 	ldw	r2,-28(fp)
   504b0:	10800817 	ldw	r2,32(r2)
   504b4:	10810014 	ori	r2,r2,1024
   504b8:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   504bc:	e0bff917 	ldw	r2,-28(fp)
   504c0:	10000915 	stw	zero,36(r2)
   504c4:	00000a06 	br	504f0 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   504c8:	e0bff917 	ldw	r2,-28(fp)
   504cc:	10c00917 	ldw	r3,36(r2)
   504d0:	00a00034 	movhi	r2,32768
   504d4:	10bfff04 	addi	r2,r2,-4
   504d8:	10c00536 	bltu	r2,r3,504f0 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   504dc:	e0bff917 	ldw	r2,-28(fp)
   504e0:	10800917 	ldw	r2,36(r2)
   504e4:	10c00044 	addi	r3,r2,1
   504e8:	e0bff917 	ldw	r2,-28(fp)
   504ec:	10c00915 	stw	r3,36(r2)
   504f0:	d0a7d617 	ldw	r2,-24744(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   504f4:	e037883a 	mov	sp,fp
   504f8:	df000017 	ldw	fp,0(sp)
   504fc:	dec00104 	addi	sp,sp,4
   50500:	f800283a 	ret

00050504 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   50504:	defffd04 	addi	sp,sp,-12
   50508:	df000215 	stw	fp,8(sp)
   5050c:	df000204 	addi	fp,sp,8
   50510:	e13ffe15 	stw	r4,-8(fp)
   50514:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   50518:	00000506 	br	50530 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   5051c:	e0bfff17 	ldw	r2,-4(fp)
   50520:	1090000c 	andi	r2,r2,16384
   50524:	10000226 	beq	r2,zero,50530 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   50528:	00bffd44 	movi	r2,-11
   5052c:	00000b06 	br	5055c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   50530:	e0bffe17 	ldw	r2,-8(fp)
   50534:	10c00d17 	ldw	r3,52(r2)
   50538:	e0bffe17 	ldw	r2,-8(fp)
   5053c:	10800c17 	ldw	r2,48(r2)
   50540:	18800526 	beq	r3,r2,50558 <altera_avalon_jtag_uart_close+0x54>
   50544:	e0bffe17 	ldw	r2,-8(fp)
   50548:	10c00917 	ldw	r3,36(r2)
   5054c:	e0bffe17 	ldw	r2,-8(fp)
   50550:	10800117 	ldw	r2,4(r2)
   50554:	18bff136 	bltu	r3,r2,5051c <__alt_data_end+0xfffde51c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   50558:	0005883a 	mov	r2,zero
}
   5055c:	e037883a 	mov	sp,fp
   50560:	df000017 	ldw	fp,0(sp)
   50564:	dec00104 	addi	sp,sp,4
   50568:	f800283a 	ret

0005056c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   5056c:	defffa04 	addi	sp,sp,-24
   50570:	df000515 	stw	fp,20(sp)
   50574:	df000504 	addi	fp,sp,20
   50578:	e13ffd15 	stw	r4,-12(fp)
   5057c:	e17ffe15 	stw	r5,-8(fp)
   50580:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   50584:	00bff9c4 	movi	r2,-25
   50588:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   5058c:	e0bffe17 	ldw	r2,-8(fp)
   50590:	10da8060 	cmpeqi	r3,r2,27137
   50594:	1800031e 	bne	r3,zero,505a4 <altera_avalon_jtag_uart_ioctl+0x38>
   50598:	109a80a0 	cmpeqi	r2,r2,27138
   5059c:	1000181e 	bne	r2,zero,50600 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   505a0:	00002906 	br	50648 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   505a4:	e0bffd17 	ldw	r2,-12(fp)
   505a8:	10c00117 	ldw	r3,4(r2)
   505ac:	00a00034 	movhi	r2,32768
   505b0:	10bfffc4 	addi	r2,r2,-1
   505b4:	18802126 	beq	r3,r2,5063c <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   505b8:	e0bfff17 	ldw	r2,-4(fp)
   505bc:	10800017 	ldw	r2,0(r2)
   505c0:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   505c4:	e0bffc17 	ldw	r2,-16(fp)
   505c8:	10800090 	cmplti	r2,r2,2
   505cc:	1000061e 	bne	r2,zero,505e8 <altera_avalon_jtag_uart_ioctl+0x7c>
   505d0:	e0fffc17 	ldw	r3,-16(fp)
   505d4:	00a00034 	movhi	r2,32768
   505d8:	10bfffc4 	addi	r2,r2,-1
   505dc:	18800226 	beq	r3,r2,505e8 <altera_avalon_jtag_uart_ioctl+0x7c>
   505e0:	e0bffc17 	ldw	r2,-16(fp)
   505e4:	00000206 	br	505f0 <altera_avalon_jtag_uart_ioctl+0x84>
   505e8:	00a00034 	movhi	r2,32768
   505ec:	10bfff84 	addi	r2,r2,-2
   505f0:	e0fffd17 	ldw	r3,-12(fp)
   505f4:	18800115 	stw	r2,4(r3)
      rc = 0;
   505f8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   505fc:	00000f06 	br	5063c <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   50600:	e0bffd17 	ldw	r2,-12(fp)
   50604:	10c00117 	ldw	r3,4(r2)
   50608:	00a00034 	movhi	r2,32768
   5060c:	10bfffc4 	addi	r2,r2,-1
   50610:	18800c26 	beq	r3,r2,50644 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   50614:	e0bffd17 	ldw	r2,-12(fp)
   50618:	10c00917 	ldw	r3,36(r2)
   5061c:	e0bffd17 	ldw	r2,-12(fp)
   50620:	10800117 	ldw	r2,4(r2)
   50624:	1885803a 	cmpltu	r2,r3,r2
   50628:	10c03fcc 	andi	r3,r2,255
   5062c:	e0bfff17 	ldw	r2,-4(fp)
   50630:	10c00015 	stw	r3,0(r2)
      rc = 0;
   50634:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   50638:	00000206 	br	50644 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   5063c:	0001883a 	nop
   50640:	00000106 	br	50648 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   50644:	0001883a 	nop

  default:
    break;
  }

  return rc;
   50648:	e0bffb17 	ldw	r2,-20(fp)
}
   5064c:	e037883a 	mov	sp,fp
   50650:	df000017 	ldw	fp,0(sp)
   50654:	dec00104 	addi	sp,sp,4
   50658:	f800283a 	ret

0005065c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   5065c:	defff304 	addi	sp,sp,-52
   50660:	dfc00c15 	stw	ra,48(sp)
   50664:	df000b15 	stw	fp,44(sp)
   50668:	df000b04 	addi	fp,sp,44
   5066c:	e13ffc15 	stw	r4,-16(fp)
   50670:	e17ffd15 	stw	r5,-12(fp)
   50674:	e1bffe15 	stw	r6,-8(fp)
   50678:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   5067c:	e0bffd17 	ldw	r2,-12(fp)
   50680:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   50684:	00004706 	br	507a4 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   50688:	e0bffc17 	ldw	r2,-16(fp)
   5068c:	10800a17 	ldw	r2,40(r2)
   50690:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   50694:	e0bffc17 	ldw	r2,-16(fp)
   50698:	10800b17 	ldw	r2,44(r2)
   5069c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   506a0:	e0fff717 	ldw	r3,-36(fp)
   506a4:	e0bff817 	ldw	r2,-32(fp)
   506a8:	18800536 	bltu	r3,r2,506c0 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   506ac:	e0fff717 	ldw	r3,-36(fp)
   506b0:	e0bff817 	ldw	r2,-32(fp)
   506b4:	1885c83a 	sub	r2,r3,r2
   506b8:	e0bff615 	stw	r2,-40(fp)
   506bc:	00000406 	br	506d0 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   506c0:	00c20004 	movi	r3,2048
   506c4:	e0bff817 	ldw	r2,-32(fp)
   506c8:	1885c83a 	sub	r2,r3,r2
   506cc:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   506d0:	e0bff617 	ldw	r2,-40(fp)
   506d4:	10001e26 	beq	r2,zero,50750 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   506d8:	e0fffe17 	ldw	r3,-8(fp)
   506dc:	e0bff617 	ldw	r2,-40(fp)
   506e0:	1880022e 	bgeu	r3,r2,506ec <altera_avalon_jtag_uart_read+0x90>
        n = space;
   506e4:	e0bffe17 	ldw	r2,-8(fp)
   506e8:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   506ec:	e0bffc17 	ldw	r2,-16(fp)
   506f0:	10c00e04 	addi	r3,r2,56
   506f4:	e0bff817 	ldw	r2,-32(fp)
   506f8:	1885883a 	add	r2,r3,r2
   506fc:	e1bff617 	ldw	r6,-40(fp)
   50700:	100b883a 	mov	r5,r2
   50704:	e13ff517 	ldw	r4,-44(fp)
   50708:	00484e40 	call	484e4 <memcpy>
      ptr   += n;
   5070c:	e0fff517 	ldw	r3,-44(fp)
   50710:	e0bff617 	ldw	r2,-40(fp)
   50714:	1885883a 	add	r2,r3,r2
   50718:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   5071c:	e0fffe17 	ldw	r3,-8(fp)
   50720:	e0bff617 	ldw	r2,-40(fp)
   50724:	1885c83a 	sub	r2,r3,r2
   50728:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   5072c:	e0fff817 	ldw	r3,-32(fp)
   50730:	e0bff617 	ldw	r2,-40(fp)
   50734:	1885883a 	add	r2,r3,r2
   50738:	10c1ffcc 	andi	r3,r2,2047
   5073c:	e0bffc17 	ldw	r2,-16(fp)
   50740:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   50744:	e0bffe17 	ldw	r2,-8(fp)
   50748:	00bfcf16 	blt	zero,r2,50688 <__alt_data_end+0xfffde688>
   5074c:	00000106 	br	50754 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   50750:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   50754:	e0fff517 	ldw	r3,-44(fp)
   50758:	e0bffd17 	ldw	r2,-12(fp)
   5075c:	1880141e 	bne	r3,r2,507b0 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   50760:	e0bfff17 	ldw	r2,-4(fp)
   50764:	1090000c 	andi	r2,r2,16384
   50768:	1000131e 	bne	r2,zero,507b8 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   5076c:	0001883a 	nop
   50770:	e0bffc17 	ldw	r2,-16(fp)
   50774:	10c00a17 	ldw	r3,40(r2)
   50778:	e0bff717 	ldw	r2,-36(fp)
   5077c:	1880051e 	bne	r3,r2,50794 <altera_avalon_jtag_uart_read+0x138>
   50780:	e0bffc17 	ldw	r2,-16(fp)
   50784:	10c00917 	ldw	r3,36(r2)
   50788:	e0bffc17 	ldw	r2,-16(fp)
   5078c:	10800117 	ldw	r2,4(r2)
   50790:	18bff736 	bltu	r3,r2,50770 <__alt_data_end+0xfffde770>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   50794:	e0bffc17 	ldw	r2,-16(fp)
   50798:	10c00a17 	ldw	r3,40(r2)
   5079c:	e0bff717 	ldw	r2,-36(fp)
   507a0:	18800726 	beq	r3,r2,507c0 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   507a4:	e0bffe17 	ldw	r2,-8(fp)
   507a8:	00bfb716 	blt	zero,r2,50688 <__alt_data_end+0xfffde688>
   507ac:	00000506 	br	507c4 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   507b0:	0001883a 	nop
   507b4:	00000306 	br	507c4 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   507b8:	0001883a 	nop
   507bc:	00000106 	br	507c4 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   507c0:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   507c4:	e0fff517 	ldw	r3,-44(fp)
   507c8:	e0bffd17 	ldw	r2,-12(fp)
   507cc:	18801826 	beq	r3,r2,50830 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   507d0:	0005303a 	rdctl	r2,status
   507d4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   507d8:	e0fffb17 	ldw	r3,-20(fp)
   507dc:	00bfff84 	movi	r2,-2
   507e0:	1884703a 	and	r2,r3,r2
   507e4:	1001703a 	wrctl	status,r2
  
  return context;
   507e8:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   507ec:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   507f0:	e0bffc17 	ldw	r2,-16(fp)
   507f4:	10800817 	ldw	r2,32(r2)
   507f8:	10c00054 	ori	r3,r2,1
   507fc:	e0bffc17 	ldw	r2,-16(fp)
   50800:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   50804:	e0bffc17 	ldw	r2,-16(fp)
   50808:	10800017 	ldw	r2,0(r2)
   5080c:	10800104 	addi	r2,r2,4
   50810:	1007883a 	mov	r3,r2
   50814:	e0bffc17 	ldw	r2,-16(fp)
   50818:	10800817 	ldw	r2,32(r2)
   5081c:	18800035 	stwio	r2,0(r3)
   50820:	e0bffa17 	ldw	r2,-24(fp)
   50824:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   50828:	e0bff917 	ldw	r2,-28(fp)
   5082c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   50830:	e0fff517 	ldw	r3,-44(fp)
   50834:	e0bffd17 	ldw	r2,-12(fp)
   50838:	18800426 	beq	r3,r2,5084c <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   5083c:	e0fff517 	ldw	r3,-44(fp)
   50840:	e0bffd17 	ldw	r2,-12(fp)
   50844:	1885c83a 	sub	r2,r3,r2
   50848:	00000606 	br	50864 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   5084c:	e0bfff17 	ldw	r2,-4(fp)
   50850:	1090000c 	andi	r2,r2,16384
   50854:	10000226 	beq	r2,zero,50860 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   50858:	00bffd44 	movi	r2,-11
   5085c:	00000106 	br	50864 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   50860:	00bffec4 	movi	r2,-5
}
   50864:	e037883a 	mov	sp,fp
   50868:	dfc00117 	ldw	ra,4(sp)
   5086c:	df000017 	ldw	fp,0(sp)
   50870:	dec00204 	addi	sp,sp,8
   50874:	f800283a 	ret

00050878 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   50878:	defff304 	addi	sp,sp,-52
   5087c:	dfc00c15 	stw	ra,48(sp)
   50880:	df000b15 	stw	fp,44(sp)
   50884:	df000b04 	addi	fp,sp,44
   50888:	e13ffc15 	stw	r4,-16(fp)
   5088c:	e17ffd15 	stw	r5,-12(fp)
   50890:	e1bffe15 	stw	r6,-8(fp)
   50894:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   50898:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   5089c:	e0bffd17 	ldw	r2,-12(fp)
   508a0:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   508a4:	00003706 	br	50984 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   508a8:	e0bffc17 	ldw	r2,-16(fp)
   508ac:	10800c17 	ldw	r2,48(r2)
   508b0:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   508b4:	e0bffc17 	ldw	r2,-16(fp)
   508b8:	10800d17 	ldw	r2,52(r2)
   508bc:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   508c0:	e0fff917 	ldw	r3,-28(fp)
   508c4:	e0bff517 	ldw	r2,-44(fp)
   508c8:	1880062e 	bgeu	r3,r2,508e4 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   508cc:	e0fff517 	ldw	r3,-44(fp)
   508d0:	e0bff917 	ldw	r2,-28(fp)
   508d4:	1885c83a 	sub	r2,r3,r2
   508d8:	10bfffc4 	addi	r2,r2,-1
   508dc:	e0bff615 	stw	r2,-40(fp)
   508e0:	00000b06 	br	50910 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   508e4:	e0bff517 	ldw	r2,-44(fp)
   508e8:	10000526 	beq	r2,zero,50900 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   508ec:	00c20004 	movi	r3,2048
   508f0:	e0bff917 	ldw	r2,-28(fp)
   508f4:	1885c83a 	sub	r2,r3,r2
   508f8:	e0bff615 	stw	r2,-40(fp)
   508fc:	00000406 	br	50910 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   50900:	00c1ffc4 	movi	r3,2047
   50904:	e0bff917 	ldw	r2,-28(fp)
   50908:	1885c83a 	sub	r2,r3,r2
   5090c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   50910:	e0bff617 	ldw	r2,-40(fp)
   50914:	10001e26 	beq	r2,zero,50990 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   50918:	e0fffe17 	ldw	r3,-8(fp)
   5091c:	e0bff617 	ldw	r2,-40(fp)
   50920:	1880022e 	bgeu	r3,r2,5092c <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   50924:	e0bffe17 	ldw	r2,-8(fp)
   50928:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   5092c:	e0bffc17 	ldw	r2,-16(fp)
   50930:	10c20e04 	addi	r3,r2,2104
   50934:	e0bff917 	ldw	r2,-28(fp)
   50938:	1885883a 	add	r2,r3,r2
   5093c:	e1bff617 	ldw	r6,-40(fp)
   50940:	e17ffd17 	ldw	r5,-12(fp)
   50944:	1009883a 	mov	r4,r2
   50948:	00484e40 	call	484e4 <memcpy>
      ptr   += n;
   5094c:	e0fffd17 	ldw	r3,-12(fp)
   50950:	e0bff617 	ldw	r2,-40(fp)
   50954:	1885883a 	add	r2,r3,r2
   50958:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   5095c:	e0fffe17 	ldw	r3,-8(fp)
   50960:	e0bff617 	ldw	r2,-40(fp)
   50964:	1885c83a 	sub	r2,r3,r2
   50968:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   5096c:	e0fff917 	ldw	r3,-28(fp)
   50970:	e0bff617 	ldw	r2,-40(fp)
   50974:	1885883a 	add	r2,r3,r2
   50978:	10c1ffcc 	andi	r3,r2,2047
   5097c:	e0bffc17 	ldw	r2,-16(fp)
   50980:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   50984:	e0bffe17 	ldw	r2,-8(fp)
   50988:	00bfc716 	blt	zero,r2,508a8 <__alt_data_end+0xfffde8a8>
   5098c:	00000106 	br	50994 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   50990:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   50994:	0005303a 	rdctl	r2,status
   50998:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   5099c:	e0fffb17 	ldw	r3,-20(fp)
   509a0:	00bfff84 	movi	r2,-2
   509a4:	1884703a 	and	r2,r3,r2
   509a8:	1001703a 	wrctl	status,r2
  
  return context;
   509ac:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   509b0:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   509b4:	e0bffc17 	ldw	r2,-16(fp)
   509b8:	10800817 	ldw	r2,32(r2)
   509bc:	10c00094 	ori	r3,r2,2
   509c0:	e0bffc17 	ldw	r2,-16(fp)
   509c4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   509c8:	e0bffc17 	ldw	r2,-16(fp)
   509cc:	10800017 	ldw	r2,0(r2)
   509d0:	10800104 	addi	r2,r2,4
   509d4:	1007883a 	mov	r3,r2
   509d8:	e0bffc17 	ldw	r2,-16(fp)
   509dc:	10800817 	ldw	r2,32(r2)
   509e0:	18800035 	stwio	r2,0(r3)
   509e4:	e0bffa17 	ldw	r2,-24(fp)
   509e8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   509ec:	e0bff817 	ldw	r2,-32(fp)
   509f0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   509f4:	e0bffe17 	ldw	r2,-8(fp)
   509f8:	0080100e 	bge	zero,r2,50a3c <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   509fc:	e0bfff17 	ldw	r2,-4(fp)
   50a00:	1090000c 	andi	r2,r2,16384
   50a04:	1000101e 	bne	r2,zero,50a48 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   50a08:	0001883a 	nop
   50a0c:	e0bffc17 	ldw	r2,-16(fp)
   50a10:	10c00d17 	ldw	r3,52(r2)
   50a14:	e0bff517 	ldw	r2,-44(fp)
   50a18:	1880051e 	bne	r3,r2,50a30 <altera_avalon_jtag_uart_write+0x1b8>
   50a1c:	e0bffc17 	ldw	r2,-16(fp)
   50a20:	10c00917 	ldw	r3,36(r2)
   50a24:	e0bffc17 	ldw	r2,-16(fp)
   50a28:	10800117 	ldw	r2,4(r2)
   50a2c:	18bff736 	bltu	r3,r2,50a0c <__alt_data_end+0xfffdea0c>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   50a30:	e0bffc17 	ldw	r2,-16(fp)
   50a34:	10800917 	ldw	r2,36(r2)
   50a38:	1000051e 	bne	r2,zero,50a50 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   50a3c:	e0bffe17 	ldw	r2,-8(fp)
   50a40:	00bfd016 	blt	zero,r2,50984 <__alt_data_end+0xfffde984>
   50a44:	00000306 	br	50a54 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   50a48:	0001883a 	nop
   50a4c:	00000106 	br	50a54 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   50a50:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   50a54:	e0fffd17 	ldw	r3,-12(fp)
   50a58:	e0bff717 	ldw	r2,-36(fp)
   50a5c:	18800426 	beq	r3,r2,50a70 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   50a60:	e0fffd17 	ldw	r3,-12(fp)
   50a64:	e0bff717 	ldw	r2,-36(fp)
   50a68:	1885c83a 	sub	r2,r3,r2
   50a6c:	00000606 	br	50a88 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   50a70:	e0bfff17 	ldw	r2,-4(fp)
   50a74:	1090000c 	andi	r2,r2,16384
   50a78:	10000226 	beq	r2,zero,50a84 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   50a7c:	00bffd44 	movi	r2,-11
   50a80:	00000106 	br	50a88 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   50a84:	00bffec4 	movi	r2,-5
}
   50a88:	e037883a 	mov	sp,fp
   50a8c:	dfc00117 	ldw	ra,4(sp)
   50a90:	df000017 	ldw	fp,0(sp)
   50a94:	dec00204 	addi	sp,sp,8
   50a98:	f800283a 	ret

00050a9c <lcd_write_command>:

/* --------------------------------------------------------------------- */

static void lcd_write_command(altera_avalon_lcd_16207_state* sp, 
  unsigned char command)
{
   50a9c:	defffa04 	addi	sp,sp,-24
   50aa0:	dfc00515 	stw	ra,20(sp)
   50aa4:	df000415 	stw	fp,16(sp)
   50aa8:	df000404 	addi	fp,sp,16
   50aac:	e13ffe15 	stw	r4,-8(fp)
   50ab0:	2805883a 	mov	r2,r5
   50ab4:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
   50ab8:	e0bffe17 	ldw	r2,-8(fp)
   50abc:	10800017 	ldw	r2,0(r2)
   50ac0:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
   50ac4:	008003f4 	movhi	r2,15
   50ac8:	10909004 	addi	r2,r2,16960
   50acc:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
   50ad0:	e0bffe17 	ldw	r2,-8(fp)
   50ad4:	10800803 	ldbu	r2,32(r2)
   50ad8:	10803fcc 	andi	r2,r2,255
   50adc:	1080201c 	xori	r2,r2,128
   50ae0:	10bfe004 	addi	r2,r2,-128
   50ae4:	1000151e 	bne	r2,zero,50b3c <lcd_write_command+0xa0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
   50ae8:	00000906 	br	50b10 <lcd_write_command+0x74>
    if (--i == 0)
   50aec:	e0bffc17 	ldw	r2,-16(fp)
   50af0:	10bfffc4 	addi	r2,r2,-1
   50af4:	e0bffc15 	stw	r2,-16(fp)
   50af8:	e0bffc17 	ldw	r2,-16(fp)
   50afc:	1000041e 	bne	r2,zero,50b10 <lcd_write_command+0x74>
    {
      sp->broken = 1;
   50b00:	e0bffe17 	ldw	r2,-8(fp)
   50b04:	00c00044 	movi	r3,1
   50b08:	10c00805 	stb	r3,32(r2)
      return;
   50b0c:	00000c06 	br	50b40 <lcd_write_command+0xa4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
   50b10:	e0bffd17 	ldw	r2,-12(fp)
   50b14:	10800104 	addi	r2,r2,4
   50b18:	10800037 	ldwio	r2,0(r2)
   50b1c:	1080200c 	andi	r2,r2,128
   50b20:	103ff21e 	bne	r2,zero,50aec <__alt_data_end+0xfffdeaec>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
   50b24:	01001904 	movi	r4,100
   50b28:	004fe040 	call	4fe04 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
   50b2c:	e0bffd17 	ldw	r2,-12(fp)
   50b30:	e0ffff03 	ldbu	r3,-4(fp)
   50b34:	10c00035 	stwio	r3,0(r2)
   50b38:	00000106 	br	50b40 <lcd_write_command+0xa4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
   50b3c:	0001883a 	nop
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
}
   50b40:	e037883a 	mov	sp,fp
   50b44:	dfc00117 	ldw	ra,4(sp)
   50b48:	df000017 	ldw	fp,0(sp)
   50b4c:	dec00204 	addi	sp,sp,8
   50b50:	f800283a 	ret

00050b54 <lcd_write_data>:

/* --------------------------------------------------------------------- */

static void lcd_write_data(altera_avalon_lcd_16207_state* sp, 
  unsigned char data)
{
   50b54:	defffa04 	addi	sp,sp,-24
   50b58:	dfc00515 	stw	ra,20(sp)
   50b5c:	df000415 	stw	fp,16(sp)
   50b60:	df000404 	addi	fp,sp,16
   50b64:	e13ffe15 	stw	r4,-8(fp)
   50b68:	2805883a 	mov	r2,r5
   50b6c:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
   50b70:	e0bffe17 	ldw	r2,-8(fp)
   50b74:	10800017 	ldw	r2,0(r2)
   50b78:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
   50b7c:	008003f4 	movhi	r2,15
   50b80:	10909004 	addi	r2,r2,16960
   50b84:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
   50b88:	e0bffe17 	ldw	r2,-8(fp)
   50b8c:	10800803 	ldbu	r2,32(r2)
   50b90:	10803fcc 	andi	r2,r2,255
   50b94:	1080201c 	xori	r2,r2,128
   50b98:	10bfe004 	addi	r2,r2,-128
   50b9c:	10001d1e 	bne	r2,zero,50c14 <lcd_write_data+0xc0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
   50ba0:	00000906 	br	50bc8 <lcd_write_data+0x74>
    if (--i == 0)
   50ba4:	e0bffc17 	ldw	r2,-16(fp)
   50ba8:	10bfffc4 	addi	r2,r2,-1
   50bac:	e0bffc15 	stw	r2,-16(fp)
   50bb0:	e0bffc17 	ldw	r2,-16(fp)
   50bb4:	1000041e 	bne	r2,zero,50bc8 <lcd_write_data+0x74>
    {
      sp->broken = 1;
   50bb8:	e0bffe17 	ldw	r2,-8(fp)
   50bbc:	00c00044 	movi	r3,1
   50bc0:	10c00805 	stb	r3,32(r2)
      return;
   50bc4:	00001406 	br	50c18 <lcd_write_data+0xc4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
   50bc8:	e0bffd17 	ldw	r2,-12(fp)
   50bcc:	10800104 	addi	r2,r2,4
   50bd0:	10800037 	ldwio	r2,0(r2)
   50bd4:	1080200c 	andi	r2,r2,128
   50bd8:	103ff21e 	bne	r2,zero,50ba4 <__alt_data_end+0xfffdeba4>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
   50bdc:	01001904 	movi	r4,100
   50be0:	004fe040 	call	4fe04 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);
   50be4:	e0bffd17 	ldw	r2,-12(fp)
   50be8:	10800204 	addi	r2,r2,8
   50bec:	1007883a 	mov	r3,r2
   50bf0:	e0bfff03 	ldbu	r2,-4(fp)
   50bf4:	18800035 	stwio	r2,0(r3)

  sp->address++;
   50bf8:	e0bffe17 	ldw	r2,-8(fp)
   50bfc:	108008c3 	ldbu	r2,35(r2)
   50c00:	10800044 	addi	r2,r2,1
   50c04:	1007883a 	mov	r3,r2
   50c08:	e0bffe17 	ldw	r2,-8(fp)
   50c0c:	10c008c5 	stb	r3,35(r2)
   50c10:	00000106 	br	50c18 <lcd_write_data+0xc4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
   50c14:	0001883a 	nop
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);

  sp->address++;
}
   50c18:	e037883a 	mov	sp,fp
   50c1c:	dfc00117 	ldw	ra,4(sp)
   50c20:	df000017 	ldw	fp,0(sp)
   50c24:	dec00204 	addi	sp,sp,8
   50c28:	f800283a 	ret

00050c2c <lcd_clear_screen>:

/* --------------------------------------------------------------------- */

static void lcd_clear_screen(altera_avalon_lcd_16207_state* sp)
{
   50c2c:	defffc04 	addi	sp,sp,-16
   50c30:	dfc00315 	stw	ra,12(sp)
   50c34:	df000215 	stw	fp,8(sp)
   50c38:	df000204 	addi	fp,sp,8
   50c3c:	e13fff15 	stw	r4,-4(fp)
  int y;

  lcd_write_command(sp, LCD_CMD_CLEAR);
   50c40:	01400044 	movi	r5,1
   50c44:	e13fff17 	ldw	r4,-4(fp)
   50c48:	0050a9c0 	call	50a9c <lcd_write_command>

  sp->x = 0;
   50c4c:	e0bfff17 	ldw	r2,-4(fp)
   50c50:	10000845 	stb	zero,33(r2)
  sp->y = 0;
   50c54:	e0bfff17 	ldw	r2,-4(fp)
   50c58:	10000885 	stb	zero,34(r2)
  sp->address = 0;
   50c5c:	e0bfff17 	ldw	r2,-4(fp)
   50c60:	100008c5 	stb	zero,35(r2)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   50c64:	e03ffe15 	stw	zero,-8(fp)
   50c68:	00001b06 	br	50cd8 <lcd_clear_screen+0xac>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
   50c6c:	e0bffe17 	ldw	r2,-8(fp)
   50c70:	108018e4 	muli	r2,r2,99
   50c74:	10801004 	addi	r2,r2,64
   50c78:	e0ffff17 	ldw	r3,-4(fp)
   50c7c:	1885883a 	add	r2,r3,r2
   50c80:	01801444 	movi	r6,81
   50c84:	01400804 	movi	r5,32
   50c88:	1009883a 	mov	r4,r2
   50c8c:	0042a880 	call	42a88 <memset>
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
   50c90:	e0bffe17 	ldw	r2,-8(fp)
   50c94:	108018e4 	muli	r2,r2,99
   50c98:	10800c04 	addi	r2,r2,48
   50c9c:	e0ffff17 	ldw	r3,-4(fp)
   50ca0:	1885883a 	add	r2,r3,r2
   50ca4:	01800404 	movi	r6,16
   50ca8:	01400804 	movi	r5,32
   50cac:	1009883a 	mov	r4,r2
   50cb0:	0042a880 	call	42a88 <memset>
    sp->line[y].width = 0;
   50cb4:	e0ffff17 	ldw	r3,-4(fp)
   50cb8:	e0bffe17 	ldw	r2,-8(fp)
   50cbc:	108018e4 	muli	r2,r2,99
   50cc0:	1885883a 	add	r2,r3,r2
   50cc4:	10802444 	addi	r2,r2,145
   50cc8:	10000005 	stb	zero,0(r2)

  sp->x = 0;
  sp->y = 0;
  sp->address = 0;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   50ccc:	e0bffe17 	ldw	r2,-8(fp)
   50cd0:	10800044 	addi	r2,r2,1
   50cd4:	e0bffe15 	stw	r2,-8(fp)
   50cd8:	e0bffe17 	ldw	r2,-8(fp)
   50cdc:	10800090 	cmplti	r2,r2,2
   50ce0:	103fe21e 	bne	r2,zero,50c6c <__alt_data_end+0xfffdec6c>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    sp->line[y].width = 0;
  }
}
   50ce4:	0001883a 	nop
   50ce8:	e037883a 	mov	sp,fp
   50cec:	dfc00117 	ldw	ra,4(sp)
   50cf0:	df000017 	ldw	fp,0(sp)
   50cf4:	dec00204 	addi	sp,sp,8
   50cf8:	f800283a 	ret

00050cfc <lcd_repaint_screen>:

/* --------------------------------------------------------------------- */

static void lcd_repaint_screen(altera_avalon_lcd_16207_state* sp)
{
   50cfc:	defff704 	addi	sp,sp,-36
   50d00:	dfc00815 	stw	ra,32(sp)
   50d04:	df000715 	stw	fp,28(sp)
   50d08:	df000704 	addi	fp,sp,28
   50d0c:	e13fff15 	stw	r4,-4(fp)
  /* scrollpos controls how much the lines have scrolled round.  The speed
   * each line scrolls at is controlled by its speed variable - while
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;
   50d10:	e0bfff17 	ldw	r2,-4(fp)
   50d14:	10800943 	ldbu	r2,37(r2)
   50d18:	10803fcc 	andi	r2,r2,255
   50d1c:	e0bffc15 	stw	r2,-16(fp)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   50d20:	e03ff915 	stw	zero,-28(fp)
   50d24:	00006706 	br	50ec4 <lcd_repaint_screen+0x1c8>
  {
    int width  = sp->line[y].width;
   50d28:	e0ffff17 	ldw	r3,-4(fp)
   50d2c:	e0bff917 	ldw	r2,-28(fp)
   50d30:	108018e4 	muli	r2,r2,99
   50d34:	1885883a 	add	r2,r3,r2
   50d38:	10802444 	addi	r2,r2,145
   50d3c:	10800003 	ldbu	r2,0(r2)
   50d40:	10803fcc 	andi	r2,r2,255
   50d44:	1080201c 	xori	r2,r2,128
   50d48:	10bfe004 	addi	r2,r2,-128
   50d4c:	e0bffd15 	stw	r2,-12(fp)
    int offset = (scrollpos * sp->line[y].speed) >> 8;
   50d50:	e0ffff17 	ldw	r3,-4(fp)
   50d54:	e0bff917 	ldw	r2,-28(fp)
   50d58:	108018e4 	muli	r2,r2,99
   50d5c:	1885883a 	add	r2,r3,r2
   50d60:	10802484 	addi	r2,r2,146
   50d64:	10800003 	ldbu	r2,0(r2)
   50d68:	10c03fcc 	andi	r3,r2,255
   50d6c:	e0bffc17 	ldw	r2,-16(fp)
   50d70:	1885383a 	mul	r2,r3,r2
   50d74:	1005d23a 	srai	r2,r2,8
   50d78:	e0bffb15 	stw	r2,-20(fp)
    if (offset >= width)
   50d7c:	e0fffb17 	ldw	r3,-20(fp)
   50d80:	e0bffd17 	ldw	r2,-12(fp)
   50d84:	18800116 	blt	r3,r2,50d8c <lcd_repaint_screen+0x90>
      offset = 0;
   50d88:	e03ffb15 	stw	zero,-20(fp)

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
   50d8c:	e03ffa15 	stw	zero,-24(fp)
   50d90:	00004606 	br	50eac <lcd_repaint_screen+0x1b0>
    {
      char c = sp->line[y].data[(x + offset) % width];
   50d94:	e0fffa17 	ldw	r3,-24(fp)
   50d98:	e0bffb17 	ldw	r2,-20(fp)
   50d9c:	1885883a 	add	r2,r3,r2
   50da0:	e17ffd17 	ldw	r5,-12(fp)
   50da4:	1009883a 	mov	r4,r2
   50da8:	004185c0 	call	4185c <__modsi3>
   50dac:	1009883a 	mov	r4,r2
   50db0:	e0ffff17 	ldw	r3,-4(fp)
   50db4:	e0bff917 	ldw	r2,-28(fp)
   50db8:	108018e4 	muli	r2,r2,99
   50dbc:	1885883a 	add	r2,r3,r2
   50dc0:	1105883a 	add	r2,r2,r4
   50dc4:	10801004 	addi	r2,r2,64
   50dc8:	10800003 	ldbu	r2,0(r2)
   50dcc:	e0bffe05 	stb	r2,-8(fp)

      /* Writing data takes 40us, so don't do it unless required */
      if (sp->line[y].visible[x] != c)
   50dd0:	e0ffff17 	ldw	r3,-4(fp)
   50dd4:	e0bff917 	ldw	r2,-28(fp)
   50dd8:	108018e4 	muli	r2,r2,99
   50ddc:	1887883a 	add	r3,r3,r2
   50de0:	e0bffa17 	ldw	r2,-24(fp)
   50de4:	1885883a 	add	r2,r3,r2
   50de8:	10800c04 	addi	r2,r2,48
   50dec:	10800003 	ldbu	r2,0(r2)
   50df0:	10c03fcc 	andi	r3,r2,255
   50df4:	18c0201c 	xori	r3,r3,128
   50df8:	18ffe004 	addi	r3,r3,-128
   50dfc:	e0bffe07 	ldb	r2,-8(fp)
   50e00:	18802726 	beq	r3,r2,50ea0 <lcd_repaint_screen+0x1a4>
      {
        unsigned char address = x + colstart[y];
   50e04:	e0fff917 	ldw	r3,-28(fp)
   50e08:	d0a01404 	addi	r2,gp,-32688
   50e0c:	1885883a 	add	r2,r3,r2
   50e10:	10800003 	ldbu	r2,0(r2)
   50e14:	1007883a 	mov	r3,r2
   50e18:	e0bffa17 	ldw	r2,-24(fp)
   50e1c:	1885883a 	add	r2,r3,r2
   50e20:	e0bffe45 	stb	r2,-7(fp)

        if (address != sp->address)
   50e24:	e0fffe43 	ldbu	r3,-7(fp)
   50e28:	e0bfff17 	ldw	r2,-4(fp)
   50e2c:	108008c3 	ldbu	r2,35(r2)
   50e30:	10803fcc 	andi	r2,r2,255
   50e34:	1080201c 	xori	r2,r2,128
   50e38:	10bfe004 	addi	r2,r2,-128
   50e3c:	18800a26 	beq	r3,r2,50e68 <lcd_repaint_screen+0x16c>
        {
          lcd_write_command(sp, LCD_CMD_WRITE_DATA | address);
   50e40:	e0fffe43 	ldbu	r3,-7(fp)
   50e44:	00bfe004 	movi	r2,-128
   50e48:	1884b03a 	or	r2,r3,r2
   50e4c:	10803fcc 	andi	r2,r2,255
   50e50:	100b883a 	mov	r5,r2
   50e54:	e13fff17 	ldw	r4,-4(fp)
   50e58:	0050a9c0 	call	50a9c <lcd_write_command>
          sp->address = address;
   50e5c:	e0fffe43 	ldbu	r3,-7(fp)
   50e60:	e0bfff17 	ldw	r2,-4(fp)
   50e64:	10c008c5 	stb	r3,35(r2)
        }

        lcd_write_data(sp, c);
   50e68:	e0bffe03 	ldbu	r2,-8(fp)
   50e6c:	10803fcc 	andi	r2,r2,255
   50e70:	100b883a 	mov	r5,r2
   50e74:	e13fff17 	ldw	r4,-4(fp)
   50e78:	0050b540 	call	50b54 <lcd_write_data>
        sp->line[y].visible[x] = c;
   50e7c:	e0ffff17 	ldw	r3,-4(fp)
   50e80:	e0bff917 	ldw	r2,-28(fp)
   50e84:	108018e4 	muli	r2,r2,99
   50e88:	1887883a 	add	r3,r3,r2
   50e8c:	e0bffa17 	ldw	r2,-24(fp)
   50e90:	1885883a 	add	r2,r3,r2
   50e94:	10800c04 	addi	r2,r2,48
   50e98:	e0fffe03 	ldbu	r3,-8(fp)
   50e9c:	10c00005 	stb	r3,0(r2)
    int width  = sp->line[y].width;
    int offset = (scrollpos * sp->line[y].speed) >> 8;
    if (offset >= width)
      offset = 0;

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
   50ea0:	e0bffa17 	ldw	r2,-24(fp)
   50ea4:	10800044 	addi	r2,r2,1
   50ea8:	e0bffa15 	stw	r2,-24(fp)
   50eac:	e0bffa17 	ldw	r2,-24(fp)
   50eb0:	10800410 	cmplti	r2,r2,16
   50eb4:	103fb71e 	bne	r2,zero,50d94 <__alt_data_end+0xfffded94>
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   50eb8:	e0bff917 	ldw	r2,-28(fp)
   50ebc:	10800044 	addi	r2,r2,1
   50ec0:	e0bff915 	stw	r2,-28(fp)
   50ec4:	e0bff917 	ldw	r2,-28(fp)
   50ec8:	10800090 	cmplti	r2,r2,2
   50ecc:	103f961e 	bne	r2,zero,50d28 <__alt_data_end+0xfffded28>
        lcd_write_data(sp, c);
        sp->line[y].visible[x] = c;
      }
    }
  }
}
   50ed0:	0001883a 	nop
   50ed4:	e037883a 	mov	sp,fp
   50ed8:	dfc00117 	ldw	ra,4(sp)
   50edc:	df000017 	ldw	fp,0(sp)
   50ee0:	dec00204 	addi	sp,sp,8
   50ee4:	f800283a 	ret

00050ee8 <lcd_scroll_up>:

/* --------------------------------------------------------------------- */

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
   50ee8:	defffc04 	addi	sp,sp,-16
   50eec:	dfc00315 	stw	ra,12(sp)
   50ef0:	df000215 	stw	fp,8(sp)
   50ef4:	df000204 	addi	fp,sp,8
   50ef8:	e13fff15 	stw	r4,-4(fp)
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   50efc:	e03ffe15 	stw	zero,-8(fp)
   50f00:	00001d06 	br	50f78 <lcd_scroll_up+0x90>
  {
    if (y < ALT_LCD_HEIGHT-1)
   50f04:	e0bffe17 	ldw	r2,-8(fp)
   50f08:	00800f16 	blt	zero,r2,50f48 <lcd_scroll_up+0x60>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
   50f0c:	e0bffe17 	ldw	r2,-8(fp)
   50f10:	108018e4 	muli	r2,r2,99
   50f14:	10801004 	addi	r2,r2,64
   50f18:	e0ffff17 	ldw	r3,-4(fp)
   50f1c:	1889883a 	add	r4,r3,r2
   50f20:	e0bffe17 	ldw	r2,-8(fp)
   50f24:	10800044 	addi	r2,r2,1
   50f28:	108018e4 	muli	r2,r2,99
   50f2c:	10801004 	addi	r2,r2,64
   50f30:	e0ffff17 	ldw	r3,-4(fp)
   50f34:	1885883a 	add	r2,r3,r2
   50f38:	01801404 	movi	r6,80
   50f3c:	100b883a 	mov	r5,r2
   50f40:	00484e40 	call	484e4 <memcpy>
   50f44:	00000906 	br	50f6c <lcd_scroll_up+0x84>
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
   50f48:	e0bffe17 	ldw	r2,-8(fp)
   50f4c:	108018e4 	muli	r2,r2,99
   50f50:	10801004 	addi	r2,r2,64
   50f54:	e0ffff17 	ldw	r3,-4(fp)
   50f58:	1885883a 	add	r2,r3,r2
   50f5c:	01801404 	movi	r6,80
   50f60:	01400804 	movi	r5,32
   50f64:	1009883a 	mov	r4,r2
   50f68:	0042a880 	call	42a88 <memset>

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   50f6c:	e0bffe17 	ldw	r2,-8(fp)
   50f70:	10800044 	addi	r2,r2,1
   50f74:	e0bffe15 	stw	r2,-8(fp)
   50f78:	e0bffe17 	ldw	r2,-8(fp)
   50f7c:	10800090 	cmplti	r2,r2,2
   50f80:	103fe01e 	bne	r2,zero,50f04 <__alt_data_end+0xfffdef04>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  }

  sp->y--;
   50f84:	e0bfff17 	ldw	r2,-4(fp)
   50f88:	10800883 	ldbu	r2,34(r2)
   50f8c:	10bfffc4 	addi	r2,r2,-1
   50f90:	1007883a 	mov	r3,r2
   50f94:	e0bfff17 	ldw	r2,-4(fp)
   50f98:	10c00885 	stb	r3,34(r2)
}
   50f9c:	0001883a 	nop
   50fa0:	e037883a 	mov	sp,fp
   50fa4:	dfc00117 	ldw	ra,4(sp)
   50fa8:	df000017 	ldw	fp,0(sp)
   50fac:	dec00204 	addi	sp,sp,8
   50fb0:	f800283a 	ret

00050fb4 <lcd_handle_escape>:

/* --------------------------------------------------------------------- */

static void lcd_handle_escape(altera_avalon_lcd_16207_state* sp, char c)
{
   50fb4:	defff904 	addi	sp,sp,-28
   50fb8:	dfc00615 	stw	ra,24(sp)
   50fbc:	df000515 	stw	fp,20(sp)
   50fc0:	df000504 	addi	fp,sp,20
   50fc4:	e13ffe15 	stw	r4,-8(fp)
   50fc8:	2805883a 	mov	r2,r5
   50fcc:	e0bfff05 	stb	r2,-4(fp)
  int parm1 = 0, parm2 = 0;
   50fd0:	e03ffb15 	stw	zero,-20(fp)
   50fd4:	e03ffc15 	stw	zero,-16(fp)

  if (sp->escape[0] == '[')
   50fd8:	e0bffe17 	ldw	r2,-8(fp)
   50fdc:	10800a03 	ldbu	r2,40(r2)
   50fe0:	10803fcc 	andi	r2,r2,255
   50fe4:	1080201c 	xori	r2,r2,128
   50fe8:	10bfe004 	addi	r2,r2,-128
   50fec:	108016d8 	cmpnei	r2,r2,91
   50ff0:	1000411e 	bne	r2,zero,510f8 <lcd_handle_escape+0x144>
  {
    char * ptr = sp->escape+1;
   50ff4:	e0bffe17 	ldw	r2,-8(fp)
   50ff8:	10800a04 	addi	r2,r2,40
   50ffc:	10800044 	addi	r2,r2,1
   51000:	e0bffd15 	stw	r2,-12(fp)
    while (isdigit(*ptr))
   51004:	00000c06 	br	51038 <lcd_handle_escape+0x84>
      parm1 = (parm1 * 10) + (*ptr++ - '0');
   51008:	e0bffb17 	ldw	r2,-20(fp)
   5100c:	10c002a4 	muli	r3,r2,10
   51010:	e0bffd17 	ldw	r2,-12(fp)
   51014:	11000044 	addi	r4,r2,1
   51018:	e13ffd15 	stw	r4,-12(fp)
   5101c:	10800003 	ldbu	r2,0(r2)
   51020:	10803fcc 	andi	r2,r2,255
   51024:	1080201c 	xori	r2,r2,128
   51028:	10bfe004 	addi	r2,r2,-128
   5102c:	10bff404 	addi	r2,r2,-48
   51030:	1885883a 	add	r2,r3,r2
   51034:	e0bffb15 	stw	r2,-20(fp)
  int parm1 = 0, parm2 = 0;

  if (sp->escape[0] == '[')
  {
    char * ptr = sp->escape+1;
    while (isdigit(*ptr))
   51038:	d0e01517 	ldw	r3,-32684(gp)
   5103c:	e0bffd17 	ldw	r2,-12(fp)
   51040:	10800003 	ldbu	r2,0(r2)
   51044:	10803fcc 	andi	r2,r2,255
   51048:	1080201c 	xori	r2,r2,128
   5104c:	10bfe004 	addi	r2,r2,-128
   51050:	10800044 	addi	r2,r2,1
   51054:	1885883a 	add	r2,r3,r2
   51058:	10800003 	ldbu	r2,0(r2)
   5105c:	10803fcc 	andi	r2,r2,255
   51060:	1080010c 	andi	r2,r2,4
   51064:	103fe81e 	bne	r2,zero,51008 <__alt_data_end+0xfffdf008>
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
   51068:	e0bffd17 	ldw	r2,-12(fp)
   5106c:	10800003 	ldbu	r2,0(r2)
   51070:	10803fcc 	andi	r2,r2,255
   51074:	1080201c 	xori	r2,r2,128
   51078:	10bfe004 	addi	r2,r2,-128
   5107c:	10800ed8 	cmpnei	r2,r2,59
   51080:	10001f1e 	bne	r2,zero,51100 <lcd_handle_escape+0x14c>
    {
      ptr++;
   51084:	e0bffd17 	ldw	r2,-12(fp)
   51088:	10800044 	addi	r2,r2,1
   5108c:	e0bffd15 	stw	r2,-12(fp)
      while (isdigit(*ptr))
   51090:	00000c06 	br	510c4 <lcd_handle_escape+0x110>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
   51094:	e0bffc17 	ldw	r2,-16(fp)
   51098:	10c002a4 	muli	r3,r2,10
   5109c:	e0bffd17 	ldw	r2,-12(fp)
   510a0:	11000044 	addi	r4,r2,1
   510a4:	e13ffd15 	stw	r4,-12(fp)
   510a8:	10800003 	ldbu	r2,0(r2)
   510ac:	10803fcc 	andi	r2,r2,255
   510b0:	1080201c 	xori	r2,r2,128
   510b4:	10bfe004 	addi	r2,r2,-128
   510b8:	10bff404 	addi	r2,r2,-48
   510bc:	1885883a 	add	r2,r3,r2
   510c0:	e0bffc15 	stw	r2,-16(fp)
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
    {
      ptr++;
      while (isdigit(*ptr))
   510c4:	d0e01517 	ldw	r3,-32684(gp)
   510c8:	e0bffd17 	ldw	r2,-12(fp)
   510cc:	10800003 	ldbu	r2,0(r2)
   510d0:	10803fcc 	andi	r2,r2,255
   510d4:	1080201c 	xori	r2,r2,128
   510d8:	10bfe004 	addi	r2,r2,-128
   510dc:	10800044 	addi	r2,r2,1
   510e0:	1885883a 	add	r2,r3,r2
   510e4:	10800003 	ldbu	r2,0(r2)
   510e8:	10803fcc 	andi	r2,r2,255
   510ec:	1080010c 	andi	r2,r2,4
   510f0:	103fe81e 	bne	r2,zero,51094 <__alt_data_end+0xfffdf094>
   510f4:	00000206 	br	51100 <lcd_handle_escape+0x14c>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
    }
  }
  else
    parm1 = -1;
   510f8:	00bfffc4 	movi	r2,-1
   510fc:	e0bffb15 	stw	r2,-20(fp)

  switch (c)
   51100:	e0bfff07 	ldb	r2,-4(fp)
   51104:	10c012a0 	cmpeqi	r3,r2,74
   51108:	1800291e 	bne	r3,zero,511b0 <lcd_handle_escape+0x1fc>
   5110c:	10c012c8 	cmpgei	r3,r2,75
   51110:	1800031e 	bne	r3,zero,51120 <lcd_handle_escape+0x16c>
   51114:	10801220 	cmpeqi	r2,r2,72
   51118:	1000061e 	bne	r2,zero,51134 <lcd_handle_escape+0x180>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
   5111c:	00004a06 	br	51248 <lcd_handle_escape+0x294>
    }
  }
  else
    parm1 = -1;

  switch (c)
   51120:	10c012e0 	cmpeqi	r3,r2,75
   51124:	1800281e 	bne	r3,zero,511c8 <lcd_handle_escape+0x214>
   51128:	108019a0 	cmpeqi	r2,r2,102
   5112c:	1000011e 	bne	r2,zero,51134 <lcd_handle_escape+0x180>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
   51130:	00004506 	br	51248 <lcd_handle_escape+0x294>

  switch (c)
  {
  case 'H': /* ESC '[' <y> ';' <x> 'H'  : Move cursor to location */
  case 'f': /* Same as above */
    if (parm2 > 0)
   51134:	e0bffc17 	ldw	r2,-16(fp)
   51138:	0080050e 	bge	zero,r2,51150 <lcd_handle_escape+0x19c>
      sp->x = parm2 - 1;
   5113c:	e0bffc17 	ldw	r2,-16(fp)
   51140:	10bfffc4 	addi	r2,r2,-1
   51144:	1007883a 	mov	r3,r2
   51148:	e0bffe17 	ldw	r2,-8(fp)
   5114c:	10c00845 	stb	r3,33(r2)
    if (parm1 > 0)
   51150:	e0bffb17 	ldw	r2,-20(fp)
   51154:	0080370e 	bge	zero,r2,51234 <lcd_handle_escape+0x280>
    {
      sp->y = parm1 - 1;
   51158:	e0bffb17 	ldw	r2,-20(fp)
   5115c:	10bfffc4 	addi	r2,r2,-1
   51160:	1007883a 	mov	r3,r2
   51164:	e0bffe17 	ldw	r2,-8(fp)
   51168:	10c00885 	stb	r3,34(r2)
      if (sp->y > ALT_LCD_HEIGHT * 2)
   5116c:	e0bffe17 	ldw	r2,-8(fp)
   51170:	10800883 	ldbu	r2,34(r2)
   51174:	10803fcc 	andi	r2,r2,255
   51178:	10800170 	cmpltui	r2,r2,5
   5117c:	1000061e 	bne	r2,zero,51198 <lcd_handle_escape+0x1e4>
        sp->y = ALT_LCD_HEIGHT * 2;
   51180:	e0bffe17 	ldw	r2,-8(fp)
   51184:	00c00104 	movi	r3,4
   51188:	10c00885 	stb	r3,34(r2)
      while (sp->y > ALT_LCD_HEIGHT)
   5118c:	00000206 	br	51198 <lcd_handle_escape+0x1e4>
        lcd_scroll_up(sp);
   51190:	e13ffe17 	ldw	r4,-8(fp)
   51194:	0050ee80 	call	50ee8 <lcd_scroll_up>
    if (parm1 > 0)
    {
      sp->y = parm1 - 1;
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
   51198:	e0bffe17 	ldw	r2,-8(fp)
   5119c:	10800883 	ldbu	r2,34(r2)
   511a0:	10803fcc 	andi	r2,r2,255
   511a4:	108000e8 	cmpgeui	r2,r2,3
   511a8:	103ff91e 	bne	r2,zero,51190 <__alt_data_end+0xfffdf190>
        lcd_scroll_up(sp);
    }
    break;
   511ac:	00002106 	br	51234 <lcd_handle_escape+0x280>
    /*   ESC J      is clear to beginning of line    [unimplemented]
     *   ESC [ 0 J  is clear to bottom of screen     [unimplemented]
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
   511b0:	e0bffb17 	ldw	r2,-20(fp)
   511b4:	10800098 	cmpnei	r2,r2,2
   511b8:	1000201e 	bne	r2,zero,5123c <lcd_handle_escape+0x288>
      lcd_clear_screen(sp);
   511bc:	e13ffe17 	ldw	r4,-8(fp)
   511c0:	0050c2c0 	call	50c2c <lcd_clear_screen>
    break;
   511c4:	00001d06 	br	5123c <lcd_handle_escape+0x288>
    /*   ESC K      is clear to end of line
     *   ESC [ 0 K  is clear to end of line
     *   ESC [ 1 K  is clear to beginning of line    [unimplemented]
     *   ESC [ 2 K  is clear line                    [unimplemented]
     */
    if (parm1 < 1)
   511c8:	e0bffb17 	ldw	r2,-20(fp)
   511cc:	00801d16 	blt	zero,r2,51244 <lcd_handle_escape+0x290>
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
   511d0:	e0bffe17 	ldw	r2,-8(fp)
   511d4:	10800843 	ldbu	r2,33(r2)
   511d8:	10803fcc 	andi	r2,r2,255
   511dc:	10801428 	cmpgeui	r2,r2,80
   511e0:	1000181e 	bne	r2,zero,51244 <lcd_handle_escape+0x290>
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
   511e4:	e0bffe17 	ldw	r2,-8(fp)
   511e8:	10800883 	ldbu	r2,34(r2)
   511ec:	10803fcc 	andi	r2,r2,255
   511f0:	108018e4 	muli	r2,r2,99
   511f4:	10801004 	addi	r2,r2,64
   511f8:	e0fffe17 	ldw	r3,-8(fp)
   511fc:	1887883a 	add	r3,r3,r2
   51200:	e0bffe17 	ldw	r2,-8(fp)
   51204:	10800843 	ldbu	r2,33(r2)
   51208:	10803fcc 	andi	r2,r2,255
   5120c:	1889883a 	add	r4,r3,r2
   51210:	e0bffe17 	ldw	r2,-8(fp)
   51214:	10800843 	ldbu	r2,33(r2)
   51218:	10803fcc 	andi	r2,r2,255
   5121c:	00c01404 	movi	r3,80
   51220:	1885c83a 	sub	r2,r3,r2
   51224:	100d883a 	mov	r6,r2
   51228:	01400804 	movi	r5,32
   5122c:	0042a880 	call	42a88 <memset>
    }
    break;
   51230:	00000406 	br	51244 <lcd_handle_escape+0x290>
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
        lcd_scroll_up(sp);
    }
    break;
   51234:	0001883a 	nop
   51238:	00000306 	br	51248 <lcd_handle_escape+0x294>
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
      lcd_clear_screen(sp);
    break;
   5123c:	0001883a 	nop
   51240:	00000106 	br	51248 <lcd_handle_escape+0x294>
    if (parm1 < 1)
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
   51244:	0001883a 	nop
  }
}
   51248:	0001883a 	nop
   5124c:	e037883a 	mov	sp,fp
   51250:	dfc00117 	ldw	ra,4(sp)
   51254:	df000017 	ldw	fp,0(sp)
   51258:	dec00204 	addi	sp,sp,8
   5125c:	f800283a 	ret

00051260 <altera_avalon_lcd_16207_write>:

/* --------------------------------------------------------------------- */

int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp, 
  const char* ptr, int len, int flags)
{
   51260:	defff304 	addi	sp,sp,-52
   51264:	dfc00c15 	stw	ra,48(sp)
   51268:	df000b15 	stw	fp,44(sp)
   5126c:	df000b04 	addi	fp,sp,44
   51270:	e13ffc15 	stw	r4,-16(fp)
   51274:	e17ffd15 	stw	r5,-12(fp)
   51278:	e1bffe15 	stw	r6,-8(fp)
   5127c:	e1ffff15 	stw	r7,-4(fp)
  const char* end = ptr + len;
   51280:	e0bffe17 	ldw	r2,-8(fp)
   51284:	e0fffd17 	ldw	r3,-12(fp)
   51288:	1885883a 	add	r2,r3,r2
   5128c:	e0bff815 	stw	r2,-32(fp)

  ALT_SEM_PEND (sp->write_lock, 0);

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;
   51290:	e0bffc17 	ldw	r2,-16(fp)
   51294:	00c00044 	movi	r3,1
   51298:	10c009c5 	stb	r3,39(r2)

  for ( ; ptr < end ; ptr++)
   5129c:	00009906 	br	51504 <altera_avalon_lcd_16207_write+0x2a4>
  {
    char c = *ptr;
   512a0:	e0bffd17 	ldw	r2,-12(fp)
   512a4:	10800003 	ldbu	r2,0(r2)
   512a8:	e0bff905 	stb	r2,-28(fp)

    if (sp->esccount >= 0)
   512ac:	e0bffc17 	ldw	r2,-16(fp)
   512b0:	10800903 	ldbu	r2,36(r2)
   512b4:	10803fcc 	andi	r2,r2,255
   512b8:	1080201c 	xori	r2,r2,128
   512bc:	10bfe004 	addi	r2,r2,-128
   512c0:	10003716 	blt	r2,zero,513a0 <altera_avalon_lcd_16207_write+0x140>
    {
      unsigned int esccount = sp->esccount;
   512c4:	e0bffc17 	ldw	r2,-16(fp)
   512c8:	10800903 	ldbu	r2,36(r2)
   512cc:	10803fcc 	andi	r2,r2,255
   512d0:	1080201c 	xori	r2,r2,128
   512d4:	10bfe004 	addi	r2,r2,-128
   512d8:	e0bffa15 	stw	r2,-24(fp)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
   512dc:	e0bffa17 	ldw	r2,-24(fp)
   512e0:	1000031e 	bne	r2,zero,512f0 <altera_avalon_lcd_16207_write+0x90>
   512e4:	e0bff907 	ldb	r2,-28(fp)
   512e8:	108016d8 	cmpnei	r2,r2,91
   512ec:	10000d1e 	bne	r2,zero,51324 <altera_avalon_lcd_16207_write+0xc4>
   512f0:	e0bffa17 	ldw	r2,-24(fp)
   512f4:	10001826 	beq	r2,zero,51358 <altera_avalon_lcd_16207_write+0xf8>
          (esccount > 0 && !isdigit(c) && c != ';'))
   512f8:	d0e01517 	ldw	r3,-32684(gp)
   512fc:	e0bff907 	ldb	r2,-28(fp)
   51300:	10800044 	addi	r2,r2,1
   51304:	1885883a 	add	r2,r3,r2
   51308:	10800003 	ldbu	r2,0(r2)
   5130c:	10803fcc 	andi	r2,r2,255
   51310:	1080010c 	andi	r2,r2,4
   51314:	1000101e 	bne	r2,zero,51358 <altera_avalon_lcd_16207_write+0xf8>
   51318:	e0bff907 	ldb	r2,-28(fp)
   5131c:	10800ee0 	cmpeqi	r2,r2,59
   51320:	10000d1e 	bne	r2,zero,51358 <altera_avalon_lcd_16207_write+0xf8>
      {
        sp->escape[esccount] = 0;
   51324:	e0fffc17 	ldw	r3,-16(fp)
   51328:	e0bffa17 	ldw	r2,-24(fp)
   5132c:	1885883a 	add	r2,r3,r2
   51330:	10800a04 	addi	r2,r2,40
   51334:	10000005 	stb	zero,0(r2)

        lcd_handle_escape(sp, c);
   51338:	e0bff907 	ldb	r2,-28(fp)
   5133c:	100b883a 	mov	r5,r2
   51340:	e13ffc17 	ldw	r4,-16(fp)
   51344:	0050fb40 	call	50fb4 <lcd_handle_escape>

        sp->esccount = -1;
   51348:	e0bffc17 	ldw	r2,-16(fp)
   5134c:	00ffffc4 	movi	r3,-1
   51350:	10c00905 	stb	r3,36(r2)
   51354:	00006806 	br	514f8 <altera_avalon_lcd_16207_write+0x298>
      }
      else if (sp->esccount < sizeof(sp->escape)-1)
   51358:	e0bffc17 	ldw	r2,-16(fp)
   5135c:	10800903 	ldbu	r2,36(r2)
   51360:	10803fcc 	andi	r2,r2,255
   51364:	108001e8 	cmpgeui	r2,r2,7
   51368:	1000631e 	bne	r2,zero,514f8 <altera_avalon_lcd_16207_write+0x298>
      {
        sp->escape[esccount] = c;
   5136c:	e0fffc17 	ldw	r3,-16(fp)
   51370:	e0bffa17 	ldw	r2,-24(fp)
   51374:	1885883a 	add	r2,r3,r2
   51378:	10800a04 	addi	r2,r2,40
   5137c:	e0fff903 	ldbu	r3,-28(fp)
   51380:	10c00005 	stb	r3,0(r2)
        sp->esccount++;
   51384:	e0bffc17 	ldw	r2,-16(fp)
   51388:	10800903 	ldbu	r2,36(r2)
   5138c:	10800044 	addi	r2,r2,1
   51390:	1007883a 	mov	r3,r2
   51394:	e0bffc17 	ldw	r2,-16(fp)
   51398:	10c00905 	stb	r3,36(r2)
   5139c:	00005606 	br	514f8 <altera_avalon_lcd_16207_write+0x298>
      }
    }
    else if (c == 27) /* ESC */
   513a0:	e0bff907 	ldb	r2,-28(fp)
   513a4:	108006d8 	cmpnei	r2,r2,27
   513a8:	1000031e 	bne	r2,zero,513b8 <altera_avalon_lcd_16207_write+0x158>
    {
      sp->esccount = 0;
   513ac:	e0bffc17 	ldw	r2,-16(fp)
   513b0:	10000905 	stb	zero,36(r2)
   513b4:	00005006 	br	514f8 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\r')
   513b8:	e0bff907 	ldb	r2,-28(fp)
   513bc:	10800358 	cmpnei	r2,r2,13
   513c0:	1000031e 	bne	r2,zero,513d0 <altera_avalon_lcd_16207_write+0x170>
    {
      sp->x = 0;
   513c4:	e0bffc17 	ldw	r2,-16(fp)
   513c8:	10000845 	stb	zero,33(r2)
   513cc:	00004a06 	br	514f8 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\n')
   513d0:	e0bff907 	ldb	r2,-28(fp)
   513d4:	10800298 	cmpnei	r2,r2,10
   513d8:	1000101e 	bne	r2,zero,5141c <altera_avalon_lcd_16207_write+0x1bc>
    {
      sp->x = 0;
   513dc:	e0bffc17 	ldw	r2,-16(fp)
   513e0:	10000845 	stb	zero,33(r2)
      sp->y++;
   513e4:	e0bffc17 	ldw	r2,-16(fp)
   513e8:	10800883 	ldbu	r2,34(r2)
   513ec:	10800044 	addi	r2,r2,1
   513f0:	1007883a 	mov	r3,r2
   513f4:	e0bffc17 	ldw	r2,-16(fp)
   513f8:	10c00885 	stb	r3,34(r2)

      /* Let the cursor sit at X=0, Y=HEIGHT without scrolling so the user
       * can print two lines of data without losing one.
       */
      if (sp->y > ALT_LCD_HEIGHT)
   513fc:	e0bffc17 	ldw	r2,-16(fp)
   51400:	10800883 	ldbu	r2,34(r2)
   51404:	10803fcc 	andi	r2,r2,255
   51408:	108000f0 	cmpltui	r2,r2,3
   5140c:	10003a1e 	bne	r2,zero,514f8 <altera_avalon_lcd_16207_write+0x298>
        lcd_scroll_up(sp);
   51410:	e13ffc17 	ldw	r4,-16(fp)
   51414:	0050ee80 	call	50ee8 <lcd_scroll_up>
   51418:	00003706 	br	514f8 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\b')
   5141c:	e0bff907 	ldb	r2,-28(fp)
   51420:	10800218 	cmpnei	r2,r2,8
   51424:	10000b1e 	bne	r2,zero,51454 <altera_avalon_lcd_16207_write+0x1f4>
    {
      if (sp->x > 0)
   51428:	e0bffc17 	ldw	r2,-16(fp)
   5142c:	10800843 	ldbu	r2,33(r2)
   51430:	10803fcc 	andi	r2,r2,255
   51434:	10003026 	beq	r2,zero,514f8 <altera_avalon_lcd_16207_write+0x298>
        sp->x--;
   51438:	e0bffc17 	ldw	r2,-16(fp)
   5143c:	10800843 	ldbu	r2,33(r2)
   51440:	10bfffc4 	addi	r2,r2,-1
   51444:	1007883a 	mov	r3,r2
   51448:	e0bffc17 	ldw	r2,-16(fp)
   5144c:	10c00845 	stb	r3,33(r2)
   51450:	00002906 	br	514f8 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (isprint(c))
   51454:	d0e01517 	ldw	r3,-32684(gp)
   51458:	e0bff907 	ldb	r2,-28(fp)
   5145c:	10800044 	addi	r2,r2,1
   51460:	1885883a 	add	r2,r3,r2
   51464:	10800003 	ldbu	r2,0(r2)
   51468:	10803fcc 	andi	r2,r2,255
   5146c:	1080201c 	xori	r2,r2,128
   51470:	10bfe004 	addi	r2,r2,-128
   51474:	108025cc 	andi	r2,r2,151
   51478:	10001f26 	beq	r2,zero,514f8 <altera_avalon_lcd_16207_write+0x298>
    {
      /* If we didn't scroll on the last linefeed then we might need to do
       * it now. */
      if (sp->y >= ALT_LCD_HEIGHT)
   5147c:	e0bffc17 	ldw	r2,-16(fp)
   51480:	10800883 	ldbu	r2,34(r2)
   51484:	10803fcc 	andi	r2,r2,255
   51488:	108000b0 	cmpltui	r2,r2,2
   5148c:	1000021e 	bne	r2,zero,51498 <altera_avalon_lcd_16207_write+0x238>
        lcd_scroll_up(sp);
   51490:	e13ffc17 	ldw	r4,-16(fp)
   51494:	0050ee80 	call	50ee8 <lcd_scroll_up>

      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
   51498:	e0bffc17 	ldw	r2,-16(fp)
   5149c:	10800843 	ldbu	r2,33(r2)
   514a0:	10803fcc 	andi	r2,r2,255
   514a4:	10801428 	cmpgeui	r2,r2,80
   514a8:	10000d1e 	bne	r2,zero,514e0 <altera_avalon_lcd_16207_write+0x280>
        sp->line[sp->y].data[sp->x] = c;
   514ac:	e0bffc17 	ldw	r2,-16(fp)
   514b0:	10800883 	ldbu	r2,34(r2)
   514b4:	10c03fcc 	andi	r3,r2,255
   514b8:	e0bffc17 	ldw	r2,-16(fp)
   514bc:	10800843 	ldbu	r2,33(r2)
   514c0:	10803fcc 	andi	r2,r2,255
   514c4:	e13ffc17 	ldw	r4,-16(fp)
   514c8:	18c018e4 	muli	r3,r3,99
   514cc:	20c7883a 	add	r3,r4,r3
   514d0:	1885883a 	add	r2,r3,r2
   514d4:	10801004 	addi	r2,r2,64
   514d8:	e0fff903 	ldbu	r3,-28(fp)
   514dc:	10c00005 	stb	r3,0(r2)

      sp->x++;
   514e0:	e0bffc17 	ldw	r2,-16(fp)
   514e4:	10800843 	ldbu	r2,33(r2)
   514e8:	10800044 	addi	r2,r2,1
   514ec:	1007883a 	mov	r3,r2
   514f0:	e0bffc17 	ldw	r2,-16(fp)
   514f4:	10c00845 	stb	r3,33(r2)

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;

  for ( ; ptr < end ; ptr++)
   514f8:	e0bffd17 	ldw	r2,-12(fp)
   514fc:	10800044 	addi	r2,r2,1
   51500:	e0bffd15 	stw	r2,-12(fp)
   51504:	e0fffd17 	ldw	r3,-12(fp)
   51508:	e0bff817 	ldw	r2,-32(fp)
   5150c:	18bf6436 	bltu	r3,r2,512a0 <__alt_data_end+0xfffdf2a0>
      sp->x++;
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
   51510:	00800404 	movi	r2,16
   51514:	e0bff615 	stw	r2,-40(fp)
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   51518:	e03ff515 	stw	zero,-44(fp)
   5151c:	00003706 	br	515fc <altera_avalon_lcd_16207_write+0x39c>
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
   51520:	00801404 	movi	r2,80
   51524:	e0bff715 	stw	r2,-36(fp)
   51528:	00001106 	br	51570 <altera_avalon_lcd_16207_write+0x310>
      if (sp->line[y].data[width-1] != ' ')
   5152c:	e0bff717 	ldw	r2,-36(fp)
   51530:	10bfffc4 	addi	r2,r2,-1
   51534:	e13ffc17 	ldw	r4,-16(fp)
   51538:	e0fff517 	ldw	r3,-44(fp)
   5153c:	18c018e4 	muli	r3,r3,99
   51540:	20c7883a 	add	r3,r4,r3
   51544:	1885883a 	add	r2,r3,r2
   51548:	10801004 	addi	r2,r2,64
   5154c:	10800003 	ldbu	r2,0(r2)
   51550:	10803fcc 	andi	r2,r2,255
   51554:	1080201c 	xori	r2,r2,128
   51558:	10bfe004 	addi	r2,r2,-128
   5155c:	10800820 	cmpeqi	r2,r2,32
   51560:	10000626 	beq	r2,zero,5157c <altera_avalon_lcd_16207_write+0x31c>
  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
   51564:	e0bff717 	ldw	r2,-36(fp)
   51568:	10bfffc4 	addi	r2,r2,-1
   5156c:	e0bff715 	stw	r2,-36(fp)
   51570:	e0bff717 	ldw	r2,-36(fp)
   51574:	00bfed16 	blt	zero,r2,5152c <__alt_data_end+0xfffdf52c>
   51578:	00000106 	br	51580 <altera_avalon_lcd_16207_write+0x320>
      if (sp->line[y].data[width-1] != ' ')
        break;
   5157c:	0001883a 	nop

    /* The minimum width is the size of the LCD panel.  If the real width
     * is long enough to require scrolling then add an extra space so the
     * end of the message doesn't run into the beginning of it.
     */
    if (width <= ALT_LCD_WIDTH)
   51580:	e0bff717 	ldw	r2,-36(fp)
   51584:	10800448 	cmpgei	r2,r2,17
   51588:	1000031e 	bne	r2,zero,51598 <altera_avalon_lcd_16207_write+0x338>
      width = ALT_LCD_WIDTH;
   5158c:	00800404 	movi	r2,16
   51590:	e0bff715 	stw	r2,-36(fp)
   51594:	00000306 	br	515a4 <altera_avalon_lcd_16207_write+0x344>
    else
      width++;
   51598:	e0bff717 	ldw	r2,-36(fp)
   5159c:	10800044 	addi	r2,r2,1
   515a0:	e0bff715 	stw	r2,-36(fp)

    sp->line[y].width = width;
   515a4:	e0bff717 	ldw	r2,-36(fp)
   515a8:	1009883a 	mov	r4,r2
   515ac:	e0fffc17 	ldw	r3,-16(fp)
   515b0:	e0bff517 	ldw	r2,-44(fp)
   515b4:	108018e4 	muli	r2,r2,99
   515b8:	1885883a 	add	r2,r3,r2
   515bc:	10802444 	addi	r2,r2,145
   515c0:	11000005 	stb	r4,0(r2)
    if (widthmax < width)
   515c4:	e0fff617 	ldw	r3,-40(fp)
   515c8:	e0bff717 	ldw	r2,-36(fp)
   515cc:	1880020e 	bge	r3,r2,515d8 <altera_avalon_lcd_16207_write+0x378>
      widthmax = width;
   515d0:	e0bff717 	ldw	r2,-36(fp)
   515d4:	e0bff615 	stw	r2,-40(fp)
    sp->line[y].speed = 0; /* By default lines don't scroll */
   515d8:	e0fffc17 	ldw	r3,-16(fp)
   515dc:	e0bff517 	ldw	r2,-44(fp)
   515e0:	108018e4 	muli	r2,r2,99
   515e4:	1885883a 	add	r2,r3,r2
   515e8:	10802484 	addi	r2,r2,146
   515ec:	10000005 	stb	zero,0(r2)
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   515f0:	e0bff517 	ldw	r2,-44(fp)
   515f4:	10800044 	addi	r2,r2,1
   515f8:	e0bff515 	stw	r2,-44(fp)
   515fc:	e0bff517 	ldw	r2,-44(fp)
   51600:	10800090 	cmplti	r2,r2,2
   51604:	103fc61e 	bne	r2,zero,51520 <__alt_data_end+0xfffdf520>
    if (widthmax < width)
      widthmax = width;
    sp->line[y].speed = 0; /* By default lines don't scroll */
  }

  if (widthmax <= ALT_LCD_WIDTH)
   51608:	e0bff617 	ldw	r2,-40(fp)
   5160c:	10800448 	cmpgei	r2,r2,17
   51610:	1000031e 	bne	r2,zero,51620 <altera_avalon_lcd_16207_write+0x3c0>
    sp->scrollmax = 0;
   51614:	e0bffc17 	ldw	r2,-16(fp)
   51618:	10000985 	stb	zero,38(r2)
   5161c:	00002e06 	br	516d8 <altera_avalon_lcd_16207_write+0x478>
  else
  {
    widthmax *= 2;
   51620:	e0bff617 	ldw	r2,-40(fp)
   51624:	1085883a 	add	r2,r2,r2
   51628:	e0bff615 	stw	r2,-40(fp)
    sp->scrollmax = widthmax;
   5162c:	e0bff617 	ldw	r2,-40(fp)
   51630:	1007883a 	mov	r3,r2
   51634:	e0bffc17 	ldw	r2,-16(fp)
   51638:	10c00985 	stb	r3,38(r2)

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   5163c:	e03ff515 	stw	zero,-44(fp)
   51640:	00002206 	br	516cc <altera_avalon_lcd_16207_write+0x46c>
      if (sp->line[y].width > ALT_LCD_WIDTH)
   51644:	e0fffc17 	ldw	r3,-16(fp)
   51648:	e0bff517 	ldw	r2,-44(fp)
   5164c:	108018e4 	muli	r2,r2,99
   51650:	1885883a 	add	r2,r3,r2
   51654:	10802444 	addi	r2,r2,145
   51658:	10800003 	ldbu	r2,0(r2)
   5165c:	10803fcc 	andi	r2,r2,255
   51660:	1080201c 	xori	r2,r2,128
   51664:	10bfe004 	addi	r2,r2,-128
   51668:	10800450 	cmplti	r2,r2,17
   5166c:	1000141e 	bne	r2,zero,516c0 <altera_avalon_lcd_16207_write+0x460>
         */
#if 1
        /* This option makes all the lines scroll round at different speeds
         * which are chosen so that all the scrolls finish at the same time.
         */
        sp->line[y].speed = 256 * sp->line[y].width / widthmax;
   51670:	e0fffc17 	ldw	r3,-16(fp)
   51674:	e0bff517 	ldw	r2,-44(fp)
   51678:	108018e4 	muli	r2,r2,99
   5167c:	1885883a 	add	r2,r3,r2
   51680:	10802444 	addi	r2,r2,145
   51684:	10800003 	ldbu	r2,0(r2)
   51688:	10803fcc 	andi	r2,r2,255
   5168c:	1080201c 	xori	r2,r2,128
   51690:	10bfe004 	addi	r2,r2,-128
   51694:	1004923a 	slli	r2,r2,8
   51698:	e17ff617 	ldw	r5,-40(fp)
   5169c:	1009883a 	mov	r4,r2
   516a0:	00417d80 	call	417d8 <__divsi3>
   516a4:	1009883a 	mov	r4,r2
   516a8:	e0fffc17 	ldw	r3,-16(fp)
   516ac:	e0bff517 	ldw	r2,-44(fp)
   516b0:	108018e4 	muli	r2,r2,99
   516b4:	1885883a 	add	r2,r3,r2
   516b8:	10802484 	addi	r2,r2,146
   516bc:	11000005 	stb	r4,0(r2)
  {
    widthmax *= 2;
    sp->scrollmax = widthmax;

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   516c0:	e0bff517 	ldw	r2,-44(fp)
   516c4:	10800044 	addi	r2,r2,1
   516c8:	e0bff515 	stw	r2,-44(fp)
   516cc:	e0bff517 	ldw	r2,-44(fp)
   516d0:	10800090 	cmplti	r2,r2,2
   516d4:	103fdb1e 	bne	r2,zero,51644 <__alt_data_end+0xfffdf644>
   * (because active was set when the timer interrupt occurred).  If there
   * has been a missed repaint then paint again.  And again.  etc.
   */
  for ( ; ; )
  {
    int old_scrollpos = sp->scrollpos;
   516d8:	e0bffc17 	ldw	r2,-16(fp)
   516dc:	10800943 	ldbu	r2,37(r2)
   516e0:	10803fcc 	andi	r2,r2,255
   516e4:	e0bffb15 	stw	r2,-20(fp)

    lcd_repaint_screen(sp);
   516e8:	e13ffc17 	ldw	r4,-16(fp)
   516ec:	0050cfc0 	call	50cfc <lcd_repaint_screen>

    /* Let the timer routines repaint the display again */
    sp->active = 0;
   516f0:	e0bffc17 	ldw	r2,-16(fp)
   516f4:	100009c5 	stb	zero,39(r2)

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
   516f8:	e0bffc17 	ldw	r2,-16(fp)
   516fc:	10800943 	ldbu	r2,37(r2)
   51700:	10c03fcc 	andi	r3,r2,255
   51704:	e0bffb17 	ldw	r2,-20(fp)
   51708:	18800426 	beq	r3,r2,5171c <altera_avalon_lcd_16207_write+0x4bc>
      break;

    /* We need to repaint again since the display scrolled while we were
     * painting last time */
    sp->active = 1;
   5170c:	e0bffc17 	ldw	r2,-16(fp)
   51710:	00c00044 	movi	r3,1
   51714:	10c009c5 	stb	r3,39(r2)
  }
   51718:	003fef06 	br	516d8 <__alt_data_end+0xfffdf6d8>
    sp->active = 0;

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
      break;
   5171c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);

  return len;
   51720:	e0bffe17 	ldw	r2,-8(fp)
}
   51724:	e037883a 	mov	sp,fp
   51728:	dfc00117 	ldw	ra,4(sp)
   5172c:	df000017 	ldw	fp,0(sp)
   51730:	dec00204 	addi	sp,sp,8
   51734:	f800283a 	ret

00051738 <alt_lcd_16207_timeout>:
/*
 * Timeout routine is called every second
 */

static alt_u32 alt_lcd_16207_timeout(void* context) 
{
   51738:	defffc04 	addi	sp,sp,-16
   5173c:	dfc00315 	stw	ra,12(sp)
   51740:	df000215 	stw	fp,8(sp)
   51744:	df000204 	addi	fp,sp,8
   51748:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_lcd_16207_state* sp = (altera_avalon_lcd_16207_state*)context;
   5174c:	e0bfff17 	ldw	r2,-4(fp)
   51750:	e0bffe15 	stw	r2,-8(fp)

  /* Update the scrolling position */
  if (sp->scrollpos + 1 >= sp->scrollmax)
   51754:	e0bffe17 	ldw	r2,-8(fp)
   51758:	10800943 	ldbu	r2,37(r2)
   5175c:	10803fcc 	andi	r2,r2,255
   51760:	10c00044 	addi	r3,r2,1
   51764:	e0bffe17 	ldw	r2,-8(fp)
   51768:	10800983 	ldbu	r2,38(r2)
   5176c:	10803fcc 	andi	r2,r2,255
   51770:	18800316 	blt	r3,r2,51780 <alt_lcd_16207_timeout+0x48>
    sp->scrollpos = 0;
   51774:	e0bffe17 	ldw	r2,-8(fp)
   51778:	10000945 	stb	zero,37(r2)
   5177c:	00000606 	br	51798 <alt_lcd_16207_timeout+0x60>
  else
    sp->scrollpos = sp->scrollpos + 1;
   51780:	e0bffe17 	ldw	r2,-8(fp)
   51784:	10800943 	ldbu	r2,37(r2)
   51788:	10800044 	addi	r2,r2,1
   5178c:	1007883a 	mov	r3,r2
   51790:	e0bffe17 	ldw	r2,-8(fp)
   51794:	10c00945 	stb	r3,37(r2)

  /* Repaint the panel unless the foreground will do it again soon */
  if (sp->scrollmax > 0 && !sp->active)
   51798:	e0bffe17 	ldw	r2,-8(fp)
   5179c:	10800983 	ldbu	r2,38(r2)
   517a0:	10803fcc 	andi	r2,r2,255
   517a4:	10000826 	beq	r2,zero,517c8 <alt_lcd_16207_timeout+0x90>
   517a8:	e0bffe17 	ldw	r2,-8(fp)
   517ac:	108009c3 	ldbu	r2,39(r2)
   517b0:	10803fcc 	andi	r2,r2,255
   517b4:	1080201c 	xori	r2,r2,128
   517b8:	10bfe004 	addi	r2,r2,-128
   517bc:	1000021e 	bne	r2,zero,517c8 <alt_lcd_16207_timeout+0x90>
    lcd_repaint_screen(sp);
   517c0:	e13ffe17 	ldw	r4,-8(fp)
   517c4:	0050cfc0 	call	50cfc <lcd_repaint_screen>

  return sp->period;
   517c8:	e0bffe17 	ldw	r2,-8(fp)
   517cc:	10800717 	ldw	r2,28(r2)
}
   517d0:	e037883a 	mov	sp,fp
   517d4:	dfc00117 	ldw	ra,4(sp)
   517d8:	df000017 	ldw	fp,0(sp)
   517dc:	dec00204 	addi	sp,sp,8
   517e0:	f800283a 	ret

000517e4 <altera_avalon_lcd_16207_init>:

/*
 * Called at boot time to initialise the LCD driver
 */
void altera_avalon_lcd_16207_init(altera_avalon_lcd_16207_state* sp)
{
   517e4:	defffc04 	addi	sp,sp,-16
   517e8:	dfc00315 	stw	ra,12(sp)
   517ec:	df000215 	stw	fp,8(sp)
   517f0:	df000204 	addi	fp,sp,8
   517f4:	e13fff15 	stw	r4,-4(fp)
  unsigned int base = sp->base;
   517f8:	e0bfff17 	ldw	r2,-4(fp)
   517fc:	10800017 	ldw	r2,0(r2)
   51800:	e0bffe15 	stw	r2,-8(fp)

  /* Mark the device as functional */
  sp->broken = 0;
   51804:	e0bfff17 	ldw	r2,-4(fp)
   51808:	10000805 	stb	zero,32(r2)
   * the BUSY bit in the status register doesn't work until the display
   * has been reset three times.
   */

  /* Wait for 15 ms then reset */
  usleep(15000);
   5180c:	010ea604 	movi	r4,15000
   51810:	004fe040 	call	4fe04 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
   51814:	e0bffe17 	ldw	r2,-8(fp)
   51818:	00c00c04 	movi	r3,48
   5181c:	10c00035 	stwio	r3,0(r2)

  /* Wait for another 4.1ms and reset again */
  usleep(4100);  
   51820:	01040104 	movi	r4,4100
   51824:	004fe040 	call	4fe04 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
   51828:	e0bffe17 	ldw	r2,-8(fp)
   5182c:	00c00c04 	movi	r3,48
   51830:	10c00035 	stwio	r3,0(r2)

  /* Wait a further 1 ms and reset a third time */
  usleep(1000);
   51834:	0100fa04 	movi	r4,1000
   51838:	004fe040 	call	4fe04 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
   5183c:	e0bffe17 	ldw	r2,-8(fp)
   51840:	00c00c04 	movi	r3,48
   51844:	10c00035 	stwio	r3,0(r2)

  /* Setup interface parameters: 8 bit bus, 2 rows, 5x7 font */
  lcd_write_command(sp, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT | LCD_CMD_TWO_LINE);
   51848:	01400e04 	movi	r5,56
   5184c:	e13fff17 	ldw	r4,-4(fp)
   51850:	0050a9c0 	call	50a9c <lcd_write_command>
  
  /* Turn display off */
  lcd_write_command(sp, LCD_CMD_ONOFF);
   51854:	01400204 	movi	r5,8
   51858:	e13fff17 	ldw	r4,-4(fp)
   5185c:	0050a9c0 	call	50a9c <lcd_write_command>

  /* Clear display */
  lcd_clear_screen(sp);
   51860:	e13fff17 	ldw	r4,-4(fp)
   51864:	0050c2c0 	call	50c2c <lcd_clear_screen>
  
  /* Set mode: increment after writing, don't shift display */
  lcd_write_command(sp, LCD_CMD_MODES | LCD_CMD_MODE_INC);
   51868:	01400184 	movi	r5,6
   5186c:	e13fff17 	ldw	r4,-4(fp)
   51870:	0050a9c0 	call	50a9c <lcd_write_command>

  /* Turn display on */
  lcd_write_command(sp, LCD_CMD_ONOFF | LCD_CMD_ENABLE_DISP);
   51874:	01400304 	movi	r5,12
   51878:	e13fff17 	ldw	r4,-4(fp)
   5187c:	0050a9c0 	call	50a9c <lcd_write_command>

  sp->esccount = -1;
   51880:	e0bfff17 	ldw	r2,-4(fp)
   51884:	00ffffc4 	movi	r3,-1
   51888:	10c00905 	stb	r3,36(r2)
  memset(sp->escape, 0, sizeof(sp->escape));
   5188c:	e0bfff17 	ldw	r2,-4(fp)
   51890:	10800a04 	addi	r2,r2,40
   51894:	01800204 	movi	r6,8
   51898:	000b883a 	mov	r5,zero
   5189c:	1009883a 	mov	r4,r2
   518a0:	0042a880 	call	42a88 <memset>

  sp->scrollpos = 0;
   518a4:	e0bfff17 	ldw	r2,-4(fp)
   518a8:	10000945 	stb	zero,37(r2)
  sp->scrollmax = 0;
   518ac:	e0bfff17 	ldw	r2,-4(fp)
   518b0:	10000985 	stb	zero,38(r2)
  sp->active = 0;
   518b4:	e0bfff17 	ldw	r2,-4(fp)
   518b8:	100009c5 	stb	zero,39(r2)
   518bc:	d0a7d617 	ldw	r2,-24744(gp)

  sp->period = alt_ticks_per_second() / 10; /* Call every 100ms */
   518c0:	01400284 	movi	r5,10
   518c4:	1009883a 	mov	r4,r2
   518c8:	00418d00 	call	418d0 <__udivsi3>
   518cc:	1007883a 	mov	r3,r2
   518d0:	e0bfff17 	ldw	r2,-4(fp)
   518d4:	10c00715 	stw	r3,28(r2)

  alt_alarm_start(&sp->alarm, sp->period, &alt_lcd_16207_timeout, sp);
   518d8:	e0bfff17 	ldw	r2,-4(fp)
   518dc:	10c00104 	addi	r3,r2,4
   518e0:	e0bfff17 	ldw	r2,-4(fp)
   518e4:	10800717 	ldw	r2,28(r2)
   518e8:	e1ffff17 	ldw	r7,-4(fp)
   518ec:	01800174 	movhi	r6,5
   518f0:	3185ce04 	addi	r6,r6,5944
   518f4:	100b883a 	mov	r5,r2
   518f8:	1809883a 	mov	r4,r3
   518fc:	00519780 	call	51978 <alt_alarm_start>
}
   51900:	0001883a 	nop
   51904:	e037883a 	mov	sp,fp
   51908:	dfc00117 	ldw	ra,4(sp)
   5190c:	df000017 	ldw	fp,0(sp)
   51910:	dec00204 	addi	sp,sp,8
   51914:	f800283a 	ret

00051918 <altera_avalon_lcd_16207_write_fd>:
extern int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp,
  const char* ptr, int count, int flags);

int 
altera_avalon_lcd_16207_write_fd(alt_fd* fd, const char* buffer, int space)
{
   51918:	defffa04 	addi	sp,sp,-24
   5191c:	dfc00515 	stw	ra,20(sp)
   51920:	df000415 	stw	fp,16(sp)
   51924:	df000404 	addi	fp,sp,16
   51928:	e13ffd15 	stw	r4,-12(fp)
   5192c:	e17ffe15 	stw	r5,-8(fp)
   51930:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_lcd_16207_dev* dev = (altera_avalon_lcd_16207_dev*) fd->dev; 
   51934:	e0bffd17 	ldw	r2,-12(fp)
   51938:	10800017 	ldw	r2,0(r2)
   5193c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_lcd_16207_write(&dev->state, buffer, space,
   51940:	e0bffc17 	ldw	r2,-16(fp)
   51944:	10c00a04 	addi	r3,r2,40
   51948:	e0bffd17 	ldw	r2,-12(fp)
   5194c:	10800217 	ldw	r2,8(r2)
   51950:	100f883a 	mov	r7,r2
   51954:	e1bfff17 	ldw	r6,-4(fp)
   51958:	e17ffe17 	ldw	r5,-8(fp)
   5195c:	1809883a 	mov	r4,r3
   51960:	00512600 	call	51260 <altera_avalon_lcd_16207_write>
      fd->fd_flags);
}
   51964:	e037883a 	mov	sp,fp
   51968:	dfc00117 	ldw	ra,4(sp)
   5196c:	df000017 	ldw	fp,0(sp)
   51970:	dec00204 	addi	sp,sp,8
   51974:	f800283a 	ret

00051978 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   51978:	defff504 	addi	sp,sp,-44
   5197c:	df000a15 	stw	fp,40(sp)
   51980:	df000a04 	addi	fp,sp,40
   51984:	e13ffc15 	stw	r4,-16(fp)
   51988:	e17ffd15 	stw	r5,-12(fp)
   5198c:	e1bffe15 	stw	r6,-8(fp)
   51990:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   51994:	e03ff615 	stw	zero,-40(fp)
   51998:	d0a7d617 	ldw	r2,-24744(gp)
  
  if (alt_ticks_per_second ())
   5199c:	10003c26 	beq	r2,zero,51a90 <alt_alarm_start+0x118>
  {
    if (alarm)
   519a0:	e0bffc17 	ldw	r2,-16(fp)
   519a4:	10003826 	beq	r2,zero,51a88 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   519a8:	e0bffc17 	ldw	r2,-16(fp)
   519ac:	e0fffe17 	ldw	r3,-8(fp)
   519b0:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   519b4:	e0bffc17 	ldw	r2,-16(fp)
   519b8:	e0ffff17 	ldw	r3,-4(fp)
   519bc:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   519c0:	0005303a 	rdctl	r2,status
   519c4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   519c8:	e0fff917 	ldw	r3,-28(fp)
   519cc:	00bfff84 	movi	r2,-2
   519d0:	1884703a 	and	r2,r3,r2
   519d4:	1001703a 	wrctl	status,r2
  
  return context;
   519d8:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   519dc:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   519e0:	d0a7d717 	ldw	r2,-24740(gp)
      
      current_nticks = alt_nticks();
   519e4:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   519e8:	e0fffd17 	ldw	r3,-12(fp)
   519ec:	e0bff617 	ldw	r2,-40(fp)
   519f0:	1885883a 	add	r2,r3,r2
   519f4:	10c00044 	addi	r3,r2,1
   519f8:	e0bffc17 	ldw	r2,-16(fp)
   519fc:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   51a00:	e0bffc17 	ldw	r2,-16(fp)
   51a04:	10c00217 	ldw	r3,8(r2)
   51a08:	e0bff617 	ldw	r2,-40(fp)
   51a0c:	1880042e 	bgeu	r3,r2,51a20 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   51a10:	e0bffc17 	ldw	r2,-16(fp)
   51a14:	00c00044 	movi	r3,1
   51a18:	10c00405 	stb	r3,16(r2)
   51a1c:	00000206 	br	51a28 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   51a20:	e0bffc17 	ldw	r2,-16(fp)
   51a24:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   51a28:	e0bffc17 	ldw	r2,-16(fp)
   51a2c:	d0e01204 	addi	r3,gp,-32696
   51a30:	e0fffa15 	stw	r3,-24(fp)
   51a34:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   51a38:	e0bffb17 	ldw	r2,-20(fp)
   51a3c:	e0fffa17 	ldw	r3,-24(fp)
   51a40:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   51a44:	e0bffa17 	ldw	r2,-24(fp)
   51a48:	10c00017 	ldw	r3,0(r2)
   51a4c:	e0bffb17 	ldw	r2,-20(fp)
   51a50:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   51a54:	e0bffa17 	ldw	r2,-24(fp)
   51a58:	10800017 	ldw	r2,0(r2)
   51a5c:	e0fffb17 	ldw	r3,-20(fp)
   51a60:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   51a64:	e0bffa17 	ldw	r2,-24(fp)
   51a68:	e0fffb17 	ldw	r3,-20(fp)
   51a6c:	10c00015 	stw	r3,0(r2)
   51a70:	e0bff817 	ldw	r2,-32(fp)
   51a74:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   51a78:	e0bff717 	ldw	r2,-36(fp)
   51a7c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   51a80:	0005883a 	mov	r2,zero
   51a84:	00000306 	br	51a94 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   51a88:	00bffa84 	movi	r2,-22
   51a8c:	00000106 	br	51a94 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   51a90:	00bfde84 	movi	r2,-134
  }
}
   51a94:	e037883a 	mov	sp,fp
   51a98:	df000017 	ldw	fp,0(sp)
   51a9c:	dec00104 	addi	sp,sp,4
   51aa0:	f800283a 	ret

00051aa4 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   51aa4:	defffa04 	addi	sp,sp,-24
   51aa8:	dfc00515 	stw	ra,20(sp)
   51aac:	df000415 	stw	fp,16(sp)
   51ab0:	df000404 	addi	fp,sp,16
   51ab4:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
   51ab8:	008000c4 	movi	r2,3
   51abc:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   51ac0:	e0fffd17 	ldw	r3,-12(fp)
   51ac4:	008003f4 	movhi	r2,15
   51ac8:	10909004 	addi	r2,r2,16960
   51acc:	1885383a 	mul	r2,r3,r2
   51ad0:	100b883a 	mov	r5,r2
   51ad4:	0100bef4 	movhi	r4,763
   51ad8:	213c2004 	addi	r4,r4,-3968
   51adc:	00418d00 	call	418d0 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   51ae0:	100b883a 	mov	r5,r2
   51ae4:	01200034 	movhi	r4,32768
   51ae8:	213fffc4 	addi	r4,r4,-1
   51aec:	00418d00 	call	418d0 <__udivsi3>
   51af0:	100b883a 	mov	r5,r2
   51af4:	e13fff17 	ldw	r4,-4(fp)
   51af8:	00418d00 	call	418d0 <__udivsi3>
   51afc:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   51b00:	e0bffe17 	ldw	r2,-8(fp)
   51b04:	10002a26 	beq	r2,zero,51bb0 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   51b08:	e03ffc15 	stw	zero,-16(fp)
   51b0c:	00001706 	br	51b6c <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   51b10:	00a00034 	movhi	r2,32768
   51b14:	10bfffc4 	addi	r2,r2,-1
   51b18:	10bfffc4 	addi	r2,r2,-1
   51b1c:	103ffe1e 	bne	r2,zero,51b18 <__alt_data_end+0xfffdfb18>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   51b20:	e0fffd17 	ldw	r3,-12(fp)
   51b24:	008003f4 	movhi	r2,15
   51b28:	10909004 	addi	r2,r2,16960
   51b2c:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   51b30:	100b883a 	mov	r5,r2
   51b34:	0100bef4 	movhi	r4,763
   51b38:	213c2004 	addi	r4,r4,-3968
   51b3c:	00418d00 	call	418d0 <__udivsi3>
   51b40:	100b883a 	mov	r5,r2
   51b44:	01200034 	movhi	r4,32768
   51b48:	213fffc4 	addi	r4,r4,-1
   51b4c:	00418d00 	call	418d0 <__udivsi3>
   51b50:	1007883a 	mov	r3,r2
   51b54:	e0bfff17 	ldw	r2,-4(fp)
   51b58:	10c5c83a 	sub	r2,r2,r3
   51b5c:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   51b60:	e0bffc17 	ldw	r2,-16(fp)
   51b64:	10800044 	addi	r2,r2,1
   51b68:	e0bffc15 	stw	r2,-16(fp)
   51b6c:	e0fffc17 	ldw	r3,-16(fp)
   51b70:	e0bffe17 	ldw	r2,-8(fp)
   51b74:	18bfe616 	blt	r3,r2,51b10 <__alt_data_end+0xfffdfb10>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   51b78:	e0fffd17 	ldw	r3,-12(fp)
   51b7c:	008003f4 	movhi	r2,15
   51b80:	10909004 	addi	r2,r2,16960
   51b84:	1885383a 	mul	r2,r3,r2
   51b88:	100b883a 	mov	r5,r2
   51b8c:	0100bef4 	movhi	r4,763
   51b90:	213c2004 	addi	r4,r4,-3968
   51b94:	00418d00 	call	418d0 <__udivsi3>
   51b98:	1007883a 	mov	r3,r2
   51b9c:	e0bfff17 	ldw	r2,-4(fp)
   51ba0:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   51ba4:	10bfffc4 	addi	r2,r2,-1
   51ba8:	103ffe1e 	bne	r2,zero,51ba4 <__alt_data_end+0xfffdfba4>
   51bac:	00000d06 	br	51be4 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   51bb0:	e0fffd17 	ldw	r3,-12(fp)
   51bb4:	008003f4 	movhi	r2,15
   51bb8:	10909004 	addi	r2,r2,16960
   51bbc:	1885383a 	mul	r2,r3,r2
   51bc0:	100b883a 	mov	r5,r2
   51bc4:	0100bef4 	movhi	r4,763
   51bc8:	213c2004 	addi	r4,r4,-3968
   51bcc:	00418d00 	call	418d0 <__udivsi3>
   51bd0:	1007883a 	mov	r3,r2
   51bd4:	e0bfff17 	ldw	r2,-4(fp)
   51bd8:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   51bdc:	10bfffc4 	addi	r2,r2,-1
   51be0:	00bffe16 	blt	zero,r2,51bdc <__alt_data_end+0xfffdfbdc>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   51be4:	0005883a 	mov	r2,zero
}
   51be8:	e037883a 	mov	sp,fp
   51bec:	dfc00117 	ldw	ra,4(sp)
   51bf0:	df000017 	ldw	fp,0(sp)
   51bf4:	dec00204 	addi	sp,sp,8
   51bf8:	f800283a 	ret

00051bfc <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   51bfc:	defffe04 	addi	sp,sp,-8
   51c00:	df000115 	stw	fp,4(sp)
   51c04:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   51c08:	e03fff15 	stw	zero,-4(fp)
   51c0c:	00000506 	br	51c24 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   51c10:	e0bfff17 	ldw	r2,-4(fp)
   51c14:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   51c18:	e0bfff17 	ldw	r2,-4(fp)
   51c1c:	10800804 	addi	r2,r2,32
   51c20:	e0bfff15 	stw	r2,-4(fp)
   51c24:	e0bfff17 	ldw	r2,-4(fp)
   51c28:	10820030 	cmpltui	r2,r2,2048
   51c2c:	103ff81e 	bne	r2,zero,51c10 <__alt_data_end+0xfffdfc10>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   51c30:	0001883a 	nop
   51c34:	e037883a 	mov	sp,fp
   51c38:	df000017 	ldw	fp,0(sp)
   51c3c:	dec00104 	addi	sp,sp,4
   51c40:	f800283a 	ret

00051c44 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   51c44:	defffe04 	addi	sp,sp,-8
   51c48:	dfc00115 	stw	ra,4(sp)
   51c4c:	df000015 	stw	fp,0(sp)
   51c50:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   51c54:	d0a00f17 	ldw	r2,-32708(gp)
   51c58:	10000326 	beq	r2,zero,51c68 <alt_get_errno+0x24>
   51c5c:	d0a00f17 	ldw	r2,-32708(gp)
   51c60:	103ee83a 	callr	r2
   51c64:	00000106 	br	51c6c <alt_get_errno+0x28>
   51c68:	d0a7c704 	addi	r2,gp,-24804
}
   51c6c:	e037883a 	mov	sp,fp
   51c70:	dfc00117 	ldw	ra,4(sp)
   51c74:	df000017 	ldw	fp,0(sp)
   51c78:	dec00204 	addi	sp,sp,8
   51c7c:	f800283a 	ret

00051c80 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   51c80:	defffa04 	addi	sp,sp,-24
   51c84:	dfc00515 	stw	ra,20(sp)
   51c88:	df000415 	stw	fp,16(sp)
   51c8c:	df000404 	addi	fp,sp,16
   51c90:	e13ffe15 	stw	r4,-8(fp)
   51c94:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   51c98:	e0bffe17 	ldw	r2,-8(fp)
   51c9c:	10000326 	beq	r2,zero,51cac <alt_dev_llist_insert+0x2c>
   51ca0:	e0bffe17 	ldw	r2,-8(fp)
   51ca4:	10800217 	ldw	r2,8(r2)
   51ca8:	1000061e 	bne	r2,zero,51cc4 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   51cac:	0051c440 	call	51c44 <alt_get_errno>
   51cb0:	1007883a 	mov	r3,r2
   51cb4:	00800584 	movi	r2,22
   51cb8:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   51cbc:	00bffa84 	movi	r2,-22
   51cc0:	00001306 	br	51d10 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   51cc4:	e0bffe17 	ldw	r2,-8(fp)
   51cc8:	e0ffff17 	ldw	r3,-4(fp)
   51ccc:	e0fffc15 	stw	r3,-16(fp)
   51cd0:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   51cd4:	e0bffd17 	ldw	r2,-12(fp)
   51cd8:	e0fffc17 	ldw	r3,-16(fp)
   51cdc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   51ce0:	e0bffc17 	ldw	r2,-16(fp)
   51ce4:	10c00017 	ldw	r3,0(r2)
   51ce8:	e0bffd17 	ldw	r2,-12(fp)
   51cec:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   51cf0:	e0bffc17 	ldw	r2,-16(fp)
   51cf4:	10800017 	ldw	r2,0(r2)
   51cf8:	e0fffd17 	ldw	r3,-12(fp)
   51cfc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   51d00:	e0bffc17 	ldw	r2,-16(fp)
   51d04:	e0fffd17 	ldw	r3,-12(fp)
   51d08:	10c00015 	stw	r3,0(r2)

  return 0;  
   51d0c:	0005883a 	mov	r2,zero
}
   51d10:	e037883a 	mov	sp,fp
   51d14:	dfc00117 	ldw	ra,4(sp)
   51d18:	df000017 	ldw	fp,0(sp)
   51d1c:	dec00204 	addi	sp,sp,8
   51d20:	f800283a 	ret

00051d24 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   51d24:	defffd04 	addi	sp,sp,-12
   51d28:	dfc00215 	stw	ra,8(sp)
   51d2c:	df000115 	stw	fp,4(sp)
   51d30:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   51d34:	00800174 	movhi	r2,5
   51d38:	10899d04 	addi	r2,r2,9844
   51d3c:	e0bfff15 	stw	r2,-4(fp)
   51d40:	00000606 	br	51d5c <_do_ctors+0x38>
        (*ctor) (); 
   51d44:	e0bfff17 	ldw	r2,-4(fp)
   51d48:	10800017 	ldw	r2,0(r2)
   51d4c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   51d50:	e0bfff17 	ldw	r2,-4(fp)
   51d54:	10bfff04 	addi	r2,r2,-4
   51d58:	e0bfff15 	stw	r2,-4(fp)
   51d5c:	e0ffff17 	ldw	r3,-4(fp)
   51d60:	00800174 	movhi	r2,5
   51d64:	10899e04 	addi	r2,r2,9848
   51d68:	18bff62e 	bgeu	r3,r2,51d44 <__alt_data_end+0xfffdfd44>
        (*ctor) (); 
}
   51d6c:	0001883a 	nop
   51d70:	e037883a 	mov	sp,fp
   51d74:	dfc00117 	ldw	ra,4(sp)
   51d78:	df000017 	ldw	fp,0(sp)
   51d7c:	dec00204 	addi	sp,sp,8
   51d80:	f800283a 	ret

00051d84 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   51d84:	defffd04 	addi	sp,sp,-12
   51d88:	dfc00215 	stw	ra,8(sp)
   51d8c:	df000115 	stw	fp,4(sp)
   51d90:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   51d94:	00800174 	movhi	r2,5
   51d98:	10899d04 	addi	r2,r2,9844
   51d9c:	e0bfff15 	stw	r2,-4(fp)
   51da0:	00000606 	br	51dbc <_do_dtors+0x38>
        (*dtor) (); 
   51da4:	e0bfff17 	ldw	r2,-4(fp)
   51da8:	10800017 	ldw	r2,0(r2)
   51dac:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   51db0:	e0bfff17 	ldw	r2,-4(fp)
   51db4:	10bfff04 	addi	r2,r2,-4
   51db8:	e0bfff15 	stw	r2,-4(fp)
   51dbc:	e0ffff17 	ldw	r3,-4(fp)
   51dc0:	00800174 	movhi	r2,5
   51dc4:	10899e04 	addi	r2,r2,9848
   51dc8:	18bff62e 	bgeu	r3,r2,51da4 <__alt_data_end+0xfffdfda4>
        (*dtor) (); 
}
   51dcc:	0001883a 	nop
   51dd0:	e037883a 	mov	sp,fp
   51dd4:	dfc00117 	ldw	ra,4(sp)
   51dd8:	df000017 	ldw	fp,0(sp)
   51ddc:	dec00204 	addi	sp,sp,8
   51de0:	f800283a 	ret

00051de4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   51de4:	defffa04 	addi	sp,sp,-24
   51de8:	dfc00515 	stw	ra,20(sp)
   51dec:	df000415 	stw	fp,16(sp)
   51df0:	df000404 	addi	fp,sp,16
   51df4:	e13ffe15 	stw	r4,-8(fp)
   51df8:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   51dfc:	e0bfff17 	ldw	r2,-4(fp)
   51e00:	10800017 	ldw	r2,0(r2)
   51e04:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   51e08:	e13ffe17 	ldw	r4,-8(fp)
   51e0c:	00432600 	call	43260 <strlen>
   51e10:	10800044 	addi	r2,r2,1
   51e14:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   51e18:	00000d06 	br	51e50 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   51e1c:	e0bffc17 	ldw	r2,-16(fp)
   51e20:	10800217 	ldw	r2,8(r2)
   51e24:	e0fffd17 	ldw	r3,-12(fp)
   51e28:	180d883a 	mov	r6,r3
   51e2c:	e17ffe17 	ldw	r5,-8(fp)
   51e30:	1009883a 	mov	r4,r2
   51e34:	00523300 	call	52330 <memcmp>
   51e38:	1000021e 	bne	r2,zero,51e44 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   51e3c:	e0bffc17 	ldw	r2,-16(fp)
   51e40:	00000706 	br	51e60 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   51e44:	e0bffc17 	ldw	r2,-16(fp)
   51e48:	10800017 	ldw	r2,0(r2)
   51e4c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   51e50:	e0fffc17 	ldw	r3,-16(fp)
   51e54:	e0bfff17 	ldw	r2,-4(fp)
   51e58:	18bff01e 	bne	r3,r2,51e1c <__alt_data_end+0xfffdfe1c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   51e5c:	0005883a 	mov	r2,zero
}
   51e60:	e037883a 	mov	sp,fp
   51e64:	dfc00117 	ldw	ra,4(sp)
   51e68:	df000017 	ldw	fp,0(sp)
   51e6c:	dec00204 	addi	sp,sp,8
   51e70:	f800283a 	ret

00051e74 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   51e74:	defffb04 	addi	sp,sp,-20
   51e78:	dfc00415 	stw	ra,16(sp)
   51e7c:	df000315 	stw	fp,12(sp)
   51e80:	df000304 	addi	fp,sp,12
   51e84:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   51e88:	d0a00a17 	ldw	r2,-32728(gp)
   51e8c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   51e90:	00003106 	br	51f58 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   51e94:	e0bffd17 	ldw	r2,-12(fp)
   51e98:	10800217 	ldw	r2,8(r2)
   51e9c:	1009883a 	mov	r4,r2
   51ea0:	00432600 	call	43260 <strlen>
   51ea4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   51ea8:	e0bffd17 	ldw	r2,-12(fp)
   51eac:	10c00217 	ldw	r3,8(r2)
   51eb0:	e0bffe17 	ldw	r2,-8(fp)
   51eb4:	10bfffc4 	addi	r2,r2,-1
   51eb8:	1885883a 	add	r2,r3,r2
   51ebc:	10800003 	ldbu	r2,0(r2)
   51ec0:	10803fcc 	andi	r2,r2,255
   51ec4:	1080201c 	xori	r2,r2,128
   51ec8:	10bfe004 	addi	r2,r2,-128
   51ecc:	10800bd8 	cmpnei	r2,r2,47
   51ed0:	1000031e 	bne	r2,zero,51ee0 <alt_find_file+0x6c>
    {
      len -= 1;
   51ed4:	e0bffe17 	ldw	r2,-8(fp)
   51ed8:	10bfffc4 	addi	r2,r2,-1
   51edc:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   51ee0:	e0bffe17 	ldw	r2,-8(fp)
   51ee4:	e0ffff17 	ldw	r3,-4(fp)
   51ee8:	1885883a 	add	r2,r3,r2
   51eec:	10800003 	ldbu	r2,0(r2)
   51ef0:	10803fcc 	andi	r2,r2,255
   51ef4:	1080201c 	xori	r2,r2,128
   51ef8:	10bfe004 	addi	r2,r2,-128
   51efc:	10800be0 	cmpeqi	r2,r2,47
   51f00:	1000081e 	bne	r2,zero,51f24 <alt_find_file+0xb0>
   51f04:	e0bffe17 	ldw	r2,-8(fp)
   51f08:	e0ffff17 	ldw	r3,-4(fp)
   51f0c:	1885883a 	add	r2,r3,r2
   51f10:	10800003 	ldbu	r2,0(r2)
   51f14:	10803fcc 	andi	r2,r2,255
   51f18:	1080201c 	xori	r2,r2,128
   51f1c:	10bfe004 	addi	r2,r2,-128
   51f20:	10000a1e 	bne	r2,zero,51f4c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   51f24:	e0bffd17 	ldw	r2,-12(fp)
   51f28:	10800217 	ldw	r2,8(r2)
   51f2c:	e0fffe17 	ldw	r3,-8(fp)
   51f30:	180d883a 	mov	r6,r3
   51f34:	e17fff17 	ldw	r5,-4(fp)
   51f38:	1009883a 	mov	r4,r2
   51f3c:	00523300 	call	52330 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   51f40:	1000021e 	bne	r2,zero,51f4c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   51f44:	e0bffd17 	ldw	r2,-12(fp)
   51f48:	00000706 	br	51f68 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   51f4c:	e0bffd17 	ldw	r2,-12(fp)
   51f50:	10800017 	ldw	r2,0(r2)
   51f54:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   51f58:	e0fffd17 	ldw	r3,-12(fp)
   51f5c:	d0a00a04 	addi	r2,gp,-32728
   51f60:	18bfcc1e 	bne	r3,r2,51e94 <__alt_data_end+0xfffdfe94>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   51f64:	0005883a 	mov	r2,zero
}
   51f68:	e037883a 	mov	sp,fp
   51f6c:	dfc00117 	ldw	ra,4(sp)
   51f70:	df000017 	ldw	fp,0(sp)
   51f74:	dec00204 	addi	sp,sp,8
   51f78:	f800283a 	ret

00051f7c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   51f7c:	defffc04 	addi	sp,sp,-16
   51f80:	df000315 	stw	fp,12(sp)
   51f84:	df000304 	addi	fp,sp,12
   51f88:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   51f8c:	00bffa04 	movi	r2,-24
   51f90:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   51f94:	e03ffd15 	stw	zero,-12(fp)
   51f98:	00001906 	br	52000 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
   51f9c:	00800174 	movhi	r2,5
   51fa0:	108e5104 	addi	r2,r2,14660
   51fa4:	e0fffd17 	ldw	r3,-12(fp)
   51fa8:	18c00324 	muli	r3,r3,12
   51fac:	10c5883a 	add	r2,r2,r3
   51fb0:	10800017 	ldw	r2,0(r2)
   51fb4:	10000f1e 	bne	r2,zero,51ff4 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
   51fb8:	00800174 	movhi	r2,5
   51fbc:	108e5104 	addi	r2,r2,14660
   51fc0:	e0fffd17 	ldw	r3,-12(fp)
   51fc4:	18c00324 	muli	r3,r3,12
   51fc8:	10c5883a 	add	r2,r2,r3
   51fcc:	e0ffff17 	ldw	r3,-4(fp)
   51fd0:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   51fd4:	d0e00e17 	ldw	r3,-32712(gp)
   51fd8:	e0bffd17 	ldw	r2,-12(fp)
   51fdc:	1880020e 	bge	r3,r2,51fe8 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
   51fe0:	e0bffd17 	ldw	r2,-12(fp)
   51fe4:	d0a00e15 	stw	r2,-32712(gp)
      }
      rc = i;
   51fe8:	e0bffd17 	ldw	r2,-12(fp)
   51fec:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   51ff0:	00000606 	br	5200c <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   51ff4:	e0bffd17 	ldw	r2,-12(fp)
   51ff8:	10800044 	addi	r2,r2,1
   51ffc:	e0bffd15 	stw	r2,-12(fp)
   52000:	e0bffd17 	ldw	r2,-12(fp)
   52004:	10800810 	cmplti	r2,r2,32
   52008:	103fe41e 	bne	r2,zero,51f9c <__alt_data_end+0xfffdff9c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   5200c:	e0bffe17 	ldw	r2,-8(fp)
}
   52010:	e037883a 	mov	sp,fp
   52014:	df000017 	ldw	fp,0(sp)
   52018:	dec00104 	addi	sp,sp,4
   5201c:	f800283a 	ret

00052020 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   52020:	defffe04 	addi	sp,sp,-8
   52024:	dfc00115 	stw	ra,4(sp)
   52028:	df000015 	stw	fp,0(sp)
   5202c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   52030:	01440004 	movi	r5,4096
   52034:	0009883a 	mov	r4,zero
   52038:	00522540 	call	52254 <alt_icache_flush>
#endif
}
   5203c:	0001883a 	nop
   52040:	e037883a 	mov	sp,fp
   52044:	dfc00117 	ldw	ra,4(sp)
   52048:	df000017 	ldw	fp,0(sp)
   5204c:	dec00204 	addi	sp,sp,8
   52050:	f800283a 	ret

00052054 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   52054:	defffe04 	addi	sp,sp,-8
   52058:	df000115 	stw	fp,4(sp)
   5205c:	df000104 	addi	fp,sp,4
   52060:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   52064:	e0bfff17 	ldw	r2,-4(fp)
   52068:	10bffe84 	addi	r2,r2,-6
   5206c:	10c00428 	cmpgeui	r3,r2,16
   52070:	18001a1e 	bne	r3,zero,520dc <alt_exception_cause_generated_bad_addr+0x88>
   52074:	100690ba 	slli	r3,r2,2
   52078:	00800174 	movhi	r2,5
   5207c:	10882304 	addi	r2,r2,8332
   52080:	1885883a 	add	r2,r3,r2
   52084:	10800017 	ldw	r2,0(r2)
   52088:	1000683a 	jmp	r2
   5208c:	000520cc 	andi	zero,zero,5251
   52090:	000520cc 	andi	zero,zero,5251
   52094:	000520dc 	xori	zero,zero,5251
   52098:	000520dc 	xori	zero,zero,5251
   5209c:	000520dc 	xori	zero,zero,5251
   520a0:	000520cc 	andi	zero,zero,5251
   520a4:	000520d4 	movui	zero,5251
   520a8:	000520dc 	xori	zero,zero,5251
   520ac:	000520cc 	andi	zero,zero,5251
   520b0:	000520cc 	andi	zero,zero,5251
   520b4:	000520dc 	xori	zero,zero,5251
   520b8:	000520cc 	andi	zero,zero,5251
   520bc:	000520d4 	movui	zero,5251
   520c0:	000520dc 	xori	zero,zero,5251
   520c4:	000520dc 	xori	zero,zero,5251
   520c8:	000520cc 	andi	zero,zero,5251
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   520cc:	00800044 	movi	r2,1
   520d0:	00000306 	br	520e0 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   520d4:	0005883a 	mov	r2,zero
   520d8:	00000106 	br	520e0 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   520dc:	0005883a 	mov	r2,zero
  }
}
   520e0:	e037883a 	mov	sp,fp
   520e4:	df000017 	ldw	fp,0(sp)
   520e8:	dec00104 	addi	sp,sp,4
   520ec:	f800283a 	ret

000520f0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   520f0:	defff904 	addi	sp,sp,-28
   520f4:	dfc00615 	stw	ra,24(sp)
   520f8:	df000515 	stw	fp,20(sp)
   520fc:	df000504 	addi	fp,sp,20
   52100:	e13ffc15 	stw	r4,-16(fp)
   52104:	e17ffd15 	stw	r5,-12(fp)
   52108:	e1bffe15 	stw	r6,-8(fp)
   5210c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   52110:	e1bfff17 	ldw	r6,-4(fp)
   52114:	e17ffe17 	ldw	r5,-8(fp)
   52118:	e13ffd17 	ldw	r4,-12(fp)
   5211c:	004f8c00 	call	4f8c0 <open>
   52120:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   52124:	e0bffb17 	ldw	r2,-20(fp)
   52128:	10001c16 	blt	r2,zero,5219c <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   5212c:	00800174 	movhi	r2,5
   52130:	108e5104 	addi	r2,r2,14660
   52134:	e0fffb17 	ldw	r3,-20(fp)
   52138:	18c00324 	muli	r3,r3,12
   5213c:	10c5883a 	add	r2,r2,r3
   52140:	10c00017 	ldw	r3,0(r2)
   52144:	e0bffc17 	ldw	r2,-16(fp)
   52148:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   5214c:	00800174 	movhi	r2,5
   52150:	108e5104 	addi	r2,r2,14660
   52154:	e0fffb17 	ldw	r3,-20(fp)
   52158:	18c00324 	muli	r3,r3,12
   5215c:	10c5883a 	add	r2,r2,r3
   52160:	10800104 	addi	r2,r2,4
   52164:	10c00017 	ldw	r3,0(r2)
   52168:	e0bffc17 	ldw	r2,-16(fp)
   5216c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   52170:	00800174 	movhi	r2,5
   52174:	108e5104 	addi	r2,r2,14660
   52178:	e0fffb17 	ldw	r3,-20(fp)
   5217c:	18c00324 	muli	r3,r3,12
   52180:	10c5883a 	add	r2,r2,r3
   52184:	10800204 	addi	r2,r2,8
   52188:	10c00017 	ldw	r3,0(r2)
   5218c:	e0bffc17 	ldw	r2,-16(fp)
   52190:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   52194:	e13ffb17 	ldw	r4,-20(fp)
   52198:	004fb4c0 	call	4fb4c <alt_release_fd>
  }
} 
   5219c:	0001883a 	nop
   521a0:	e037883a 	mov	sp,fp
   521a4:	dfc00117 	ldw	ra,4(sp)
   521a8:	df000017 	ldw	fp,0(sp)
   521ac:	dec00204 	addi	sp,sp,8
   521b0:	f800283a 	ret

000521b4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   521b4:	defffb04 	addi	sp,sp,-20
   521b8:	dfc00415 	stw	ra,16(sp)
   521bc:	df000315 	stw	fp,12(sp)
   521c0:	df000304 	addi	fp,sp,12
   521c4:	e13ffd15 	stw	r4,-12(fp)
   521c8:	e17ffe15 	stw	r5,-8(fp)
   521cc:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   521d0:	01c07fc4 	movi	r7,511
   521d4:	01800044 	movi	r6,1
   521d8:	e17ffd17 	ldw	r5,-12(fp)
   521dc:	01000174 	movhi	r4,5
   521e0:	210e5404 	addi	r4,r4,14672
   521e4:	00520f00 	call	520f0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   521e8:	01c07fc4 	movi	r7,511
   521ec:	000d883a 	mov	r6,zero
   521f0:	e17ffe17 	ldw	r5,-8(fp)
   521f4:	01000174 	movhi	r4,5
   521f8:	210e5104 	addi	r4,r4,14660
   521fc:	00520f00 	call	520f0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   52200:	01c07fc4 	movi	r7,511
   52204:	01800044 	movi	r6,1
   52208:	e17fff17 	ldw	r5,-4(fp)
   5220c:	01000174 	movhi	r4,5
   52210:	210e5704 	addi	r4,r4,14684
   52214:	00520f00 	call	520f0 <alt_open_fd>
}  
   52218:	0001883a 	nop
   5221c:	e037883a 	mov	sp,fp
   52220:	dfc00117 	ldw	ra,4(sp)
   52224:	df000017 	ldw	fp,0(sp)
   52228:	dec00204 	addi	sp,sp,8
   5222c:	f800283a 	ret

00052230 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   52230:	deffff04 	addi	sp,sp,-4
   52234:	df000015 	stw	fp,0(sp)
   52238:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   5223c:	000170fa 	wrctl	ienable,zero
}
   52240:	0001883a 	nop
   52244:	e037883a 	mov	sp,fp
   52248:	df000017 	ldw	fp,0(sp)
   5224c:	dec00104 	addi	sp,sp,4
   52250:	f800283a 	ret

00052254 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   52254:	defffb04 	addi	sp,sp,-20
   52258:	df000415 	stw	fp,16(sp)
   5225c:	df000404 	addi	fp,sp,16
   52260:	e13ffe15 	stw	r4,-8(fp)
   52264:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   52268:	e0bfff17 	ldw	r2,-4(fp)
   5226c:	10840070 	cmpltui	r2,r2,4097
   52270:	1000021e 	bne	r2,zero,5227c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   52274:	00840004 	movi	r2,4096
   52278:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   5227c:	e0fffe17 	ldw	r3,-8(fp)
   52280:	e0bfff17 	ldw	r2,-4(fp)
   52284:	1885883a 	add	r2,r3,r2
   52288:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   5228c:	e0bffe17 	ldw	r2,-8(fp)
   52290:	e0bffc15 	stw	r2,-16(fp)
   52294:	00000506 	br	522ac <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   52298:	e0bffc17 	ldw	r2,-16(fp)
   5229c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   522a0:	e0bffc17 	ldw	r2,-16(fp)
   522a4:	10800804 	addi	r2,r2,32
   522a8:	e0bffc15 	stw	r2,-16(fp)
   522ac:	e0fffc17 	ldw	r3,-16(fp)
   522b0:	e0bffd17 	ldw	r2,-12(fp)
   522b4:	18bff836 	bltu	r3,r2,52298 <__alt_data_end+0xfffe0298>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   522b8:	e0bffe17 	ldw	r2,-8(fp)
   522bc:	108007cc 	andi	r2,r2,31
   522c0:	10000226 	beq	r2,zero,522cc <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   522c4:	e0bffc17 	ldw	r2,-16(fp)
   522c8:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   522cc:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   522d0:	0001883a 	nop
   522d4:	e037883a 	mov	sp,fp
   522d8:	df000017 	ldw	fp,0(sp)
   522dc:	dec00104 	addi	sp,sp,4
   522e0:	f800283a 	ret

000522e4 <atexit>:
   522e4:	200b883a 	mov	r5,r4
   522e8:	000f883a 	mov	r7,zero
   522ec:	000d883a 	mov	r6,zero
   522f0:	0009883a 	mov	r4,zero
   522f4:	00523ac1 	jmpi	523ac <__register_exitproc>

000522f8 <exit>:
   522f8:	defffe04 	addi	sp,sp,-8
   522fc:	000b883a 	mov	r5,zero
   52300:	dc000015 	stw	r16,0(sp)
   52304:	dfc00115 	stw	ra,4(sp)
   52308:	2021883a 	mov	r16,r4
   5230c:	00524c40 	call	524c4 <__call_exitprocs>
   52310:	00800174 	movhi	r2,5
   52314:	10931504 	addi	r2,r2,19540
   52318:	11000017 	ldw	r4,0(r2)
   5231c:	20800f17 	ldw	r2,60(r4)
   52320:	10000126 	beq	r2,zero,52328 <exit+0x30>
   52324:	103ee83a 	callr	r2
   52328:	8009883a 	mov	r4,r16
   5232c:	00526440 	call	52644 <_exit>

00052330 <memcmp>:
   52330:	01c000c4 	movi	r7,3
   52334:	3980192e 	bgeu	r7,r6,5239c <memcmp+0x6c>
   52338:	2144b03a 	or	r2,r4,r5
   5233c:	11c4703a 	and	r2,r2,r7
   52340:	10000f26 	beq	r2,zero,52380 <memcmp+0x50>
   52344:	20800003 	ldbu	r2,0(r4)
   52348:	28c00003 	ldbu	r3,0(r5)
   5234c:	10c0151e 	bne	r2,r3,523a4 <memcmp+0x74>
   52350:	31bfff84 	addi	r6,r6,-2
   52354:	01ffffc4 	movi	r7,-1
   52358:	00000406 	br	5236c <memcmp+0x3c>
   5235c:	20800003 	ldbu	r2,0(r4)
   52360:	28c00003 	ldbu	r3,0(r5)
   52364:	31bfffc4 	addi	r6,r6,-1
   52368:	10c00e1e 	bne	r2,r3,523a4 <memcmp+0x74>
   5236c:	21000044 	addi	r4,r4,1
   52370:	29400044 	addi	r5,r5,1
   52374:	31fff91e 	bne	r6,r7,5235c <__alt_data_end+0xfffe035c>
   52378:	0005883a 	mov	r2,zero
   5237c:	f800283a 	ret
   52380:	20c00017 	ldw	r3,0(r4)
   52384:	28800017 	ldw	r2,0(r5)
   52388:	18bfee1e 	bne	r3,r2,52344 <__alt_data_end+0xfffe0344>
   5238c:	31bfff04 	addi	r6,r6,-4
   52390:	21000104 	addi	r4,r4,4
   52394:	29400104 	addi	r5,r5,4
   52398:	39bff936 	bltu	r7,r6,52380 <__alt_data_end+0xfffe0380>
   5239c:	303fe91e 	bne	r6,zero,52344 <__alt_data_end+0xfffe0344>
   523a0:	003ff506 	br	52378 <__alt_data_end+0xfffe0378>
   523a4:	10c5c83a 	sub	r2,r2,r3
   523a8:	f800283a 	ret

000523ac <__register_exitproc>:
   523ac:	defffa04 	addi	sp,sp,-24
   523b0:	dc000315 	stw	r16,12(sp)
   523b4:	04000174 	movhi	r16,5
   523b8:	84131504 	addi	r16,r16,19540
   523bc:	80c00017 	ldw	r3,0(r16)
   523c0:	dc400415 	stw	r17,16(sp)
   523c4:	dfc00515 	stw	ra,20(sp)
   523c8:	18805217 	ldw	r2,328(r3)
   523cc:	2023883a 	mov	r17,r4
   523d0:	10003726 	beq	r2,zero,524b0 <__register_exitproc+0x104>
   523d4:	10c00117 	ldw	r3,4(r2)
   523d8:	010007c4 	movi	r4,31
   523dc:	20c00e16 	blt	r4,r3,52418 <__register_exitproc+0x6c>
   523e0:	1a000044 	addi	r8,r3,1
   523e4:	8800221e 	bne	r17,zero,52470 <__register_exitproc+0xc4>
   523e8:	18c00084 	addi	r3,r3,2
   523ec:	18c7883a 	add	r3,r3,r3
   523f0:	18c7883a 	add	r3,r3,r3
   523f4:	12000115 	stw	r8,4(r2)
   523f8:	10c7883a 	add	r3,r2,r3
   523fc:	19400015 	stw	r5,0(r3)
   52400:	0005883a 	mov	r2,zero
   52404:	dfc00517 	ldw	ra,20(sp)
   52408:	dc400417 	ldw	r17,16(sp)
   5240c:	dc000317 	ldw	r16,12(sp)
   52410:	dec00604 	addi	sp,sp,24
   52414:	f800283a 	ret
   52418:	00800034 	movhi	r2,0
   5241c:	10800004 	addi	r2,r2,0
   52420:	10002626 	beq	r2,zero,524bc <__register_exitproc+0x110>
   52424:	01006404 	movi	r4,400
   52428:	d9400015 	stw	r5,0(sp)
   5242c:	d9800115 	stw	r6,4(sp)
   52430:	d9c00215 	stw	r7,8(sp)
   52434:	00000000 	call	0 <__alt_mem_onchip_memory2-0x40000>
   52438:	d9400017 	ldw	r5,0(sp)
   5243c:	d9800117 	ldw	r6,4(sp)
   52440:	d9c00217 	ldw	r7,8(sp)
   52444:	10001d26 	beq	r2,zero,524bc <__register_exitproc+0x110>
   52448:	81000017 	ldw	r4,0(r16)
   5244c:	10000115 	stw	zero,4(r2)
   52450:	02000044 	movi	r8,1
   52454:	22405217 	ldw	r9,328(r4)
   52458:	0007883a 	mov	r3,zero
   5245c:	12400015 	stw	r9,0(r2)
   52460:	20805215 	stw	r2,328(r4)
   52464:	10006215 	stw	zero,392(r2)
   52468:	10006315 	stw	zero,396(r2)
   5246c:	883fde26 	beq	r17,zero,523e8 <__alt_data_end+0xfffe03e8>
   52470:	18c9883a 	add	r4,r3,r3
   52474:	2109883a 	add	r4,r4,r4
   52478:	1109883a 	add	r4,r2,r4
   5247c:	21802215 	stw	r6,136(r4)
   52480:	01800044 	movi	r6,1
   52484:	12406217 	ldw	r9,392(r2)
   52488:	30cc983a 	sll	r6,r6,r3
   5248c:	4992b03a 	or	r9,r9,r6
   52490:	12406215 	stw	r9,392(r2)
   52494:	21c04215 	stw	r7,264(r4)
   52498:	01000084 	movi	r4,2
   5249c:	893fd21e 	bne	r17,r4,523e8 <__alt_data_end+0xfffe03e8>
   524a0:	11006317 	ldw	r4,396(r2)
   524a4:	218cb03a 	or	r6,r4,r6
   524a8:	11806315 	stw	r6,396(r2)
   524ac:	003fce06 	br	523e8 <__alt_data_end+0xfffe03e8>
   524b0:	18805304 	addi	r2,r3,332
   524b4:	18805215 	stw	r2,328(r3)
   524b8:	003fc606 	br	523d4 <__alt_data_end+0xfffe03d4>
   524bc:	00bfffc4 	movi	r2,-1
   524c0:	003fd006 	br	52404 <__alt_data_end+0xfffe0404>

000524c4 <__call_exitprocs>:
   524c4:	defff504 	addi	sp,sp,-44
   524c8:	df000915 	stw	fp,36(sp)
   524cc:	dd400615 	stw	r21,24(sp)
   524d0:	dc800315 	stw	r18,12(sp)
   524d4:	dfc00a15 	stw	ra,40(sp)
   524d8:	ddc00815 	stw	r23,32(sp)
   524dc:	dd800715 	stw	r22,28(sp)
   524e0:	dd000515 	stw	r20,20(sp)
   524e4:	dcc00415 	stw	r19,16(sp)
   524e8:	dc400215 	stw	r17,8(sp)
   524ec:	dc000115 	stw	r16,4(sp)
   524f0:	d9000015 	stw	r4,0(sp)
   524f4:	2839883a 	mov	fp,r5
   524f8:	04800044 	movi	r18,1
   524fc:	057fffc4 	movi	r21,-1
   52500:	00800174 	movhi	r2,5
   52504:	10931504 	addi	r2,r2,19540
   52508:	12000017 	ldw	r8,0(r2)
   5250c:	45005217 	ldw	r20,328(r8)
   52510:	44c05204 	addi	r19,r8,328
   52514:	a0001c26 	beq	r20,zero,52588 <__call_exitprocs+0xc4>
   52518:	a0800117 	ldw	r2,4(r20)
   5251c:	15ffffc4 	addi	r23,r2,-1
   52520:	b8000d16 	blt	r23,zero,52558 <__call_exitprocs+0x94>
   52524:	14000044 	addi	r16,r2,1
   52528:	8421883a 	add	r16,r16,r16
   5252c:	8421883a 	add	r16,r16,r16
   52530:	84402004 	addi	r17,r16,128
   52534:	a463883a 	add	r17,r20,r17
   52538:	a421883a 	add	r16,r20,r16
   5253c:	e0001e26 	beq	fp,zero,525b8 <__call_exitprocs+0xf4>
   52540:	80804017 	ldw	r2,256(r16)
   52544:	e0801c26 	beq	fp,r2,525b8 <__call_exitprocs+0xf4>
   52548:	bdffffc4 	addi	r23,r23,-1
   5254c:	843fff04 	addi	r16,r16,-4
   52550:	8c7fff04 	addi	r17,r17,-4
   52554:	bd7ff91e 	bne	r23,r21,5253c <__alt_data_end+0xfffe053c>
   52558:	00800034 	movhi	r2,0
   5255c:	10800004 	addi	r2,r2,0
   52560:	10000926 	beq	r2,zero,52588 <__call_exitprocs+0xc4>
   52564:	a0800117 	ldw	r2,4(r20)
   52568:	1000301e 	bne	r2,zero,5262c <__call_exitprocs+0x168>
   5256c:	a0800017 	ldw	r2,0(r20)
   52570:	10003226 	beq	r2,zero,5263c <__call_exitprocs+0x178>
   52574:	a009883a 	mov	r4,r20
   52578:	98800015 	stw	r2,0(r19)
   5257c:	00000000 	call	0 <__alt_mem_onchip_memory2-0x40000>
   52580:	9d000017 	ldw	r20,0(r19)
   52584:	a03fe41e 	bne	r20,zero,52518 <__alt_data_end+0xfffe0518>
   52588:	dfc00a17 	ldw	ra,40(sp)
   5258c:	df000917 	ldw	fp,36(sp)
   52590:	ddc00817 	ldw	r23,32(sp)
   52594:	dd800717 	ldw	r22,28(sp)
   52598:	dd400617 	ldw	r21,24(sp)
   5259c:	dd000517 	ldw	r20,20(sp)
   525a0:	dcc00417 	ldw	r19,16(sp)
   525a4:	dc800317 	ldw	r18,12(sp)
   525a8:	dc400217 	ldw	r17,8(sp)
   525ac:	dc000117 	ldw	r16,4(sp)
   525b0:	dec00b04 	addi	sp,sp,44
   525b4:	f800283a 	ret
   525b8:	a0800117 	ldw	r2,4(r20)
   525bc:	80c00017 	ldw	r3,0(r16)
   525c0:	10bfffc4 	addi	r2,r2,-1
   525c4:	15c01426 	beq	r2,r23,52618 <__call_exitprocs+0x154>
   525c8:	80000015 	stw	zero,0(r16)
   525cc:	183fde26 	beq	r3,zero,52548 <__alt_data_end+0xfffe0548>
   525d0:	95c8983a 	sll	r4,r18,r23
   525d4:	a0806217 	ldw	r2,392(r20)
   525d8:	a5800117 	ldw	r22,4(r20)
   525dc:	2084703a 	and	r2,r4,r2
   525e0:	10000b26 	beq	r2,zero,52610 <__call_exitprocs+0x14c>
   525e4:	a0806317 	ldw	r2,396(r20)
   525e8:	2088703a 	and	r4,r4,r2
   525ec:	20000c1e 	bne	r4,zero,52620 <__call_exitprocs+0x15c>
   525f0:	89400017 	ldw	r5,0(r17)
   525f4:	d9000017 	ldw	r4,0(sp)
   525f8:	183ee83a 	callr	r3
   525fc:	a0800117 	ldw	r2,4(r20)
   52600:	15bfbf1e 	bne	r2,r22,52500 <__alt_data_end+0xfffe0500>
   52604:	98800017 	ldw	r2,0(r19)
   52608:	153fcf26 	beq	r2,r20,52548 <__alt_data_end+0xfffe0548>
   5260c:	003fbc06 	br	52500 <__alt_data_end+0xfffe0500>
   52610:	183ee83a 	callr	r3
   52614:	003ff906 	br	525fc <__alt_data_end+0xfffe05fc>
   52618:	a5c00115 	stw	r23,4(r20)
   5261c:	003feb06 	br	525cc <__alt_data_end+0xfffe05cc>
   52620:	89000017 	ldw	r4,0(r17)
   52624:	183ee83a 	callr	r3
   52628:	003ff406 	br	525fc <__alt_data_end+0xfffe05fc>
   5262c:	a0800017 	ldw	r2,0(r20)
   52630:	a027883a 	mov	r19,r20
   52634:	1029883a 	mov	r20,r2
   52638:	003fb606 	br	52514 <__alt_data_end+0xfffe0514>
   5263c:	0005883a 	mov	r2,zero
   52640:	003ffb06 	br	52630 <__alt_data_end+0xfffe0630>

00052644 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   52644:	defffd04 	addi	sp,sp,-12
   52648:	df000215 	stw	fp,8(sp)
   5264c:	df000204 	addi	fp,sp,8
   52650:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   52654:	0001883a 	nop
   52658:	e0bfff17 	ldw	r2,-4(fp)
   5265c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   52660:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   52664:	10000226 	beq	r2,zero,52670 <_exit+0x2c>
    ALT_SIM_FAIL();
   52668:	002af070 	cmpltui	zero,zero,43969
   5266c:	00000106 	br	52674 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   52670:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   52674:	003fff06 	br	52674 <__alt_data_end+0xfffe0674>
