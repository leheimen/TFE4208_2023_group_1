
count_binary.elf:     file format elf32-littlenios2
count_binary.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00040244

Program Header:
    LOAD off    0x00001000 vaddr 0x00040000 paddr 0x00040000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00040020 paddr 0x00040020 align 2**12
         filesz 0x000119bc memsz 0x000119bc flags r-x
    LOAD off    0x000129dc vaddr 0x000519dc paddr 0x000535f0 align 2**12
         filesz 0x00001c14 memsz 0x00001c14 flags rw-
    LOAD off    0x00015204 vaddr 0x00055204 paddr 0x00055204 align 2**12
         filesz 0x00000000 memsz 0x00000168 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00040000  00040000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00040020  00040020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001108c  00040244  00040244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000070c  000512d0  000512d0  000122d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001c14  000519dc  000535f0  000129dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000168  00055204  00055204  00015204  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2 00000000  0005536c  0005536c  000145f0  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000145f0  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00001088  00000000  00000000  00014618  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002a456  00000000  00000000  000156a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000a8a3  00000000  00000000  0003faf6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000ced3  00000000  00000000  0004a399  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002618  00000000  00000000  0005726c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003e5e  00000000  00000000  00059884  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000185b4  00000000  00000000  0005d6e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  00075c98  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001a18  00000000  00000000  00075cf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0007ad76  2**0
                  CONTENTS, READONLY
 18 .cpu          00000008  00000000  00000000  0007ad79  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0007ad81  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0007ad82  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  0007ad83  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  0007ad8c  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  0007ad95  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000c  00000000  00000000  0007ad9e  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000007  00000000  00000000  0007adaa  2**0
                  CONTENTS, READONLY
 26 .jdi          00005749  00000000  00000000  0007adb1  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00043b6f  00000000  00000000  000804fa  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00040000 l    d  .entry	00000000 .entry
00040020 l    d  .exceptions	00000000 .exceptions
00040244 l    d  .text	00000000 .text
000512d0 l    d  .rodata	00000000 .rodata
000519dc l    d  .rwdata	00000000 .rwdata
00055204 l    d  .bss	00000000 .bss
0005536c l    d  .onchip_memory2	00000000 .onchip_memory2
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../count_binary_bsp//obj/HAL/src/crt0.o
0004028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 count_binary.c
00055204 l     O .bss	00000001 count
00040290 l     F .text	0000005c handle_button_interrupts
000402ec l     F .text	0000006c init_button_pio
00040358 l     F .text	00000034 sevenseg_set_hex
0004038c l     F .text	00000048 lcd_init
000403d4 l     F .text	00000058 initial_message
0004042c l     F .text	00000034 count_led
00040460 l     F .text	00000038 count_sevenseg
00040498 l     F .text	0000005c count_lcd
000404f4 l     F .text	00000054 count_all
00040548 l     F .text	0000013c handle_button_press
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fseeko.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 impure.c
000519dc l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 refill.c
00041cd0 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0005149a l     O .rodata	00000010 zeroes.4404
000442fc l     F .text	000000bc __sbprintf
000514aa l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 dtoa.c
000445c0 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
000460f0 l     F .text	00000008 __fp_unlock
00046104 l     F .text	0000019c __sinit.part.1
000462a0 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 locale.c
00052228 l     O .rwdata	00000020 lc_ctype_charset
00052208 l     O .rwdata	00000020 lc_message_charset
00052248 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
000514d8 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
00048d44 l     F .text	000000fc __sprint_r.part.0
0005160c l     O .rodata	00000010 blanks.4348
000515fc l     O .rodata	00000010 zeroes.4349
0004a2d0 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0004dbb4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0004dcc0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0004dcec l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0004e078 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0004e158 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0004e244 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
0004e418 l     F .text	0000003c alt_get_errno
0004e454 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_read.c
0004e66c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000535dc l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0004e8e8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0004ea1c l     F .text	00000034 alt_dev_reg
00052428 l     O .rwdata	00001060 jtag_uart
00053488 l     O .rwdata	00000120 lcd_display
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0004ed0c l     F .text	0000020c altera_avalon_jtag_uart_irq
0004ef18 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207.c
000535e0 l     O .rwdata	00000004 colstart
0004f550 l     F .text	000000b8 lcd_write_command
0004f608 l     F .text	000000d8 lcd_write_data
0004f6e0 l     F .text	000000d0 lcd_clear_screen
0004f7b0 l     F .text	000001ec lcd_repaint_screen
0004f99c l     F .text	000000cc lcd_scroll_up
0004fa68 l     F .text	000002ac lcd_handle_escape
000501ec l     F .text	000000ac alt_lcd_16207_timeout
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207_fd.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000506f8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00050ba4 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 ctype_.c
0005185a l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00055238 g     O .bss	00000004 alt_instruction_exception_handler
00041be4 g     F .text	00000018 putchar
00048350 g     F .text	00000074 _mprec_log10
0004843c g     F .text	0000008c __any_on
00046fb4 g     F .text	00000054 _isatty_r
000514e4 g     O .rodata	00000028 __mprec_tinytens
0004e354 g     F .text	0000007c alt_main
00041bfc g     F .text	000000c0 _puts_r
0005526c g     O .bss	00000100 alt_irq
000470e4 g     F .text	00000060 _lseek_r
000535f0 g       *ABS*	00000000 __flash_rwdata_start
00046490 g     F .text	000000ac __sflags
0004c6e0 g     F .text	00000088 .hidden __eqdf2
0005536c g       *ABS*	00000000 __alt_heap_start
00041ba0 g     F .text	0000003c printf
0004a8b4 g     F .text	0000009c _wcrtomb_r
00041fec g     F .text	0000005c __sseek
00046440 g     F .text	00000010 __sinit
0004a38c g     F .text	00000140 __swbuf_r
00047008 g     F .text	0000007c _setlocale_r
000462a8 g     F .text	00000068 __sfmoreglue
0004e3f4 g     F .text	00000024 __malloc_unlock
00047370 g     F .text	0000015c memmove
00046428 g     F .text	00000018 _cleanup
000474cc g     F .text	000000a8 _Balloc
0004c768 g     F .text	000000dc .hidden __gtdf2
00050e88 g     F .text	00000024 altera_nios2_gen2_irq_init
00040000 g     F .entry	0000001c __reset
00055208 g     O .bss	00000004 edge_capture
00040020 g       *ABS*	00000000 __flash_exceptions_start
00040fc4 g     F .text	0000005c _fstat_r
0005520c g     O .bss	00000004 errno
00041f68 g     F .text	00000008 __seofread
00055230 g     O .bss	00000004 alt_argv
0005b5a8 g       *ABS*	00000000 _gp
0004e8b8 g     F .text	00000030 usleep
000522a8 g     O .rwdata	00000180 alt_fd_list
00041bdc g     F .text	00000008 _putchar_r
00050898 g     F .text	00000090 alt_find_dev
00047228 g     F .text	00000148 memcpy
000460f8 g     F .text	0000000c _cleanup_r
0004d9cc g     F .text	000000dc .hidden __floatsidf
00050c68 g     F .text	0000007c alt_io_redirect
0004c844 g     F .text	000000f4 .hidden __ltdf2
000512d0 g       *ABS*	00000000 __DTOR_END__
00041cbc g     F .text	00000014 puts
00050b08 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00048bf4 g     F .text	00000074 __fpclassifyd
000482ac g     F .text	000000a4 __ratio
0004a2b4 g     F .text	0000001c __vfiprintf_internal
0004f110 g     F .text	0000021c altera_avalon_jtag_uart_read
00041b70 g     F .text	00000030 _printf_r
00040930 g     F .text	00000064 .hidden __udivsi3
0004e0b4 g     F .text	000000a4 isatty
00051534 g     O .rodata	000000c8 __mprec_tens
00047084 g     F .text	0000000c __locale_charset
00050eac g     F .text	00000090 alt_icache_flush
00055218 g     O .bss	00000004 __malloc_top_pad
000535b8 g     O .rwdata	00000004 __mb_cur_max
000470b4 g     F .text	0000000c _localeconv_r
000478d8 g     F .text	0000003c __i2b
00046970 g     F .text	000004bc __sfvwrite_r
00041ec0 g     F .text	00000054 _sbrk_r
00048630 g     F .text	00000060 _read_r
000535d0 g     O .rwdata	00000004 alt_max_fd
0004a5a8 g     F .text	000000f0 _fclose_r
000460c0 g     F .text	00000030 fflush
00055214 g     O .bss	00000004 __malloc_max_sbrked_mem
0004b54c g     F .text	000008ac .hidden __adddf3
00048054 g     F .text	0000010c __b2d
0004b014 g     F .text	00000538 .hidden __umoddi3
0004e280 g     F .text	000000d4 lseek
000535a8 g     O .rwdata	00000004 _global_impure_ptr
00048690 g     F .text	00000564 _realloc_r
0005536c g       *ABS*	00000000 __bss_end
0004df88 g     F .text	000000f0 alt_iic_isr_register
00050d80 g     F .text	00000108 alt_tick
0004aa9c g     F .text	00000578 .hidden __udivdi3
0004a810 g     F .text	00000024 _fputwc_r
0005150c g     O .rodata	00000028 __mprec_bigtens
000476bc g     F .text	00000104 __s2b
0004daa8 g     F .text	000000a8 .hidden __floatunsidf
00047d94 g     F .text	00000060 __mcmp
00046460 g     F .text	00000018 __fp_lock_all
0004df3c g     F .text	0000004c alt_ic_irq_enabled
00050ce4 g     F .text	0000009c alt_alarm_stop
00055228 g     O .bss	00000004 alt_irq_active
00040b64 g     F .text	00000444 _fseeko_r
000400fc g     F .exceptions	000000d4 alt_irq_handler
00052280 g     O .rwdata	00000028 alt_dev_null
000506b0 g     F .text	00000048 alt_dcache_flush_all
000477c0 g     F .text	00000068 __hi0bits
0004d94c g     F .text	00000080 .hidden __fixdfsi
000535f0 g       *ABS*	00000000 __ram_rwdata_end
000535c8 g     O .rwdata	00000008 alt_dev_list
0004e924 g     F .text	000000f8 write
000484c8 g     F .text	000000a0 _putc_r
000519dc g       *ABS*	00000000 __ram_rodata_end
0004dd28 g     F .text	000000b0 fstat
00040b20 g     F .text	00000024 fprintf
0004c844 g     F .text	000000f4 .hidden __ledf2
00047b0c g     F .text	00000140 __pow5mult
00048e58 g     F .text	0000145c ___vfiprintf_internal_r
00055224 g     O .bss	00000004 __nlocale_changed
00040994 g     F .text	00000058 .hidden __umodsi3
0005536c g       *ABS*	00000000 end
0004fd14 g     F .text	000004d8 altera_avalon_lcd_16207_write
00040fa8 g     F .text	0000001c fseeko
00040b48 g     F .text	0000001c fseek
0004ec4c g     F .text	000000c0 altera_avalon_jtag_uart_init
000401d0 g     F .exceptions	00000074 alt_instruction_exception_entry
000512d0 g       *ABS*	00000000 __CTOR_LIST__
00072000 g       *ABS*	00000000 __alt_stack_pointer
0004db50 g     F .text	00000064 .hidden __clzsi2
0004f32c g     F .text	00000224 altera_avalon_jtag_uart_write
00046450 g     F .text	00000004 __sfp_lock_acquire
00047144 g     F .text	000000e4 memchr
000420e8 g     F .text	000021f8 ___vfprintf_internal_r
00046660 g     F .text	00000310 _free_r
00047090 g     F .text	00000010 __locale_mb_cur_max
0005111c g     F .text	00000180 __call_exitprocs
00055220 g     O .bss	00000004 __mlocale_changed
000535b0 g     O .rwdata	00000004 __malloc_sbrk_base
00040244 g     F .text	0000004c _start
0005523c g     O .bss	00000004 _alt_tick_rate
00047c4c g     F .text	00000148 __lshift
00055240 g     O .bss	00000004 _alt_nticks
0004e6a8 g     F .text	000000fc read
0004ea88 g     F .text	00000060 alt_sys_init
00041b10 g     F .text	00000060 _open_r
00051004 g     F .text	00000118 __register_exitproc
00047914 g     F .text	000001f8 __multiply
0004efb8 g     F .text	00000068 altera_avalon_jtag_uart_close
000519dc g       *ABS*	00000000 __ram_rwdata_start
000512d0 g       *ABS*	00000000 __ram_rodata_start
00055244 g     O .bss	00000028 __malloc_current_mallinfo
00048160 g     F .text	0000014c __d2b
0004eae8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00050a30 g     F .text	000000a4 alt_get_fd
00050558 g     F .text	00000158 alt_busy_sleep
0004456c g     F .text	00000054 _close_r
00050f88 g     F .text	0000007c memcmp
0004eba8 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0005536c g       *ABS*	00000000 __alt_stack_base
0004ebf8 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00044418 g     F .text	00000154 __swsetup_r
0004bdf8 g     F .text	000008e8 .hidden __divdf3
00046310 g     F .text	00000118 __sfp
000483c4 g     F .text	00000078 __copybits
00051e00 g     O .rwdata	00000408 __malloc_av_
0004645c g     F .text	00000004 __sinit_lock_release
0004c938 g     F .text	00000718 .hidden __muldf3
00041f14 g     F .text	00000054 __sread
00050928 g     F .text	00000108 alt_find_file
00050734 g     F .text	000000a4 alt_dev_llist_insert
0004e3d0 g     F .text	00000024 __malloc_lock
00040af8 g     F .text	00000028 _fprintf_r
0004e808 g     F .text	000000b0 sbrk
00046064 g     F .text	0000005c _fflush_r
0004a4e4 g     F .text	000000c4 _calloc_r
00040ae0 g     F .text	00000018 fopen
00055204 g       *ABS*	00000000 __bss_start
000419e8 g     F .text	00000128 memset
00040684 g     F .text	000001b4 main
00055234 g     O .bss	00000004 alt_envp
00055210 g     O .bss	00000004 __malloc_max_total_mem
0004eb48 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0004a4cc g     F .text	00000018 __swbuf
00050298 g     F .text	00000134 altera_avalon_lcd_16207_init
00042048 g     F .text	00000008 __sclose
00072000 g       *ABS*	00000000 __alt_heap_limit
0004a698 g     F .text	00000014 fclose
000447c0 g     F .text	00001688 _dtoa_r
000411dc g     F .text	0000080c _malloc_r
0004aa10 g     F .text	00000030 __ascii_wctomb
000535d4 g     O .rwdata	00000004 alt_errno
00046e2c g     F .text	000000c4 _fwalk
00048568 g     F .text	000000c8 putc
00040838 g     F .text	00000084 .hidden __divsi3
0004653c g     F .text	00000124 _malloc_trim_r
000512d0 g       *ABS*	00000000 __CTOR_END__
00048c68 g     F .text	000000dc strcmp
000512d0 g       *ABS*	00000000 __flash_rodata_start
000512d0 g       *ABS*	00000000 __DTOR_LIST__
0004c6e0 g     F .text	00000088 .hidden __nedf2
0004ea50 g     F .text	00000038 alt_irq_init
0004e7a4 g     F .text	00000064 alt_release_fd
0005161c g     O .rodata	00000100 .hidden __clz_tab
0005521c g     O .bss	00000004 _PathLocale
00050f3c g     F .text	00000014 atexit
000443b8 g     F .text	00000060 _write_r
000470c0 g     F .text	00000018 setlocale
000535ac g     O .rwdata	00000004 _impure_ptr
0005522c g     O .bss	00000004 alt_argc
00045e48 g     F .text	0000021c __sflush_r
00050838 g     F .text	00000060 _do_dtors
000470ac g     F .text	00000008 __locale_cjk_lang
00040b44 g     F .text	00000004 _fseek_r
00041cec g     F .text	000001d4 __srefill_r
00040020 g       .exceptions	00000000 alt_irq_entry
00047ff0 g     F .text	00000064 __ulp
00046478 g     F .text	00000018 __fp_unlock_all
000503cc g     F .text	00000060 altera_avalon_lcd_16207_write_fd
000535c0 g     O .rwdata	00000008 alt_fs_list
00040020 g       *ABS*	00000000 __ram_exceptions_start
000470d8 g     F .text	0000000c localeconv
00040000 g       *ABS*	00000000 __alt_mem_onchip_memory2
0004ddd8 g     F .text	00000050 alt_ic_isr_register
000535f0 g       *ABS*	00000000 _edata
0005536c g       *ABS*	00000000 _end
0004a6ac g     F .text	00000164 __fputwc
00040244 g       *ABS*	00000000 __ram_exceptions_end
0004f020 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0004deb0 g     F .text	0000008c alt_ic_irq_disable
00041f70 g     F .text	0000007c __swrite
000535b4 g     O .rwdata	00000004 __malloc_trim_threshold
000470a0 g     F .text	0000000c __locale_msgcharset
00050f50 g     F .text	00000038 exit
00046ef0 g     F .text	000000c4 _fwalk_reent
00047df4 g     F .text	000001fc __mdiff
000408bc g     F .text	00000074 .hidden __modsi3
000535ec g     O .rwdata	00000004 __ctype_ptr__
00072000 g       *ABS*	00000000 __alt_data_end
00040020 g     F .exceptions	00000000 alt_exception
00046454 g     F .text	00000004 __sfp_lock_release
00051759 g     O .rodata	00000101 _ctype_
000409ec g     F .text	000000f4 _fopen_r
0005129c g     F .text	00000034 _exit
0005042c g     F .text	0000012c alt_alarm_start
00041020 g     F .text	000001bc __smakebuf_r
00042050 g     F .text	00000098 strlen
0004e518 g     F .text	00000154 open
0004c768 g     F .text	000000dc .hidden __gedf2
000535bc g     O .rwdata	00000004 __wctomb
00048e40 g     F .text	00000018 __sprint_r
00050ad4 g     F .text	00000034 alt_icache_flush_all
000535d8 g     O .rwdata	00000004 alt_priority_mask
0004de28 g     F .text	00000088 alt_ic_irq_enable
000442e0 g     F .text	0000001c __vfprintf_internal
0004aa40 g     F .text	0000005c _wctomb_r
0004d050 g     F .text	000008fc .hidden __subdf3
00047828 g     F .text	000000b0 __lo0bits
000535e4 g     O .rwdata	00000008 alt_alarm_list
000507d8 g     F .text	00000060 _do_ctors
0004a950 g     F .text	000000c0 wcrtomb
0004dbf0 g     F .text	000000d0 close
0004e1c0 g     F .text	00000084 alt_load
0004a834 g     F .text	00000080 fputwc
00046458 g     F .text	00000004 __sinit_lock_acquire
0004759c g     F .text	00000120 __multadd
00047574 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00040000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   40000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   40004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   40008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   4000c:	00bffd16 	blt	zero,r2,40004 <__alt_data_end+0xfffce004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   40010:	00400134 	movhi	at,4
    ori r1, r1, %lo(_start)
   40014:	08409114 	ori	at,at,580
    jmp r1
   40018:	0800683a 	jmp	at
   4001c:	00000000 	call	0 <__reset-0x40000>

Disassembly of section .exceptions:

00040020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   40020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   40024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   40028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   4002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   40030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   40034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   40038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   4003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   40040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   40044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   40048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   4004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   40050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   40054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   40058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   4005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   40060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   40064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   40068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   4006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   40070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   40074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   40078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   4007c:	10000326 	beq	r2,zero,4008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   40080:	20000226 	beq	r4,zero,4008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   40084:	00400fc0 	call	400fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   40088:	00000706 	br	400a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   4008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   40090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   40094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   40098:	00401d00 	call	401d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   4009c:	1000021e 	bne	r2,zero,400a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   400a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   400a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   400a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   400ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   400b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   400b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   400b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   400bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   400c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   400c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   400c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   400cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   400d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   400d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   400d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   400dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   400e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   400e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   400e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   400ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   400f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   400f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   400f8:	ef80083a 	eret

000400fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   400fc:	defff904 	addi	sp,sp,-28
   40100:	dfc00615 	stw	ra,24(sp)
   40104:	df000515 	stw	fp,20(sp)
   40108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   4010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   40110:	0005313a 	rdctl	r2,ipending
   40114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   40118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   4011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   40120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   40124:	00800044 	movi	r2,1
   40128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   4012c:	e0fffb17 	ldw	r3,-20(fp)
   40130:	e0bffc17 	ldw	r2,-16(fp)
   40134:	1884703a 	and	r2,r3,r2
   40138:	10001426 	beq	r2,zero,4018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   4013c:	00800174 	movhi	r2,5
   40140:	10949b04 	addi	r2,r2,21100
   40144:	e0fffd17 	ldw	r3,-12(fp)
   40148:	180690fa 	slli	r3,r3,3
   4014c:	10c5883a 	add	r2,r2,r3
   40150:	10c00017 	ldw	r3,0(r2)
   40154:	00800174 	movhi	r2,5
   40158:	10949b04 	addi	r2,r2,21100
   4015c:	e13ffd17 	ldw	r4,-12(fp)
   40160:	200890fa 	slli	r4,r4,3
   40164:	1105883a 	add	r2,r2,r4
   40168:	10800104 	addi	r2,r2,4
   4016c:	10800017 	ldw	r2,0(r2)
   40170:	1009883a 	mov	r4,r2
   40174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   40178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   4017c:	0005313a 	rdctl	r2,ipending
   40180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   40184:	e0bfff17 	ldw	r2,-4(fp)
   40188:	00000706 	br	401a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   4018c:	e0bffc17 	ldw	r2,-16(fp)
   40190:	1085883a 	add	r2,r2,r2
   40194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   40198:	e0bffd17 	ldw	r2,-12(fp)
   4019c:	10800044 	addi	r2,r2,1
   401a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   401a4:	003fe106 	br	4012c <__alt_data_end+0xfffce12c>

    active = alt_irq_pending ();
   401a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   401ac:	e0bffb17 	ldw	r2,-20(fp)
   401b0:	103fdb1e 	bne	r2,zero,40120 <__alt_data_end+0xfffce120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   401b4:	0001883a 	nop
}
   401b8:	0001883a 	nop
   401bc:	e037883a 	mov	sp,fp
   401c0:	dfc00117 	ldw	ra,4(sp)
   401c4:	df000017 	ldw	fp,0(sp)
   401c8:	dec00204 	addi	sp,sp,8
   401cc:	f800283a 	ret

000401d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   401d0:	defffb04 	addi	sp,sp,-20
   401d4:	dfc00415 	stw	ra,16(sp)
   401d8:	df000315 	stw	fp,12(sp)
   401dc:	df000304 	addi	fp,sp,12
   401e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
   401e4:	000531fa 	rdctl	r2,exception
   401e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
   401ec:	e0bffd17 	ldw	r2,-12(fp)
   401f0:	10801f0c 	andi	r2,r2,124
   401f4:	1004d0ba 	srli	r2,r2,2
   401f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
   401fc:	0005333a 	rdctl	r2,badaddr
   40200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   40204:	d0a72417 	ldw	r2,-25456(gp)
   40208:	10000726 	beq	r2,zero,40228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   4020c:	d0a72417 	ldw	r2,-25456(gp)
   40210:	e0fffd17 	ldw	r3,-12(fp)
   40214:	e1bffe17 	ldw	r6,-8(fp)
   40218:	e17fff17 	ldw	r5,-4(fp)
   4021c:	1809883a 	mov	r4,r3
   40220:	103ee83a 	callr	r2
   40224:	00000206 	br	40230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   40228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   4022c:	0005883a 	mov	r2,zero
}
   40230:	e037883a 	mov	sp,fp
   40234:	dfc00117 	ldw	ra,4(sp)
   40238:	df000017 	ldw	fp,0(sp)
   4023c:	dec00204 	addi	sp,sp,8
   40240:	f800283a 	ret

Disassembly of section .text:

00040244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   40244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
   40248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   4024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
   40250:	00bffd16 	blt	zero,r2,40248 <__alt_data_end+0xfffce248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   40254:	06c001f4 	movhi	sp,7
    ori sp, sp, %lo(__alt_stack_pointer)
   40258:	dec80014 	ori	sp,sp,8192
    movhi gp, %hi(_gp)
   4025c:	06800174 	movhi	gp,5
    ori gp, gp, %lo(_gp)
   40260:	d6ad6a14 	ori	gp,gp,46504
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   40264:	00800174 	movhi	r2,5
    ori r2, r2, %lo(__bss_start)
   40268:	10948114 	ori	r2,r2,20996

    movhi r3, %hi(__bss_end)
   4026c:	00c00174 	movhi	r3,5
    ori r3, r3, %lo(__bss_end)
   40270:	18d4db14 	ori	r3,r3,21356

    beq r2, r3, 1f
   40274:	10c00326 	beq	r2,r3,40284 <_start+0x40>

0:
    stw zero, (r2)
   40278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   4027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   40280:	10fffd36 	bltu	r2,r3,40278 <__alt_data_end+0xfffce278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   40284:	004e1c00 	call	4e1c0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   40288:	004e3540 	call	4e354 <alt_main>

0004028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   4028c:	003fff06 	br	4028c <__alt_data_end+0xfffce28c>

00040290 <handle_button_interrupts>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void handle_button_interrupts(void* context)
#else
static void handle_button_interrupts(void* context, alt_u32 id)
#endif
{
   40290:	defffd04 	addi	sp,sp,-12
   40294:	df000215 	stw	fp,8(sp)
   40298:	df000204 	addi	fp,sp,8
   4029c:	e13fff15 	stw	r4,-4(fp)
    /* Cast context to edge_capture's type. It is important that this be 
     * declared volatile to avoid unwanted compiler optimization.
     */
    volatile int* edge_capture_ptr = (volatile int*) context;
   402a0:	e0bfff17 	ldw	r2,-4(fp)
   402a4:	e0bffe15 	stw	r2,-8(fp)
    /* Store the value in the Button's edge capture register in *context. */
    *edge_capture_ptr = IORD_ALTERA_AVALON_PIO_EDGE_CAP(BUTTON_PIO_BASE);
   402a8:	00800234 	movhi	r2,8
   402ac:	10840704 	addi	r2,r2,4124
   402b0:	10c00037 	ldwio	r3,0(r2)
   402b4:	e0bffe17 	ldw	r2,-8(fp)
   402b8:	10c00015 	stw	r3,0(r2)
    /* Reset the Button's edge capture register. */
    IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTON_PIO_BASE, 0);
   402bc:	0007883a 	mov	r3,zero
   402c0:	00800234 	movhi	r2,8
   402c4:	10840704 	addi	r2,r2,4124
   402c8:	10c00035 	stwio	r3,0(r2)
    /* 
     * Read the PIO to delay ISR exit. This is done to prevent a spurious
     * interrupt in systems with high processor -> pio latency and fast
     * interrupts.
     */
    IORD_ALTERA_AVALON_PIO_EDGE_CAP(BUTTON_PIO_BASE); 
   402cc:	00800234 	movhi	r2,8
   402d0:	10840704 	addi	r2,r2,4124
   402d4:	10800037 	ldwio	r2,0(r2)
}
   402d8:	0001883a 	nop
   402dc:	e037883a 	mov	sp,fp
   402e0:	df000017 	ldw	fp,0(sp)
   402e4:	dec00104 	addi	sp,sp,4
   402e8:	f800283a 	ret

000402ec <init_button_pio>:

/* Initialize the button_pio. */

static void init_button_pio()
{
   402ec:	defffc04 	addi	sp,sp,-16
   402f0:	dfc00315 	stw	ra,12(sp)
   402f4:	df000215 	stw	fp,8(sp)
   402f8:	df000204 	addi	fp,sp,8
    /* Recast the edge_capture pointer to match the alt_irq_register() function
     * prototype. */
    void* edge_capture_ptr = (void*) &edge_capture;
   402fc:	d0a71804 	addi	r2,gp,-25504
   40300:	e0bfff15 	stw	r2,-4(fp)
    /* Enable all 4 button interrupts. */
    IOWR_ALTERA_AVALON_PIO_IRQ_MASK(BUTTON_PIO_BASE, 0xf);
   40304:	00c003c4 	movi	r3,15
   40308:	00800234 	movhi	r2,8
   4030c:	10840604 	addi	r2,r2,4120
   40310:	10c00035 	stwio	r3,0(r2)
    /* Reset the edge capture register. */
    IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTON_PIO_BASE, 0x0);
   40314:	0007883a 	mov	r3,zero
   40318:	00800234 	movhi	r2,8
   4031c:	10840704 	addi	r2,r2,4124
   40320:	10c00035 	stwio	r3,0(r2)
    /* Register the interrupt handler. */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(BUTTON_PIO_IRQ_INTERRUPT_CONTROLLER_ID, BUTTON_PIO_IRQ, 
   40324:	d8000015 	stw	zero,0(sp)
   40328:	e1ffff17 	ldw	r7,-4(fp)
   4032c:	01800134 	movhi	r6,4
   40330:	3180a404 	addi	r6,r6,656
   40334:	01400044 	movi	r5,1
   40338:	0009883a 	mov	r4,zero
   4033c:	004ddd80 	call	4ddd8 <alt_ic_isr_register>
      handle_button_interrupts, edge_capture_ptr, 0x0);
#else
    alt_irq_register( BUTTON_PIO_IRQ, edge_capture_ptr, 
      handle_button_interrupts);
#endif
}
   40340:	0001883a 	nop
   40344:	e037883a 	mov	sp,fp
   40348:	dfc00117 	ldw	ra,4(sp)
   4034c:	df000017 	ldw	fp,0(sp)
   40350:	dec00204 	addi	sp,sp,8
   40354:	f800283a 	ret

00040358 <sevenseg_set_hex>:
 * sevenseg_set_hex() --  implements a hex digit map.
 */
 
#ifdef SEVEN_SEG_PIO_BASE
static void sevenseg_set_hex(int hex)
{
   40358:	defffe04 	addi	sp,sp,-8
   4035c:	df000115 	stw	fp,4(sp)
   40360:	df000104 	addi	fp,sp,4
   40364:	e13fff15 	stw	r4,-4(fp)
        0x88, 0xE0, 0xF2, 0xC2, 0xB0, 0xB8 };                       // a-f

    unsigned int data = segments[hex & 15] | (segments[(hex >> 4) & 15] << 8);
    */

    IOWR_ALTERA_AVALON_PIO_DATA(SEVEN_SEG_PIO_BASE, hex);
   40368:	00800234 	movhi	r2,8
   4036c:	10840004 	addi	r2,r2,4096
   40370:	e0ffff17 	ldw	r3,-4(fp)
   40374:	10c00035 	stwio	r3,0(r2)
}
   40378:	0001883a 	nop
   4037c:	e037883a 	mov	sp,fp
   40380:	df000017 	ldw	fp,0(sp)
   40384:	dec00104 	addi	sp,sp,4
   40388:	f800283a 	ret

0004038c <lcd_init>:
 * count_<device>() -- Implements the counting on the respective device.
 * handle_button_press() -- Determines what to do when one of the buttons
 * is pressed.
 */
static void lcd_init( FILE *lcd )
{
   4038c:	defffd04 	addi	sp,sp,-12
   40390:	dfc00215 	stw	ra,8(sp)
   40394:	df000115 	stw	fp,4(sp)
   40398:	df000104 	addi	fp,sp,4
   4039c:	e13fff15 	stw	r4,-4(fp)
    /* If the LCD Display exists, write a simple message on the first line. */
    LCD_PRINTF(lcd, "%c%s Counting will be displayed below...", ESC,
   403a0:	01c00174 	movhi	r7,5
   403a4:	39c4b404 	addi	r7,r7,4816
   403a8:	018006c4 	movi	r6,27
   403ac:	01400174 	movhi	r5,5
   403b0:	2944b604 	addi	r5,r5,4824
   403b4:	e13fff17 	ldw	r4,-4(fp)
   403b8:	0040b200 	call	40b20 <fprintf>
               ESC_TOP_LEFT);
}
   403bc:	0001883a 	nop
   403c0:	e037883a 	mov	sp,fp
   403c4:	dfc00117 	ldw	ra,4(sp)
   403c8:	df000017 	ldw	fp,0(sp)
   403cc:	dec00204 	addi	sp,sp,8
   403d0:	f800283a 	ret

000403d4 <initial_message>:

static void initial_message()
{
   403d4:	defffe04 	addi	sp,sp,-8
   403d8:	dfc00115 	stw	ra,4(sp)
   403dc:	df000015 	stw	fp,0(sp)
   403e0:	d839883a 	mov	fp,sp
    printf("\n\n**************************\n");
   403e4:	01000174 	movhi	r4,5
   403e8:	2104c104 	addi	r4,r4,4868
   403ec:	0041cbc0 	call	41cbc <puts>
    printf("* Hello from Nios II!    *\n");
   403f0:	01000174 	movhi	r4,5
   403f4:	2104c904 	addi	r4,r4,4900
   403f8:	0041cbc0 	call	41cbc <puts>
    printf("* Counting from 00 to ff *\n");
   403fc:	01000174 	movhi	r4,5
   40400:	2104d004 	addi	r4,r4,4928
   40404:	0041cbc0 	call	41cbc <puts>
    printf("**************************\n");
   40408:	01000174 	movhi	r4,5
   4040c:	2104d704 	addi	r4,r4,4956
   40410:	0041cbc0 	call	41cbc <puts>
}
   40414:	0001883a 	nop
   40418:	e037883a 	mov	sp,fp
   4041c:	dfc00117 	ldw	ra,4(sp)
   40420:	df000017 	ldw	fp,0(sp)
   40424:	dec00204 	addi	sp,sp,8
   40428:	f800283a 	ret

0004042c <count_led>:
 * Illuminate LEDs with the value of 'count', if they
 * exist in the system
 */

static void count_led()
{
   4042c:	deffff04 	addi	sp,sp,-4
   40430:	df000015 	stw	fp,0(sp)
   40434:	d839883a 	mov	fp,sp
#ifdef LED_PIO_BASE
    IOWR_ALTERA_AVALON_PIO_DATA(
   40438:	d0a71703 	ldbu	r2,-25508(gp)
   4043c:	10c03fcc 	andi	r3,r2,255
   40440:	00800234 	movhi	r2,8
   40444:	10840804 	addi	r2,r2,4128
   40448:	10c00035 	stwio	r3,0(r2)
        LED_PIO_BASE,
        count
        );
#endif
}
   4044c:	0001883a 	nop
   40450:	e037883a 	mov	sp,fp
   40454:	df000017 	ldw	fp,0(sp)
   40458:	dec00104 	addi	sp,sp,4
   4045c:	f800283a 	ret

00040460 <count_sevenseg>:
 * 
 * Display value of 'count' on the Seven Segment Display
 */

static void count_sevenseg()
{
   40460:	defffe04 	addi	sp,sp,-8
   40464:	dfc00115 	stw	ra,4(sp)
   40468:	df000015 	stw	fp,0(sp)
   4046c:	d839883a 	mov	fp,sp
#ifdef SEVEN_SEG_PIO_BASE
    sevenseg_set_hex(count);
   40470:	d0a71703 	ldbu	r2,-25508(gp)
   40474:	10803fcc 	andi	r2,r2,255
   40478:	1009883a 	mov	r4,r2
   4047c:	00403580 	call	40358 <sevenseg_set_hex>
#endif
}
   40480:	0001883a 	nop
   40484:	e037883a 	mov	sp,fp
   40488:	dfc00117 	ldw	ra,4(sp)
   4048c:	df000017 	ldw	fp,0(sp)
   40490:	dec00204 	addi	sp,sp,8
   40494:	f800283a 	ret

00040498 <count_lcd>:
 * is treated as an I/O device (i.e.: using fprintf).  You
 * can read more about HAL drivers <link/reference here>.
 */

static void count_lcd( void* arg )
{
   40498:	defffb04 	addi	sp,sp,-20
   4049c:	dfc00415 	stw	ra,16(sp)
   404a0:	df000315 	stw	fp,12(sp)
   404a4:	df000304 	addi	fp,sp,12
   404a8:	e13fff15 	stw	r4,-4(fp)
    FILE* __attribute__ ((unused))  lcd;  /* Attribute suppresses "unused variable" warning. */
    lcd = (FILE*) arg;
   404ac:	e0bfff17 	ldw	r2,-4(fp)
   404b0:	e0bffe15 	stw	r2,-8(fp)
    LCD_PRINTF(lcd, "%c%s 0x%x\n", ESC, ESC_COL2_INDENT5, count);
   404b4:	d0a71703 	ldbu	r2,-25508(gp)
   404b8:	10803fcc 	andi	r2,r2,255
   404bc:	d8800015 	stw	r2,0(sp)
   404c0:	01c00174 	movhi	r7,5
   404c4:	39c4de04 	addi	r7,r7,4984
   404c8:	018006c4 	movi	r6,27
   404cc:	01400174 	movhi	r5,5
   404d0:	2944e004 	addi	r5,r5,4992
   404d4:	e13ffe17 	ldw	r4,-8(fp)
   404d8:	0040b200 	call	40b20 <fprintf>
}
   404dc:	0001883a 	nop
   404e0:	e037883a 	mov	sp,fp
   404e4:	dfc00117 	ldw	ra,4(sp)
   404e8:	df000017 	ldw	fp,0(sp)
   404ec:	dec00204 	addi	sp,sp,8
   404f0:	f800283a 	ret

000404f4 <count_all>:

/* count_all merely combines all three peripherals counting */

static void count_all( void* arg )
{
   404f4:	defffd04 	addi	sp,sp,-12
   404f8:	dfc00215 	stw	ra,8(sp)
   404fc:	df000115 	stw	fp,4(sp)
   40500:	df000104 	addi	fp,sp,4
   40504:	e13fff15 	stw	r4,-4(fp)
    count_led();
   40508:	004042c0 	call	4042c <count_led>
    count_sevenseg();
   4050c:	00404600 	call	40460 <count_sevenseg>
    count_lcd( arg );
   40510:	e13fff17 	ldw	r4,-4(fp)
   40514:	00404980 	call	40498 <count_lcd>
    printf("%02x,  ", count);
   40518:	d0a71703 	ldbu	r2,-25508(gp)
   4051c:	10803fcc 	andi	r2,r2,255
   40520:	100b883a 	mov	r5,r2
   40524:	01000174 	movhi	r4,5
   40528:	2104e304 	addi	r4,r4,5004
   4052c:	0041ba00 	call	41ba0 <printf>
}
   40530:	0001883a 	nop
   40534:	e037883a 	mov	sp,fp
   40538:	dfc00117 	ldw	ra,4(sp)
   4053c:	df000017 	ldw	fp,0(sp)
   40540:	dec00204 	addi	sp,sp,8
   40544:	f800283a 	ret

00040548 <handle_button_press>:
  

static void handle_button_press(alt_u8 type, FILE *lcd)
{
   40548:	defffc04 	addi	sp,sp,-16
   4054c:	dfc00315 	stw	ra,12(sp)
   40550:	df000215 	stw	fp,8(sp)
   40554:	df000204 	addi	fp,sp,8
   40558:	2005883a 	mov	r2,r4
   4055c:	e17fff15 	stw	r5,-4(fp)
   40560:	e0bffe05 	stb	r2,-8(fp)
    /* Button press actions while counting. */
    if (type == 'c')
   40564:	e0bffe03 	ldbu	r2,-8(fp)
   40568:	108018d8 	cmpnei	r2,r2,99
   4056c:	10001b1e 	bne	r2,zero,405dc <handle_button_press+0x94>
    {
        switch (edge_capture) 
   40570:	d0a71817 	ldw	r2,-25504(gp)
   40574:	10c000a0 	cmpeqi	r3,r2,2
   40578:	18000c1e 	bne	r3,zero,405ac <handle_button_press+0x64>
   4057c:	10c000c8 	cmpgei	r3,r2,3
   40580:	1800031e 	bne	r3,zero,40590 <handle_button_press+0x48>
   40584:	10800060 	cmpeqi	r2,r2,1
   40588:	1000061e 	bne	r2,zero,405a4 <handle_button_press+0x5c>
   4058c:	00000f06 	br	405cc <handle_button_press+0x84>
   40590:	10c00120 	cmpeqi	r3,r2,4
   40594:	1800071e 	bne	r3,zero,405b4 <handle_button_press+0x6c>
   40598:	10800220 	cmpeqi	r2,r2,8
   4059c:	1000081e 	bne	r2,zero,405c0 <handle_button_press+0x78>
   405a0:	00000a06 	br	405cc <handle_button_press+0x84>
        {
            /* Button 1:  Output counting to LED only. */
        case 0x1:
            count_led();
   405a4:	004042c0 	call	4042c <count_led>
            break;
   405a8:	00003006 	br	4066c <handle_button_press+0x124>
            /* Button 2:  Output counting to SEVEN SEG only. */
        case 0x2:
            count_sevenseg();
   405ac:	00404600 	call	40460 <count_sevenseg>
            break;
   405b0:	00002e06 	br	4066c <handle_button_press+0x124>
            /* Button 3:  Output counting to D only. */
        case 0x4:
            count_lcd( lcd );
   405b4:	e13fff17 	ldw	r4,-4(fp)
   405b8:	00404980 	call	40498 <count_lcd>
            break;
   405bc:	00002b06 	br	4066c <handle_button_press+0x124>
            /* Button 4:  Output counting to LED, SEVEN_SEG, and D. */ 
        case 0x8:
            count_all( lcd );
   405c0:	e13fff17 	ldw	r4,-4(fp)
   405c4:	00404f40 	call	404f4 <count_all>
            break;
   405c8:	00002806 	br	4066c <handle_button_press+0x124>
            /* If value ends up being something different (shouldn't) do
               same as 8. */
        default:
            count_all( lcd );
   405cc:	e13fff17 	ldw	r4,-4(fp)
   405d0:	00404f40 	call	404f4 <count_all>
            break;
   405d4:	0001883a 	nop
   405d8:	00002406 	br	4066c <handle_button_press+0x124>
        }
    }
    /* If 'type' is anything else, assume we're "waiting"...*/
    else
    {
        switch (edge_capture)
   405dc:	d0a71817 	ldw	r2,-25504(gp)
   405e0:	10c000a0 	cmpeqi	r3,r2,2
   405e4:	18000f1e 	bne	r3,zero,40624 <handle_button_press+0xdc>
   405e8:	10c000c8 	cmpgei	r3,r2,3
   405ec:	1800031e 	bne	r3,zero,405fc <handle_button_press+0xb4>
   405f0:	10800060 	cmpeqi	r2,r2,1
   405f4:	1000061e 	bne	r2,zero,40610 <handle_button_press+0xc8>
   405f8:	00001906 	br	40660 <handle_button_press+0x118>
   405fc:	10c00120 	cmpeqi	r3,r2,4
   40600:	18000d1e 	bne	r3,zero,40638 <handle_button_press+0xf0>
   40604:	10800220 	cmpeqi	r2,r2,8
   40608:	1000101e 	bne	r2,zero,4064c <handle_button_press+0x104>
   4060c:	00001406 	br	40660 <handle_button_press+0x118>
        {
        case 0x1:
            printf( "Button 1\n");
   40610:	01000174 	movhi	r4,5
   40614:	2104e504 	addi	r4,r4,5012
   40618:	0041cbc0 	call	41cbc <puts>
            edge_capture = 0;
   4061c:	d0271815 	stw	zero,-25504(gp)
            break;
   40620:	00001206 	br	4066c <handle_button_press+0x124>
        case 0x2:
            printf( "Button 2\n");
   40624:	01000174 	movhi	r4,5
   40628:	2104e804 	addi	r4,r4,5024
   4062c:	0041cbc0 	call	41cbc <puts>
            edge_capture = 0;
   40630:	d0271815 	stw	zero,-25504(gp)
            break;
   40634:	00000d06 	br	4066c <handle_button_press+0x124>
        case 0x4:
            printf( "Button 3\n");
   40638:	01000174 	movhi	r4,5
   4063c:	2104eb04 	addi	r4,r4,5036
   40640:	0041cbc0 	call	41cbc <puts>
            edge_capture = 0;
   40644:	d0271815 	stw	zero,-25504(gp)
            break;
   40648:	00000806 	br	4066c <handle_button_press+0x124>
        case 0x8:
            printf( "Button 4\n");
   4064c:	01000174 	movhi	r4,5
   40650:	2104ee04 	addi	r4,r4,5048
   40654:	0041cbc0 	call	41cbc <puts>
            edge_capture = 0;
   40658:	d0271815 	stw	zero,-25504(gp)
            break;
   4065c:	00000306 	br	4066c <handle_button_press+0x124>
        default:
            printf( "Button press UNKNOWN!!\n");
   40660:	01000174 	movhi	r4,5
   40664:	2104f104 	addi	r4,r4,5060
   40668:	0041cbc0 	call	41cbc <puts>
        }
    }
}
   4066c:	0001883a 	nop
   40670:	e037883a 	mov	sp,fp
   40674:	dfc00117 	ldw	ra,4(sp)
   40678:	df000017 	ldw	fp,0(sp)
   4067c:	dec00204 	addi	sp,sp,8
   40680:	f800283a 	ret

00040684 <main>:
 * NOTE:  References to Buttons 1-4 correspond to SW0-SW3 on the Development   *
 * Board.                                                                      *
 ******************************************************************************/

int main(void)
{ 
   40684:	defff704 	addi	sp,sp,-36
   40688:	dfc00815 	stw	ra,32(sp)
   4068c:	df000715 	stw	fp,28(sp)
   40690:	df000704 	addi	fp,sp,28

    int i;
    int  __attribute__ ((unused))  wait_time;  // Attribute suppresses "var set but not used" warning.
    FILE * lcd;

    count = 0;
   40694:	d0271705 	stb	zero,-25508(gp)

    // Initialize the LCD, if there is one.
    lcd = LCD_OPEN();
   40698:	01400174 	movhi	r5,5
   4069c:	2944f704 	addi	r5,r5,5084
   406a0:	01000174 	movhi	r4,5
   406a4:	2104f804 	addi	r4,r4,5088
   406a8:	0040ae00 	call	40ae0 <fopen>
   406ac:	e0bffe15 	stw	r2,-8(fp)
    if(lcd != NULL) {lcd_init( lcd );}
   406b0:	e0bffe17 	ldw	r2,-8(fp)
   406b4:	10000226 	beq	r2,zero,406c0 <main+0x3c>
   406b8:	e13ffe17 	ldw	r4,-8(fp)
   406bc:	004038c0 	call	4038c <lcd_init>
    
    // Initialize the button pio.

#ifdef BUTTON_PIO_BASE
    init_button_pio();
   406c0:	00402ec0 	call	402ec <init_button_pio>
#endif

// Initial message to output.

    initial_message();
   406c4:	00403d40 	call	403d4 <initial_message>

// Continue 0-ff counting loop.

    while( 1 ) 
    {
        usleep(100000);
   406c8:	010000b4 	movhi	r4,2
   406cc:	2121a804 	addi	r4,r4,-31072
   406d0:	004e8b80 	call	4e8b8 <usleep>
        if (edge_capture != 0)
   406d4:	d0a71817 	ldw	r2,-25504(gp)
   406d8:	10000426 	beq	r2,zero,406ec <main+0x68>
        {
            // Handle button presses while counting...
            handle_button_press('c', lcd);
   406dc:	e17ffe17 	ldw	r5,-8(fp)
   406e0:	010018c4 	movi	r4,99
   406e4:	00405480 	call	40548 <handle_button_press>
   406e8:	00000206 	br	406f4 <main+0x70>
        }
        // If no button presses, try to output counting to all.
        else
        {
            count_all( lcd );
   406ec:	e13ffe17 	ldw	r4,-8(fp)
   406f0:	00404f40 	call	404f4 <count_all>
        }
        // If done counting, wait about 7 seconds. Detect button presses while waiting.
        if( count == 0xff )
   406f4:	d0a71703 	ldbu	r2,-25508(gp)
   406f8:	10803fcc 	andi	r2,r2,255
   406fc:	10803fd8 	cmpnei	r2,r2,255
   40700:	1000491e 	bne	r2,zero,40828 <main+0x1a4>
        {
            LCD_PRINTF(lcd, "%c%s %c%s %c%s Waiting...\n", ESC, ESC_TOP_LEFT,
   40704:	00800174 	movhi	r2,5
   40708:	10850404 	addi	r2,r2,5136
   4070c:	d8800315 	stw	r2,12(sp)
   40710:	008006c4 	movi	r2,27
   40714:	d8800215 	stw	r2,8(sp)
   40718:	00800174 	movhi	r2,5
   4071c:	10850604 	addi	r2,r2,5144
   40720:	d8800115 	stw	r2,4(sp)
   40724:	008006c4 	movi	r2,27
   40728:	d8800015 	stw	r2,0(sp)
   4072c:	01c00174 	movhi	r7,5
   40730:	39c4b404 	addi	r7,r7,4816
   40734:	018006c4 	movi	r6,27
   40738:	01400174 	movhi	r5,5
   4073c:	2944fd04 	addi	r5,r5,5108
   40740:	e13ffe17 	ldw	r4,-8(fp)
   40744:	0040b200 	call	40b20 <fprintf>
                       ESC, ESC_CLEAR, ESC, ESC_COL1_INDENT5);
            printf("\nWaiting...");
   40748:	01000174 	movhi	r4,5
   4074c:	21050704 	addi	r4,r4,5148
   40750:	0041ba00 	call	41ba0 <printf>
            edge_capture = 0; // Reset to 0 during wait/pause period.
   40754:	d0271815 	stw	zero,-25504(gp)

            // Clear the 2nd. line of the LCD screen.
            LCD_PRINTF(lcd, "%c%s, %c%s", ESC, ESC_COL2_INDENT5, ESC,
   40758:	00800174 	movhi	r2,5
   4075c:	10850604 	addi	r2,r2,5144
   40760:	d8800115 	stw	r2,4(sp)
   40764:	008006c4 	movi	r2,27
   40768:	d8800015 	stw	r2,0(sp)
   4076c:	01c00174 	movhi	r7,5
   40770:	39c4de04 	addi	r7,r7,4984
   40774:	018006c4 	movi	r6,27
   40778:	01400174 	movhi	r5,5
   4077c:	29450a04 	addi	r5,r5,5160
   40780:	e13ffe17 	ldw	r4,-8(fp)
   40784:	0040b200 	call	40b20 <fprintf>
                       ESC_CLEAR);
            wait_time = 0;
   40788:	e03fff15 	stw	zero,-4(fp)
            for (i = 0; i<70; ++i)
   4078c:	e03ffd15 	stw	zero,-12(fp)
   40790:	00001f06 	br	40810 <main+0x18c>
            {
                printf(".");
   40794:	01000b84 	movi	r4,46
   40798:	0041be40 	call	41be4 <putchar>
                wait_time = i/10;
   4079c:	e0bffd17 	ldw	r2,-12(fp)
   407a0:	01400284 	movi	r5,10
   407a4:	1009883a 	mov	r4,r2
   407a8:	00408380 	call	40838 <__divsi3>
   407ac:	e0bfff15 	stw	r2,-4(fp)
                LCD_PRINTF(lcd, "%c%s %ds\n", ESC, ESC_COL2_INDENT5,
   407b0:	e0bfff17 	ldw	r2,-4(fp)
   407b4:	10800044 	addi	r2,r2,1
   407b8:	d8800015 	stw	r2,0(sp)
   407bc:	01c00174 	movhi	r7,5
   407c0:	39c4de04 	addi	r7,r7,4984
   407c4:	018006c4 	movi	r6,27
   407c8:	01400174 	movhi	r5,5
   407cc:	29450d04 	addi	r5,r5,5172
   407d0:	e13ffe17 	ldw	r4,-8(fp)
   407d4:	0040b200 	call	40b20 <fprintf>
                    wait_time+1);

                if (edge_capture != 0) 
   407d8:	d0a71817 	ldw	r2,-25504(gp)
   407dc:	10000626 	beq	r2,zero,407f8 <main+0x174>
                {
                    printf( "\nYou pushed:  " );
   407e0:	01000174 	movhi	r4,5
   407e4:	21051004 	addi	r4,r4,5184
   407e8:	0041ba00 	call	41ba0 <printf>
                    handle_button_press('w', lcd);
   407ec:	e17ffe17 	ldw	r5,-8(fp)
   407f0:	01001dc4 	movi	r4,119
   407f4:	00405480 	call	40548 <handle_button_press>
                }
                usleep(100000); // Sleep for 0.1s.
   407f8:	010000b4 	movhi	r4,2
   407fc:	2121a804 	addi	r4,r4,-31072
   40800:	004e8b80 	call	4e8b8 <usleep>

            // Clear the 2nd. line of the LCD screen.
            LCD_PRINTF(lcd, "%c%s, %c%s", ESC, ESC_COL2_INDENT5, ESC,
                       ESC_CLEAR);
            wait_time = 0;
            for (i = 0; i<70; ++i)
   40804:	e0bffd17 	ldw	r2,-12(fp)
   40808:	10800044 	addi	r2,r2,1
   4080c:	e0bffd15 	stw	r2,-12(fp)
   40810:	e0bffd17 	ldw	r2,-12(fp)
   40814:	10801190 	cmplti	r2,r2,70
   40818:	103fde1e 	bne	r2,zero,40794 <__alt_data_end+0xfffce794>
                    handle_button_press('w', lcd);
                }
                usleep(100000); // Sleep for 0.1s.
            }
            // Output the "loop start" messages before looping, again.
            initial_message();
   4081c:	00403d40 	call	403d4 <initial_message>
            lcd_init( lcd );
   40820:	e13ffe17 	ldw	r4,-8(fp)
   40824:	004038c0 	call	4038c <lcd_init>
        }
        count++;
   40828:	d0a71703 	ldbu	r2,-25508(gp)
   4082c:	10800044 	addi	r2,r2,1
   40830:	d0a71705 	stb	r2,-25508(gp)
    }
   40834:	003fa406 	br	406c8 <__alt_data_end+0xfffce6c8>

00040838 <__divsi3>:
   40838:	20001b16 	blt	r4,zero,408a8 <__divsi3+0x70>
   4083c:	000f883a 	mov	r7,zero
   40840:	28001616 	blt	r5,zero,4089c <__divsi3+0x64>
   40844:	200d883a 	mov	r6,r4
   40848:	29001a2e 	bgeu	r5,r4,408b4 <__divsi3+0x7c>
   4084c:	00800804 	movi	r2,32
   40850:	00c00044 	movi	r3,1
   40854:	00000106 	br	4085c <__divsi3+0x24>
   40858:	10000d26 	beq	r2,zero,40890 <__divsi3+0x58>
   4085c:	294b883a 	add	r5,r5,r5
   40860:	10bfffc4 	addi	r2,r2,-1
   40864:	18c7883a 	add	r3,r3,r3
   40868:	293ffb36 	bltu	r5,r4,40858 <__alt_data_end+0xfffce858>
   4086c:	0005883a 	mov	r2,zero
   40870:	18000726 	beq	r3,zero,40890 <__divsi3+0x58>
   40874:	0005883a 	mov	r2,zero
   40878:	31400236 	bltu	r6,r5,40884 <__divsi3+0x4c>
   4087c:	314dc83a 	sub	r6,r6,r5
   40880:	10c4b03a 	or	r2,r2,r3
   40884:	1806d07a 	srli	r3,r3,1
   40888:	280ad07a 	srli	r5,r5,1
   4088c:	183ffa1e 	bne	r3,zero,40878 <__alt_data_end+0xfffce878>
   40890:	38000126 	beq	r7,zero,40898 <__divsi3+0x60>
   40894:	0085c83a 	sub	r2,zero,r2
   40898:	f800283a 	ret
   4089c:	014bc83a 	sub	r5,zero,r5
   408a0:	39c0005c 	xori	r7,r7,1
   408a4:	003fe706 	br	40844 <__alt_data_end+0xfffce844>
   408a8:	0109c83a 	sub	r4,zero,r4
   408ac:	01c00044 	movi	r7,1
   408b0:	003fe306 	br	40840 <__alt_data_end+0xfffce840>
   408b4:	00c00044 	movi	r3,1
   408b8:	003fee06 	br	40874 <__alt_data_end+0xfffce874>

000408bc <__modsi3>:
   408bc:	20001716 	blt	r4,zero,4091c <__modsi3+0x60>
   408c0:	000f883a 	mov	r7,zero
   408c4:	2005883a 	mov	r2,r4
   408c8:	28001216 	blt	r5,zero,40914 <__modsi3+0x58>
   408cc:	2900162e 	bgeu	r5,r4,40928 <__modsi3+0x6c>
   408d0:	01800804 	movi	r6,32
   408d4:	00c00044 	movi	r3,1
   408d8:	00000106 	br	408e0 <__modsi3+0x24>
   408dc:	30000a26 	beq	r6,zero,40908 <__modsi3+0x4c>
   408e0:	294b883a 	add	r5,r5,r5
   408e4:	31bfffc4 	addi	r6,r6,-1
   408e8:	18c7883a 	add	r3,r3,r3
   408ec:	293ffb36 	bltu	r5,r4,408dc <__alt_data_end+0xfffce8dc>
   408f0:	18000526 	beq	r3,zero,40908 <__modsi3+0x4c>
   408f4:	1806d07a 	srli	r3,r3,1
   408f8:	11400136 	bltu	r2,r5,40900 <__modsi3+0x44>
   408fc:	1145c83a 	sub	r2,r2,r5
   40900:	280ad07a 	srli	r5,r5,1
   40904:	183ffb1e 	bne	r3,zero,408f4 <__alt_data_end+0xfffce8f4>
   40908:	38000126 	beq	r7,zero,40910 <__modsi3+0x54>
   4090c:	0085c83a 	sub	r2,zero,r2
   40910:	f800283a 	ret
   40914:	014bc83a 	sub	r5,zero,r5
   40918:	003fec06 	br	408cc <__alt_data_end+0xfffce8cc>
   4091c:	0109c83a 	sub	r4,zero,r4
   40920:	01c00044 	movi	r7,1
   40924:	003fe706 	br	408c4 <__alt_data_end+0xfffce8c4>
   40928:	00c00044 	movi	r3,1
   4092c:	003ff106 	br	408f4 <__alt_data_end+0xfffce8f4>

00040930 <__udivsi3>:
   40930:	200d883a 	mov	r6,r4
   40934:	2900152e 	bgeu	r5,r4,4098c <__udivsi3+0x5c>
   40938:	28001416 	blt	r5,zero,4098c <__udivsi3+0x5c>
   4093c:	00800804 	movi	r2,32
   40940:	00c00044 	movi	r3,1
   40944:	00000206 	br	40950 <__udivsi3+0x20>
   40948:	10000e26 	beq	r2,zero,40984 <__udivsi3+0x54>
   4094c:	28000516 	blt	r5,zero,40964 <__udivsi3+0x34>
   40950:	294b883a 	add	r5,r5,r5
   40954:	10bfffc4 	addi	r2,r2,-1
   40958:	18c7883a 	add	r3,r3,r3
   4095c:	293ffa36 	bltu	r5,r4,40948 <__alt_data_end+0xfffce948>
   40960:	18000826 	beq	r3,zero,40984 <__udivsi3+0x54>
   40964:	0005883a 	mov	r2,zero
   40968:	31400236 	bltu	r6,r5,40974 <__udivsi3+0x44>
   4096c:	314dc83a 	sub	r6,r6,r5
   40970:	10c4b03a 	or	r2,r2,r3
   40974:	1806d07a 	srli	r3,r3,1
   40978:	280ad07a 	srli	r5,r5,1
   4097c:	183ffa1e 	bne	r3,zero,40968 <__alt_data_end+0xfffce968>
   40980:	f800283a 	ret
   40984:	0005883a 	mov	r2,zero
   40988:	f800283a 	ret
   4098c:	00c00044 	movi	r3,1
   40990:	003ff406 	br	40964 <__alt_data_end+0xfffce964>

00040994 <__umodsi3>:
   40994:	2005883a 	mov	r2,r4
   40998:	2900122e 	bgeu	r5,r4,409e4 <__umodsi3+0x50>
   4099c:	28001116 	blt	r5,zero,409e4 <__umodsi3+0x50>
   409a0:	01800804 	movi	r6,32
   409a4:	00c00044 	movi	r3,1
   409a8:	00000206 	br	409b4 <__umodsi3+0x20>
   409ac:	30000c26 	beq	r6,zero,409e0 <__umodsi3+0x4c>
   409b0:	28000516 	blt	r5,zero,409c8 <__umodsi3+0x34>
   409b4:	294b883a 	add	r5,r5,r5
   409b8:	31bfffc4 	addi	r6,r6,-1
   409bc:	18c7883a 	add	r3,r3,r3
   409c0:	293ffa36 	bltu	r5,r4,409ac <__alt_data_end+0xfffce9ac>
   409c4:	18000626 	beq	r3,zero,409e0 <__umodsi3+0x4c>
   409c8:	1806d07a 	srli	r3,r3,1
   409cc:	11400136 	bltu	r2,r5,409d4 <__umodsi3+0x40>
   409d0:	1145c83a 	sub	r2,r2,r5
   409d4:	280ad07a 	srli	r5,r5,1
   409d8:	183ffb1e 	bne	r3,zero,409c8 <__alt_data_end+0xfffce9c8>
   409dc:	f800283a 	ret
   409e0:	f800283a 	ret
   409e4:	00c00044 	movi	r3,1
   409e8:	003ff706 	br	409c8 <__alt_data_end+0xfffce9c8>

000409ec <_fopen_r>:
   409ec:	defffa04 	addi	sp,sp,-24
   409f0:	3005883a 	mov	r2,r6
   409f4:	dcc00415 	stw	r19,16(sp)
   409f8:	d80d883a 	mov	r6,sp
   409fc:	2827883a 	mov	r19,r5
   40a00:	100b883a 	mov	r5,r2
   40a04:	dc800315 	stw	r18,12(sp)
   40a08:	dfc00515 	stw	ra,20(sp)
   40a0c:	dc400215 	stw	r17,8(sp)
   40a10:	dc000115 	stw	r16,4(sp)
   40a14:	2025883a 	mov	r18,r4
   40a18:	00464900 	call	46490 <__sflags>
   40a1c:	10002726 	beq	r2,zero,40abc <_fopen_r+0xd0>
   40a20:	9009883a 	mov	r4,r18
   40a24:	1023883a 	mov	r17,r2
   40a28:	00463100 	call	46310 <__sfp>
   40a2c:	1021883a 	mov	r16,r2
   40a30:	10002226 	beq	r2,zero,40abc <_fopen_r+0xd0>
   40a34:	d9800017 	ldw	r6,0(sp)
   40a38:	01c06d84 	movi	r7,438
   40a3c:	980b883a 	mov	r5,r19
   40a40:	9009883a 	mov	r4,r18
   40a44:	0041b100 	call	41b10 <_open_r>
   40a48:	10001916 	blt	r2,zero,40ab0 <_fopen_r+0xc4>
   40a4c:	8080038d 	sth	r2,14(r16)
   40a50:	00800134 	movhi	r2,4
   40a54:	1087c504 	addi	r2,r2,7956
   40a58:	80800815 	stw	r2,32(r16)
   40a5c:	00800134 	movhi	r2,4
   40a60:	1087dc04 	addi	r2,r2,8048
   40a64:	80800915 	stw	r2,36(r16)
   40a68:	00800134 	movhi	r2,4
   40a6c:	1087fb04 	addi	r2,r2,8172
   40a70:	80800a15 	stw	r2,40(r16)
   40a74:	00800134 	movhi	r2,4
   40a78:	10881204 	addi	r2,r2,8264
   40a7c:	8440030d 	sth	r17,12(r16)
   40a80:	84000715 	stw	r16,28(r16)
   40a84:	80800b15 	stw	r2,44(r16)
   40a88:	8c40400c 	andi	r17,r17,256
   40a8c:	88000d1e 	bne	r17,zero,40ac4 <_fopen_r+0xd8>
   40a90:	8005883a 	mov	r2,r16
   40a94:	dfc00517 	ldw	ra,20(sp)
   40a98:	dcc00417 	ldw	r19,16(sp)
   40a9c:	dc800317 	ldw	r18,12(sp)
   40aa0:	dc400217 	ldw	r17,8(sp)
   40aa4:	dc000117 	ldw	r16,4(sp)
   40aa8:	dec00604 	addi	sp,sp,24
   40aac:	f800283a 	ret
   40ab0:	00464500 	call	46450 <__sfp_lock_acquire>
   40ab4:	8000030d 	sth	zero,12(r16)
   40ab8:	00464540 	call	46454 <__sfp_lock_release>
   40abc:	0005883a 	mov	r2,zero
   40ac0:	003ff406 	br	40a94 <__alt_data_end+0xfffcea94>
   40ac4:	01c00084 	movi	r7,2
   40ac8:	000d883a 	mov	r6,zero
   40acc:	800b883a 	mov	r5,r16
   40ad0:	9009883a 	mov	r4,r18
   40ad4:	0040b440 	call	40b44 <_fseek_r>
   40ad8:	8005883a 	mov	r2,r16
   40adc:	003fed06 	br	40a94 <__alt_data_end+0xfffcea94>

00040ae0 <fopen>:
   40ae0:	00800174 	movhi	r2,5
   40ae4:	108d6b04 	addi	r2,r2,13740
   40ae8:	280d883a 	mov	r6,r5
   40aec:	200b883a 	mov	r5,r4
   40af0:	11000017 	ldw	r4,0(r2)
   40af4:	00409ec1 	jmpi	409ec <_fopen_r>

00040af8 <_fprintf_r>:
   40af8:	defffe04 	addi	sp,sp,-8
   40afc:	2809883a 	mov	r4,r5
   40b00:	300b883a 	mov	r5,r6
   40b04:	dfc00015 	stw	ra,0(sp)
   40b08:	d9c00115 	stw	r7,4(sp)
   40b0c:	d9800104 	addi	r6,sp,4
   40b10:	00442e00 	call	442e0 <__vfprintf_internal>
   40b14:	dfc00017 	ldw	ra,0(sp)
   40b18:	dec00204 	addi	sp,sp,8
   40b1c:	f800283a 	ret

00040b20 <fprintf>:
   40b20:	defffd04 	addi	sp,sp,-12
   40b24:	dfc00015 	stw	ra,0(sp)
   40b28:	d9800115 	stw	r6,4(sp)
   40b2c:	d9c00215 	stw	r7,8(sp)
   40b30:	d9800104 	addi	r6,sp,4
   40b34:	00442e00 	call	442e0 <__vfprintf_internal>
   40b38:	dfc00017 	ldw	ra,0(sp)
   40b3c:	dec00304 	addi	sp,sp,12
   40b40:	f800283a 	ret

00040b44 <_fseek_r>:
   40b44:	0040b641 	jmpi	40b64 <_fseeko_r>

00040b48 <fseek>:
   40b48:	00800174 	movhi	r2,5
   40b4c:	108d6b04 	addi	r2,r2,13740
   40b50:	300f883a 	mov	r7,r6
   40b54:	280d883a 	mov	r6,r5
   40b58:	200b883a 	mov	r5,r4
   40b5c:	11000017 	ldw	r4,0(r2)
   40b60:	0040b641 	jmpi	40b64 <_fseeko_r>

00040b64 <_fseeko_r>:
   40b64:	deffe804 	addi	sp,sp,-96
   40b68:	dd401415 	stw	r21,80(sp)
   40b6c:	dc801115 	stw	r18,68(sp)
   40b70:	dc401015 	stw	r17,64(sp)
   40b74:	dc000f15 	stw	r16,60(sp)
   40b78:	dfc01715 	stw	ra,92(sp)
   40b7c:	ddc01615 	stw	r23,88(sp)
   40b80:	dd801515 	stw	r22,84(sp)
   40b84:	dd001315 	stw	r20,76(sp)
   40b88:	dcc01215 	stw	r19,72(sp)
   40b8c:	2023883a 	mov	r17,r4
   40b90:	2821883a 	mov	r16,r5
   40b94:	302b883a 	mov	r21,r6
   40b98:	3825883a 	mov	r18,r7
   40b9c:	20000226 	beq	r4,zero,40ba8 <_fseeko_r+0x44>
   40ba0:	20800e17 	ldw	r2,56(r4)
   40ba4:	10005a26 	beq	r2,zero,40d10 <_fseeko_r+0x1ac>
   40ba8:	8080030b 	ldhu	r2,12(r16)
   40bac:	00c04204 	movi	r3,264
   40bb0:	1080420c 	andi	r2,r2,264
   40bb4:	10c05b26 	beq	r2,r3,40d24 <_fseeko_r+0x1c0>
   40bb8:	85000a17 	ldw	r20,40(r16)
   40bbc:	a000f626 	beq	r20,zero,40f98 <_fseeko_r+0x434>
   40bc0:	00800044 	movi	r2,1
   40bc4:	90803e26 	beq	r18,r2,40cc0 <_fseeko_r+0x15c>
   40bc8:	00800084 	movi	r2,2
   40bcc:	90801026 	beq	r18,r2,40c10 <_fseeko_r+0xac>
   40bd0:	90000f26 	beq	r18,zero,40c10 <_fseeko_r+0xac>
   40bd4:	00800584 	movi	r2,22
   40bd8:	88800015 	stw	r2,0(r17)
   40bdc:	04ffffc4 	movi	r19,-1
   40be0:	9805883a 	mov	r2,r19
   40be4:	dfc01717 	ldw	ra,92(sp)
   40be8:	ddc01617 	ldw	r23,88(sp)
   40bec:	dd801517 	ldw	r22,84(sp)
   40bf0:	dd401417 	ldw	r21,80(sp)
   40bf4:	dd001317 	ldw	r20,76(sp)
   40bf8:	dcc01217 	ldw	r19,72(sp)
   40bfc:	dc801117 	ldw	r18,68(sp)
   40c00:	dc401017 	ldw	r17,64(sp)
   40c04:	dc000f17 	ldw	r16,60(sp)
   40c08:	dec01804 	addi	sp,sp,96
   40c0c:	f800283a 	ret
   40c10:	80800417 	ldw	r2,16(r16)
   40c14:	002f883a 	mov	r23,zero
   40c18:	0027883a 	mov	r19,zero
   40c1c:	1000cb26 	beq	r2,zero,40f4c <_fseeko_r+0x3e8>
   40c20:	8080030b 	ldhu	r2,12(r16)
   40c24:	10c2068c 	andi	r3,r2,2074
   40c28:	1800071e 	bne	r3,zero,40c48 <_fseeko_r+0xe4>
   40c2c:	10c1000c 	andi	r3,r2,1024
   40c30:	1800451e 	bne	r3,zero,40d48 <_fseeko_r+0x1e4>
   40c34:	00c00134 	movhi	r3,4
   40c38:	18c7fb04 	addi	r3,r3,8172
   40c3c:	a0c0b726 	beq	r20,r3,40f1c <_fseeko_r+0x3b8>
   40c40:	10820014 	ori	r2,r2,2048
   40c44:	8080030d 	sth	r2,12(r16)
   40c48:	800b883a 	mov	r5,r16
   40c4c:	8809883a 	mov	r4,r17
   40c50:	00460640 	call	46064 <_fflush_r>
   40c54:	1027883a 	mov	r19,r2
   40c58:	103fe01e 	bne	r2,zero,40bdc <__alt_data_end+0xfffcebdc>
   40c5c:	81400717 	ldw	r5,28(r16)
   40c60:	900f883a 	mov	r7,r18
   40c64:	a80d883a 	mov	r6,r21
   40c68:	8809883a 	mov	r4,r17
   40c6c:	a03ee83a 	callr	r20
   40c70:	00ffffc4 	movi	r3,-1
   40c74:	10ffd926 	beq	r2,r3,40bdc <__alt_data_end+0xfffcebdc>
   40c78:	81400c17 	ldw	r5,48(r16)
   40c7c:	28000526 	beq	r5,zero,40c94 <_fseeko_r+0x130>
   40c80:	80801004 	addi	r2,r16,64
   40c84:	28800226 	beq	r5,r2,40c90 <_fseeko_r+0x12c>
   40c88:	8809883a 	mov	r4,r17
   40c8c:	00466600 	call	46660 <_free_r>
   40c90:	80000c15 	stw	zero,48(r16)
   40c94:	8080030b 	ldhu	r2,12(r16)
   40c98:	80c00417 	ldw	r3,16(r16)
   40c9c:	80000115 	stw	zero,4(r16)
   40ca0:	10bdf7cc 	andi	r2,r2,63455
   40ca4:	80c00015 	stw	r3,0(r16)
   40ca8:	8080030d 	sth	r2,12(r16)
   40cac:	01800204 	movi	r6,8
   40cb0:	000b883a 	mov	r5,zero
   40cb4:	81001704 	addi	r4,r16,92
   40cb8:	00419e80 	call	419e8 <memset>
   40cbc:	003fc806 	br	40be0 <__alt_data_end+0xfffcebe0>
   40cc0:	800b883a 	mov	r5,r16
   40cc4:	8809883a 	mov	r4,r17
   40cc8:	00460640 	call	46064 <_fflush_r>
   40ccc:	8080030b 	ldhu	r2,12(r16)
   40cd0:	10c4000c 	andi	r3,r2,4096
   40cd4:	18008726 	beq	r3,zero,40ef4 <_fseeko_r+0x390>
   40cd8:	84c01417 	ldw	r19,80(r16)
   40cdc:	10c0010c 	andi	r3,r2,4
   40ce0:	1800431e 	bne	r3,zero,40df0 <_fseeko_r+0x28c>
   40ce4:	1080020c 	andi	r2,r2,8
   40ce8:	10008026 	beq	r2,zero,40eec <_fseeko_r+0x388>
   40cec:	80c00017 	ldw	r3,0(r16)
   40cf0:	80800417 	ldw	r2,16(r16)
   40cf4:	18000226 	beq	r3,zero,40d00 <_fseeko_r+0x19c>
   40cf8:	1887c83a 	sub	r3,r3,r2
   40cfc:	98e7883a 	add	r19,r19,r3
   40d00:	aceb883a 	add	r21,r21,r19
   40d04:	05c00044 	movi	r23,1
   40d08:	0025883a 	mov	r18,zero
   40d0c:	003fc306 	br	40c1c <__alt_data_end+0xfffcec1c>
   40d10:	00464400 	call	46440 <__sinit>
   40d14:	8080030b 	ldhu	r2,12(r16)
   40d18:	00c04204 	movi	r3,264
   40d1c:	1080420c 	andi	r2,r2,264
   40d20:	10ffa51e 	bne	r2,r3,40bb8 <__alt_data_end+0xfffcebb8>
   40d24:	800b883a 	mov	r5,r16
   40d28:	8809883a 	mov	r4,r17
   40d2c:	00460640 	call	46064 <_fflush_r>
   40d30:	003fa106 	br	40bb8 <__alt_data_end+0xfffcebb8>
   40d34:	8080030b 	ldhu	r2,12(r16)
   40d38:	00c10004 	movi	r3,1024
   40d3c:	80c01315 	stw	r3,76(r16)
   40d40:	10c4b03a 	or	r2,r2,r3
   40d44:	8080030d 	sth	r2,12(r16)
   40d48:	9000311e 	bne	r18,zero,40e10 <_fseeko_r+0x2ac>
   40d4c:	a82d883a 	mov	r22,r21
   40d50:	b800371e 	bne	r23,zero,40e30 <_fseeko_r+0x2cc>
   40d54:	8080030b 	ldhu	r2,12(r16)
   40d58:	1084000c 	andi	r2,r2,4096
   40d5c:	10007f26 	beq	r2,zero,40f5c <_fseeko_r+0x3f8>
   40d60:	80801417 	ldw	r2,80(r16)
   40d64:	81800117 	ldw	r6,4(r16)
   40d68:	81400c17 	ldw	r5,48(r16)
   40d6c:	11a7c83a 	sub	r19,r2,r6
   40d70:	28008226 	beq	r5,zero,40f7c <_fseeko_r+0x418>
   40d74:	81c00f17 	ldw	r7,60(r16)
   40d78:	99e7c83a 	sub	r19,r19,r7
   40d7c:	81000e17 	ldw	r4,56(r16)
   40d80:	80800417 	ldw	r2,16(r16)
   40d84:	99a7883a 	add	r19,r19,r6
   40d88:	2087c83a 	sub	r3,r4,r2
   40d8c:	98e7c83a 	sub	r19,r19,r3
   40d90:	38c7883a 	add	r3,r7,r3
   40d94:	b4c02b16 	blt	r22,r19,40e44 <_fseeko_r+0x2e0>
   40d98:	98c9883a 	add	r4,r19,r3
   40d9c:	b100292e 	bgeu	r22,r4,40e44 <_fseeko_r+0x2e0>
   40da0:	b4e7c83a 	sub	r19,r22,r19
   40da4:	14c5883a 	add	r2,r2,r19
   40da8:	1ce7c83a 	sub	r19,r3,r19
   40dac:	80800015 	stw	r2,0(r16)
   40db0:	84c00115 	stw	r19,4(r16)
   40db4:	28000526 	beq	r5,zero,40dcc <_fseeko_r+0x268>
   40db8:	80801004 	addi	r2,r16,64
   40dbc:	28800226 	beq	r5,r2,40dc8 <_fseeko_r+0x264>
   40dc0:	8809883a 	mov	r4,r17
   40dc4:	00466600 	call	46660 <_free_r>
   40dc8:	80000c15 	stw	zero,48(r16)
   40dcc:	8080030b 	ldhu	r2,12(r16)
   40dd0:	01800204 	movi	r6,8
   40dd4:	000b883a 	mov	r5,zero
   40dd8:	10bff7cc 	andi	r2,r2,65503
   40ddc:	8080030d 	sth	r2,12(r16)
   40de0:	81001704 	addi	r4,r16,92
   40de4:	00419e80 	call	419e8 <memset>
   40de8:	0027883a 	mov	r19,zero
   40dec:	003f7c06 	br	40be0 <__alt_data_end+0xfffcebe0>
   40df0:	80c00117 	ldw	r3,4(r16)
   40df4:	80800c17 	ldw	r2,48(r16)
   40df8:	98e7c83a 	sub	r19,r19,r3
   40dfc:	10003b26 	beq	r2,zero,40eec <_fseeko_r+0x388>
   40e00:	80c00f17 	ldw	r3,60(r16)
   40e04:	80800417 	ldw	r2,16(r16)
   40e08:	98e7c83a 	sub	r19,r19,r3
   40e0c:	003fbc06 	br	40d00 <__alt_data_end+0xfffced00>
   40e10:	8140038f 	ldh	r5,14(r16)
   40e14:	d80d883a 	mov	r6,sp
   40e18:	8809883a 	mov	r4,r17
   40e1c:	0040fc40 	call	40fc4 <_fstat_r>
   40e20:	103f891e 	bne	r2,zero,40c48 <__alt_data_end+0xfffcec48>
   40e24:	dd800417 	ldw	r22,16(sp)
   40e28:	adad883a 	add	r22,r21,r22
   40e2c:	b83fc926 	beq	r23,zero,40d54 <__alt_data_end+0xfffced54>
   40e30:	81400c17 	ldw	r5,48(r16)
   40e34:	81800117 	ldw	r6,4(r16)
   40e38:	28005026 	beq	r5,zero,40f7c <_fseeko_r+0x418>
   40e3c:	81c00f17 	ldw	r7,60(r16)
   40e40:	003fce06 	br	40d7c <__alt_data_end+0xfffced7c>
   40e44:	84c01317 	ldw	r19,76(r16)
   40e48:	81400717 	ldw	r5,28(r16)
   40e4c:	000f883a 	mov	r7,zero
   40e50:	04e7c83a 	sub	r19,zero,r19
   40e54:	9da6703a 	and	r19,r19,r22
   40e58:	980d883a 	mov	r6,r19
   40e5c:	8809883a 	mov	r4,r17
   40e60:	a03ee83a 	callr	r20
   40e64:	00ffffc4 	movi	r3,-1
   40e68:	10ff7726 	beq	r2,r3,40c48 <__alt_data_end+0xfffcec48>
   40e6c:	80800417 	ldw	r2,16(r16)
   40e70:	81400c17 	ldw	r5,48(r16)
   40e74:	80000115 	stw	zero,4(r16)
   40e78:	80800015 	stw	r2,0(r16)
   40e7c:	28000526 	beq	r5,zero,40e94 <_fseeko_r+0x330>
   40e80:	80801004 	addi	r2,r16,64
   40e84:	28800226 	beq	r5,r2,40e90 <_fseeko_r+0x32c>
   40e88:	8809883a 	mov	r4,r17
   40e8c:	00466600 	call	46660 <_free_r>
   40e90:	80000c15 	stw	zero,48(r16)
   40e94:	8080030b 	ldhu	r2,12(r16)
   40e98:	b4e7c83a 	sub	r19,r22,r19
   40e9c:	10bff7cc 	andi	r2,r2,65503
   40ea0:	8080030d 	sth	r2,12(r16)
   40ea4:	98000b26 	beq	r19,zero,40ed4 <_fseeko_r+0x370>
   40ea8:	800b883a 	mov	r5,r16
   40eac:	8809883a 	mov	r4,r17
   40eb0:	0041cec0 	call	41cec <__srefill_r>
   40eb4:	103f641e 	bne	r2,zero,40c48 <__alt_data_end+0xfffcec48>
   40eb8:	80800117 	ldw	r2,4(r16)
   40ebc:	14ff6236 	bltu	r2,r19,40c48 <__alt_data_end+0xfffcec48>
   40ec0:	80c00017 	ldw	r3,0(r16)
   40ec4:	14c5c83a 	sub	r2,r2,r19
   40ec8:	80800115 	stw	r2,4(r16)
   40ecc:	1ce7883a 	add	r19,r3,r19
   40ed0:	84c00015 	stw	r19,0(r16)
   40ed4:	01800204 	movi	r6,8
   40ed8:	000b883a 	mov	r5,zero
   40edc:	81001704 	addi	r4,r16,92
   40ee0:	00419e80 	call	419e8 <memset>
   40ee4:	0027883a 	mov	r19,zero
   40ee8:	003f3d06 	br	40be0 <__alt_data_end+0xfffcebe0>
   40eec:	80800417 	ldw	r2,16(r16)
   40ef0:	003f8306 	br	40d00 <__alt_data_end+0xfffced00>
   40ef4:	81400717 	ldw	r5,28(r16)
   40ef8:	900f883a 	mov	r7,r18
   40efc:	000d883a 	mov	r6,zero
   40f00:	8809883a 	mov	r4,r17
   40f04:	a03ee83a 	callr	r20
   40f08:	1027883a 	mov	r19,r2
   40f0c:	00bfffc4 	movi	r2,-1
   40f10:	98bf3226 	beq	r19,r2,40bdc <__alt_data_end+0xfffcebdc>
   40f14:	8080030b 	ldhu	r2,12(r16)
   40f18:	003f7006 	br	40cdc <__alt_data_end+0xfffcecdc>
   40f1c:	8140038f 	ldh	r5,14(r16)
   40f20:	283f4716 	blt	r5,zero,40c40 <__alt_data_end+0xfffcec40>
   40f24:	d80d883a 	mov	r6,sp
   40f28:	8809883a 	mov	r4,r17
   40f2c:	0040fc40 	call	40fc4 <_fstat_r>
   40f30:	1000041e 	bne	r2,zero,40f44 <_fseeko_r+0x3e0>
   40f34:	d8800117 	ldw	r2,4(sp)
   40f38:	00e00014 	movui	r3,32768
   40f3c:	10bc000c 	andi	r2,r2,61440
   40f40:	10ff7c26 	beq	r2,r3,40d34 <__alt_data_end+0xfffced34>
   40f44:	8080030b 	ldhu	r2,12(r16)
   40f48:	003f3d06 	br	40c40 <__alt_data_end+0xfffcec40>
   40f4c:	800b883a 	mov	r5,r16
   40f50:	8809883a 	mov	r4,r17
   40f54:	00410200 	call	41020 <__smakebuf_r>
   40f58:	003f3106 	br	40c20 <__alt_data_end+0xfffcec20>
   40f5c:	81400717 	ldw	r5,28(r16)
   40f60:	01c00044 	movi	r7,1
   40f64:	000d883a 	mov	r6,zero
   40f68:	8809883a 	mov	r4,r17
   40f6c:	a03ee83a 	callr	r20
   40f70:	00ffffc4 	movi	r3,-1
   40f74:	10ff7b1e 	bne	r2,r3,40d64 <__alt_data_end+0xfffced64>
   40f78:	003f3306 	br	40c48 <__alt_data_end+0xfffcec48>
   40f7c:	80c00017 	ldw	r3,0(r16)
   40f80:	80800417 	ldw	r2,16(r16)
   40f84:	000b883a 	mov	r5,zero
   40f88:	1887c83a 	sub	r3,r3,r2
   40f8c:	98e7c83a 	sub	r19,r19,r3
   40f90:	30c7883a 	add	r3,r6,r3
   40f94:	003f7f06 	br	40d94 <__alt_data_end+0xfffced94>
   40f98:	00800744 	movi	r2,29
   40f9c:	88800015 	stw	r2,0(r17)
   40fa0:	04ffffc4 	movi	r19,-1
   40fa4:	003f0e06 	br	40be0 <__alt_data_end+0xfffcebe0>

00040fa8 <fseeko>:
   40fa8:	00800174 	movhi	r2,5
   40fac:	108d6b04 	addi	r2,r2,13740
   40fb0:	300f883a 	mov	r7,r6
   40fb4:	280d883a 	mov	r6,r5
   40fb8:	200b883a 	mov	r5,r4
   40fbc:	11000017 	ldw	r4,0(r2)
   40fc0:	0040b641 	jmpi	40b64 <_fseeko_r>

00040fc4 <_fstat_r>:
   40fc4:	defffd04 	addi	sp,sp,-12
   40fc8:	2805883a 	mov	r2,r5
   40fcc:	dc000015 	stw	r16,0(sp)
   40fd0:	04000174 	movhi	r16,5
   40fd4:	dc400115 	stw	r17,4(sp)
   40fd8:	84148304 	addi	r16,r16,21004
   40fdc:	2023883a 	mov	r17,r4
   40fe0:	300b883a 	mov	r5,r6
   40fe4:	1009883a 	mov	r4,r2
   40fe8:	dfc00215 	stw	ra,8(sp)
   40fec:	80000015 	stw	zero,0(r16)
   40ff0:	004dd280 	call	4dd28 <fstat>
   40ff4:	00ffffc4 	movi	r3,-1
   40ff8:	10c00526 	beq	r2,r3,41010 <_fstat_r+0x4c>
   40ffc:	dfc00217 	ldw	ra,8(sp)
   41000:	dc400117 	ldw	r17,4(sp)
   41004:	dc000017 	ldw	r16,0(sp)
   41008:	dec00304 	addi	sp,sp,12
   4100c:	f800283a 	ret
   41010:	80c00017 	ldw	r3,0(r16)
   41014:	183ff926 	beq	r3,zero,40ffc <__alt_data_end+0xfffceffc>
   41018:	88c00015 	stw	r3,0(r17)
   4101c:	003ff706 	br	40ffc <__alt_data_end+0xfffceffc>

00041020 <__smakebuf_r>:
   41020:	2880030b 	ldhu	r2,12(r5)
   41024:	10c0008c 	andi	r3,r2,2
   41028:	1800411e 	bne	r3,zero,41130 <__smakebuf_r+0x110>
   4102c:	deffec04 	addi	sp,sp,-80
   41030:	dc000f15 	stw	r16,60(sp)
   41034:	2821883a 	mov	r16,r5
   41038:	2940038f 	ldh	r5,14(r5)
   4103c:	dc401015 	stw	r17,64(sp)
   41040:	dfc01315 	stw	ra,76(sp)
   41044:	dcc01215 	stw	r19,72(sp)
   41048:	dc801115 	stw	r18,68(sp)
   4104c:	2023883a 	mov	r17,r4
   41050:	28001c16 	blt	r5,zero,410c4 <__smakebuf_r+0xa4>
   41054:	d80d883a 	mov	r6,sp
   41058:	0040fc40 	call	40fc4 <_fstat_r>
   4105c:	10001816 	blt	r2,zero,410c0 <__smakebuf_r+0xa0>
   41060:	d8800117 	ldw	r2,4(sp)
   41064:	00e00014 	movui	r3,32768
   41068:	10bc000c 	andi	r2,r2,61440
   4106c:	14c80020 	cmpeqi	r19,r2,8192
   41070:	10c03726 	beq	r2,r3,41150 <__smakebuf_r+0x130>
   41074:	80c0030b 	ldhu	r3,12(r16)
   41078:	18c20014 	ori	r3,r3,2048
   4107c:	80c0030d 	sth	r3,12(r16)
   41080:	00c80004 	movi	r3,8192
   41084:	10c0521e 	bne	r2,r3,411d0 <__smakebuf_r+0x1b0>
   41088:	8140038f 	ldh	r5,14(r16)
   4108c:	8809883a 	mov	r4,r17
   41090:	0046fb40 	call	46fb4 <_isatty_r>
   41094:	10004c26 	beq	r2,zero,411c8 <__smakebuf_r+0x1a8>
   41098:	8080030b 	ldhu	r2,12(r16)
   4109c:	80c010c4 	addi	r3,r16,67
   410a0:	80c00015 	stw	r3,0(r16)
   410a4:	10800054 	ori	r2,r2,1
   410a8:	8080030d 	sth	r2,12(r16)
   410ac:	00800044 	movi	r2,1
   410b0:	80c00415 	stw	r3,16(r16)
   410b4:	80800515 	stw	r2,20(r16)
   410b8:	04810004 	movi	r18,1024
   410bc:	00000706 	br	410dc <__smakebuf_r+0xbc>
   410c0:	8080030b 	ldhu	r2,12(r16)
   410c4:	10c0200c 	andi	r3,r2,128
   410c8:	18001f1e 	bne	r3,zero,41148 <__smakebuf_r+0x128>
   410cc:	04810004 	movi	r18,1024
   410d0:	10820014 	ori	r2,r2,2048
   410d4:	8080030d 	sth	r2,12(r16)
   410d8:	0027883a 	mov	r19,zero
   410dc:	900b883a 	mov	r5,r18
   410e0:	8809883a 	mov	r4,r17
   410e4:	00411dc0 	call	411dc <_malloc_r>
   410e8:	10002c26 	beq	r2,zero,4119c <__smakebuf_r+0x17c>
   410ec:	80c0030b 	ldhu	r3,12(r16)
   410f0:	01000134 	movhi	r4,4
   410f4:	21183e04 	addi	r4,r4,24824
   410f8:	89000f15 	stw	r4,60(r17)
   410fc:	18c02014 	ori	r3,r3,128
   41100:	80c0030d 	sth	r3,12(r16)
   41104:	80800015 	stw	r2,0(r16)
   41108:	80800415 	stw	r2,16(r16)
   4110c:	84800515 	stw	r18,20(r16)
   41110:	98001a1e 	bne	r19,zero,4117c <__smakebuf_r+0x15c>
   41114:	dfc01317 	ldw	ra,76(sp)
   41118:	dcc01217 	ldw	r19,72(sp)
   4111c:	dc801117 	ldw	r18,68(sp)
   41120:	dc401017 	ldw	r17,64(sp)
   41124:	dc000f17 	ldw	r16,60(sp)
   41128:	dec01404 	addi	sp,sp,80
   4112c:	f800283a 	ret
   41130:	288010c4 	addi	r2,r5,67
   41134:	28800015 	stw	r2,0(r5)
   41138:	28800415 	stw	r2,16(r5)
   4113c:	00800044 	movi	r2,1
   41140:	28800515 	stw	r2,20(r5)
   41144:	f800283a 	ret
   41148:	04801004 	movi	r18,64
   4114c:	003fe006 	br	410d0 <__alt_data_end+0xfffcf0d0>
   41150:	81000a17 	ldw	r4,40(r16)
   41154:	00c00134 	movhi	r3,4
   41158:	18c7fb04 	addi	r3,r3,8172
   4115c:	20ffc51e 	bne	r4,r3,41074 <__alt_data_end+0xfffcf074>
   41160:	8080030b 	ldhu	r2,12(r16)
   41164:	04810004 	movi	r18,1024
   41168:	84801315 	stw	r18,76(r16)
   4116c:	1484b03a 	or	r2,r2,r18
   41170:	8080030d 	sth	r2,12(r16)
   41174:	0027883a 	mov	r19,zero
   41178:	003fd806 	br	410dc <__alt_data_end+0xfffcf0dc>
   4117c:	8140038f 	ldh	r5,14(r16)
   41180:	8809883a 	mov	r4,r17
   41184:	0046fb40 	call	46fb4 <_isatty_r>
   41188:	103fe226 	beq	r2,zero,41114 <__alt_data_end+0xfffcf114>
   4118c:	8080030b 	ldhu	r2,12(r16)
   41190:	10800054 	ori	r2,r2,1
   41194:	8080030d 	sth	r2,12(r16)
   41198:	003fde06 	br	41114 <__alt_data_end+0xfffcf114>
   4119c:	8080030b 	ldhu	r2,12(r16)
   411a0:	10c0800c 	andi	r3,r2,512
   411a4:	183fdb1e 	bne	r3,zero,41114 <__alt_data_end+0xfffcf114>
   411a8:	10800094 	ori	r2,r2,2
   411ac:	80c010c4 	addi	r3,r16,67
   411b0:	8080030d 	sth	r2,12(r16)
   411b4:	00800044 	movi	r2,1
   411b8:	80c00015 	stw	r3,0(r16)
   411bc:	80c00415 	stw	r3,16(r16)
   411c0:	80800515 	stw	r2,20(r16)
   411c4:	003fd306 	br	41114 <__alt_data_end+0xfffcf114>
   411c8:	04810004 	movi	r18,1024
   411cc:	003fc306 	br	410dc <__alt_data_end+0xfffcf0dc>
   411d0:	0027883a 	mov	r19,zero
   411d4:	04810004 	movi	r18,1024
   411d8:	003fc006 	br	410dc <__alt_data_end+0xfffcf0dc>

000411dc <_malloc_r>:
   411dc:	defff504 	addi	sp,sp,-44
   411e0:	dc800315 	stw	r18,12(sp)
   411e4:	dfc00a15 	stw	ra,40(sp)
   411e8:	df000915 	stw	fp,36(sp)
   411ec:	ddc00815 	stw	r23,32(sp)
   411f0:	dd800715 	stw	r22,28(sp)
   411f4:	dd400615 	stw	r21,24(sp)
   411f8:	dd000515 	stw	r20,20(sp)
   411fc:	dcc00415 	stw	r19,16(sp)
   41200:	dc400215 	stw	r17,8(sp)
   41204:	dc000115 	stw	r16,4(sp)
   41208:	288002c4 	addi	r2,r5,11
   4120c:	00c00584 	movi	r3,22
   41210:	2025883a 	mov	r18,r4
   41214:	18807f2e 	bgeu	r3,r2,41414 <_malloc_r+0x238>
   41218:	047ffe04 	movi	r17,-8
   4121c:	1462703a 	and	r17,r2,r17
   41220:	8800a316 	blt	r17,zero,414b0 <_malloc_r+0x2d4>
   41224:	8940a236 	bltu	r17,r5,414b0 <_malloc_r+0x2d4>
   41228:	004e3d00 	call	4e3d0 <__malloc_lock>
   4122c:	00807dc4 	movi	r2,503
   41230:	1441e92e 	bgeu	r2,r17,419d8 <_malloc_r+0x7fc>
   41234:	8804d27a 	srli	r2,r17,9
   41238:	1000a126 	beq	r2,zero,414c0 <_malloc_r+0x2e4>
   4123c:	00c00104 	movi	r3,4
   41240:	18811e36 	bltu	r3,r2,416bc <_malloc_r+0x4e0>
   41244:	8804d1ba 	srli	r2,r17,6
   41248:	12000e44 	addi	r8,r2,57
   4124c:	11c00e04 	addi	r7,r2,56
   41250:	4209883a 	add	r4,r8,r8
   41254:	04c00174 	movhi	r19,5
   41258:	2109883a 	add	r4,r4,r4
   4125c:	9cc78004 	addi	r19,r19,7680
   41260:	2109883a 	add	r4,r4,r4
   41264:	9909883a 	add	r4,r19,r4
   41268:	24000117 	ldw	r16,4(r4)
   4126c:	213ffe04 	addi	r4,r4,-8
   41270:	24009726 	beq	r4,r16,414d0 <_malloc_r+0x2f4>
   41274:	80800117 	ldw	r2,4(r16)
   41278:	01bfff04 	movi	r6,-4
   4127c:	014003c4 	movi	r5,15
   41280:	1184703a 	and	r2,r2,r6
   41284:	1447c83a 	sub	r3,r2,r17
   41288:	28c00716 	blt	r5,r3,412a8 <_malloc_r+0xcc>
   4128c:	1800920e 	bge	r3,zero,414d8 <_malloc_r+0x2fc>
   41290:	84000317 	ldw	r16,12(r16)
   41294:	24008e26 	beq	r4,r16,414d0 <_malloc_r+0x2f4>
   41298:	80800117 	ldw	r2,4(r16)
   4129c:	1184703a 	and	r2,r2,r6
   412a0:	1447c83a 	sub	r3,r2,r17
   412a4:	28fff90e 	bge	r5,r3,4128c <__alt_data_end+0xfffcf28c>
   412a8:	3809883a 	mov	r4,r7
   412ac:	01800174 	movhi	r6,5
   412b0:	9c000417 	ldw	r16,16(r19)
   412b4:	31878004 	addi	r6,r6,7680
   412b8:	32000204 	addi	r8,r6,8
   412bc:	82013426 	beq	r16,r8,41790 <_malloc_r+0x5b4>
   412c0:	80c00117 	ldw	r3,4(r16)
   412c4:	00bfff04 	movi	r2,-4
   412c8:	188e703a 	and	r7,r3,r2
   412cc:	3c45c83a 	sub	r2,r7,r17
   412d0:	00c003c4 	movi	r3,15
   412d4:	18811f16 	blt	r3,r2,41754 <_malloc_r+0x578>
   412d8:	32000515 	stw	r8,20(r6)
   412dc:	32000415 	stw	r8,16(r6)
   412e0:	10007f0e 	bge	r2,zero,414e0 <_malloc_r+0x304>
   412e4:	00807fc4 	movi	r2,511
   412e8:	11c0fd36 	bltu	r2,r7,416e0 <_malloc_r+0x504>
   412ec:	3806d0fa 	srli	r3,r7,3
   412f0:	01c00044 	movi	r7,1
   412f4:	30800117 	ldw	r2,4(r6)
   412f8:	19400044 	addi	r5,r3,1
   412fc:	294b883a 	add	r5,r5,r5
   41300:	1807d0ba 	srai	r3,r3,2
   41304:	294b883a 	add	r5,r5,r5
   41308:	294b883a 	add	r5,r5,r5
   4130c:	298b883a 	add	r5,r5,r6
   41310:	38c6983a 	sll	r3,r7,r3
   41314:	29c00017 	ldw	r7,0(r5)
   41318:	2a7ffe04 	addi	r9,r5,-8
   4131c:	1886b03a 	or	r3,r3,r2
   41320:	82400315 	stw	r9,12(r16)
   41324:	81c00215 	stw	r7,8(r16)
   41328:	30c00115 	stw	r3,4(r6)
   4132c:	2c000015 	stw	r16,0(r5)
   41330:	3c000315 	stw	r16,12(r7)
   41334:	2005d0ba 	srai	r2,r4,2
   41338:	01400044 	movi	r5,1
   4133c:	288a983a 	sll	r5,r5,r2
   41340:	19406f36 	bltu	r3,r5,41500 <_malloc_r+0x324>
   41344:	28c4703a 	and	r2,r5,r3
   41348:	10000a1e 	bne	r2,zero,41374 <_malloc_r+0x198>
   4134c:	00bfff04 	movi	r2,-4
   41350:	294b883a 	add	r5,r5,r5
   41354:	2088703a 	and	r4,r4,r2
   41358:	28c4703a 	and	r2,r5,r3
   4135c:	21000104 	addi	r4,r4,4
   41360:	1000041e 	bne	r2,zero,41374 <_malloc_r+0x198>
   41364:	294b883a 	add	r5,r5,r5
   41368:	28c4703a 	and	r2,r5,r3
   4136c:	21000104 	addi	r4,r4,4
   41370:	103ffc26 	beq	r2,zero,41364 <__alt_data_end+0xfffcf364>
   41374:	02bfff04 	movi	r10,-4
   41378:	024003c4 	movi	r9,15
   4137c:	21800044 	addi	r6,r4,1
   41380:	318d883a 	add	r6,r6,r6
   41384:	318d883a 	add	r6,r6,r6
   41388:	318d883a 	add	r6,r6,r6
   4138c:	998d883a 	add	r6,r19,r6
   41390:	333ffe04 	addi	r12,r6,-8
   41394:	2017883a 	mov	r11,r4
   41398:	31800104 	addi	r6,r6,4
   4139c:	34000017 	ldw	r16,0(r6)
   413a0:	31fffd04 	addi	r7,r6,-12
   413a4:	81c0041e 	bne	r16,r7,413b8 <_malloc_r+0x1dc>
   413a8:	0000fb06 	br	41798 <_malloc_r+0x5bc>
   413ac:	1801030e 	bge	r3,zero,417bc <_malloc_r+0x5e0>
   413b0:	84000317 	ldw	r16,12(r16)
   413b4:	81c0f826 	beq	r16,r7,41798 <_malloc_r+0x5bc>
   413b8:	80800117 	ldw	r2,4(r16)
   413bc:	1284703a 	and	r2,r2,r10
   413c0:	1447c83a 	sub	r3,r2,r17
   413c4:	48fff90e 	bge	r9,r3,413ac <__alt_data_end+0xfffcf3ac>
   413c8:	80800317 	ldw	r2,12(r16)
   413cc:	81000217 	ldw	r4,8(r16)
   413d0:	89400054 	ori	r5,r17,1
   413d4:	81400115 	stw	r5,4(r16)
   413d8:	20800315 	stw	r2,12(r4)
   413dc:	11000215 	stw	r4,8(r2)
   413e0:	8463883a 	add	r17,r16,r17
   413e4:	9c400515 	stw	r17,20(r19)
   413e8:	9c400415 	stw	r17,16(r19)
   413ec:	18800054 	ori	r2,r3,1
   413f0:	88800115 	stw	r2,4(r17)
   413f4:	8a000315 	stw	r8,12(r17)
   413f8:	8a000215 	stw	r8,8(r17)
   413fc:	88e3883a 	add	r17,r17,r3
   41400:	88c00015 	stw	r3,0(r17)
   41404:	9009883a 	mov	r4,r18
   41408:	004e3f40 	call	4e3f4 <__malloc_unlock>
   4140c:	80800204 	addi	r2,r16,8
   41410:	00001b06 	br	41480 <_malloc_r+0x2a4>
   41414:	04400404 	movi	r17,16
   41418:	89402536 	bltu	r17,r5,414b0 <_malloc_r+0x2d4>
   4141c:	004e3d00 	call	4e3d0 <__malloc_lock>
   41420:	00800184 	movi	r2,6
   41424:	01000084 	movi	r4,2
   41428:	04c00174 	movhi	r19,5
   4142c:	1085883a 	add	r2,r2,r2
   41430:	9cc78004 	addi	r19,r19,7680
   41434:	1085883a 	add	r2,r2,r2
   41438:	9885883a 	add	r2,r19,r2
   4143c:	14000117 	ldw	r16,4(r2)
   41440:	10fffe04 	addi	r3,r2,-8
   41444:	80c0d926 	beq	r16,r3,417ac <_malloc_r+0x5d0>
   41448:	80c00117 	ldw	r3,4(r16)
   4144c:	81000317 	ldw	r4,12(r16)
   41450:	00bfff04 	movi	r2,-4
   41454:	1884703a 	and	r2,r3,r2
   41458:	81400217 	ldw	r5,8(r16)
   4145c:	8085883a 	add	r2,r16,r2
   41460:	10c00117 	ldw	r3,4(r2)
   41464:	29000315 	stw	r4,12(r5)
   41468:	21400215 	stw	r5,8(r4)
   4146c:	18c00054 	ori	r3,r3,1
   41470:	10c00115 	stw	r3,4(r2)
   41474:	9009883a 	mov	r4,r18
   41478:	004e3f40 	call	4e3f4 <__malloc_unlock>
   4147c:	80800204 	addi	r2,r16,8
   41480:	dfc00a17 	ldw	ra,40(sp)
   41484:	df000917 	ldw	fp,36(sp)
   41488:	ddc00817 	ldw	r23,32(sp)
   4148c:	dd800717 	ldw	r22,28(sp)
   41490:	dd400617 	ldw	r21,24(sp)
   41494:	dd000517 	ldw	r20,20(sp)
   41498:	dcc00417 	ldw	r19,16(sp)
   4149c:	dc800317 	ldw	r18,12(sp)
   414a0:	dc400217 	ldw	r17,8(sp)
   414a4:	dc000117 	ldw	r16,4(sp)
   414a8:	dec00b04 	addi	sp,sp,44
   414ac:	f800283a 	ret
   414b0:	00800304 	movi	r2,12
   414b4:	90800015 	stw	r2,0(r18)
   414b8:	0005883a 	mov	r2,zero
   414bc:	003ff006 	br	41480 <__alt_data_end+0xfffcf480>
   414c0:	01002004 	movi	r4,128
   414c4:	02001004 	movi	r8,64
   414c8:	01c00fc4 	movi	r7,63
   414cc:	003f6106 	br	41254 <__alt_data_end+0xfffcf254>
   414d0:	4009883a 	mov	r4,r8
   414d4:	003f7506 	br	412ac <__alt_data_end+0xfffcf2ac>
   414d8:	81000317 	ldw	r4,12(r16)
   414dc:	003fde06 	br	41458 <__alt_data_end+0xfffcf458>
   414e0:	81c5883a 	add	r2,r16,r7
   414e4:	11400117 	ldw	r5,4(r2)
   414e8:	9009883a 	mov	r4,r18
   414ec:	29400054 	ori	r5,r5,1
   414f0:	11400115 	stw	r5,4(r2)
   414f4:	004e3f40 	call	4e3f4 <__malloc_unlock>
   414f8:	80800204 	addi	r2,r16,8
   414fc:	003fe006 	br	41480 <__alt_data_end+0xfffcf480>
   41500:	9c000217 	ldw	r16,8(r19)
   41504:	00bfff04 	movi	r2,-4
   41508:	85800117 	ldw	r22,4(r16)
   4150c:	b0ac703a 	and	r22,r22,r2
   41510:	b4400336 	bltu	r22,r17,41520 <_malloc_r+0x344>
   41514:	b445c83a 	sub	r2,r22,r17
   41518:	00c003c4 	movi	r3,15
   4151c:	18805d16 	blt	r3,r2,41694 <_malloc_r+0x4b8>
   41520:	05c00174 	movhi	r23,5
   41524:	00800174 	movhi	r2,5
   41528:	10948604 	addi	r2,r2,21016
   4152c:	bdcd6c04 	addi	r23,r23,13744
   41530:	15400017 	ldw	r21,0(r2)
   41534:	b8c00017 	ldw	r3,0(r23)
   41538:	00bfffc4 	movi	r2,-1
   4153c:	858d883a 	add	r6,r16,r22
   41540:	8d6b883a 	add	r21,r17,r21
   41544:	1880ea26 	beq	r3,r2,418f0 <_malloc_r+0x714>
   41548:	ad4403c4 	addi	r21,r21,4111
   4154c:	00bc0004 	movi	r2,-4096
   41550:	a8aa703a 	and	r21,r21,r2
   41554:	a80b883a 	mov	r5,r21
   41558:	9009883a 	mov	r4,r18
   4155c:	d9800015 	stw	r6,0(sp)
   41560:	0041ec00 	call	41ec0 <_sbrk_r>
   41564:	1029883a 	mov	r20,r2
   41568:	00bfffc4 	movi	r2,-1
   4156c:	d9800017 	ldw	r6,0(sp)
   41570:	a080e826 	beq	r20,r2,41914 <_malloc_r+0x738>
   41574:	a180a636 	bltu	r20,r6,41810 <_malloc_r+0x634>
   41578:	07000174 	movhi	fp,5
   4157c:	e7149104 	addi	fp,fp,21060
   41580:	e0800017 	ldw	r2,0(fp)
   41584:	a887883a 	add	r3,r21,r2
   41588:	e0c00015 	stw	r3,0(fp)
   4158c:	3500e626 	beq	r6,r20,41928 <_malloc_r+0x74c>
   41590:	b9000017 	ldw	r4,0(r23)
   41594:	00bfffc4 	movi	r2,-1
   41598:	2080ee26 	beq	r4,r2,41954 <_malloc_r+0x778>
   4159c:	a185c83a 	sub	r2,r20,r6
   415a0:	10c5883a 	add	r2,r2,r3
   415a4:	e0800015 	stw	r2,0(fp)
   415a8:	a0c001cc 	andi	r3,r20,7
   415ac:	1800bc26 	beq	r3,zero,418a0 <_malloc_r+0x6c4>
   415b0:	a0e9c83a 	sub	r20,r20,r3
   415b4:	00840204 	movi	r2,4104
   415b8:	a5000204 	addi	r20,r20,8
   415bc:	10c7c83a 	sub	r3,r2,r3
   415c0:	a545883a 	add	r2,r20,r21
   415c4:	1083ffcc 	andi	r2,r2,4095
   415c8:	18abc83a 	sub	r21,r3,r2
   415cc:	a80b883a 	mov	r5,r21
   415d0:	9009883a 	mov	r4,r18
   415d4:	0041ec00 	call	41ec0 <_sbrk_r>
   415d8:	00ffffc4 	movi	r3,-1
   415dc:	10c0e126 	beq	r2,r3,41964 <_malloc_r+0x788>
   415e0:	1505c83a 	sub	r2,r2,r20
   415e4:	1545883a 	add	r2,r2,r21
   415e8:	10800054 	ori	r2,r2,1
   415ec:	e0c00017 	ldw	r3,0(fp)
   415f0:	9d000215 	stw	r20,8(r19)
   415f4:	a0800115 	stw	r2,4(r20)
   415f8:	a8c7883a 	add	r3,r21,r3
   415fc:	e0c00015 	stw	r3,0(fp)
   41600:	84c00e26 	beq	r16,r19,4163c <_malloc_r+0x460>
   41604:	018003c4 	movi	r6,15
   41608:	3580a72e 	bgeu	r6,r22,418a8 <_malloc_r+0x6cc>
   4160c:	81400117 	ldw	r5,4(r16)
   41610:	013ffe04 	movi	r4,-8
   41614:	b0bffd04 	addi	r2,r22,-12
   41618:	1104703a 	and	r2,r2,r4
   4161c:	2900004c 	andi	r4,r5,1
   41620:	2088b03a 	or	r4,r4,r2
   41624:	81000115 	stw	r4,4(r16)
   41628:	01400144 	movi	r5,5
   4162c:	8089883a 	add	r4,r16,r2
   41630:	21400115 	stw	r5,4(r4)
   41634:	21400215 	stw	r5,8(r4)
   41638:	3080cd36 	bltu	r6,r2,41970 <_malloc_r+0x794>
   4163c:	00800174 	movhi	r2,5
   41640:	10948504 	addi	r2,r2,21012
   41644:	11000017 	ldw	r4,0(r2)
   41648:	20c0012e 	bgeu	r4,r3,41650 <_malloc_r+0x474>
   4164c:	10c00015 	stw	r3,0(r2)
   41650:	00800174 	movhi	r2,5
   41654:	10948404 	addi	r2,r2,21008
   41658:	11000017 	ldw	r4,0(r2)
   4165c:	9c000217 	ldw	r16,8(r19)
   41660:	20c0012e 	bgeu	r4,r3,41668 <_malloc_r+0x48c>
   41664:	10c00015 	stw	r3,0(r2)
   41668:	80c00117 	ldw	r3,4(r16)
   4166c:	00bfff04 	movi	r2,-4
   41670:	1886703a 	and	r3,r3,r2
   41674:	1c45c83a 	sub	r2,r3,r17
   41678:	1c400236 	bltu	r3,r17,41684 <_malloc_r+0x4a8>
   4167c:	00c003c4 	movi	r3,15
   41680:	18800416 	blt	r3,r2,41694 <_malloc_r+0x4b8>
   41684:	9009883a 	mov	r4,r18
   41688:	004e3f40 	call	4e3f4 <__malloc_unlock>
   4168c:	0005883a 	mov	r2,zero
   41690:	003f7b06 	br	41480 <__alt_data_end+0xfffcf480>
   41694:	88c00054 	ori	r3,r17,1
   41698:	80c00115 	stw	r3,4(r16)
   4169c:	8463883a 	add	r17,r16,r17
   416a0:	10800054 	ori	r2,r2,1
   416a4:	9c400215 	stw	r17,8(r19)
   416a8:	88800115 	stw	r2,4(r17)
   416ac:	9009883a 	mov	r4,r18
   416b0:	004e3f40 	call	4e3f4 <__malloc_unlock>
   416b4:	80800204 	addi	r2,r16,8
   416b8:	003f7106 	br	41480 <__alt_data_end+0xfffcf480>
   416bc:	00c00504 	movi	r3,20
   416c0:	18804a2e 	bgeu	r3,r2,417ec <_malloc_r+0x610>
   416c4:	00c01504 	movi	r3,84
   416c8:	18806e36 	bltu	r3,r2,41884 <_malloc_r+0x6a8>
   416cc:	8804d33a 	srli	r2,r17,12
   416d0:	12001bc4 	addi	r8,r2,111
   416d4:	11c01b84 	addi	r7,r2,110
   416d8:	4209883a 	add	r4,r8,r8
   416dc:	003edd06 	br	41254 <__alt_data_end+0xfffcf254>
   416e0:	3804d27a 	srli	r2,r7,9
   416e4:	00c00104 	movi	r3,4
   416e8:	1880442e 	bgeu	r3,r2,417fc <_malloc_r+0x620>
   416ec:	00c00504 	movi	r3,20
   416f0:	18808136 	bltu	r3,r2,418f8 <_malloc_r+0x71c>
   416f4:	11401704 	addi	r5,r2,92
   416f8:	10c016c4 	addi	r3,r2,91
   416fc:	294b883a 	add	r5,r5,r5
   41700:	294b883a 	add	r5,r5,r5
   41704:	294b883a 	add	r5,r5,r5
   41708:	994b883a 	add	r5,r19,r5
   4170c:	28800017 	ldw	r2,0(r5)
   41710:	01800174 	movhi	r6,5
   41714:	297ffe04 	addi	r5,r5,-8
   41718:	31878004 	addi	r6,r6,7680
   4171c:	28806526 	beq	r5,r2,418b4 <_malloc_r+0x6d8>
   41720:	01bfff04 	movi	r6,-4
   41724:	10c00117 	ldw	r3,4(r2)
   41728:	1986703a 	and	r3,r3,r6
   4172c:	38c0022e 	bgeu	r7,r3,41738 <_malloc_r+0x55c>
   41730:	10800217 	ldw	r2,8(r2)
   41734:	28bffb1e 	bne	r5,r2,41724 <__alt_data_end+0xfffcf724>
   41738:	11400317 	ldw	r5,12(r2)
   4173c:	98c00117 	ldw	r3,4(r19)
   41740:	81400315 	stw	r5,12(r16)
   41744:	80800215 	stw	r2,8(r16)
   41748:	2c000215 	stw	r16,8(r5)
   4174c:	14000315 	stw	r16,12(r2)
   41750:	003ef806 	br	41334 <__alt_data_end+0xfffcf334>
   41754:	88c00054 	ori	r3,r17,1
   41758:	80c00115 	stw	r3,4(r16)
   4175c:	8463883a 	add	r17,r16,r17
   41760:	34400515 	stw	r17,20(r6)
   41764:	34400415 	stw	r17,16(r6)
   41768:	10c00054 	ori	r3,r2,1
   4176c:	8a000315 	stw	r8,12(r17)
   41770:	8a000215 	stw	r8,8(r17)
   41774:	88c00115 	stw	r3,4(r17)
   41778:	88a3883a 	add	r17,r17,r2
   4177c:	88800015 	stw	r2,0(r17)
   41780:	9009883a 	mov	r4,r18
   41784:	004e3f40 	call	4e3f4 <__malloc_unlock>
   41788:	80800204 	addi	r2,r16,8
   4178c:	003f3c06 	br	41480 <__alt_data_end+0xfffcf480>
   41790:	30c00117 	ldw	r3,4(r6)
   41794:	003ee706 	br	41334 <__alt_data_end+0xfffcf334>
   41798:	5ac00044 	addi	r11,r11,1
   4179c:	588000cc 	andi	r2,r11,3
   417a0:	31800204 	addi	r6,r6,8
   417a4:	103efd1e 	bne	r2,zero,4139c <__alt_data_end+0xfffcf39c>
   417a8:	00002406 	br	4183c <_malloc_r+0x660>
   417ac:	14000317 	ldw	r16,12(r2)
   417b0:	143f251e 	bne	r2,r16,41448 <__alt_data_end+0xfffcf448>
   417b4:	21000084 	addi	r4,r4,2
   417b8:	003ebc06 	br	412ac <__alt_data_end+0xfffcf2ac>
   417bc:	8085883a 	add	r2,r16,r2
   417c0:	10c00117 	ldw	r3,4(r2)
   417c4:	81000317 	ldw	r4,12(r16)
   417c8:	81400217 	ldw	r5,8(r16)
   417cc:	18c00054 	ori	r3,r3,1
   417d0:	10c00115 	stw	r3,4(r2)
   417d4:	29000315 	stw	r4,12(r5)
   417d8:	21400215 	stw	r5,8(r4)
   417dc:	9009883a 	mov	r4,r18
   417e0:	004e3f40 	call	4e3f4 <__malloc_unlock>
   417e4:	80800204 	addi	r2,r16,8
   417e8:	003f2506 	br	41480 <__alt_data_end+0xfffcf480>
   417ec:	12001704 	addi	r8,r2,92
   417f0:	11c016c4 	addi	r7,r2,91
   417f4:	4209883a 	add	r4,r8,r8
   417f8:	003e9606 	br	41254 <__alt_data_end+0xfffcf254>
   417fc:	3804d1ba 	srli	r2,r7,6
   41800:	11400e44 	addi	r5,r2,57
   41804:	10c00e04 	addi	r3,r2,56
   41808:	294b883a 	add	r5,r5,r5
   4180c:	003fbc06 	br	41700 <__alt_data_end+0xfffcf700>
   41810:	84ff5926 	beq	r16,r19,41578 <__alt_data_end+0xfffcf578>
   41814:	00800174 	movhi	r2,5
   41818:	10878004 	addi	r2,r2,7680
   4181c:	14000217 	ldw	r16,8(r2)
   41820:	00bfff04 	movi	r2,-4
   41824:	80c00117 	ldw	r3,4(r16)
   41828:	1886703a 	and	r3,r3,r2
   4182c:	003f9106 	br	41674 <__alt_data_end+0xfffcf674>
   41830:	60800217 	ldw	r2,8(r12)
   41834:	213fffc4 	addi	r4,r4,-1
   41838:	1300651e 	bne	r2,r12,419d0 <_malloc_r+0x7f4>
   4183c:	208000cc 	andi	r2,r4,3
   41840:	633ffe04 	addi	r12,r12,-8
   41844:	103ffa1e 	bne	r2,zero,41830 <__alt_data_end+0xfffcf830>
   41848:	98800117 	ldw	r2,4(r19)
   4184c:	0146303a 	nor	r3,zero,r5
   41850:	1884703a 	and	r2,r3,r2
   41854:	98800115 	stw	r2,4(r19)
   41858:	294b883a 	add	r5,r5,r5
   4185c:	117f2836 	bltu	r2,r5,41500 <__alt_data_end+0xfffcf500>
   41860:	283f2726 	beq	r5,zero,41500 <__alt_data_end+0xfffcf500>
   41864:	2886703a 	and	r3,r5,r2
   41868:	5809883a 	mov	r4,r11
   4186c:	183ec31e 	bne	r3,zero,4137c <__alt_data_end+0xfffcf37c>
   41870:	294b883a 	add	r5,r5,r5
   41874:	2886703a 	and	r3,r5,r2
   41878:	21000104 	addi	r4,r4,4
   4187c:	183ffc26 	beq	r3,zero,41870 <__alt_data_end+0xfffcf870>
   41880:	003ebe06 	br	4137c <__alt_data_end+0xfffcf37c>
   41884:	00c05504 	movi	r3,340
   41888:	18801236 	bltu	r3,r2,418d4 <_malloc_r+0x6f8>
   4188c:	8804d3fa 	srli	r2,r17,15
   41890:	12001e04 	addi	r8,r2,120
   41894:	11c01dc4 	addi	r7,r2,119
   41898:	4209883a 	add	r4,r8,r8
   4189c:	003e6d06 	br	41254 <__alt_data_end+0xfffcf254>
   418a0:	00c40004 	movi	r3,4096
   418a4:	003f4606 	br	415c0 <__alt_data_end+0xfffcf5c0>
   418a8:	00800044 	movi	r2,1
   418ac:	a0800115 	stw	r2,4(r20)
   418b0:	003f7406 	br	41684 <__alt_data_end+0xfffcf684>
   418b4:	1805d0ba 	srai	r2,r3,2
   418b8:	01c00044 	movi	r7,1
   418bc:	30c00117 	ldw	r3,4(r6)
   418c0:	388e983a 	sll	r7,r7,r2
   418c4:	2805883a 	mov	r2,r5
   418c8:	38c6b03a 	or	r3,r7,r3
   418cc:	30c00115 	stw	r3,4(r6)
   418d0:	003f9b06 	br	41740 <__alt_data_end+0xfffcf740>
   418d4:	00c15504 	movi	r3,1364
   418d8:	18801a36 	bltu	r3,r2,41944 <_malloc_r+0x768>
   418dc:	8804d4ba 	srli	r2,r17,18
   418e0:	12001f44 	addi	r8,r2,125
   418e4:	11c01f04 	addi	r7,r2,124
   418e8:	4209883a 	add	r4,r8,r8
   418ec:	003e5906 	br	41254 <__alt_data_end+0xfffcf254>
   418f0:	ad400404 	addi	r21,r21,16
   418f4:	003f1706 	br	41554 <__alt_data_end+0xfffcf554>
   418f8:	00c01504 	movi	r3,84
   418fc:	18802336 	bltu	r3,r2,4198c <_malloc_r+0x7b0>
   41900:	3804d33a 	srli	r2,r7,12
   41904:	11401bc4 	addi	r5,r2,111
   41908:	10c01b84 	addi	r3,r2,110
   4190c:	294b883a 	add	r5,r5,r5
   41910:	003f7b06 	br	41700 <__alt_data_end+0xfffcf700>
   41914:	9c000217 	ldw	r16,8(r19)
   41918:	00bfff04 	movi	r2,-4
   4191c:	80c00117 	ldw	r3,4(r16)
   41920:	1886703a 	and	r3,r3,r2
   41924:	003f5306 	br	41674 <__alt_data_end+0xfffcf674>
   41928:	3083ffcc 	andi	r2,r6,4095
   4192c:	103f181e 	bne	r2,zero,41590 <__alt_data_end+0xfffcf590>
   41930:	99000217 	ldw	r4,8(r19)
   41934:	b545883a 	add	r2,r22,r21
   41938:	10800054 	ori	r2,r2,1
   4193c:	20800115 	stw	r2,4(r4)
   41940:	003f3e06 	br	4163c <__alt_data_end+0xfffcf63c>
   41944:	01003f84 	movi	r4,254
   41948:	02001fc4 	movi	r8,127
   4194c:	01c01f84 	movi	r7,126
   41950:	003e4006 	br	41254 <__alt_data_end+0xfffcf254>
   41954:	00800174 	movhi	r2,5
   41958:	108d6c04 	addi	r2,r2,13744
   4195c:	15000015 	stw	r20,0(r2)
   41960:	003f1106 	br	415a8 <__alt_data_end+0xfffcf5a8>
   41964:	00800044 	movi	r2,1
   41968:	002b883a 	mov	r21,zero
   4196c:	003f1f06 	br	415ec <__alt_data_end+0xfffcf5ec>
   41970:	81400204 	addi	r5,r16,8
   41974:	9009883a 	mov	r4,r18
   41978:	00466600 	call	46660 <_free_r>
   4197c:	00800174 	movhi	r2,5
   41980:	10949104 	addi	r2,r2,21060
   41984:	10c00017 	ldw	r3,0(r2)
   41988:	003f2c06 	br	4163c <__alt_data_end+0xfffcf63c>
   4198c:	00c05504 	movi	r3,340
   41990:	18800536 	bltu	r3,r2,419a8 <_malloc_r+0x7cc>
   41994:	3804d3fa 	srli	r2,r7,15
   41998:	11401e04 	addi	r5,r2,120
   4199c:	10c01dc4 	addi	r3,r2,119
   419a0:	294b883a 	add	r5,r5,r5
   419a4:	003f5606 	br	41700 <__alt_data_end+0xfffcf700>
   419a8:	00c15504 	movi	r3,1364
   419ac:	18800536 	bltu	r3,r2,419c4 <_malloc_r+0x7e8>
   419b0:	3804d4ba 	srli	r2,r7,18
   419b4:	11401f44 	addi	r5,r2,125
   419b8:	10c01f04 	addi	r3,r2,124
   419bc:	294b883a 	add	r5,r5,r5
   419c0:	003f4f06 	br	41700 <__alt_data_end+0xfffcf700>
   419c4:	01403f84 	movi	r5,254
   419c8:	00c01f84 	movi	r3,126
   419cc:	003f4c06 	br	41700 <__alt_data_end+0xfffcf700>
   419d0:	98800117 	ldw	r2,4(r19)
   419d4:	003fa006 	br	41858 <__alt_data_end+0xfffcf858>
   419d8:	8808d0fa 	srli	r4,r17,3
   419dc:	20800044 	addi	r2,r4,1
   419e0:	1085883a 	add	r2,r2,r2
   419e4:	003e9006 	br	41428 <__alt_data_end+0xfffcf428>

000419e8 <memset>:
   419e8:	20c000cc 	andi	r3,r4,3
   419ec:	2005883a 	mov	r2,r4
   419f0:	18004426 	beq	r3,zero,41b04 <memset+0x11c>
   419f4:	31ffffc4 	addi	r7,r6,-1
   419f8:	30004026 	beq	r6,zero,41afc <memset+0x114>
   419fc:	2813883a 	mov	r9,r5
   41a00:	200d883a 	mov	r6,r4
   41a04:	2007883a 	mov	r3,r4
   41a08:	00000406 	br	41a1c <memset+0x34>
   41a0c:	3a3fffc4 	addi	r8,r7,-1
   41a10:	31800044 	addi	r6,r6,1
   41a14:	38003926 	beq	r7,zero,41afc <memset+0x114>
   41a18:	400f883a 	mov	r7,r8
   41a1c:	18c00044 	addi	r3,r3,1
   41a20:	32400005 	stb	r9,0(r6)
   41a24:	1a0000cc 	andi	r8,r3,3
   41a28:	403ff81e 	bne	r8,zero,41a0c <__alt_data_end+0xfffcfa0c>
   41a2c:	010000c4 	movi	r4,3
   41a30:	21c02d2e 	bgeu	r4,r7,41ae8 <memset+0x100>
   41a34:	29003fcc 	andi	r4,r5,255
   41a38:	200c923a 	slli	r6,r4,8
   41a3c:	3108b03a 	or	r4,r6,r4
   41a40:	200c943a 	slli	r6,r4,16
   41a44:	218cb03a 	or	r6,r4,r6
   41a48:	010003c4 	movi	r4,15
   41a4c:	21c0182e 	bgeu	r4,r7,41ab0 <memset+0xc8>
   41a50:	3b3ffc04 	addi	r12,r7,-16
   41a54:	6018d13a 	srli	r12,r12,4
   41a58:	1a000104 	addi	r8,r3,4
   41a5c:	1ac00204 	addi	r11,r3,8
   41a60:	6008913a 	slli	r4,r12,4
   41a64:	1a800304 	addi	r10,r3,12
   41a68:	1813883a 	mov	r9,r3
   41a6c:	21000504 	addi	r4,r4,20
   41a70:	1909883a 	add	r4,r3,r4
   41a74:	49800015 	stw	r6,0(r9)
   41a78:	41800015 	stw	r6,0(r8)
   41a7c:	59800015 	stw	r6,0(r11)
   41a80:	51800015 	stw	r6,0(r10)
   41a84:	42000404 	addi	r8,r8,16
   41a88:	4a400404 	addi	r9,r9,16
   41a8c:	5ac00404 	addi	r11,r11,16
   41a90:	52800404 	addi	r10,r10,16
   41a94:	413ff71e 	bne	r8,r4,41a74 <__alt_data_end+0xfffcfa74>
   41a98:	63000044 	addi	r12,r12,1
   41a9c:	6018913a 	slli	r12,r12,4
   41aa0:	39c003cc 	andi	r7,r7,15
   41aa4:	010000c4 	movi	r4,3
   41aa8:	1b07883a 	add	r3,r3,r12
   41aac:	21c00e2e 	bgeu	r4,r7,41ae8 <memset+0x100>
   41ab0:	1813883a 	mov	r9,r3
   41ab4:	3811883a 	mov	r8,r7
   41ab8:	010000c4 	movi	r4,3
   41abc:	49800015 	stw	r6,0(r9)
   41ac0:	423fff04 	addi	r8,r8,-4
   41ac4:	4a400104 	addi	r9,r9,4
   41ac8:	223ffc36 	bltu	r4,r8,41abc <__alt_data_end+0xfffcfabc>
   41acc:	393fff04 	addi	r4,r7,-4
   41ad0:	2008d0ba 	srli	r4,r4,2
   41ad4:	39c000cc 	andi	r7,r7,3
   41ad8:	21000044 	addi	r4,r4,1
   41adc:	2109883a 	add	r4,r4,r4
   41ae0:	2109883a 	add	r4,r4,r4
   41ae4:	1907883a 	add	r3,r3,r4
   41ae8:	38000526 	beq	r7,zero,41b00 <memset+0x118>
   41aec:	19cf883a 	add	r7,r3,r7
   41af0:	19400005 	stb	r5,0(r3)
   41af4:	18c00044 	addi	r3,r3,1
   41af8:	38fffd1e 	bne	r7,r3,41af0 <__alt_data_end+0xfffcfaf0>
   41afc:	f800283a 	ret
   41b00:	f800283a 	ret
   41b04:	2007883a 	mov	r3,r4
   41b08:	300f883a 	mov	r7,r6
   41b0c:	003fc706 	br	41a2c <__alt_data_end+0xfffcfa2c>

00041b10 <_open_r>:
   41b10:	defffd04 	addi	sp,sp,-12
   41b14:	2805883a 	mov	r2,r5
   41b18:	dc000015 	stw	r16,0(sp)
   41b1c:	04000174 	movhi	r16,5
   41b20:	dc400115 	stw	r17,4(sp)
   41b24:	300b883a 	mov	r5,r6
   41b28:	84148304 	addi	r16,r16,21004
   41b2c:	2023883a 	mov	r17,r4
   41b30:	380d883a 	mov	r6,r7
   41b34:	1009883a 	mov	r4,r2
   41b38:	dfc00215 	stw	ra,8(sp)
   41b3c:	80000015 	stw	zero,0(r16)
   41b40:	004e5180 	call	4e518 <open>
   41b44:	00ffffc4 	movi	r3,-1
   41b48:	10c00526 	beq	r2,r3,41b60 <_open_r+0x50>
   41b4c:	dfc00217 	ldw	ra,8(sp)
   41b50:	dc400117 	ldw	r17,4(sp)
   41b54:	dc000017 	ldw	r16,0(sp)
   41b58:	dec00304 	addi	sp,sp,12
   41b5c:	f800283a 	ret
   41b60:	80c00017 	ldw	r3,0(r16)
   41b64:	183ff926 	beq	r3,zero,41b4c <__alt_data_end+0xfffcfb4c>
   41b68:	88c00015 	stw	r3,0(r17)
   41b6c:	003ff706 	br	41b4c <__alt_data_end+0xfffcfb4c>

00041b70 <_printf_r>:
   41b70:	defffd04 	addi	sp,sp,-12
   41b74:	2805883a 	mov	r2,r5
   41b78:	dfc00015 	stw	ra,0(sp)
   41b7c:	d9800115 	stw	r6,4(sp)
   41b80:	d9c00215 	stw	r7,8(sp)
   41b84:	21400217 	ldw	r5,8(r4)
   41b88:	d9c00104 	addi	r7,sp,4
   41b8c:	100d883a 	mov	r6,r2
   41b90:	00420e80 	call	420e8 <___vfprintf_internal_r>
   41b94:	dfc00017 	ldw	ra,0(sp)
   41b98:	dec00304 	addi	sp,sp,12
   41b9c:	f800283a 	ret

00041ba0 <printf>:
   41ba0:	defffc04 	addi	sp,sp,-16
   41ba4:	dfc00015 	stw	ra,0(sp)
   41ba8:	d9400115 	stw	r5,4(sp)
   41bac:	d9800215 	stw	r6,8(sp)
   41bb0:	d9c00315 	stw	r7,12(sp)
   41bb4:	00800174 	movhi	r2,5
   41bb8:	108d6b04 	addi	r2,r2,13740
   41bbc:	10800017 	ldw	r2,0(r2)
   41bc0:	200b883a 	mov	r5,r4
   41bc4:	d9800104 	addi	r6,sp,4
   41bc8:	11000217 	ldw	r4,8(r2)
   41bcc:	00442e00 	call	442e0 <__vfprintf_internal>
   41bd0:	dfc00017 	ldw	ra,0(sp)
   41bd4:	dec00404 	addi	sp,sp,16
   41bd8:	f800283a 	ret

00041bdc <_putchar_r>:
   41bdc:	21800217 	ldw	r6,8(r4)
   41be0:	00484c81 	jmpi	484c8 <_putc_r>

00041be4 <putchar>:
   41be4:	00800174 	movhi	r2,5
   41be8:	108d6b04 	addi	r2,r2,13740
   41bec:	200b883a 	mov	r5,r4
   41bf0:	11000017 	ldw	r4,0(r2)
   41bf4:	21800217 	ldw	r6,8(r4)
   41bf8:	00484c81 	jmpi	484c8 <_putc_r>

00041bfc <_puts_r>:
   41bfc:	defff604 	addi	sp,sp,-40
   41c00:	dc000715 	stw	r16,28(sp)
   41c04:	2021883a 	mov	r16,r4
   41c08:	2809883a 	mov	r4,r5
   41c0c:	dc400815 	stw	r17,32(sp)
   41c10:	dfc00915 	stw	ra,36(sp)
   41c14:	2823883a 	mov	r17,r5
   41c18:	00420500 	call	42050 <strlen>
   41c1c:	10c00044 	addi	r3,r2,1
   41c20:	d8800115 	stw	r2,4(sp)
   41c24:	00800174 	movhi	r2,5
   41c28:	10851504 	addi	r2,r2,5204
   41c2c:	d8800215 	stw	r2,8(sp)
   41c30:	00800044 	movi	r2,1
   41c34:	d8800315 	stw	r2,12(sp)
   41c38:	00800084 	movi	r2,2
   41c3c:	dc400015 	stw	r17,0(sp)
   41c40:	d8c00615 	stw	r3,24(sp)
   41c44:	dec00415 	stw	sp,16(sp)
   41c48:	d8800515 	stw	r2,20(sp)
   41c4c:	80000226 	beq	r16,zero,41c58 <_puts_r+0x5c>
   41c50:	80800e17 	ldw	r2,56(r16)
   41c54:	10001426 	beq	r2,zero,41ca8 <_puts_r+0xac>
   41c58:	81400217 	ldw	r5,8(r16)
   41c5c:	2880030b 	ldhu	r2,12(r5)
   41c60:	10c8000c 	andi	r3,r2,8192
   41c64:	1800061e 	bne	r3,zero,41c80 <_puts_r+0x84>
   41c68:	29001917 	ldw	r4,100(r5)
   41c6c:	00f7ffc4 	movi	r3,-8193
   41c70:	10880014 	ori	r2,r2,8192
   41c74:	20c6703a 	and	r3,r4,r3
   41c78:	2880030d 	sth	r2,12(r5)
   41c7c:	28c01915 	stw	r3,100(r5)
   41c80:	d9800404 	addi	r6,sp,16
   41c84:	8009883a 	mov	r4,r16
   41c88:	00469700 	call	46970 <__sfvwrite_r>
   41c8c:	1000091e 	bne	r2,zero,41cb4 <_puts_r+0xb8>
   41c90:	00800284 	movi	r2,10
   41c94:	dfc00917 	ldw	ra,36(sp)
   41c98:	dc400817 	ldw	r17,32(sp)
   41c9c:	dc000717 	ldw	r16,28(sp)
   41ca0:	dec00a04 	addi	sp,sp,40
   41ca4:	f800283a 	ret
   41ca8:	8009883a 	mov	r4,r16
   41cac:	00464400 	call	46440 <__sinit>
   41cb0:	003fe906 	br	41c58 <__alt_data_end+0xfffcfc58>
   41cb4:	00bfffc4 	movi	r2,-1
   41cb8:	003ff606 	br	41c94 <__alt_data_end+0xfffcfc94>

00041cbc <puts>:
   41cbc:	00800174 	movhi	r2,5
   41cc0:	108d6b04 	addi	r2,r2,13740
   41cc4:	200b883a 	mov	r5,r4
   41cc8:	11000017 	ldw	r4,0(r2)
   41ccc:	0041bfc1 	jmpi	41bfc <_puts_r>

00041cd0 <lflush>:
   41cd0:	2080030b 	ldhu	r2,12(r4)
   41cd4:	00c00244 	movi	r3,9
   41cd8:	1080024c 	andi	r2,r2,9
   41cdc:	10c00226 	beq	r2,r3,41ce8 <lflush+0x18>
   41ce0:	0005883a 	mov	r2,zero
   41ce4:	f800283a 	ret
   41ce8:	00460c01 	jmpi	460c0 <fflush>

00041cec <__srefill_r>:
   41cec:	defffc04 	addi	sp,sp,-16
   41cf0:	dc400115 	stw	r17,4(sp)
   41cf4:	dc000015 	stw	r16,0(sp)
   41cf8:	dfc00315 	stw	ra,12(sp)
   41cfc:	dc800215 	stw	r18,8(sp)
   41d00:	2023883a 	mov	r17,r4
   41d04:	2821883a 	mov	r16,r5
   41d08:	20000226 	beq	r4,zero,41d14 <__srefill_r+0x28>
   41d0c:	20800e17 	ldw	r2,56(r4)
   41d10:	10003c26 	beq	r2,zero,41e04 <__srefill_r+0x118>
   41d14:	80c0030b 	ldhu	r3,12(r16)
   41d18:	1908000c 	andi	r4,r3,8192
   41d1c:	1805883a 	mov	r2,r3
   41d20:	2000071e 	bne	r4,zero,41d40 <__srefill_r+0x54>
   41d24:	81001917 	ldw	r4,100(r16)
   41d28:	18880014 	ori	r2,r3,8192
   41d2c:	00f7ffc4 	movi	r3,-8193
   41d30:	20c8703a 	and	r4,r4,r3
   41d34:	8080030d 	sth	r2,12(r16)
   41d38:	1007883a 	mov	r3,r2
   41d3c:	81001915 	stw	r4,100(r16)
   41d40:	80000115 	stw	zero,4(r16)
   41d44:	1100080c 	andi	r4,r2,32
   41d48:	2000571e 	bne	r4,zero,41ea8 <__srefill_r+0x1bc>
   41d4c:	1100010c 	andi	r4,r2,4
   41d50:	20001f26 	beq	r4,zero,41dd0 <__srefill_r+0xe4>
   41d54:	81400c17 	ldw	r5,48(r16)
   41d58:	28000826 	beq	r5,zero,41d7c <__srefill_r+0x90>
   41d5c:	80801004 	addi	r2,r16,64
   41d60:	28800226 	beq	r5,r2,41d6c <__srefill_r+0x80>
   41d64:	8809883a 	mov	r4,r17
   41d68:	00466600 	call	46660 <_free_r>
   41d6c:	80800f17 	ldw	r2,60(r16)
   41d70:	80000c15 	stw	zero,48(r16)
   41d74:	80800115 	stw	r2,4(r16)
   41d78:	1000391e 	bne	r2,zero,41e60 <__srefill_r+0x174>
   41d7c:	80800417 	ldw	r2,16(r16)
   41d80:	10004b26 	beq	r2,zero,41eb0 <__srefill_r+0x1c4>
   41d84:	8480030b 	ldhu	r18,12(r16)
   41d88:	908000cc 	andi	r2,r18,3
   41d8c:	10001f1e 	bne	r2,zero,41e0c <__srefill_r+0x120>
   41d90:	81800417 	ldw	r6,16(r16)
   41d94:	80800817 	ldw	r2,32(r16)
   41d98:	81c00517 	ldw	r7,20(r16)
   41d9c:	81400717 	ldw	r5,28(r16)
   41da0:	81800015 	stw	r6,0(r16)
   41da4:	8809883a 	mov	r4,r17
   41da8:	103ee83a 	callr	r2
   41dac:	80800115 	stw	r2,4(r16)
   41db0:	00800e0e 	bge	zero,r2,41dec <__srefill_r+0x100>
   41db4:	0005883a 	mov	r2,zero
   41db8:	dfc00317 	ldw	ra,12(sp)
   41dbc:	dc800217 	ldw	r18,8(sp)
   41dc0:	dc400117 	ldw	r17,4(sp)
   41dc4:	dc000017 	ldw	r16,0(sp)
   41dc8:	dec00404 	addi	sp,sp,16
   41dcc:	f800283a 	ret
   41dd0:	1100040c 	andi	r4,r2,16
   41dd4:	20003026 	beq	r4,zero,41e98 <__srefill_r+0x1ac>
   41dd8:	1080020c 	andi	r2,r2,8
   41ddc:	1000241e 	bne	r2,zero,41e70 <__srefill_r+0x184>
   41de0:	18c00114 	ori	r3,r3,4
   41de4:	80c0030d 	sth	r3,12(r16)
   41de8:	003fe406 	br	41d7c <__alt_data_end+0xfffcfd7c>
   41dec:	80c0030b 	ldhu	r3,12(r16)
   41df0:	1000161e 	bne	r2,zero,41e4c <__srefill_r+0x160>
   41df4:	18c00814 	ori	r3,r3,32
   41df8:	00bfffc4 	movi	r2,-1
   41dfc:	80c0030d 	sth	r3,12(r16)
   41e00:	003fed06 	br	41db8 <__alt_data_end+0xfffcfdb8>
   41e04:	00464400 	call	46440 <__sinit>
   41e08:	003fc206 	br	41d14 <__alt_data_end+0xfffcfd14>
   41e0c:	00800174 	movhi	r2,5
   41e10:	108d6a04 	addi	r2,r2,13736
   41e14:	11000017 	ldw	r4,0(r2)
   41e18:	01400134 	movhi	r5,4
   41e1c:	00800044 	movi	r2,1
   41e20:	29473404 	addi	r5,r5,7376
   41e24:	8080030d 	sth	r2,12(r16)
   41e28:	0046e2c0 	call	46e2c <_fwalk>
   41e2c:	00800244 	movi	r2,9
   41e30:	8480030d 	sth	r18,12(r16)
   41e34:	9480024c 	andi	r18,r18,9
   41e38:	90bfd51e 	bne	r18,r2,41d90 <__alt_data_end+0xfffcfd90>
   41e3c:	800b883a 	mov	r5,r16
   41e40:	8809883a 	mov	r4,r17
   41e44:	0045e480 	call	45e48 <__sflush_r>
   41e48:	003fd106 	br	41d90 <__alt_data_end+0xfffcfd90>
   41e4c:	18c01014 	ori	r3,r3,64
   41e50:	80000115 	stw	zero,4(r16)
   41e54:	00bfffc4 	movi	r2,-1
   41e58:	80c0030d 	sth	r3,12(r16)
   41e5c:	003fd606 	br	41db8 <__alt_data_end+0xfffcfdb8>
   41e60:	80c00e17 	ldw	r3,56(r16)
   41e64:	0005883a 	mov	r2,zero
   41e68:	80c00015 	stw	r3,0(r16)
   41e6c:	003fd206 	br	41db8 <__alt_data_end+0xfffcfdb8>
   41e70:	800b883a 	mov	r5,r16
   41e74:	8809883a 	mov	r4,r17
   41e78:	00460640 	call	46064 <_fflush_r>
   41e7c:	10000a1e 	bne	r2,zero,41ea8 <__srefill_r+0x1bc>
   41e80:	8080030b 	ldhu	r2,12(r16)
   41e84:	00fffdc4 	movi	r3,-9
   41e88:	80000215 	stw	zero,8(r16)
   41e8c:	1886703a 	and	r3,r3,r2
   41e90:	80000615 	stw	zero,24(r16)
   41e94:	003fd206 	br	41de0 <__alt_data_end+0xfffcfde0>
   41e98:	00800244 	movi	r2,9
   41e9c:	88800015 	stw	r2,0(r17)
   41ea0:	18c01014 	ori	r3,r3,64
   41ea4:	80c0030d 	sth	r3,12(r16)
   41ea8:	00bfffc4 	movi	r2,-1
   41eac:	003fc206 	br	41db8 <__alt_data_end+0xfffcfdb8>
   41eb0:	800b883a 	mov	r5,r16
   41eb4:	8809883a 	mov	r4,r17
   41eb8:	00410200 	call	41020 <__smakebuf_r>
   41ebc:	003fb106 	br	41d84 <__alt_data_end+0xfffcfd84>

00041ec0 <_sbrk_r>:
   41ec0:	defffd04 	addi	sp,sp,-12
   41ec4:	dc000015 	stw	r16,0(sp)
   41ec8:	04000174 	movhi	r16,5
   41ecc:	dc400115 	stw	r17,4(sp)
   41ed0:	84148304 	addi	r16,r16,21004
   41ed4:	2023883a 	mov	r17,r4
   41ed8:	2809883a 	mov	r4,r5
   41edc:	dfc00215 	stw	ra,8(sp)
   41ee0:	80000015 	stw	zero,0(r16)
   41ee4:	004e8080 	call	4e808 <sbrk>
   41ee8:	00ffffc4 	movi	r3,-1
   41eec:	10c00526 	beq	r2,r3,41f04 <_sbrk_r+0x44>
   41ef0:	dfc00217 	ldw	ra,8(sp)
   41ef4:	dc400117 	ldw	r17,4(sp)
   41ef8:	dc000017 	ldw	r16,0(sp)
   41efc:	dec00304 	addi	sp,sp,12
   41f00:	f800283a 	ret
   41f04:	80c00017 	ldw	r3,0(r16)
   41f08:	183ff926 	beq	r3,zero,41ef0 <__alt_data_end+0xfffcfef0>
   41f0c:	88c00015 	stw	r3,0(r17)
   41f10:	003ff706 	br	41ef0 <__alt_data_end+0xfffcfef0>

00041f14 <__sread>:
   41f14:	defffe04 	addi	sp,sp,-8
   41f18:	dc000015 	stw	r16,0(sp)
   41f1c:	2821883a 	mov	r16,r5
   41f20:	2940038f 	ldh	r5,14(r5)
   41f24:	dfc00115 	stw	ra,4(sp)
   41f28:	00486300 	call	48630 <_read_r>
   41f2c:	10000716 	blt	r2,zero,41f4c <__sread+0x38>
   41f30:	80c01417 	ldw	r3,80(r16)
   41f34:	1887883a 	add	r3,r3,r2
   41f38:	80c01415 	stw	r3,80(r16)
   41f3c:	dfc00117 	ldw	ra,4(sp)
   41f40:	dc000017 	ldw	r16,0(sp)
   41f44:	dec00204 	addi	sp,sp,8
   41f48:	f800283a 	ret
   41f4c:	80c0030b 	ldhu	r3,12(r16)
   41f50:	18fbffcc 	andi	r3,r3,61439
   41f54:	80c0030d 	sth	r3,12(r16)
   41f58:	dfc00117 	ldw	ra,4(sp)
   41f5c:	dc000017 	ldw	r16,0(sp)
   41f60:	dec00204 	addi	sp,sp,8
   41f64:	f800283a 	ret

00041f68 <__seofread>:
   41f68:	0005883a 	mov	r2,zero
   41f6c:	f800283a 	ret

00041f70 <__swrite>:
   41f70:	2880030b 	ldhu	r2,12(r5)
   41f74:	defffb04 	addi	sp,sp,-20
   41f78:	dcc00315 	stw	r19,12(sp)
   41f7c:	dc800215 	stw	r18,8(sp)
   41f80:	dc400115 	stw	r17,4(sp)
   41f84:	dc000015 	stw	r16,0(sp)
   41f88:	dfc00415 	stw	ra,16(sp)
   41f8c:	10c0400c 	andi	r3,r2,256
   41f90:	2821883a 	mov	r16,r5
   41f94:	2023883a 	mov	r17,r4
   41f98:	3025883a 	mov	r18,r6
   41f9c:	3827883a 	mov	r19,r7
   41fa0:	18000526 	beq	r3,zero,41fb8 <__swrite+0x48>
   41fa4:	2940038f 	ldh	r5,14(r5)
   41fa8:	01c00084 	movi	r7,2
   41fac:	000d883a 	mov	r6,zero
   41fb0:	00470e40 	call	470e4 <_lseek_r>
   41fb4:	8080030b 	ldhu	r2,12(r16)
   41fb8:	8140038f 	ldh	r5,14(r16)
   41fbc:	10bbffcc 	andi	r2,r2,61439
   41fc0:	980f883a 	mov	r7,r19
   41fc4:	900d883a 	mov	r6,r18
   41fc8:	8809883a 	mov	r4,r17
   41fcc:	8080030d 	sth	r2,12(r16)
   41fd0:	dfc00417 	ldw	ra,16(sp)
   41fd4:	dcc00317 	ldw	r19,12(sp)
   41fd8:	dc800217 	ldw	r18,8(sp)
   41fdc:	dc400117 	ldw	r17,4(sp)
   41fe0:	dc000017 	ldw	r16,0(sp)
   41fe4:	dec00504 	addi	sp,sp,20
   41fe8:	00443b81 	jmpi	443b8 <_write_r>

00041fec <__sseek>:
   41fec:	defffe04 	addi	sp,sp,-8
   41ff0:	dc000015 	stw	r16,0(sp)
   41ff4:	2821883a 	mov	r16,r5
   41ff8:	2940038f 	ldh	r5,14(r5)
   41ffc:	dfc00115 	stw	ra,4(sp)
   42000:	00470e40 	call	470e4 <_lseek_r>
   42004:	00ffffc4 	movi	r3,-1
   42008:	10c00826 	beq	r2,r3,4202c <__sseek+0x40>
   4200c:	80c0030b 	ldhu	r3,12(r16)
   42010:	80801415 	stw	r2,80(r16)
   42014:	18c40014 	ori	r3,r3,4096
   42018:	80c0030d 	sth	r3,12(r16)
   4201c:	dfc00117 	ldw	ra,4(sp)
   42020:	dc000017 	ldw	r16,0(sp)
   42024:	dec00204 	addi	sp,sp,8
   42028:	f800283a 	ret
   4202c:	80c0030b 	ldhu	r3,12(r16)
   42030:	18fbffcc 	andi	r3,r3,61439
   42034:	80c0030d 	sth	r3,12(r16)
   42038:	dfc00117 	ldw	ra,4(sp)
   4203c:	dc000017 	ldw	r16,0(sp)
   42040:	dec00204 	addi	sp,sp,8
   42044:	f800283a 	ret

00042048 <__sclose>:
   42048:	2940038f 	ldh	r5,14(r5)
   4204c:	004456c1 	jmpi	4456c <_close_r>

00042050 <strlen>:
   42050:	208000cc 	andi	r2,r4,3
   42054:	10002026 	beq	r2,zero,420d8 <strlen+0x88>
   42058:	20800007 	ldb	r2,0(r4)
   4205c:	10002026 	beq	r2,zero,420e0 <strlen+0x90>
   42060:	2005883a 	mov	r2,r4
   42064:	00000206 	br	42070 <strlen+0x20>
   42068:	10c00007 	ldb	r3,0(r2)
   4206c:	18001826 	beq	r3,zero,420d0 <strlen+0x80>
   42070:	10800044 	addi	r2,r2,1
   42074:	10c000cc 	andi	r3,r2,3
   42078:	183ffb1e 	bne	r3,zero,42068 <__alt_data_end+0xfffd0068>
   4207c:	10c00017 	ldw	r3,0(r2)
   42080:	01ffbff4 	movhi	r7,65279
   42084:	39ffbfc4 	addi	r7,r7,-257
   42088:	00ca303a 	nor	r5,zero,r3
   4208c:	01a02074 	movhi	r6,32897
   42090:	19c7883a 	add	r3,r3,r7
   42094:	31a02004 	addi	r6,r6,-32640
   42098:	1946703a 	and	r3,r3,r5
   4209c:	1986703a 	and	r3,r3,r6
   420a0:	1800091e 	bne	r3,zero,420c8 <strlen+0x78>
   420a4:	10800104 	addi	r2,r2,4
   420a8:	10c00017 	ldw	r3,0(r2)
   420ac:	19cb883a 	add	r5,r3,r7
   420b0:	00c6303a 	nor	r3,zero,r3
   420b4:	28c6703a 	and	r3,r5,r3
   420b8:	1986703a 	and	r3,r3,r6
   420bc:	183ff926 	beq	r3,zero,420a4 <__alt_data_end+0xfffd00a4>
   420c0:	00000106 	br	420c8 <strlen+0x78>
   420c4:	10800044 	addi	r2,r2,1
   420c8:	10c00007 	ldb	r3,0(r2)
   420cc:	183ffd1e 	bne	r3,zero,420c4 <__alt_data_end+0xfffd00c4>
   420d0:	1105c83a 	sub	r2,r2,r4
   420d4:	f800283a 	ret
   420d8:	2005883a 	mov	r2,r4
   420dc:	003fe706 	br	4207c <__alt_data_end+0xfffd007c>
   420e0:	0005883a 	mov	r2,zero
   420e4:	f800283a 	ret

000420e8 <___vfprintf_internal_r>:
   420e8:	deffb804 	addi	sp,sp,-288
   420ec:	dfc04715 	stw	ra,284(sp)
   420f0:	ddc04515 	stw	r23,276(sp)
   420f4:	dd404315 	stw	r21,268(sp)
   420f8:	d9002c15 	stw	r4,176(sp)
   420fc:	282f883a 	mov	r23,r5
   42100:	302b883a 	mov	r21,r6
   42104:	d9c02d15 	stw	r7,180(sp)
   42108:	df004615 	stw	fp,280(sp)
   4210c:	dd804415 	stw	r22,272(sp)
   42110:	dd004215 	stw	r20,264(sp)
   42114:	dcc04115 	stw	r19,260(sp)
   42118:	dc804015 	stw	r18,256(sp)
   4211c:	dc403f15 	stw	r17,252(sp)
   42120:	dc003e15 	stw	r16,248(sp)
   42124:	00470b40 	call	470b4 <_localeconv_r>
   42128:	10800017 	ldw	r2,0(r2)
   4212c:	1009883a 	mov	r4,r2
   42130:	d8803415 	stw	r2,208(sp)
   42134:	00420500 	call	42050 <strlen>
   42138:	d8803715 	stw	r2,220(sp)
   4213c:	d8802c17 	ldw	r2,176(sp)
   42140:	10000226 	beq	r2,zero,4214c <___vfprintf_internal_r+0x64>
   42144:	10800e17 	ldw	r2,56(r2)
   42148:	1000f926 	beq	r2,zero,42530 <___vfprintf_internal_r+0x448>
   4214c:	b880030b 	ldhu	r2,12(r23)
   42150:	10c8000c 	andi	r3,r2,8192
   42154:	1800061e 	bne	r3,zero,42170 <___vfprintf_internal_r+0x88>
   42158:	b9001917 	ldw	r4,100(r23)
   4215c:	00f7ffc4 	movi	r3,-8193
   42160:	10880014 	ori	r2,r2,8192
   42164:	20c6703a 	and	r3,r4,r3
   42168:	b880030d 	sth	r2,12(r23)
   4216c:	b8c01915 	stw	r3,100(r23)
   42170:	10c0020c 	andi	r3,r2,8
   42174:	1800c126 	beq	r3,zero,4247c <___vfprintf_internal_r+0x394>
   42178:	b8c00417 	ldw	r3,16(r23)
   4217c:	1800bf26 	beq	r3,zero,4247c <___vfprintf_internal_r+0x394>
   42180:	1080068c 	andi	r2,r2,26
   42184:	00c00284 	movi	r3,10
   42188:	10c0c426 	beq	r2,r3,4249c <___vfprintf_internal_r+0x3b4>
   4218c:	d8c00404 	addi	r3,sp,16
   42190:	05000174 	movhi	r20,5
   42194:	d9001e04 	addi	r4,sp,120
   42198:	a5052684 	addi	r20,r20,5274
   4219c:	d8c01e15 	stw	r3,120(sp)
   421a0:	d8002015 	stw	zero,128(sp)
   421a4:	d8001f15 	stw	zero,124(sp)
   421a8:	d8003315 	stw	zero,204(sp)
   421ac:	d8003615 	stw	zero,216(sp)
   421b0:	d8003815 	stw	zero,224(sp)
   421b4:	1811883a 	mov	r8,r3
   421b8:	d8003915 	stw	zero,228(sp)
   421bc:	d8003a15 	stw	zero,232(sp)
   421c0:	d8002f15 	stw	zero,188(sp)
   421c4:	d9002815 	stw	r4,160(sp)
   421c8:	a8800007 	ldb	r2,0(r21)
   421cc:	10027b26 	beq	r2,zero,42bbc <___vfprintf_internal_r+0xad4>
   421d0:	00c00944 	movi	r3,37
   421d4:	a821883a 	mov	r16,r21
   421d8:	10c0021e 	bne	r2,r3,421e4 <___vfprintf_internal_r+0xfc>
   421dc:	00001406 	br	42230 <___vfprintf_internal_r+0x148>
   421e0:	10c00326 	beq	r2,r3,421f0 <___vfprintf_internal_r+0x108>
   421e4:	84000044 	addi	r16,r16,1
   421e8:	80800007 	ldb	r2,0(r16)
   421ec:	103ffc1e 	bne	r2,zero,421e0 <__alt_data_end+0xfffd01e0>
   421f0:	8563c83a 	sub	r17,r16,r21
   421f4:	88000e26 	beq	r17,zero,42230 <___vfprintf_internal_r+0x148>
   421f8:	d8c02017 	ldw	r3,128(sp)
   421fc:	d8801f17 	ldw	r2,124(sp)
   42200:	45400015 	stw	r21,0(r8)
   42204:	1c47883a 	add	r3,r3,r17
   42208:	10800044 	addi	r2,r2,1
   4220c:	d8c02015 	stw	r3,128(sp)
   42210:	44400115 	stw	r17,4(r8)
   42214:	d8801f15 	stw	r2,124(sp)
   42218:	00c001c4 	movi	r3,7
   4221c:	1880a716 	blt	r3,r2,424bc <___vfprintf_internal_r+0x3d4>
   42220:	42000204 	addi	r8,r8,8
   42224:	d9402f17 	ldw	r5,188(sp)
   42228:	2c4b883a 	add	r5,r5,r17
   4222c:	d9402f15 	stw	r5,188(sp)
   42230:	80800007 	ldb	r2,0(r16)
   42234:	1000a826 	beq	r2,zero,424d8 <___vfprintf_internal_r+0x3f0>
   42238:	84400047 	ldb	r17,1(r16)
   4223c:	00bfffc4 	movi	r2,-1
   42240:	85400044 	addi	r21,r16,1
   42244:	d8002785 	stb	zero,158(sp)
   42248:	0007883a 	mov	r3,zero
   4224c:	000f883a 	mov	r7,zero
   42250:	d8802915 	stw	r2,164(sp)
   42254:	d8003115 	stw	zero,196(sp)
   42258:	0025883a 	mov	r18,zero
   4225c:	01401604 	movi	r5,88
   42260:	01800244 	movi	r6,9
   42264:	02800a84 	movi	r10,42
   42268:	02401b04 	movi	r9,108
   4226c:	ad400044 	addi	r21,r21,1
   42270:	88bff804 	addi	r2,r17,-32
   42274:	28830436 	bltu	r5,r2,42e88 <___vfprintf_internal_r+0xda0>
   42278:	100490ba 	slli	r2,r2,2
   4227c:	01000134 	movhi	r4,4
   42280:	2108a404 	addi	r4,r4,8848
   42284:	1105883a 	add	r2,r2,r4
   42288:	10800017 	ldw	r2,0(r2)
   4228c:	1000683a 	jmp	r2
   42290:	00042da8 	cmpgeui	zero,zero,4278
   42294:	00042e88 	cmpgei	zero,zero,4282
   42298:	00042e88 	cmpgei	zero,zero,4282
   4229c:	00042dc8 	cmpgei	zero,zero,4279
   422a0:	00042e88 	cmpgei	zero,zero,4282
   422a4:	00042e88 	cmpgei	zero,zero,4282
   422a8:	00042e88 	cmpgei	zero,zero,4282
   422ac:	00042e88 	cmpgei	zero,zero,4282
   422b0:	00042e88 	cmpgei	zero,zero,4282
   422b4:	00042e88 	cmpgei	zero,zero,4282
   422b8:	0004253c 	xorhi	zero,zero,4244
   422bc:	00042ce4 	muli	zero,zero,4275
   422c0:	00042e88 	cmpgei	zero,zero,4282
   422c4:	00042404 	movi	zero,4240
   422c8:	00042564 	muli	zero,zero,4245
   422cc:	00042e88 	cmpgei	zero,zero,4282
   422d0:	000425a4 	muli	zero,zero,4246
   422d4:	000425b0 	cmpltui	zero,zero,4246
   422d8:	000425b0 	cmpltui	zero,zero,4246
   422dc:	000425b0 	cmpltui	zero,zero,4246
   422e0:	000425b0 	cmpltui	zero,zero,4246
   422e4:	000425b0 	cmpltui	zero,zero,4246
   422e8:	000425b0 	cmpltui	zero,zero,4246
   422ec:	000425b0 	cmpltui	zero,zero,4246
   422f0:	000425b0 	cmpltui	zero,zero,4246
   422f4:	000425b0 	cmpltui	zero,zero,4246
   422f8:	00042e88 	cmpgei	zero,zero,4282
   422fc:	00042e88 	cmpgei	zero,zero,4282
   42300:	00042e88 	cmpgei	zero,zero,4282
   42304:	00042e88 	cmpgei	zero,zero,4282
   42308:	00042e88 	cmpgei	zero,zero,4282
   4230c:	00042e88 	cmpgei	zero,zero,4282
   42310:	00042e88 	cmpgei	zero,zero,4282
   42314:	00042e88 	cmpgei	zero,zero,4282
   42318:	00042e88 	cmpgei	zero,zero,4282
   4231c:	00042e88 	cmpgei	zero,zero,4282
   42320:	000425e4 	muli	zero,zero,4247
   42324:	000426a0 	cmpeqi	zero,zero,4250
   42328:	00042e88 	cmpgei	zero,zero,4282
   4232c:	000426a0 	cmpeqi	zero,zero,4250
   42330:	00042e88 	cmpgei	zero,zero,4282
   42334:	00042e88 	cmpgei	zero,zero,4282
   42338:	00042e88 	cmpgei	zero,zero,4282
   4233c:	00042e88 	cmpgei	zero,zero,4282
   42340:	00042740 	call	4274 <__reset-0x3bd8c>
   42344:	00042e88 	cmpgei	zero,zero,4282
   42348:	00042e88 	cmpgei	zero,zero,4282
   4234c:	0004274c 	andi	zero,zero,4253
   42350:	00042e88 	cmpgei	zero,zero,4282
   42354:	00042e88 	cmpgei	zero,zero,4282
   42358:	00042e88 	cmpgei	zero,zero,4282
   4235c:	00042e88 	cmpgei	zero,zero,4282
   42360:	00042e88 	cmpgei	zero,zero,4282
   42364:	00042bc4 	movi	zero,4271
   42368:	00042e88 	cmpgei	zero,zero,4282
   4236c:	00042e88 	cmpgei	zero,zero,4282
   42370:	00042c24 	muli	zero,zero,4272
   42374:	00042e88 	cmpgei	zero,zero,4282
   42378:	00042e88 	cmpgei	zero,zero,4282
   4237c:	00042e88 	cmpgei	zero,zero,4282
   42380:	00042e88 	cmpgei	zero,zero,4282
   42384:	00042e88 	cmpgei	zero,zero,4282
   42388:	00042e88 	cmpgei	zero,zero,4282
   4238c:	00042e88 	cmpgei	zero,zero,4282
   42390:	00042e88 	cmpgei	zero,zero,4282
   42394:	00042e88 	cmpgei	zero,zero,4282
   42398:	00042e88 	cmpgei	zero,zero,4282
   4239c:	00042e34 	movhi	zero,4280
   423a0:	00042dd4 	movui	zero,4279
   423a4:	000426a0 	cmpeqi	zero,zero,4250
   423a8:	000426a0 	cmpeqi	zero,zero,4250
   423ac:	000426a0 	cmpeqi	zero,zero,4250
   423b0:	00042de4 	muli	zero,zero,4279
   423b4:	00042dd4 	movui	zero,4279
   423b8:	00042e88 	cmpgei	zero,zero,4282
   423bc:	00042e88 	cmpgei	zero,zero,4282
   423c0:	00042df0 	cmpltui	zero,zero,4279
   423c4:	00042e88 	cmpgei	zero,zero,4282
   423c8:	00042e00 	call	42e0 <__reset-0x3bd20>
   423cc:	00042cd4 	movui	zero,4275
   423d0:	00042410 	cmplti	zero,zero,4240
   423d4:	00042cf4 	movhi	zero,4275
   423d8:	00042e88 	cmpgei	zero,zero,4282
   423dc:	00042d00 	call	42d0 <__reset-0x3bd30>
   423e0:	00042e88 	cmpgei	zero,zero,4282
   423e4:	00042d5c 	xori	zero,zero,4277
   423e8:	00042e88 	cmpgei	zero,zero,4282
   423ec:	00042e88 	cmpgei	zero,zero,4282
   423f0:	00042d6c 	andhi	zero,zero,4277
   423f4:	d9003117 	ldw	r4,196(sp)
   423f8:	d8802d15 	stw	r2,180(sp)
   423fc:	0109c83a 	sub	r4,zero,r4
   42400:	d9003115 	stw	r4,196(sp)
   42404:	94800114 	ori	r18,r18,4
   42408:	ac400007 	ldb	r17,0(r21)
   4240c:	003f9706 	br	4226c <__alt_data_end+0xfffd026c>
   42410:	00800c04 	movi	r2,48
   42414:	d9002d17 	ldw	r4,180(sp)
   42418:	d9402917 	ldw	r5,164(sp)
   4241c:	d8802705 	stb	r2,156(sp)
   42420:	00801e04 	movi	r2,120
   42424:	d8802745 	stb	r2,157(sp)
   42428:	d8002785 	stb	zero,158(sp)
   4242c:	20c00104 	addi	r3,r4,4
   42430:	24c00017 	ldw	r19,0(r4)
   42434:	002d883a 	mov	r22,zero
   42438:	90800094 	ori	r2,r18,2
   4243c:	28029a16 	blt	r5,zero,42ea8 <___vfprintf_internal_r+0xdc0>
   42440:	00bfdfc4 	movi	r2,-129
   42444:	90a4703a 	and	r18,r18,r2
   42448:	d8c02d15 	stw	r3,180(sp)
   4244c:	94800094 	ori	r18,r18,2
   42450:	9802871e 	bne	r19,zero,42e70 <___vfprintf_internal_r+0xd88>
   42454:	00800174 	movhi	r2,5
   42458:	10851f04 	addi	r2,r2,5244
   4245c:	d8803915 	stw	r2,228(sp)
   42460:	04401e04 	movi	r17,120
   42464:	d8802917 	ldw	r2,164(sp)
   42468:	0039883a 	mov	fp,zero
   4246c:	1001e926 	beq	r2,zero,42c14 <___vfprintf_internal_r+0xb2c>
   42470:	0027883a 	mov	r19,zero
   42474:	002d883a 	mov	r22,zero
   42478:	00020506 	br	42c90 <___vfprintf_internal_r+0xba8>
   4247c:	d9002c17 	ldw	r4,176(sp)
   42480:	b80b883a 	mov	r5,r23
   42484:	00444180 	call	44418 <__swsetup_r>
   42488:	1005ac1e 	bne	r2,zero,43b3c <___vfprintf_internal_r+0x1a54>
   4248c:	b880030b 	ldhu	r2,12(r23)
   42490:	00c00284 	movi	r3,10
   42494:	1080068c 	andi	r2,r2,26
   42498:	10ff3c1e 	bne	r2,r3,4218c <__alt_data_end+0xfffd018c>
   4249c:	b880038f 	ldh	r2,14(r23)
   424a0:	103f3a16 	blt	r2,zero,4218c <__alt_data_end+0xfffd018c>
   424a4:	d9c02d17 	ldw	r7,180(sp)
   424a8:	d9002c17 	ldw	r4,176(sp)
   424ac:	a80d883a 	mov	r6,r21
   424b0:	b80b883a 	mov	r5,r23
   424b4:	00442fc0 	call	442fc <__sbprintf>
   424b8:	00001106 	br	42500 <___vfprintf_internal_r+0x418>
   424bc:	d9002c17 	ldw	r4,176(sp)
   424c0:	d9801e04 	addi	r6,sp,120
   424c4:	b80b883a 	mov	r5,r23
   424c8:	0048e400 	call	48e40 <__sprint_r>
   424cc:	1000081e 	bne	r2,zero,424f0 <___vfprintf_internal_r+0x408>
   424d0:	da000404 	addi	r8,sp,16
   424d4:	003f5306 	br	42224 <__alt_data_end+0xfffd0224>
   424d8:	d8802017 	ldw	r2,128(sp)
   424dc:	10000426 	beq	r2,zero,424f0 <___vfprintf_internal_r+0x408>
   424e0:	d9002c17 	ldw	r4,176(sp)
   424e4:	d9801e04 	addi	r6,sp,120
   424e8:	b80b883a 	mov	r5,r23
   424ec:	0048e400 	call	48e40 <__sprint_r>
   424f0:	b880030b 	ldhu	r2,12(r23)
   424f4:	1080100c 	andi	r2,r2,64
   424f8:	1005901e 	bne	r2,zero,43b3c <___vfprintf_internal_r+0x1a54>
   424fc:	d8802f17 	ldw	r2,188(sp)
   42500:	dfc04717 	ldw	ra,284(sp)
   42504:	df004617 	ldw	fp,280(sp)
   42508:	ddc04517 	ldw	r23,276(sp)
   4250c:	dd804417 	ldw	r22,272(sp)
   42510:	dd404317 	ldw	r21,268(sp)
   42514:	dd004217 	ldw	r20,264(sp)
   42518:	dcc04117 	ldw	r19,260(sp)
   4251c:	dc804017 	ldw	r18,256(sp)
   42520:	dc403f17 	ldw	r17,252(sp)
   42524:	dc003e17 	ldw	r16,248(sp)
   42528:	dec04804 	addi	sp,sp,288
   4252c:	f800283a 	ret
   42530:	d9002c17 	ldw	r4,176(sp)
   42534:	00464400 	call	46440 <__sinit>
   42538:	003f0406 	br	4214c <__alt_data_end+0xfffd014c>
   4253c:	d8802d17 	ldw	r2,180(sp)
   42540:	d9002d17 	ldw	r4,180(sp)
   42544:	10800017 	ldw	r2,0(r2)
   42548:	d8803115 	stw	r2,196(sp)
   4254c:	20800104 	addi	r2,r4,4
   42550:	d9003117 	ldw	r4,196(sp)
   42554:	203fa716 	blt	r4,zero,423f4 <__alt_data_end+0xfffd03f4>
   42558:	d8802d15 	stw	r2,180(sp)
   4255c:	ac400007 	ldb	r17,0(r21)
   42560:	003f4206 	br	4226c <__alt_data_end+0xfffd026c>
   42564:	ac400007 	ldb	r17,0(r21)
   42568:	aac00044 	addi	r11,r21,1
   4256c:	8a872826 	beq	r17,r10,44210 <___vfprintf_internal_r+0x2128>
   42570:	88bff404 	addi	r2,r17,-48
   42574:	0009883a 	mov	r4,zero
   42578:	30867d36 	bltu	r6,r2,43f70 <___vfprintf_internal_r+0x1e88>
   4257c:	5c400007 	ldb	r17,0(r11)
   42580:	210002a4 	muli	r4,r4,10
   42584:	5d400044 	addi	r21,r11,1
   42588:	a817883a 	mov	r11,r21
   4258c:	2089883a 	add	r4,r4,r2
   42590:	88bff404 	addi	r2,r17,-48
   42594:	30bff92e 	bgeu	r6,r2,4257c <__alt_data_end+0xfffd057c>
   42598:	2005c916 	blt	r4,zero,43cc0 <___vfprintf_internal_r+0x1bd8>
   4259c:	d9002915 	stw	r4,164(sp)
   425a0:	003f3306 	br	42270 <__alt_data_end+0xfffd0270>
   425a4:	94802014 	ori	r18,r18,128
   425a8:	ac400007 	ldb	r17,0(r21)
   425ac:	003f2f06 	br	4226c <__alt_data_end+0xfffd026c>
   425b0:	a809883a 	mov	r4,r21
   425b4:	d8003115 	stw	zero,196(sp)
   425b8:	88bff404 	addi	r2,r17,-48
   425bc:	0017883a 	mov	r11,zero
   425c0:	24400007 	ldb	r17,0(r4)
   425c4:	5ac002a4 	muli	r11,r11,10
   425c8:	ad400044 	addi	r21,r21,1
   425cc:	a809883a 	mov	r4,r21
   425d0:	12d7883a 	add	r11,r2,r11
   425d4:	88bff404 	addi	r2,r17,-48
   425d8:	30bff92e 	bgeu	r6,r2,425c0 <__alt_data_end+0xfffd05c0>
   425dc:	dac03115 	stw	r11,196(sp)
   425e0:	003f2306 	br	42270 <__alt_data_end+0xfffd0270>
   425e4:	18c03fcc 	andi	r3,r3,255
   425e8:	18072b1e 	bne	r3,zero,44298 <___vfprintf_internal_r+0x21b0>
   425ec:	94800414 	ori	r18,r18,16
   425f0:	9080080c 	andi	r2,r18,32
   425f4:	10037b26 	beq	r2,zero,433e4 <___vfprintf_internal_r+0x12fc>
   425f8:	d9402d17 	ldw	r5,180(sp)
   425fc:	28800117 	ldw	r2,4(r5)
   42600:	2cc00017 	ldw	r19,0(r5)
   42604:	29400204 	addi	r5,r5,8
   42608:	d9402d15 	stw	r5,180(sp)
   4260c:	102d883a 	mov	r22,r2
   42610:	10044b16 	blt	r2,zero,43740 <___vfprintf_internal_r+0x1658>
   42614:	d9402917 	ldw	r5,164(sp)
   42618:	df002783 	ldbu	fp,158(sp)
   4261c:	2803bc16 	blt	r5,zero,43510 <___vfprintf_internal_r+0x1428>
   42620:	00ffdfc4 	movi	r3,-129
   42624:	9d84b03a 	or	r2,r19,r22
   42628:	90e4703a 	and	r18,r18,r3
   4262c:	10017726 	beq	r2,zero,42c0c <___vfprintf_internal_r+0xb24>
   42630:	b0038326 	beq	r22,zero,43440 <___vfprintf_internal_r+0x1358>
   42634:	dc402a15 	stw	r17,168(sp)
   42638:	dc001e04 	addi	r16,sp,120
   4263c:	b023883a 	mov	r17,r22
   42640:	402d883a 	mov	r22,r8
   42644:	9809883a 	mov	r4,r19
   42648:	880b883a 	mov	r5,r17
   4264c:	01800284 	movi	r6,10
   42650:	000f883a 	mov	r7,zero
   42654:	004b0140 	call	4b014 <__umoddi3>
   42658:	10800c04 	addi	r2,r2,48
   4265c:	843fffc4 	addi	r16,r16,-1
   42660:	9809883a 	mov	r4,r19
   42664:	880b883a 	mov	r5,r17
   42668:	80800005 	stb	r2,0(r16)
   4266c:	01800284 	movi	r6,10
   42670:	000f883a 	mov	r7,zero
   42674:	004aa9c0 	call	4aa9c <__udivdi3>
   42678:	1027883a 	mov	r19,r2
   4267c:	10c4b03a 	or	r2,r2,r3
   42680:	1823883a 	mov	r17,r3
   42684:	103fef1e 	bne	r2,zero,42644 <__alt_data_end+0xfffd0644>
   42688:	d8c02817 	ldw	r3,160(sp)
   4268c:	dc402a17 	ldw	r17,168(sp)
   42690:	b011883a 	mov	r8,r22
   42694:	1c07c83a 	sub	r3,r3,r16
   42698:	d8c02e15 	stw	r3,184(sp)
   4269c:	00005906 	br	42804 <___vfprintf_internal_r+0x71c>
   426a0:	18c03fcc 	andi	r3,r3,255
   426a4:	1806fa1e 	bne	r3,zero,44290 <___vfprintf_internal_r+0x21a8>
   426a8:	9080020c 	andi	r2,r18,8
   426ac:	10048a26 	beq	r2,zero,438d8 <___vfprintf_internal_r+0x17f0>
   426b0:	d8c02d17 	ldw	r3,180(sp)
   426b4:	d9002d17 	ldw	r4,180(sp)
   426b8:	d9402d17 	ldw	r5,180(sp)
   426bc:	18c00017 	ldw	r3,0(r3)
   426c0:	21000117 	ldw	r4,4(r4)
   426c4:	29400204 	addi	r5,r5,8
   426c8:	d8c03615 	stw	r3,216(sp)
   426cc:	d9003815 	stw	r4,224(sp)
   426d0:	d9402d15 	stw	r5,180(sp)
   426d4:	d9003617 	ldw	r4,216(sp)
   426d8:	d9403817 	ldw	r5,224(sp)
   426dc:	da003d15 	stw	r8,244(sp)
   426e0:	04000044 	movi	r16,1
   426e4:	0048bf40 	call	48bf4 <__fpclassifyd>
   426e8:	da003d17 	ldw	r8,244(sp)
   426ec:	14041f1e 	bne	r2,r16,4376c <___vfprintf_internal_r+0x1684>
   426f0:	d9003617 	ldw	r4,216(sp)
   426f4:	d9403817 	ldw	r5,224(sp)
   426f8:	000d883a 	mov	r6,zero
   426fc:	000f883a 	mov	r7,zero
   42700:	004c8440 	call	4c844 <__ledf2>
   42704:	da003d17 	ldw	r8,244(sp)
   42708:	1005be16 	blt	r2,zero,43e04 <___vfprintf_internal_r+0x1d1c>
   4270c:	df002783 	ldbu	fp,158(sp)
   42710:	008011c4 	movi	r2,71
   42714:	1445330e 	bge	r2,r17,43be4 <___vfprintf_internal_r+0x1afc>
   42718:	04000174 	movhi	r16,5
   4271c:	84051704 	addi	r16,r16,5212
   42720:	00c000c4 	movi	r3,3
   42724:	00bfdfc4 	movi	r2,-129
   42728:	d8c02a15 	stw	r3,168(sp)
   4272c:	90a4703a 	and	r18,r18,r2
   42730:	d8c02e15 	stw	r3,184(sp)
   42734:	d8002915 	stw	zero,164(sp)
   42738:	d8003215 	stw	zero,200(sp)
   4273c:	00003706 	br	4281c <___vfprintf_internal_r+0x734>
   42740:	94800214 	ori	r18,r18,8
   42744:	ac400007 	ldb	r17,0(r21)
   42748:	003ec806 	br	4226c <__alt_data_end+0xfffd026c>
   4274c:	18c03fcc 	andi	r3,r3,255
   42750:	1806db1e 	bne	r3,zero,442c0 <___vfprintf_internal_r+0x21d8>
   42754:	94800414 	ori	r18,r18,16
   42758:	9080080c 	andi	r2,r18,32
   4275c:	1002d826 	beq	r2,zero,432c0 <___vfprintf_internal_r+0x11d8>
   42760:	d9402d17 	ldw	r5,180(sp)
   42764:	d8c02917 	ldw	r3,164(sp)
   42768:	d8002785 	stb	zero,158(sp)
   4276c:	28800204 	addi	r2,r5,8
   42770:	2cc00017 	ldw	r19,0(r5)
   42774:	2d800117 	ldw	r22,4(r5)
   42778:	18048f16 	blt	r3,zero,439b8 <___vfprintf_internal_r+0x18d0>
   4277c:	013fdfc4 	movi	r4,-129
   42780:	9d86b03a 	or	r3,r19,r22
   42784:	d8802d15 	stw	r2,180(sp)
   42788:	9124703a 	and	r18,r18,r4
   4278c:	1802d91e 	bne	r3,zero,432f4 <___vfprintf_internal_r+0x120c>
   42790:	d8c02917 	ldw	r3,164(sp)
   42794:	0039883a 	mov	fp,zero
   42798:	1805c326 	beq	r3,zero,43ea8 <___vfprintf_internal_r+0x1dc0>
   4279c:	0027883a 	mov	r19,zero
   427a0:	002d883a 	mov	r22,zero
   427a4:	dc001e04 	addi	r16,sp,120
   427a8:	9806d0fa 	srli	r3,r19,3
   427ac:	b008977a 	slli	r4,r22,29
   427b0:	b02cd0fa 	srli	r22,r22,3
   427b4:	9cc001cc 	andi	r19,r19,7
   427b8:	98800c04 	addi	r2,r19,48
   427bc:	843fffc4 	addi	r16,r16,-1
   427c0:	20e6b03a 	or	r19,r4,r3
   427c4:	80800005 	stb	r2,0(r16)
   427c8:	9d86b03a 	or	r3,r19,r22
   427cc:	183ff61e 	bne	r3,zero,427a8 <__alt_data_end+0xfffd07a8>
   427d0:	90c0004c 	andi	r3,r18,1
   427d4:	18013b26 	beq	r3,zero,42cc4 <___vfprintf_internal_r+0xbdc>
   427d8:	10803fcc 	andi	r2,r2,255
   427dc:	1080201c 	xori	r2,r2,128
   427e0:	10bfe004 	addi	r2,r2,-128
   427e4:	00c00c04 	movi	r3,48
   427e8:	10c13626 	beq	r2,r3,42cc4 <___vfprintf_internal_r+0xbdc>
   427ec:	80ffffc5 	stb	r3,-1(r16)
   427f0:	d8c02817 	ldw	r3,160(sp)
   427f4:	80bfffc4 	addi	r2,r16,-1
   427f8:	1021883a 	mov	r16,r2
   427fc:	1887c83a 	sub	r3,r3,r2
   42800:	d8c02e15 	stw	r3,184(sp)
   42804:	d8802e17 	ldw	r2,184(sp)
   42808:	d9002917 	ldw	r4,164(sp)
   4280c:	1100010e 	bge	r2,r4,42814 <___vfprintf_internal_r+0x72c>
   42810:	2005883a 	mov	r2,r4
   42814:	d8802a15 	stw	r2,168(sp)
   42818:	d8003215 	stw	zero,200(sp)
   4281c:	e7003fcc 	andi	fp,fp,255
   42820:	e700201c 	xori	fp,fp,128
   42824:	e73fe004 	addi	fp,fp,-128
   42828:	e0000326 	beq	fp,zero,42838 <___vfprintf_internal_r+0x750>
   4282c:	d8c02a17 	ldw	r3,168(sp)
   42830:	18c00044 	addi	r3,r3,1
   42834:	d8c02a15 	stw	r3,168(sp)
   42838:	90c0008c 	andi	r3,r18,2
   4283c:	d8c02b15 	stw	r3,172(sp)
   42840:	18000326 	beq	r3,zero,42850 <___vfprintf_internal_r+0x768>
   42844:	d8c02a17 	ldw	r3,168(sp)
   42848:	18c00084 	addi	r3,r3,2
   4284c:	d8c02a15 	stw	r3,168(sp)
   42850:	90c0210c 	andi	r3,r18,132
   42854:	d8c03015 	stw	r3,192(sp)
   42858:	1801a31e 	bne	r3,zero,42ee8 <___vfprintf_internal_r+0xe00>
   4285c:	d9003117 	ldw	r4,196(sp)
   42860:	d8c02a17 	ldw	r3,168(sp)
   42864:	20e7c83a 	sub	r19,r4,r3
   42868:	04c19f0e 	bge	zero,r19,42ee8 <___vfprintf_internal_r+0xe00>
   4286c:	02400404 	movi	r9,16
   42870:	d8c02017 	ldw	r3,128(sp)
   42874:	d8801f17 	ldw	r2,124(sp)
   42878:	4cc50d0e 	bge	r9,r19,43cb0 <___vfprintf_internal_r+0x1bc8>
   4287c:	01400174 	movhi	r5,5
   42880:	29452a84 	addi	r5,r5,5290
   42884:	dc403b15 	stw	r17,236(sp)
   42888:	d9403515 	stw	r5,212(sp)
   4288c:	9823883a 	mov	r17,r19
   42890:	482d883a 	mov	r22,r9
   42894:	9027883a 	mov	r19,r18
   42898:	070001c4 	movi	fp,7
   4289c:	8025883a 	mov	r18,r16
   428a0:	dc002c17 	ldw	r16,176(sp)
   428a4:	00000306 	br	428b4 <___vfprintf_internal_r+0x7cc>
   428a8:	8c7ffc04 	addi	r17,r17,-16
   428ac:	42000204 	addi	r8,r8,8
   428b0:	b440130e 	bge	r22,r17,42900 <___vfprintf_internal_r+0x818>
   428b4:	01000174 	movhi	r4,5
   428b8:	18c00404 	addi	r3,r3,16
   428bc:	10800044 	addi	r2,r2,1
   428c0:	21052a84 	addi	r4,r4,5290
   428c4:	41000015 	stw	r4,0(r8)
   428c8:	45800115 	stw	r22,4(r8)
   428cc:	d8c02015 	stw	r3,128(sp)
   428d0:	d8801f15 	stw	r2,124(sp)
   428d4:	e0bff40e 	bge	fp,r2,428a8 <__alt_data_end+0xfffd08a8>
   428d8:	d9801e04 	addi	r6,sp,120
   428dc:	b80b883a 	mov	r5,r23
   428e0:	8009883a 	mov	r4,r16
   428e4:	0048e400 	call	48e40 <__sprint_r>
   428e8:	103f011e 	bne	r2,zero,424f0 <__alt_data_end+0xfffd04f0>
   428ec:	8c7ffc04 	addi	r17,r17,-16
   428f0:	d8c02017 	ldw	r3,128(sp)
   428f4:	d8801f17 	ldw	r2,124(sp)
   428f8:	da000404 	addi	r8,sp,16
   428fc:	b47fed16 	blt	r22,r17,428b4 <__alt_data_end+0xfffd08b4>
   42900:	9021883a 	mov	r16,r18
   42904:	9825883a 	mov	r18,r19
   42908:	8827883a 	mov	r19,r17
   4290c:	dc403b17 	ldw	r17,236(sp)
   42910:	d9403517 	ldw	r5,212(sp)
   42914:	98c7883a 	add	r3,r19,r3
   42918:	10800044 	addi	r2,r2,1
   4291c:	41400015 	stw	r5,0(r8)
   42920:	44c00115 	stw	r19,4(r8)
   42924:	d8c02015 	stw	r3,128(sp)
   42928:	d8801f15 	stw	r2,124(sp)
   4292c:	010001c4 	movi	r4,7
   42930:	2082a316 	blt	r4,r2,433c0 <___vfprintf_internal_r+0x12d8>
   42934:	df002787 	ldb	fp,158(sp)
   42938:	42000204 	addi	r8,r8,8
   4293c:	e0000c26 	beq	fp,zero,42970 <___vfprintf_internal_r+0x888>
   42940:	d8801f17 	ldw	r2,124(sp)
   42944:	d9002784 	addi	r4,sp,158
   42948:	18c00044 	addi	r3,r3,1
   4294c:	10800044 	addi	r2,r2,1
   42950:	41000015 	stw	r4,0(r8)
   42954:	01000044 	movi	r4,1
   42958:	41000115 	stw	r4,4(r8)
   4295c:	d8c02015 	stw	r3,128(sp)
   42960:	d8801f15 	stw	r2,124(sp)
   42964:	010001c4 	movi	r4,7
   42968:	20823c16 	blt	r4,r2,4325c <___vfprintf_internal_r+0x1174>
   4296c:	42000204 	addi	r8,r8,8
   42970:	d8802b17 	ldw	r2,172(sp)
   42974:	10000c26 	beq	r2,zero,429a8 <___vfprintf_internal_r+0x8c0>
   42978:	d8801f17 	ldw	r2,124(sp)
   4297c:	d9002704 	addi	r4,sp,156
   42980:	18c00084 	addi	r3,r3,2
   42984:	10800044 	addi	r2,r2,1
   42988:	41000015 	stw	r4,0(r8)
   4298c:	01000084 	movi	r4,2
   42990:	41000115 	stw	r4,4(r8)
   42994:	d8c02015 	stw	r3,128(sp)
   42998:	d8801f15 	stw	r2,124(sp)
   4299c:	010001c4 	movi	r4,7
   429a0:	20823616 	blt	r4,r2,4327c <___vfprintf_internal_r+0x1194>
   429a4:	42000204 	addi	r8,r8,8
   429a8:	d9003017 	ldw	r4,192(sp)
   429ac:	00802004 	movi	r2,128
   429b0:	20819926 	beq	r4,r2,43018 <___vfprintf_internal_r+0xf30>
   429b4:	d9402917 	ldw	r5,164(sp)
   429b8:	d8802e17 	ldw	r2,184(sp)
   429bc:	28adc83a 	sub	r22,r5,r2
   429c0:	0580310e 	bge	zero,r22,42a88 <___vfprintf_internal_r+0x9a0>
   429c4:	07000404 	movi	fp,16
   429c8:	d8801f17 	ldw	r2,124(sp)
   429cc:	e584140e 	bge	fp,r22,43a20 <___vfprintf_internal_r+0x1938>
   429d0:	01400174 	movhi	r5,5
   429d4:	29452684 	addi	r5,r5,5274
   429d8:	dc402915 	stw	r17,164(sp)
   429dc:	d9402b15 	stw	r5,172(sp)
   429e0:	b023883a 	mov	r17,r22
   429e4:	04c001c4 	movi	r19,7
   429e8:	a82d883a 	mov	r22,r21
   429ec:	902b883a 	mov	r21,r18
   429f0:	8025883a 	mov	r18,r16
   429f4:	dc002c17 	ldw	r16,176(sp)
   429f8:	00000306 	br	42a08 <___vfprintf_internal_r+0x920>
   429fc:	8c7ffc04 	addi	r17,r17,-16
   42a00:	42000204 	addi	r8,r8,8
   42a04:	e440110e 	bge	fp,r17,42a4c <___vfprintf_internal_r+0x964>
   42a08:	18c00404 	addi	r3,r3,16
   42a0c:	10800044 	addi	r2,r2,1
   42a10:	45000015 	stw	r20,0(r8)
   42a14:	47000115 	stw	fp,4(r8)
   42a18:	d8c02015 	stw	r3,128(sp)
   42a1c:	d8801f15 	stw	r2,124(sp)
   42a20:	98bff60e 	bge	r19,r2,429fc <__alt_data_end+0xfffd09fc>
   42a24:	d9801e04 	addi	r6,sp,120
   42a28:	b80b883a 	mov	r5,r23
   42a2c:	8009883a 	mov	r4,r16
   42a30:	0048e400 	call	48e40 <__sprint_r>
   42a34:	103eae1e 	bne	r2,zero,424f0 <__alt_data_end+0xfffd04f0>
   42a38:	8c7ffc04 	addi	r17,r17,-16
   42a3c:	d8c02017 	ldw	r3,128(sp)
   42a40:	d8801f17 	ldw	r2,124(sp)
   42a44:	da000404 	addi	r8,sp,16
   42a48:	e47fef16 	blt	fp,r17,42a08 <__alt_data_end+0xfffd0a08>
   42a4c:	9021883a 	mov	r16,r18
   42a50:	a825883a 	mov	r18,r21
   42a54:	b02b883a 	mov	r21,r22
   42a58:	882d883a 	mov	r22,r17
   42a5c:	dc402917 	ldw	r17,164(sp)
   42a60:	d9002b17 	ldw	r4,172(sp)
   42a64:	1d87883a 	add	r3,r3,r22
   42a68:	10800044 	addi	r2,r2,1
   42a6c:	41000015 	stw	r4,0(r8)
   42a70:	45800115 	stw	r22,4(r8)
   42a74:	d8c02015 	stw	r3,128(sp)
   42a78:	d8801f15 	stw	r2,124(sp)
   42a7c:	010001c4 	movi	r4,7
   42a80:	2081ee16 	blt	r4,r2,4323c <___vfprintf_internal_r+0x1154>
   42a84:	42000204 	addi	r8,r8,8
   42a88:	9080400c 	andi	r2,r18,256
   42a8c:	1001181e 	bne	r2,zero,42ef0 <___vfprintf_internal_r+0xe08>
   42a90:	d9402e17 	ldw	r5,184(sp)
   42a94:	d8801f17 	ldw	r2,124(sp)
   42a98:	44000015 	stw	r16,0(r8)
   42a9c:	1947883a 	add	r3,r3,r5
   42aa0:	10800044 	addi	r2,r2,1
   42aa4:	41400115 	stw	r5,4(r8)
   42aa8:	d8c02015 	stw	r3,128(sp)
   42aac:	d8801f15 	stw	r2,124(sp)
   42ab0:	010001c4 	movi	r4,7
   42ab4:	2081d316 	blt	r4,r2,43204 <___vfprintf_internal_r+0x111c>
   42ab8:	42000204 	addi	r8,r8,8
   42abc:	9480010c 	andi	r18,r18,4
   42ac0:	90003226 	beq	r18,zero,42b8c <___vfprintf_internal_r+0xaa4>
   42ac4:	d9403117 	ldw	r5,196(sp)
   42ac8:	d8802a17 	ldw	r2,168(sp)
   42acc:	28a1c83a 	sub	r16,r5,r2
   42ad0:	04002e0e 	bge	zero,r16,42b8c <___vfprintf_internal_r+0xaa4>
   42ad4:	04400404 	movi	r17,16
   42ad8:	d8801f17 	ldw	r2,124(sp)
   42adc:	8c04a20e 	bge	r17,r16,43d68 <___vfprintf_internal_r+0x1c80>
   42ae0:	01400174 	movhi	r5,5
   42ae4:	29452a84 	addi	r5,r5,5290
   42ae8:	d9403515 	stw	r5,212(sp)
   42aec:	048001c4 	movi	r18,7
   42af0:	dcc02c17 	ldw	r19,176(sp)
   42af4:	00000306 	br	42b04 <___vfprintf_internal_r+0xa1c>
   42af8:	843ffc04 	addi	r16,r16,-16
   42afc:	42000204 	addi	r8,r8,8
   42b00:	8c00130e 	bge	r17,r16,42b50 <___vfprintf_internal_r+0xa68>
   42b04:	01000174 	movhi	r4,5
   42b08:	18c00404 	addi	r3,r3,16
   42b0c:	10800044 	addi	r2,r2,1
   42b10:	21052a84 	addi	r4,r4,5290
   42b14:	41000015 	stw	r4,0(r8)
   42b18:	44400115 	stw	r17,4(r8)
   42b1c:	d8c02015 	stw	r3,128(sp)
   42b20:	d8801f15 	stw	r2,124(sp)
   42b24:	90bff40e 	bge	r18,r2,42af8 <__alt_data_end+0xfffd0af8>
   42b28:	d9801e04 	addi	r6,sp,120
   42b2c:	b80b883a 	mov	r5,r23
   42b30:	9809883a 	mov	r4,r19
   42b34:	0048e400 	call	48e40 <__sprint_r>
   42b38:	103e6d1e 	bne	r2,zero,424f0 <__alt_data_end+0xfffd04f0>
   42b3c:	843ffc04 	addi	r16,r16,-16
   42b40:	d8c02017 	ldw	r3,128(sp)
   42b44:	d8801f17 	ldw	r2,124(sp)
   42b48:	da000404 	addi	r8,sp,16
   42b4c:	8c3fed16 	blt	r17,r16,42b04 <__alt_data_end+0xfffd0b04>
   42b50:	d9403517 	ldw	r5,212(sp)
   42b54:	1c07883a 	add	r3,r3,r16
   42b58:	10800044 	addi	r2,r2,1
   42b5c:	41400015 	stw	r5,0(r8)
   42b60:	44000115 	stw	r16,4(r8)
   42b64:	d8c02015 	stw	r3,128(sp)
   42b68:	d8801f15 	stw	r2,124(sp)
   42b6c:	010001c4 	movi	r4,7
   42b70:	2080060e 	bge	r4,r2,42b8c <___vfprintf_internal_r+0xaa4>
   42b74:	d9002c17 	ldw	r4,176(sp)
   42b78:	d9801e04 	addi	r6,sp,120
   42b7c:	b80b883a 	mov	r5,r23
   42b80:	0048e400 	call	48e40 <__sprint_r>
   42b84:	103e5a1e 	bne	r2,zero,424f0 <__alt_data_end+0xfffd04f0>
   42b88:	d8c02017 	ldw	r3,128(sp)
   42b8c:	d8803117 	ldw	r2,196(sp)
   42b90:	d9002a17 	ldw	r4,168(sp)
   42b94:	1100010e 	bge	r2,r4,42b9c <___vfprintf_internal_r+0xab4>
   42b98:	2005883a 	mov	r2,r4
   42b9c:	d9402f17 	ldw	r5,188(sp)
   42ba0:	288b883a 	add	r5,r5,r2
   42ba4:	d9402f15 	stw	r5,188(sp)
   42ba8:	18019e1e 	bne	r3,zero,43224 <___vfprintf_internal_r+0x113c>
   42bac:	a8800007 	ldb	r2,0(r21)
   42bb0:	d8001f15 	stw	zero,124(sp)
   42bb4:	da000404 	addi	r8,sp,16
   42bb8:	103d851e 	bne	r2,zero,421d0 <__alt_data_end+0xfffd01d0>
   42bbc:	a821883a 	mov	r16,r21
   42bc0:	003d9b06 	br	42230 <__alt_data_end+0xfffd0230>
   42bc4:	18c03fcc 	andi	r3,r3,255
   42bc8:	1805c11e 	bne	r3,zero,442d0 <___vfprintf_internal_r+0x21e8>
   42bcc:	94800414 	ori	r18,r18,16
   42bd0:	9080080c 	andi	r2,r18,32
   42bd4:	10020c26 	beq	r2,zero,43408 <___vfprintf_internal_r+0x1320>
   42bd8:	d8802d17 	ldw	r2,180(sp)
   42bdc:	d9002917 	ldw	r4,164(sp)
   42be0:	d8002785 	stb	zero,158(sp)
   42be4:	10c00204 	addi	r3,r2,8
   42be8:	14c00017 	ldw	r19,0(r2)
   42bec:	15800117 	ldw	r22,4(r2)
   42bf0:	20040f16 	blt	r4,zero,43c30 <___vfprintf_internal_r+0x1b48>
   42bf4:	013fdfc4 	movi	r4,-129
   42bf8:	9d84b03a 	or	r2,r19,r22
   42bfc:	d8c02d15 	stw	r3,180(sp)
   42c00:	9124703a 	and	r18,r18,r4
   42c04:	0039883a 	mov	fp,zero
   42c08:	103e891e 	bne	r2,zero,42630 <__alt_data_end+0xfffd0630>
   42c0c:	d9002917 	ldw	r4,164(sp)
   42c10:	2002c11e 	bne	r4,zero,43718 <___vfprintf_internal_r+0x1630>
   42c14:	d8002915 	stw	zero,164(sp)
   42c18:	d8002e15 	stw	zero,184(sp)
   42c1c:	dc001e04 	addi	r16,sp,120
   42c20:	003ef806 	br	42804 <__alt_data_end+0xfffd0804>
   42c24:	18c03fcc 	andi	r3,r3,255
   42c28:	18059d1e 	bne	r3,zero,442a0 <___vfprintf_internal_r+0x21b8>
   42c2c:	01400174 	movhi	r5,5
   42c30:	29451a04 	addi	r5,r5,5224
   42c34:	d9403915 	stw	r5,228(sp)
   42c38:	9080080c 	andi	r2,r18,32
   42c3c:	10005226 	beq	r2,zero,42d88 <___vfprintf_internal_r+0xca0>
   42c40:	d8802d17 	ldw	r2,180(sp)
   42c44:	14c00017 	ldw	r19,0(r2)
   42c48:	15800117 	ldw	r22,4(r2)
   42c4c:	10800204 	addi	r2,r2,8
   42c50:	d8802d15 	stw	r2,180(sp)
   42c54:	9080004c 	andi	r2,r18,1
   42c58:	10019026 	beq	r2,zero,4329c <___vfprintf_internal_r+0x11b4>
   42c5c:	9d84b03a 	or	r2,r19,r22
   42c60:	10036926 	beq	r2,zero,43a08 <___vfprintf_internal_r+0x1920>
   42c64:	d8c02917 	ldw	r3,164(sp)
   42c68:	00800c04 	movi	r2,48
   42c6c:	d8802705 	stb	r2,156(sp)
   42c70:	dc402745 	stb	r17,157(sp)
   42c74:	d8002785 	stb	zero,158(sp)
   42c78:	90800094 	ori	r2,r18,2
   42c7c:	18045d16 	blt	r3,zero,43df4 <___vfprintf_internal_r+0x1d0c>
   42c80:	00bfdfc4 	movi	r2,-129
   42c84:	90a4703a 	and	r18,r18,r2
   42c88:	94800094 	ori	r18,r18,2
   42c8c:	0039883a 	mov	fp,zero
   42c90:	d9003917 	ldw	r4,228(sp)
   42c94:	dc001e04 	addi	r16,sp,120
   42c98:	988003cc 	andi	r2,r19,15
   42c9c:	b006973a 	slli	r3,r22,28
   42ca0:	2085883a 	add	r2,r4,r2
   42ca4:	9826d13a 	srli	r19,r19,4
   42ca8:	10800003 	ldbu	r2,0(r2)
   42cac:	b02cd13a 	srli	r22,r22,4
   42cb0:	843fffc4 	addi	r16,r16,-1
   42cb4:	1ce6b03a 	or	r19,r3,r19
   42cb8:	80800005 	stb	r2,0(r16)
   42cbc:	9d84b03a 	or	r2,r19,r22
   42cc0:	103ff51e 	bne	r2,zero,42c98 <__alt_data_end+0xfffd0c98>
   42cc4:	d8c02817 	ldw	r3,160(sp)
   42cc8:	1c07c83a 	sub	r3,r3,r16
   42ccc:	d8c02e15 	stw	r3,184(sp)
   42cd0:	003ecc06 	br	42804 <__alt_data_end+0xfffd0804>
   42cd4:	18c03fcc 	andi	r3,r3,255
   42cd8:	183e9f26 	beq	r3,zero,42758 <__alt_data_end+0xfffd0758>
   42cdc:	d9c02785 	stb	r7,158(sp)
   42ce0:	003e9d06 	br	42758 <__alt_data_end+0xfffd0758>
   42ce4:	00c00044 	movi	r3,1
   42ce8:	01c00ac4 	movi	r7,43
   42cec:	ac400007 	ldb	r17,0(r21)
   42cf0:	003d5e06 	br	4226c <__alt_data_end+0xfffd026c>
   42cf4:	94800814 	ori	r18,r18,32
   42cf8:	ac400007 	ldb	r17,0(r21)
   42cfc:	003d5b06 	br	4226c <__alt_data_end+0xfffd026c>
   42d00:	d8c02d17 	ldw	r3,180(sp)
   42d04:	d8002785 	stb	zero,158(sp)
   42d08:	1c000017 	ldw	r16,0(r3)
   42d0c:	1cc00104 	addi	r19,r3,4
   42d10:	80041926 	beq	r16,zero,43d78 <___vfprintf_internal_r+0x1c90>
   42d14:	d9002917 	ldw	r4,164(sp)
   42d18:	2003d016 	blt	r4,zero,43c5c <___vfprintf_internal_r+0x1b74>
   42d1c:	200d883a 	mov	r6,r4
   42d20:	000b883a 	mov	r5,zero
   42d24:	8009883a 	mov	r4,r16
   42d28:	da003d15 	stw	r8,244(sp)
   42d2c:	00471440 	call	47144 <memchr>
   42d30:	da003d17 	ldw	r8,244(sp)
   42d34:	10045426 	beq	r2,zero,43e88 <___vfprintf_internal_r+0x1da0>
   42d38:	1405c83a 	sub	r2,r2,r16
   42d3c:	d8802e15 	stw	r2,184(sp)
   42d40:	1003cc16 	blt	r2,zero,43c74 <___vfprintf_internal_r+0x1b8c>
   42d44:	df002783 	ldbu	fp,158(sp)
   42d48:	d8802a15 	stw	r2,168(sp)
   42d4c:	dcc02d15 	stw	r19,180(sp)
   42d50:	d8002915 	stw	zero,164(sp)
   42d54:	d8003215 	stw	zero,200(sp)
   42d58:	003eb006 	br	4281c <__alt_data_end+0xfffd081c>
   42d5c:	18c03fcc 	andi	r3,r3,255
   42d60:	183f9b26 	beq	r3,zero,42bd0 <__alt_data_end+0xfffd0bd0>
   42d64:	d9c02785 	stb	r7,158(sp)
   42d68:	003f9906 	br	42bd0 <__alt_data_end+0xfffd0bd0>
   42d6c:	18c03fcc 	andi	r3,r3,255
   42d70:	1805551e 	bne	r3,zero,442c8 <___vfprintf_internal_r+0x21e0>
   42d74:	01400174 	movhi	r5,5
   42d78:	29451f04 	addi	r5,r5,5244
   42d7c:	d9403915 	stw	r5,228(sp)
   42d80:	9080080c 	andi	r2,r18,32
   42d84:	103fae1e 	bne	r2,zero,42c40 <__alt_data_end+0xfffd0c40>
   42d88:	9080040c 	andi	r2,r18,16
   42d8c:	1002de26 	beq	r2,zero,43908 <___vfprintf_internal_r+0x1820>
   42d90:	d8c02d17 	ldw	r3,180(sp)
   42d94:	002d883a 	mov	r22,zero
   42d98:	1cc00017 	ldw	r19,0(r3)
   42d9c:	18c00104 	addi	r3,r3,4
   42da0:	d8c02d15 	stw	r3,180(sp)
   42da4:	003fab06 	br	42c54 <__alt_data_end+0xfffd0c54>
   42da8:	38803fcc 	andi	r2,r7,255
   42dac:	1080201c 	xori	r2,r2,128
   42db0:	10bfe004 	addi	r2,r2,-128
   42db4:	1002d21e 	bne	r2,zero,43900 <___vfprintf_internal_r+0x1818>
   42db8:	00c00044 	movi	r3,1
   42dbc:	01c00804 	movi	r7,32
   42dc0:	ac400007 	ldb	r17,0(r21)
   42dc4:	003d2906 	br	4226c <__alt_data_end+0xfffd026c>
   42dc8:	94800054 	ori	r18,r18,1
   42dcc:	ac400007 	ldb	r17,0(r21)
   42dd0:	003d2606 	br	4226c <__alt_data_end+0xfffd026c>
   42dd4:	18c03fcc 	andi	r3,r3,255
   42dd8:	183e0526 	beq	r3,zero,425f0 <__alt_data_end+0xfffd05f0>
   42ddc:	d9c02785 	stb	r7,158(sp)
   42de0:	003e0306 	br	425f0 <__alt_data_end+0xfffd05f0>
   42de4:	94801014 	ori	r18,r18,64
   42de8:	ac400007 	ldb	r17,0(r21)
   42dec:	003d1f06 	br	4226c <__alt_data_end+0xfffd026c>
   42df0:	ac400007 	ldb	r17,0(r21)
   42df4:	8a438726 	beq	r17,r9,43c14 <___vfprintf_internal_r+0x1b2c>
   42df8:	94800414 	ori	r18,r18,16
   42dfc:	003d1b06 	br	4226c <__alt_data_end+0xfffd026c>
   42e00:	18c03fcc 	andi	r3,r3,255
   42e04:	1805341e 	bne	r3,zero,442d8 <___vfprintf_internal_r+0x21f0>
   42e08:	9080080c 	andi	r2,r18,32
   42e0c:	1002cd26 	beq	r2,zero,43944 <___vfprintf_internal_r+0x185c>
   42e10:	d9402d17 	ldw	r5,180(sp)
   42e14:	d9002f17 	ldw	r4,188(sp)
   42e18:	28800017 	ldw	r2,0(r5)
   42e1c:	2007d7fa 	srai	r3,r4,31
   42e20:	29400104 	addi	r5,r5,4
   42e24:	d9402d15 	stw	r5,180(sp)
   42e28:	11000015 	stw	r4,0(r2)
   42e2c:	10c00115 	stw	r3,4(r2)
   42e30:	003ce506 	br	421c8 <__alt_data_end+0xfffd01c8>
   42e34:	d8c02d17 	ldw	r3,180(sp)
   42e38:	d9002d17 	ldw	r4,180(sp)
   42e3c:	d8002785 	stb	zero,158(sp)
   42e40:	18800017 	ldw	r2,0(r3)
   42e44:	21000104 	addi	r4,r4,4
   42e48:	00c00044 	movi	r3,1
   42e4c:	d8c02a15 	stw	r3,168(sp)
   42e50:	d8801405 	stb	r2,80(sp)
   42e54:	d9002d15 	stw	r4,180(sp)
   42e58:	d8c02e15 	stw	r3,184(sp)
   42e5c:	d8002915 	stw	zero,164(sp)
   42e60:	d8003215 	stw	zero,200(sp)
   42e64:	dc001404 	addi	r16,sp,80
   42e68:	0039883a 	mov	fp,zero
   42e6c:	003e7206 	br	42838 <__alt_data_end+0xfffd0838>
   42e70:	01000174 	movhi	r4,5
   42e74:	21051f04 	addi	r4,r4,5244
   42e78:	0039883a 	mov	fp,zero
   42e7c:	d9003915 	stw	r4,228(sp)
   42e80:	04401e04 	movi	r17,120
   42e84:	003f8206 	br	42c90 <__alt_data_end+0xfffd0c90>
   42e88:	18c03fcc 	andi	r3,r3,255
   42e8c:	1805061e 	bne	r3,zero,442a8 <___vfprintf_internal_r+0x21c0>
   42e90:	883d9126 	beq	r17,zero,424d8 <__alt_data_end+0xfffd04d8>
   42e94:	00c00044 	movi	r3,1
   42e98:	d8c02a15 	stw	r3,168(sp)
   42e9c:	dc401405 	stb	r17,80(sp)
   42ea0:	d8002785 	stb	zero,158(sp)
   42ea4:	003fec06 	br	42e58 <__alt_data_end+0xfffd0e58>
   42ea8:	01400174 	movhi	r5,5
   42eac:	29451f04 	addi	r5,r5,5244
   42eb0:	d9403915 	stw	r5,228(sp)
   42eb4:	d8c02d15 	stw	r3,180(sp)
   42eb8:	1025883a 	mov	r18,r2
   42ebc:	04401e04 	movi	r17,120
   42ec0:	9d84b03a 	or	r2,r19,r22
   42ec4:	1000fc1e 	bne	r2,zero,432b8 <___vfprintf_internal_r+0x11d0>
   42ec8:	0039883a 	mov	fp,zero
   42ecc:	00800084 	movi	r2,2
   42ed0:	10803fcc 	andi	r2,r2,255
   42ed4:	00c00044 	movi	r3,1
   42ed8:	10c20f26 	beq	r2,r3,43718 <___vfprintf_internal_r+0x1630>
   42edc:	00c00084 	movi	r3,2
   42ee0:	10fd6326 	beq	r2,r3,42470 <__alt_data_end+0xfffd0470>
   42ee4:	003e2d06 	br	4279c <__alt_data_end+0xfffd079c>
   42ee8:	d8c02017 	ldw	r3,128(sp)
   42eec:	003e9306 	br	4293c <__alt_data_end+0xfffd093c>
   42ef0:	00801944 	movi	r2,101
   42ef4:	14407e0e 	bge	r2,r17,430f0 <___vfprintf_internal_r+0x1008>
   42ef8:	d9003617 	ldw	r4,216(sp)
   42efc:	d9403817 	ldw	r5,224(sp)
   42f00:	000d883a 	mov	r6,zero
   42f04:	000f883a 	mov	r7,zero
   42f08:	d8c03c15 	stw	r3,240(sp)
   42f0c:	da003d15 	stw	r8,244(sp)
   42f10:	004c6e00 	call	4c6e0 <__eqdf2>
   42f14:	d8c03c17 	ldw	r3,240(sp)
   42f18:	da003d17 	ldw	r8,244(sp)
   42f1c:	1000f71e 	bne	r2,zero,432fc <___vfprintf_internal_r+0x1214>
   42f20:	d8801f17 	ldw	r2,124(sp)
   42f24:	01000174 	movhi	r4,5
   42f28:	21052604 	addi	r4,r4,5272
   42f2c:	18c00044 	addi	r3,r3,1
   42f30:	10800044 	addi	r2,r2,1
   42f34:	41000015 	stw	r4,0(r8)
   42f38:	01000044 	movi	r4,1
   42f3c:	41000115 	stw	r4,4(r8)
   42f40:	d8c02015 	stw	r3,128(sp)
   42f44:	d8801f15 	stw	r2,124(sp)
   42f48:	010001c4 	movi	r4,7
   42f4c:	2082b816 	blt	r4,r2,43a30 <___vfprintf_internal_r+0x1948>
   42f50:	42000204 	addi	r8,r8,8
   42f54:	d8802617 	ldw	r2,152(sp)
   42f58:	d9403317 	ldw	r5,204(sp)
   42f5c:	11400216 	blt	r2,r5,42f68 <___vfprintf_internal_r+0xe80>
   42f60:	9080004c 	andi	r2,r18,1
   42f64:	103ed526 	beq	r2,zero,42abc <__alt_data_end+0xfffd0abc>
   42f68:	d8803717 	ldw	r2,220(sp)
   42f6c:	d9003417 	ldw	r4,208(sp)
   42f70:	d9403717 	ldw	r5,220(sp)
   42f74:	1887883a 	add	r3,r3,r2
   42f78:	d8801f17 	ldw	r2,124(sp)
   42f7c:	41000015 	stw	r4,0(r8)
   42f80:	41400115 	stw	r5,4(r8)
   42f84:	10800044 	addi	r2,r2,1
   42f88:	d8c02015 	stw	r3,128(sp)
   42f8c:	d8801f15 	stw	r2,124(sp)
   42f90:	010001c4 	movi	r4,7
   42f94:	20832916 	blt	r4,r2,43c3c <___vfprintf_internal_r+0x1b54>
   42f98:	42000204 	addi	r8,r8,8
   42f9c:	d8803317 	ldw	r2,204(sp)
   42fa0:	143fffc4 	addi	r16,r2,-1
   42fa4:	043ec50e 	bge	zero,r16,42abc <__alt_data_end+0xfffd0abc>
   42fa8:	04400404 	movi	r17,16
   42fac:	d8801f17 	ldw	r2,124(sp)
   42fb0:	8c00880e 	bge	r17,r16,431d4 <___vfprintf_internal_r+0x10ec>
   42fb4:	01400174 	movhi	r5,5
   42fb8:	29452684 	addi	r5,r5,5274
   42fbc:	d9402b15 	stw	r5,172(sp)
   42fc0:	058001c4 	movi	r22,7
   42fc4:	dcc02c17 	ldw	r19,176(sp)
   42fc8:	00000306 	br	42fd8 <___vfprintf_internal_r+0xef0>
   42fcc:	42000204 	addi	r8,r8,8
   42fd0:	843ffc04 	addi	r16,r16,-16
   42fd4:	8c00820e 	bge	r17,r16,431e0 <___vfprintf_internal_r+0x10f8>
   42fd8:	18c00404 	addi	r3,r3,16
   42fdc:	10800044 	addi	r2,r2,1
   42fe0:	45000015 	stw	r20,0(r8)
   42fe4:	44400115 	stw	r17,4(r8)
   42fe8:	d8c02015 	stw	r3,128(sp)
   42fec:	d8801f15 	stw	r2,124(sp)
   42ff0:	b0bff60e 	bge	r22,r2,42fcc <__alt_data_end+0xfffd0fcc>
   42ff4:	d9801e04 	addi	r6,sp,120
   42ff8:	b80b883a 	mov	r5,r23
   42ffc:	9809883a 	mov	r4,r19
   43000:	0048e400 	call	48e40 <__sprint_r>
   43004:	103d3a1e 	bne	r2,zero,424f0 <__alt_data_end+0xfffd04f0>
   43008:	d8c02017 	ldw	r3,128(sp)
   4300c:	d8801f17 	ldw	r2,124(sp)
   43010:	da000404 	addi	r8,sp,16
   43014:	003fee06 	br	42fd0 <__alt_data_end+0xfffd0fd0>
   43018:	d9403117 	ldw	r5,196(sp)
   4301c:	d8802a17 	ldw	r2,168(sp)
   43020:	28adc83a 	sub	r22,r5,r2
   43024:	05be630e 	bge	zero,r22,429b4 <__alt_data_end+0xfffd09b4>
   43028:	07000404 	movi	fp,16
   4302c:	d8801f17 	ldw	r2,124(sp)
   43030:	e5838f0e 	bge	fp,r22,43e70 <___vfprintf_internal_r+0x1d88>
   43034:	01400174 	movhi	r5,5
   43038:	29452684 	addi	r5,r5,5274
   4303c:	dc403015 	stw	r17,192(sp)
   43040:	d9402b15 	stw	r5,172(sp)
   43044:	b023883a 	mov	r17,r22
   43048:	04c001c4 	movi	r19,7
   4304c:	a82d883a 	mov	r22,r21
   43050:	902b883a 	mov	r21,r18
   43054:	8025883a 	mov	r18,r16
   43058:	dc002c17 	ldw	r16,176(sp)
   4305c:	00000306 	br	4306c <___vfprintf_internal_r+0xf84>
   43060:	8c7ffc04 	addi	r17,r17,-16
   43064:	42000204 	addi	r8,r8,8
   43068:	e440110e 	bge	fp,r17,430b0 <___vfprintf_internal_r+0xfc8>
   4306c:	18c00404 	addi	r3,r3,16
   43070:	10800044 	addi	r2,r2,1
   43074:	45000015 	stw	r20,0(r8)
   43078:	47000115 	stw	fp,4(r8)
   4307c:	d8c02015 	stw	r3,128(sp)
   43080:	d8801f15 	stw	r2,124(sp)
   43084:	98bff60e 	bge	r19,r2,43060 <__alt_data_end+0xfffd1060>
   43088:	d9801e04 	addi	r6,sp,120
   4308c:	b80b883a 	mov	r5,r23
   43090:	8009883a 	mov	r4,r16
   43094:	0048e400 	call	48e40 <__sprint_r>
   43098:	103d151e 	bne	r2,zero,424f0 <__alt_data_end+0xfffd04f0>
   4309c:	8c7ffc04 	addi	r17,r17,-16
   430a0:	d8c02017 	ldw	r3,128(sp)
   430a4:	d8801f17 	ldw	r2,124(sp)
   430a8:	da000404 	addi	r8,sp,16
   430ac:	e47fef16 	blt	fp,r17,4306c <__alt_data_end+0xfffd106c>
   430b0:	9021883a 	mov	r16,r18
   430b4:	a825883a 	mov	r18,r21
   430b8:	b02b883a 	mov	r21,r22
   430bc:	882d883a 	mov	r22,r17
   430c0:	dc403017 	ldw	r17,192(sp)
   430c4:	d9002b17 	ldw	r4,172(sp)
   430c8:	1d87883a 	add	r3,r3,r22
   430cc:	10800044 	addi	r2,r2,1
   430d0:	41000015 	stw	r4,0(r8)
   430d4:	45800115 	stw	r22,4(r8)
   430d8:	d8c02015 	stw	r3,128(sp)
   430dc:	d8801f15 	stw	r2,124(sp)
   430e0:	010001c4 	movi	r4,7
   430e4:	20818e16 	blt	r4,r2,43720 <___vfprintf_internal_r+0x1638>
   430e8:	42000204 	addi	r8,r8,8
   430ec:	003e3106 	br	429b4 <__alt_data_end+0xfffd09b4>
   430f0:	d9403317 	ldw	r5,204(sp)
   430f4:	00800044 	movi	r2,1
   430f8:	18c00044 	addi	r3,r3,1
   430fc:	1141530e 	bge	r2,r5,4364c <___vfprintf_internal_r+0x1564>
   43100:	dc401f17 	ldw	r17,124(sp)
   43104:	00800044 	movi	r2,1
   43108:	40800115 	stw	r2,4(r8)
   4310c:	8c400044 	addi	r17,r17,1
   43110:	44000015 	stw	r16,0(r8)
   43114:	d8c02015 	stw	r3,128(sp)
   43118:	dc401f15 	stw	r17,124(sp)
   4311c:	008001c4 	movi	r2,7
   43120:	14416b16 	blt	r2,r17,436d0 <___vfprintf_internal_r+0x15e8>
   43124:	42000204 	addi	r8,r8,8
   43128:	d8803717 	ldw	r2,220(sp)
   4312c:	d9003417 	ldw	r4,208(sp)
   43130:	8c400044 	addi	r17,r17,1
   43134:	10c7883a 	add	r3,r2,r3
   43138:	40800115 	stw	r2,4(r8)
   4313c:	41000015 	stw	r4,0(r8)
   43140:	d8c02015 	stw	r3,128(sp)
   43144:	dc401f15 	stw	r17,124(sp)
   43148:	008001c4 	movi	r2,7
   4314c:	14416916 	blt	r2,r17,436f4 <___vfprintf_internal_r+0x160c>
   43150:	45800204 	addi	r22,r8,8
   43154:	d9003617 	ldw	r4,216(sp)
   43158:	d9403817 	ldw	r5,224(sp)
   4315c:	000d883a 	mov	r6,zero
   43160:	000f883a 	mov	r7,zero
   43164:	d8c03c15 	stw	r3,240(sp)
   43168:	004c6e00 	call	4c6e0 <__eqdf2>
   4316c:	d8c03c17 	ldw	r3,240(sp)
   43170:	1000bc26 	beq	r2,zero,43464 <___vfprintf_internal_r+0x137c>
   43174:	d9403317 	ldw	r5,204(sp)
   43178:	84000044 	addi	r16,r16,1
   4317c:	8c400044 	addi	r17,r17,1
   43180:	28bfffc4 	addi	r2,r5,-1
   43184:	1887883a 	add	r3,r3,r2
   43188:	b0800115 	stw	r2,4(r22)
   4318c:	b4000015 	stw	r16,0(r22)
   43190:	d8c02015 	stw	r3,128(sp)
   43194:	dc401f15 	stw	r17,124(sp)
   43198:	008001c4 	movi	r2,7
   4319c:	14414316 	blt	r2,r17,436ac <___vfprintf_internal_r+0x15c4>
   431a0:	b5800204 	addi	r22,r22,8
   431a4:	d9003a17 	ldw	r4,232(sp)
   431a8:	df0022c4 	addi	fp,sp,139
   431ac:	8c400044 	addi	r17,r17,1
   431b0:	20c7883a 	add	r3,r4,r3
   431b4:	b7000015 	stw	fp,0(r22)
   431b8:	b1000115 	stw	r4,4(r22)
   431bc:	d8c02015 	stw	r3,128(sp)
   431c0:	dc401f15 	stw	r17,124(sp)
   431c4:	008001c4 	movi	r2,7
   431c8:	14400e16 	blt	r2,r17,43204 <___vfprintf_internal_r+0x111c>
   431cc:	b2000204 	addi	r8,r22,8
   431d0:	003e3a06 	br	42abc <__alt_data_end+0xfffd0abc>
   431d4:	01000174 	movhi	r4,5
   431d8:	21052684 	addi	r4,r4,5274
   431dc:	d9002b15 	stw	r4,172(sp)
   431e0:	d9002b17 	ldw	r4,172(sp)
   431e4:	1c07883a 	add	r3,r3,r16
   431e8:	44000115 	stw	r16,4(r8)
   431ec:	41000015 	stw	r4,0(r8)
   431f0:	10800044 	addi	r2,r2,1
   431f4:	d8c02015 	stw	r3,128(sp)
   431f8:	d8801f15 	stw	r2,124(sp)
   431fc:	010001c4 	movi	r4,7
   43200:	20be2d0e 	bge	r4,r2,42ab8 <__alt_data_end+0xfffd0ab8>
   43204:	d9002c17 	ldw	r4,176(sp)
   43208:	d9801e04 	addi	r6,sp,120
   4320c:	b80b883a 	mov	r5,r23
   43210:	0048e400 	call	48e40 <__sprint_r>
   43214:	103cb61e 	bne	r2,zero,424f0 <__alt_data_end+0xfffd04f0>
   43218:	d8c02017 	ldw	r3,128(sp)
   4321c:	da000404 	addi	r8,sp,16
   43220:	003e2606 	br	42abc <__alt_data_end+0xfffd0abc>
   43224:	d9002c17 	ldw	r4,176(sp)
   43228:	d9801e04 	addi	r6,sp,120
   4322c:	b80b883a 	mov	r5,r23
   43230:	0048e400 	call	48e40 <__sprint_r>
   43234:	103e5d26 	beq	r2,zero,42bac <__alt_data_end+0xfffd0bac>
   43238:	003cad06 	br	424f0 <__alt_data_end+0xfffd04f0>
   4323c:	d9002c17 	ldw	r4,176(sp)
   43240:	d9801e04 	addi	r6,sp,120
   43244:	b80b883a 	mov	r5,r23
   43248:	0048e400 	call	48e40 <__sprint_r>
   4324c:	103ca81e 	bne	r2,zero,424f0 <__alt_data_end+0xfffd04f0>
   43250:	d8c02017 	ldw	r3,128(sp)
   43254:	da000404 	addi	r8,sp,16
   43258:	003e0b06 	br	42a88 <__alt_data_end+0xfffd0a88>
   4325c:	d9002c17 	ldw	r4,176(sp)
   43260:	d9801e04 	addi	r6,sp,120
   43264:	b80b883a 	mov	r5,r23
   43268:	0048e400 	call	48e40 <__sprint_r>
   4326c:	103ca01e 	bne	r2,zero,424f0 <__alt_data_end+0xfffd04f0>
   43270:	d8c02017 	ldw	r3,128(sp)
   43274:	da000404 	addi	r8,sp,16
   43278:	003dbd06 	br	42970 <__alt_data_end+0xfffd0970>
   4327c:	d9002c17 	ldw	r4,176(sp)
   43280:	d9801e04 	addi	r6,sp,120
   43284:	b80b883a 	mov	r5,r23
   43288:	0048e400 	call	48e40 <__sprint_r>
   4328c:	103c981e 	bne	r2,zero,424f0 <__alt_data_end+0xfffd04f0>
   43290:	d8c02017 	ldw	r3,128(sp)
   43294:	da000404 	addi	r8,sp,16
   43298:	003dc306 	br	429a8 <__alt_data_end+0xfffd09a8>
   4329c:	d8802917 	ldw	r2,164(sp)
   432a0:	d8002785 	stb	zero,158(sp)
   432a4:	103f0616 	blt	r2,zero,42ec0 <__alt_data_end+0xfffd0ec0>
   432a8:	00ffdfc4 	movi	r3,-129
   432ac:	9d84b03a 	or	r2,r19,r22
   432b0:	90e4703a 	and	r18,r18,r3
   432b4:	103c6b26 	beq	r2,zero,42464 <__alt_data_end+0xfffd0464>
   432b8:	0039883a 	mov	fp,zero
   432bc:	003e7406 	br	42c90 <__alt_data_end+0xfffd0c90>
   432c0:	9080040c 	andi	r2,r18,16
   432c4:	1001b326 	beq	r2,zero,43994 <___vfprintf_internal_r+0x18ac>
   432c8:	d9002d17 	ldw	r4,180(sp)
   432cc:	d9402917 	ldw	r5,164(sp)
   432d0:	d8002785 	stb	zero,158(sp)
   432d4:	20800104 	addi	r2,r4,4
   432d8:	24c00017 	ldw	r19,0(r4)
   432dc:	002d883a 	mov	r22,zero
   432e0:	2801b516 	blt	r5,zero,439b8 <___vfprintf_internal_r+0x18d0>
   432e4:	00ffdfc4 	movi	r3,-129
   432e8:	d8802d15 	stw	r2,180(sp)
   432ec:	90e4703a 	and	r18,r18,r3
   432f0:	983d2726 	beq	r19,zero,42790 <__alt_data_end+0xfffd0790>
   432f4:	0039883a 	mov	fp,zero
   432f8:	003d2a06 	br	427a4 <__alt_data_end+0xfffd07a4>
   432fc:	dc402617 	ldw	r17,152(sp)
   43300:	0441d30e 	bge	zero,r17,43a50 <___vfprintf_internal_r+0x1968>
   43304:	dc403217 	ldw	r17,200(sp)
   43308:	d8803317 	ldw	r2,204(sp)
   4330c:	1440010e 	bge	r2,r17,43314 <___vfprintf_internal_r+0x122c>
   43310:	1023883a 	mov	r17,r2
   43314:	04400a0e 	bge	zero,r17,43340 <___vfprintf_internal_r+0x1258>
   43318:	d8801f17 	ldw	r2,124(sp)
   4331c:	1c47883a 	add	r3,r3,r17
   43320:	44000015 	stw	r16,0(r8)
   43324:	10800044 	addi	r2,r2,1
   43328:	44400115 	stw	r17,4(r8)
   4332c:	d8c02015 	stw	r3,128(sp)
   43330:	d8801f15 	stw	r2,124(sp)
   43334:	010001c4 	movi	r4,7
   43338:	20826516 	blt	r4,r2,43cd0 <___vfprintf_internal_r+0x1be8>
   4333c:	42000204 	addi	r8,r8,8
   43340:	88026116 	blt	r17,zero,43cc8 <___vfprintf_internal_r+0x1be0>
   43344:	d9003217 	ldw	r4,200(sp)
   43348:	2463c83a 	sub	r17,r4,r17
   4334c:	04407b0e 	bge	zero,r17,4353c <___vfprintf_internal_r+0x1454>
   43350:	05800404 	movi	r22,16
   43354:	d8801f17 	ldw	r2,124(sp)
   43358:	b4419d0e 	bge	r22,r17,439d0 <___vfprintf_internal_r+0x18e8>
   4335c:	01000174 	movhi	r4,5
   43360:	21052684 	addi	r4,r4,5274
   43364:	d9002b15 	stw	r4,172(sp)
   43368:	070001c4 	movi	fp,7
   4336c:	dcc02c17 	ldw	r19,176(sp)
   43370:	00000306 	br	43380 <___vfprintf_internal_r+0x1298>
   43374:	42000204 	addi	r8,r8,8
   43378:	8c7ffc04 	addi	r17,r17,-16
   4337c:	b441970e 	bge	r22,r17,439dc <___vfprintf_internal_r+0x18f4>
   43380:	18c00404 	addi	r3,r3,16
   43384:	10800044 	addi	r2,r2,1
   43388:	45000015 	stw	r20,0(r8)
   4338c:	45800115 	stw	r22,4(r8)
   43390:	d8c02015 	stw	r3,128(sp)
   43394:	d8801f15 	stw	r2,124(sp)
   43398:	e0bff60e 	bge	fp,r2,43374 <__alt_data_end+0xfffd1374>
   4339c:	d9801e04 	addi	r6,sp,120
   433a0:	b80b883a 	mov	r5,r23
   433a4:	9809883a 	mov	r4,r19
   433a8:	0048e400 	call	48e40 <__sprint_r>
   433ac:	103c501e 	bne	r2,zero,424f0 <__alt_data_end+0xfffd04f0>
   433b0:	d8c02017 	ldw	r3,128(sp)
   433b4:	d8801f17 	ldw	r2,124(sp)
   433b8:	da000404 	addi	r8,sp,16
   433bc:	003fee06 	br	43378 <__alt_data_end+0xfffd1378>
   433c0:	d9002c17 	ldw	r4,176(sp)
   433c4:	d9801e04 	addi	r6,sp,120
   433c8:	b80b883a 	mov	r5,r23
   433cc:	0048e400 	call	48e40 <__sprint_r>
   433d0:	103c471e 	bne	r2,zero,424f0 <__alt_data_end+0xfffd04f0>
   433d4:	d8c02017 	ldw	r3,128(sp)
   433d8:	df002787 	ldb	fp,158(sp)
   433dc:	da000404 	addi	r8,sp,16
   433e0:	003d5606 	br	4293c <__alt_data_end+0xfffd093c>
   433e4:	9080040c 	andi	r2,r18,16
   433e8:	10016126 	beq	r2,zero,43970 <___vfprintf_internal_r+0x1888>
   433ec:	d8802d17 	ldw	r2,180(sp)
   433f0:	14c00017 	ldw	r19,0(r2)
   433f4:	10800104 	addi	r2,r2,4
   433f8:	d8802d15 	stw	r2,180(sp)
   433fc:	982dd7fa 	srai	r22,r19,31
   43400:	b005883a 	mov	r2,r22
   43404:	003c8206 	br	42610 <__alt_data_end+0xfffd0610>
   43408:	9080040c 	andi	r2,r18,16
   4340c:	10003526 	beq	r2,zero,434e4 <___vfprintf_internal_r+0x13fc>
   43410:	d9402d17 	ldw	r5,180(sp)
   43414:	d8c02917 	ldw	r3,164(sp)
   43418:	d8002785 	stb	zero,158(sp)
   4341c:	28800104 	addi	r2,r5,4
   43420:	2cc00017 	ldw	r19,0(r5)
   43424:	002d883a 	mov	r22,zero
   43428:	18003716 	blt	r3,zero,43508 <___vfprintf_internal_r+0x1420>
   4342c:	00ffdfc4 	movi	r3,-129
   43430:	d8802d15 	stw	r2,180(sp)
   43434:	90e4703a 	and	r18,r18,r3
   43438:	0039883a 	mov	fp,zero
   4343c:	983df326 	beq	r19,zero,42c0c <__alt_data_end+0xfffd0c0c>
   43440:	00800244 	movi	r2,9
   43444:	14fc7b36 	bltu	r2,r19,42634 <__alt_data_end+0xfffd0634>
   43448:	d8c02817 	ldw	r3,160(sp)
   4344c:	dc001dc4 	addi	r16,sp,119
   43450:	9cc00c04 	addi	r19,r19,48
   43454:	1c07c83a 	sub	r3,r3,r16
   43458:	dcc01dc5 	stb	r19,119(sp)
   4345c:	d8c02e15 	stw	r3,184(sp)
   43460:	003ce806 	br	42804 <__alt_data_end+0xfffd0804>
   43464:	d8803317 	ldw	r2,204(sp)
   43468:	143fffc4 	addi	r16,r2,-1
   4346c:	043f4d0e 	bge	zero,r16,431a4 <__alt_data_end+0xfffd11a4>
   43470:	07000404 	movi	fp,16
   43474:	e400810e 	bge	fp,r16,4367c <___vfprintf_internal_r+0x1594>
   43478:	01400174 	movhi	r5,5
   4347c:	29452684 	addi	r5,r5,5274
   43480:	d9402b15 	stw	r5,172(sp)
   43484:	01c001c4 	movi	r7,7
   43488:	dcc02c17 	ldw	r19,176(sp)
   4348c:	00000306 	br	4349c <___vfprintf_internal_r+0x13b4>
   43490:	b5800204 	addi	r22,r22,8
   43494:	843ffc04 	addi	r16,r16,-16
   43498:	e4007b0e 	bge	fp,r16,43688 <___vfprintf_internal_r+0x15a0>
   4349c:	18c00404 	addi	r3,r3,16
   434a0:	8c400044 	addi	r17,r17,1
   434a4:	b5000015 	stw	r20,0(r22)
   434a8:	b7000115 	stw	fp,4(r22)
   434ac:	d8c02015 	stw	r3,128(sp)
   434b0:	dc401f15 	stw	r17,124(sp)
   434b4:	3c7ff60e 	bge	r7,r17,43490 <__alt_data_end+0xfffd1490>
   434b8:	d9801e04 	addi	r6,sp,120
   434bc:	b80b883a 	mov	r5,r23
   434c0:	9809883a 	mov	r4,r19
   434c4:	d9c03c15 	stw	r7,240(sp)
   434c8:	0048e400 	call	48e40 <__sprint_r>
   434cc:	d9c03c17 	ldw	r7,240(sp)
   434d0:	103c071e 	bne	r2,zero,424f0 <__alt_data_end+0xfffd04f0>
   434d4:	d8c02017 	ldw	r3,128(sp)
   434d8:	dc401f17 	ldw	r17,124(sp)
   434dc:	dd800404 	addi	r22,sp,16
   434e0:	003fec06 	br	43494 <__alt_data_end+0xfffd1494>
   434e4:	9080100c 	andi	r2,r18,64
   434e8:	d8002785 	stb	zero,158(sp)
   434ec:	10010e26 	beq	r2,zero,43928 <___vfprintf_internal_r+0x1840>
   434f0:	d9002d17 	ldw	r4,180(sp)
   434f4:	d9402917 	ldw	r5,164(sp)
   434f8:	002d883a 	mov	r22,zero
   434fc:	20800104 	addi	r2,r4,4
   43500:	24c0000b 	ldhu	r19,0(r4)
   43504:	283fc90e 	bge	r5,zero,4342c <__alt_data_end+0xfffd142c>
   43508:	d8802d15 	stw	r2,180(sp)
   4350c:	0039883a 	mov	fp,zero
   43510:	9d84b03a 	or	r2,r19,r22
   43514:	103c461e 	bne	r2,zero,42630 <__alt_data_end+0xfffd0630>
   43518:	00800044 	movi	r2,1
   4351c:	003e6c06 	br	42ed0 <__alt_data_end+0xfffd0ed0>
   43520:	d9002c17 	ldw	r4,176(sp)
   43524:	d9801e04 	addi	r6,sp,120
   43528:	b80b883a 	mov	r5,r23
   4352c:	0048e400 	call	48e40 <__sprint_r>
   43530:	103bef1e 	bne	r2,zero,424f0 <__alt_data_end+0xfffd04f0>
   43534:	d8c02017 	ldw	r3,128(sp)
   43538:	da000404 	addi	r8,sp,16
   4353c:	d9003217 	ldw	r4,200(sp)
   43540:	d8802617 	ldw	r2,152(sp)
   43544:	d9403317 	ldw	r5,204(sp)
   43548:	8123883a 	add	r17,r16,r4
   4354c:	11400216 	blt	r2,r5,43558 <___vfprintf_internal_r+0x1470>
   43550:	9100004c 	andi	r4,r18,1
   43554:	20000d26 	beq	r4,zero,4358c <___vfprintf_internal_r+0x14a4>
   43558:	d9003717 	ldw	r4,220(sp)
   4355c:	d9403417 	ldw	r5,208(sp)
   43560:	1907883a 	add	r3,r3,r4
   43564:	d9001f17 	ldw	r4,124(sp)
   43568:	41400015 	stw	r5,0(r8)
   4356c:	d9403717 	ldw	r5,220(sp)
   43570:	21000044 	addi	r4,r4,1
   43574:	d8c02015 	stw	r3,128(sp)
   43578:	41400115 	stw	r5,4(r8)
   4357c:	d9001f15 	stw	r4,124(sp)
   43580:	014001c4 	movi	r5,7
   43584:	2901e816 	blt	r5,r4,43d28 <___vfprintf_internal_r+0x1c40>
   43588:	42000204 	addi	r8,r8,8
   4358c:	d9003317 	ldw	r4,204(sp)
   43590:	8121883a 	add	r16,r16,r4
   43594:	2085c83a 	sub	r2,r4,r2
   43598:	8461c83a 	sub	r16,r16,r17
   4359c:	1400010e 	bge	r2,r16,435a4 <___vfprintf_internal_r+0x14bc>
   435a0:	1021883a 	mov	r16,r2
   435a4:	04000a0e 	bge	zero,r16,435d0 <___vfprintf_internal_r+0x14e8>
   435a8:	d9001f17 	ldw	r4,124(sp)
   435ac:	1c07883a 	add	r3,r3,r16
   435b0:	44400015 	stw	r17,0(r8)
   435b4:	21000044 	addi	r4,r4,1
   435b8:	44000115 	stw	r16,4(r8)
   435bc:	d8c02015 	stw	r3,128(sp)
   435c0:	d9001f15 	stw	r4,124(sp)
   435c4:	014001c4 	movi	r5,7
   435c8:	2901fb16 	blt	r5,r4,43db8 <___vfprintf_internal_r+0x1cd0>
   435cc:	42000204 	addi	r8,r8,8
   435d0:	8001f716 	blt	r16,zero,43db0 <___vfprintf_internal_r+0x1cc8>
   435d4:	1421c83a 	sub	r16,r2,r16
   435d8:	043d380e 	bge	zero,r16,42abc <__alt_data_end+0xfffd0abc>
   435dc:	04400404 	movi	r17,16
   435e0:	d8801f17 	ldw	r2,124(sp)
   435e4:	8c3efb0e 	bge	r17,r16,431d4 <__alt_data_end+0xfffd11d4>
   435e8:	01400174 	movhi	r5,5
   435ec:	29452684 	addi	r5,r5,5274
   435f0:	d9402b15 	stw	r5,172(sp)
   435f4:	058001c4 	movi	r22,7
   435f8:	dcc02c17 	ldw	r19,176(sp)
   435fc:	00000306 	br	4360c <___vfprintf_internal_r+0x1524>
   43600:	42000204 	addi	r8,r8,8
   43604:	843ffc04 	addi	r16,r16,-16
   43608:	8c3ef50e 	bge	r17,r16,431e0 <__alt_data_end+0xfffd11e0>
   4360c:	18c00404 	addi	r3,r3,16
   43610:	10800044 	addi	r2,r2,1
   43614:	45000015 	stw	r20,0(r8)
   43618:	44400115 	stw	r17,4(r8)
   4361c:	d8c02015 	stw	r3,128(sp)
   43620:	d8801f15 	stw	r2,124(sp)
   43624:	b0bff60e 	bge	r22,r2,43600 <__alt_data_end+0xfffd1600>
   43628:	d9801e04 	addi	r6,sp,120
   4362c:	b80b883a 	mov	r5,r23
   43630:	9809883a 	mov	r4,r19
   43634:	0048e400 	call	48e40 <__sprint_r>
   43638:	103bad1e 	bne	r2,zero,424f0 <__alt_data_end+0xfffd04f0>
   4363c:	d8c02017 	ldw	r3,128(sp)
   43640:	d8801f17 	ldw	r2,124(sp)
   43644:	da000404 	addi	r8,sp,16
   43648:	003fee06 	br	43604 <__alt_data_end+0xfffd1604>
   4364c:	9088703a 	and	r4,r18,r2
   43650:	203eab1e 	bne	r4,zero,43100 <__alt_data_end+0xfffd1100>
   43654:	dc401f17 	ldw	r17,124(sp)
   43658:	40800115 	stw	r2,4(r8)
   4365c:	44000015 	stw	r16,0(r8)
   43660:	8c400044 	addi	r17,r17,1
   43664:	d8c02015 	stw	r3,128(sp)
   43668:	dc401f15 	stw	r17,124(sp)
   4366c:	008001c4 	movi	r2,7
   43670:	14400e16 	blt	r2,r17,436ac <___vfprintf_internal_r+0x15c4>
   43674:	45800204 	addi	r22,r8,8
   43678:	003eca06 	br	431a4 <__alt_data_end+0xfffd11a4>
   4367c:	01000174 	movhi	r4,5
   43680:	21052684 	addi	r4,r4,5274
   43684:	d9002b15 	stw	r4,172(sp)
   43688:	d8802b17 	ldw	r2,172(sp)
   4368c:	1c07883a 	add	r3,r3,r16
   43690:	8c400044 	addi	r17,r17,1
   43694:	b0800015 	stw	r2,0(r22)
   43698:	b4000115 	stw	r16,4(r22)
   4369c:	d8c02015 	stw	r3,128(sp)
   436a0:	dc401f15 	stw	r17,124(sp)
   436a4:	008001c4 	movi	r2,7
   436a8:	147ebd0e 	bge	r2,r17,431a0 <__alt_data_end+0xfffd11a0>
   436ac:	d9002c17 	ldw	r4,176(sp)
   436b0:	d9801e04 	addi	r6,sp,120
   436b4:	b80b883a 	mov	r5,r23
   436b8:	0048e400 	call	48e40 <__sprint_r>
   436bc:	103b8c1e 	bne	r2,zero,424f0 <__alt_data_end+0xfffd04f0>
   436c0:	d8c02017 	ldw	r3,128(sp)
   436c4:	dc401f17 	ldw	r17,124(sp)
   436c8:	dd800404 	addi	r22,sp,16
   436cc:	003eb506 	br	431a4 <__alt_data_end+0xfffd11a4>
   436d0:	d9002c17 	ldw	r4,176(sp)
   436d4:	d9801e04 	addi	r6,sp,120
   436d8:	b80b883a 	mov	r5,r23
   436dc:	0048e400 	call	48e40 <__sprint_r>
   436e0:	103b831e 	bne	r2,zero,424f0 <__alt_data_end+0xfffd04f0>
   436e4:	d8c02017 	ldw	r3,128(sp)
   436e8:	dc401f17 	ldw	r17,124(sp)
   436ec:	da000404 	addi	r8,sp,16
   436f0:	003e8d06 	br	43128 <__alt_data_end+0xfffd1128>
   436f4:	d9002c17 	ldw	r4,176(sp)
   436f8:	d9801e04 	addi	r6,sp,120
   436fc:	b80b883a 	mov	r5,r23
   43700:	0048e400 	call	48e40 <__sprint_r>
   43704:	103b7a1e 	bne	r2,zero,424f0 <__alt_data_end+0xfffd04f0>
   43708:	d8c02017 	ldw	r3,128(sp)
   4370c:	dc401f17 	ldw	r17,124(sp)
   43710:	dd800404 	addi	r22,sp,16
   43714:	003e8f06 	br	43154 <__alt_data_end+0xfffd1154>
   43718:	0027883a 	mov	r19,zero
   4371c:	003f4a06 	br	43448 <__alt_data_end+0xfffd1448>
   43720:	d9002c17 	ldw	r4,176(sp)
   43724:	d9801e04 	addi	r6,sp,120
   43728:	b80b883a 	mov	r5,r23
   4372c:	0048e400 	call	48e40 <__sprint_r>
   43730:	103b6f1e 	bne	r2,zero,424f0 <__alt_data_end+0xfffd04f0>
   43734:	d8c02017 	ldw	r3,128(sp)
   43738:	da000404 	addi	r8,sp,16
   4373c:	003c9d06 	br	429b4 <__alt_data_end+0xfffd09b4>
   43740:	04e7c83a 	sub	r19,zero,r19
   43744:	9804c03a 	cmpne	r2,r19,zero
   43748:	05adc83a 	sub	r22,zero,r22
   4374c:	b0adc83a 	sub	r22,r22,r2
   43750:	d8802917 	ldw	r2,164(sp)
   43754:	07000b44 	movi	fp,45
   43758:	df002785 	stb	fp,158(sp)
   4375c:	10017b16 	blt	r2,zero,43d4c <___vfprintf_internal_r+0x1c64>
   43760:	00bfdfc4 	movi	r2,-129
   43764:	90a4703a 	and	r18,r18,r2
   43768:	003bb106 	br	42630 <__alt_data_end+0xfffd0630>
   4376c:	d9003617 	ldw	r4,216(sp)
   43770:	d9403817 	ldw	r5,224(sp)
   43774:	da003d15 	stw	r8,244(sp)
   43778:	0048bf40 	call	48bf4 <__fpclassifyd>
   4377c:	da003d17 	ldw	r8,244(sp)
   43780:	1000f026 	beq	r2,zero,43b44 <___vfprintf_internal_r+0x1a5c>
   43784:	d9002917 	ldw	r4,164(sp)
   43788:	05bff7c4 	movi	r22,-33
   4378c:	00bfffc4 	movi	r2,-1
   43790:	8dac703a 	and	r22,r17,r22
   43794:	20820026 	beq	r4,r2,43f98 <___vfprintf_internal_r+0x1eb0>
   43798:	008011c4 	movi	r2,71
   4379c:	b081f726 	beq	r22,r2,43f7c <___vfprintf_internal_r+0x1e94>
   437a0:	d9003817 	ldw	r4,224(sp)
   437a4:	90c04014 	ori	r3,r18,256
   437a8:	d8c02b15 	stw	r3,172(sp)
   437ac:	20021516 	blt	r4,zero,44004 <___vfprintf_internal_r+0x1f1c>
   437b0:	dcc03817 	ldw	r19,224(sp)
   437b4:	d8002a05 	stb	zero,168(sp)
   437b8:	00801984 	movi	r2,102
   437bc:	8881f926 	beq	r17,r2,43fa4 <___vfprintf_internal_r+0x1ebc>
   437c0:	00801184 	movi	r2,70
   437c4:	88821c26 	beq	r17,r2,44038 <___vfprintf_internal_r+0x1f50>
   437c8:	00801144 	movi	r2,69
   437cc:	b081ef26 	beq	r22,r2,43f8c <___vfprintf_internal_r+0x1ea4>
   437d0:	d8c02917 	ldw	r3,164(sp)
   437d4:	d8802104 	addi	r2,sp,132
   437d8:	d8800315 	stw	r2,12(sp)
   437dc:	d9403617 	ldw	r5,216(sp)
   437e0:	d8802504 	addi	r2,sp,148
   437e4:	d9002c17 	ldw	r4,176(sp)
   437e8:	d8800215 	stw	r2,8(sp)
   437ec:	d8802604 	addi	r2,sp,152
   437f0:	d8c00015 	stw	r3,0(sp)
   437f4:	d8800115 	stw	r2,4(sp)
   437f8:	01c00084 	movi	r7,2
   437fc:	980d883a 	mov	r6,r19
   43800:	d8c03c15 	stw	r3,240(sp)
   43804:	da003d15 	stw	r8,244(sp)
   43808:	00447c00 	call	447c0 <_dtoa_r>
   4380c:	1021883a 	mov	r16,r2
   43810:	008019c4 	movi	r2,103
   43814:	d8c03c17 	ldw	r3,240(sp)
   43818:	da003d17 	ldw	r8,244(sp)
   4381c:	88817126 	beq	r17,r2,43de4 <___vfprintf_internal_r+0x1cfc>
   43820:	008011c4 	movi	r2,71
   43824:	88829226 	beq	r17,r2,44270 <___vfprintf_internal_r+0x2188>
   43828:	80f9883a 	add	fp,r16,r3
   4382c:	d9003617 	ldw	r4,216(sp)
   43830:	000d883a 	mov	r6,zero
   43834:	000f883a 	mov	r7,zero
   43838:	980b883a 	mov	r5,r19
   4383c:	da003d15 	stw	r8,244(sp)
   43840:	004c6e00 	call	4c6e0 <__eqdf2>
   43844:	da003d17 	ldw	r8,244(sp)
   43848:	10018d26 	beq	r2,zero,43e80 <___vfprintf_internal_r+0x1d98>
   4384c:	d8802117 	ldw	r2,132(sp)
   43850:	1700062e 	bgeu	r2,fp,4386c <___vfprintf_internal_r+0x1784>
   43854:	01000c04 	movi	r4,48
   43858:	10c00044 	addi	r3,r2,1
   4385c:	d8c02115 	stw	r3,132(sp)
   43860:	11000005 	stb	r4,0(r2)
   43864:	d8802117 	ldw	r2,132(sp)
   43868:	173ffb36 	bltu	r2,fp,43858 <__alt_data_end+0xfffd1858>
   4386c:	1405c83a 	sub	r2,r2,r16
   43870:	d8803315 	stw	r2,204(sp)
   43874:	008011c4 	movi	r2,71
   43878:	b0817626 	beq	r22,r2,43e54 <___vfprintf_internal_r+0x1d6c>
   4387c:	00801944 	movi	r2,101
   43880:	1442810e 	bge	r2,r17,44288 <___vfprintf_internal_r+0x21a0>
   43884:	d8c02617 	ldw	r3,152(sp)
   43888:	00801984 	movi	r2,102
   4388c:	d8c03215 	stw	r3,200(sp)
   43890:	8881fe26 	beq	r17,r2,4408c <___vfprintf_internal_r+0x1fa4>
   43894:	d8c03217 	ldw	r3,200(sp)
   43898:	d9003317 	ldw	r4,204(sp)
   4389c:	1901dd16 	blt	r3,r4,44014 <___vfprintf_internal_r+0x1f2c>
   438a0:	9480004c 	andi	r18,r18,1
   438a4:	90022b1e 	bne	r18,zero,44154 <___vfprintf_internal_r+0x206c>
   438a8:	1805883a 	mov	r2,r3
   438ac:	18028016 	blt	r3,zero,442b0 <___vfprintf_internal_r+0x21c8>
   438b0:	d8c03217 	ldw	r3,200(sp)
   438b4:	044019c4 	movi	r17,103
   438b8:	d8c02e15 	stw	r3,184(sp)
   438bc:	df002a07 	ldb	fp,168(sp)
   438c0:	e001531e 	bne	fp,zero,43e10 <___vfprintf_internal_r+0x1d28>
   438c4:	df002783 	ldbu	fp,158(sp)
   438c8:	d8802a15 	stw	r2,168(sp)
   438cc:	dc802b17 	ldw	r18,172(sp)
   438d0:	d8002915 	stw	zero,164(sp)
   438d4:	003bd106 	br	4281c <__alt_data_end+0xfffd081c>
   438d8:	d8802d17 	ldw	r2,180(sp)
   438dc:	d8c02d17 	ldw	r3,180(sp)
   438e0:	d9002d17 	ldw	r4,180(sp)
   438e4:	10800017 	ldw	r2,0(r2)
   438e8:	18c00117 	ldw	r3,4(r3)
   438ec:	21000204 	addi	r4,r4,8
   438f0:	d8803615 	stw	r2,216(sp)
   438f4:	d8c03815 	stw	r3,224(sp)
   438f8:	d9002d15 	stw	r4,180(sp)
   438fc:	003b7506 	br	426d4 <__alt_data_end+0xfffd06d4>
   43900:	ac400007 	ldb	r17,0(r21)
   43904:	003a5906 	br	4226c <__alt_data_end+0xfffd026c>
   43908:	9080100c 	andi	r2,r18,64
   4390c:	1000a826 	beq	r2,zero,43bb0 <___vfprintf_internal_r+0x1ac8>
   43910:	d9002d17 	ldw	r4,180(sp)
   43914:	002d883a 	mov	r22,zero
   43918:	24c0000b 	ldhu	r19,0(r4)
   4391c:	21000104 	addi	r4,r4,4
   43920:	d9002d15 	stw	r4,180(sp)
   43924:	003ccb06 	br	42c54 <__alt_data_end+0xfffd0c54>
   43928:	d8c02d17 	ldw	r3,180(sp)
   4392c:	d9002917 	ldw	r4,164(sp)
   43930:	002d883a 	mov	r22,zero
   43934:	18800104 	addi	r2,r3,4
   43938:	1cc00017 	ldw	r19,0(r3)
   4393c:	203ebb0e 	bge	r4,zero,4342c <__alt_data_end+0xfffd142c>
   43940:	003ef106 	br	43508 <__alt_data_end+0xfffd1508>
   43944:	9080040c 	andi	r2,r18,16
   43948:	1000921e 	bne	r2,zero,43b94 <___vfprintf_internal_r+0x1aac>
   4394c:	9480100c 	andi	r18,r18,64
   43950:	90013926 	beq	r18,zero,43e38 <___vfprintf_internal_r+0x1d50>
   43954:	d9002d17 	ldw	r4,180(sp)
   43958:	d9402f17 	ldw	r5,188(sp)
   4395c:	20800017 	ldw	r2,0(r4)
   43960:	21000104 	addi	r4,r4,4
   43964:	d9002d15 	stw	r4,180(sp)
   43968:	1140000d 	sth	r5,0(r2)
   4396c:	003a1606 	br	421c8 <__alt_data_end+0xfffd01c8>
   43970:	9080100c 	andi	r2,r18,64
   43974:	10008026 	beq	r2,zero,43b78 <___vfprintf_internal_r+0x1a90>
   43978:	d8c02d17 	ldw	r3,180(sp)
   4397c:	1cc0000f 	ldh	r19,0(r3)
   43980:	18c00104 	addi	r3,r3,4
   43984:	d8c02d15 	stw	r3,180(sp)
   43988:	982dd7fa 	srai	r22,r19,31
   4398c:	b005883a 	mov	r2,r22
   43990:	003b1f06 	br	42610 <__alt_data_end+0xfffd0610>
   43994:	9080100c 	andi	r2,r18,64
   43998:	d8002785 	stb	zero,158(sp)
   4399c:	10008a1e 	bne	r2,zero,43bc8 <___vfprintf_internal_r+0x1ae0>
   439a0:	d9402d17 	ldw	r5,180(sp)
   439a4:	d8c02917 	ldw	r3,164(sp)
   439a8:	002d883a 	mov	r22,zero
   439ac:	28800104 	addi	r2,r5,4
   439b0:	2cc00017 	ldw	r19,0(r5)
   439b4:	183e4b0e 	bge	r3,zero,432e4 <__alt_data_end+0xfffd12e4>
   439b8:	9d86b03a 	or	r3,r19,r22
   439bc:	d8802d15 	stw	r2,180(sp)
   439c0:	183e4c1e 	bne	r3,zero,432f4 <__alt_data_end+0xfffd12f4>
   439c4:	0039883a 	mov	fp,zero
   439c8:	0005883a 	mov	r2,zero
   439cc:	003d4006 	br	42ed0 <__alt_data_end+0xfffd0ed0>
   439d0:	01400174 	movhi	r5,5
   439d4:	29452684 	addi	r5,r5,5274
   439d8:	d9402b15 	stw	r5,172(sp)
   439dc:	d9402b17 	ldw	r5,172(sp)
   439e0:	1c47883a 	add	r3,r3,r17
   439e4:	10800044 	addi	r2,r2,1
   439e8:	41400015 	stw	r5,0(r8)
   439ec:	44400115 	stw	r17,4(r8)
   439f0:	d8c02015 	stw	r3,128(sp)
   439f4:	d8801f15 	stw	r2,124(sp)
   439f8:	010001c4 	movi	r4,7
   439fc:	20bec816 	blt	r4,r2,43520 <__alt_data_end+0xfffd1520>
   43a00:	42000204 	addi	r8,r8,8
   43a04:	003ecd06 	br	4353c <__alt_data_end+0xfffd153c>
   43a08:	d9002917 	ldw	r4,164(sp)
   43a0c:	d8002785 	stb	zero,158(sp)
   43a10:	203d2d16 	blt	r4,zero,42ec8 <__alt_data_end+0xfffd0ec8>
   43a14:	00bfdfc4 	movi	r2,-129
   43a18:	90a4703a 	and	r18,r18,r2
   43a1c:	003a9106 	br	42464 <__alt_data_end+0xfffd0464>
   43a20:	01000174 	movhi	r4,5
   43a24:	21052684 	addi	r4,r4,5274
   43a28:	d9002b15 	stw	r4,172(sp)
   43a2c:	003c0c06 	br	42a60 <__alt_data_end+0xfffd0a60>
   43a30:	d9002c17 	ldw	r4,176(sp)
   43a34:	d9801e04 	addi	r6,sp,120
   43a38:	b80b883a 	mov	r5,r23
   43a3c:	0048e400 	call	48e40 <__sprint_r>
   43a40:	103aab1e 	bne	r2,zero,424f0 <__alt_data_end+0xfffd04f0>
   43a44:	d8c02017 	ldw	r3,128(sp)
   43a48:	da000404 	addi	r8,sp,16
   43a4c:	003d4106 	br	42f54 <__alt_data_end+0xfffd0f54>
   43a50:	d8801f17 	ldw	r2,124(sp)
   43a54:	01400174 	movhi	r5,5
   43a58:	01000044 	movi	r4,1
   43a5c:	18c00044 	addi	r3,r3,1
   43a60:	10800044 	addi	r2,r2,1
   43a64:	29452604 	addi	r5,r5,5272
   43a68:	41000115 	stw	r4,4(r8)
   43a6c:	41400015 	stw	r5,0(r8)
   43a70:	d8c02015 	stw	r3,128(sp)
   43a74:	d8801f15 	stw	r2,124(sp)
   43a78:	010001c4 	movi	r4,7
   43a7c:	20805c16 	blt	r4,r2,43bf0 <___vfprintf_internal_r+0x1b08>
   43a80:	42000204 	addi	r8,r8,8
   43a84:	8800041e 	bne	r17,zero,43a98 <___vfprintf_internal_r+0x19b0>
   43a88:	d8803317 	ldw	r2,204(sp)
   43a8c:	1000021e 	bne	r2,zero,43a98 <___vfprintf_internal_r+0x19b0>
   43a90:	9080004c 	andi	r2,r18,1
   43a94:	103c0926 	beq	r2,zero,42abc <__alt_data_end+0xfffd0abc>
   43a98:	d9003717 	ldw	r4,220(sp)
   43a9c:	d8801f17 	ldw	r2,124(sp)
   43aa0:	d9403417 	ldw	r5,208(sp)
   43aa4:	20c7883a 	add	r3,r4,r3
   43aa8:	10800044 	addi	r2,r2,1
   43aac:	41000115 	stw	r4,4(r8)
   43ab0:	41400015 	stw	r5,0(r8)
   43ab4:	d8c02015 	stw	r3,128(sp)
   43ab8:	d8801f15 	stw	r2,124(sp)
   43abc:	010001c4 	movi	r4,7
   43ac0:	20812116 	blt	r4,r2,43f48 <___vfprintf_internal_r+0x1e60>
   43ac4:	42000204 	addi	r8,r8,8
   43ac8:	0463c83a 	sub	r17,zero,r17
   43acc:	0440730e 	bge	zero,r17,43c9c <___vfprintf_internal_r+0x1bb4>
   43ad0:	05800404 	movi	r22,16
   43ad4:	b440860e 	bge	r22,r17,43cf0 <___vfprintf_internal_r+0x1c08>
   43ad8:	01400174 	movhi	r5,5
   43adc:	29452684 	addi	r5,r5,5274
   43ae0:	d9402b15 	stw	r5,172(sp)
   43ae4:	070001c4 	movi	fp,7
   43ae8:	dcc02c17 	ldw	r19,176(sp)
   43aec:	00000306 	br	43afc <___vfprintf_internal_r+0x1a14>
   43af0:	42000204 	addi	r8,r8,8
   43af4:	8c7ffc04 	addi	r17,r17,-16
   43af8:	b440800e 	bge	r22,r17,43cfc <___vfprintf_internal_r+0x1c14>
   43afc:	18c00404 	addi	r3,r3,16
   43b00:	10800044 	addi	r2,r2,1
   43b04:	45000015 	stw	r20,0(r8)
   43b08:	45800115 	stw	r22,4(r8)
   43b0c:	d8c02015 	stw	r3,128(sp)
   43b10:	d8801f15 	stw	r2,124(sp)
   43b14:	e0bff60e 	bge	fp,r2,43af0 <__alt_data_end+0xfffd1af0>
   43b18:	d9801e04 	addi	r6,sp,120
   43b1c:	b80b883a 	mov	r5,r23
   43b20:	9809883a 	mov	r4,r19
   43b24:	0048e400 	call	48e40 <__sprint_r>
   43b28:	103a711e 	bne	r2,zero,424f0 <__alt_data_end+0xfffd04f0>
   43b2c:	d8c02017 	ldw	r3,128(sp)
   43b30:	d8801f17 	ldw	r2,124(sp)
   43b34:	da000404 	addi	r8,sp,16
   43b38:	003fee06 	br	43af4 <__alt_data_end+0xfffd1af4>
   43b3c:	00bfffc4 	movi	r2,-1
   43b40:	003a6f06 	br	42500 <__alt_data_end+0xfffd0500>
   43b44:	008011c4 	movi	r2,71
   43b48:	1440b816 	blt	r2,r17,43e2c <___vfprintf_internal_r+0x1d44>
   43b4c:	04000174 	movhi	r16,5
   43b50:	84051804 	addi	r16,r16,5216
   43b54:	00c000c4 	movi	r3,3
   43b58:	00bfdfc4 	movi	r2,-129
   43b5c:	d8c02a15 	stw	r3,168(sp)
   43b60:	90a4703a 	and	r18,r18,r2
   43b64:	df002783 	ldbu	fp,158(sp)
   43b68:	d8c02e15 	stw	r3,184(sp)
   43b6c:	d8002915 	stw	zero,164(sp)
   43b70:	d8003215 	stw	zero,200(sp)
   43b74:	003b2906 	br	4281c <__alt_data_end+0xfffd081c>
   43b78:	d9002d17 	ldw	r4,180(sp)
   43b7c:	24c00017 	ldw	r19,0(r4)
   43b80:	21000104 	addi	r4,r4,4
   43b84:	d9002d15 	stw	r4,180(sp)
   43b88:	982dd7fa 	srai	r22,r19,31
   43b8c:	b005883a 	mov	r2,r22
   43b90:	003a9f06 	br	42610 <__alt_data_end+0xfffd0610>
   43b94:	d9402d17 	ldw	r5,180(sp)
   43b98:	d8c02f17 	ldw	r3,188(sp)
   43b9c:	28800017 	ldw	r2,0(r5)
   43ba0:	29400104 	addi	r5,r5,4
   43ba4:	d9402d15 	stw	r5,180(sp)
   43ba8:	10c00015 	stw	r3,0(r2)
   43bac:	00398606 	br	421c8 <__alt_data_end+0xfffd01c8>
   43bb0:	d9402d17 	ldw	r5,180(sp)
   43bb4:	002d883a 	mov	r22,zero
   43bb8:	2cc00017 	ldw	r19,0(r5)
   43bbc:	29400104 	addi	r5,r5,4
   43bc0:	d9402d15 	stw	r5,180(sp)
   43bc4:	003c2306 	br	42c54 <__alt_data_end+0xfffd0c54>
   43bc8:	d8c02d17 	ldw	r3,180(sp)
   43bcc:	d9002917 	ldw	r4,164(sp)
   43bd0:	002d883a 	mov	r22,zero
   43bd4:	18800104 	addi	r2,r3,4
   43bd8:	1cc0000b 	ldhu	r19,0(r3)
   43bdc:	203dc10e 	bge	r4,zero,432e4 <__alt_data_end+0xfffd12e4>
   43be0:	003f7506 	br	439b8 <__alt_data_end+0xfffd19b8>
   43be4:	04000174 	movhi	r16,5
   43be8:	84051604 	addi	r16,r16,5208
   43bec:	003acc06 	br	42720 <__alt_data_end+0xfffd0720>
   43bf0:	d9002c17 	ldw	r4,176(sp)
   43bf4:	d9801e04 	addi	r6,sp,120
   43bf8:	b80b883a 	mov	r5,r23
   43bfc:	0048e400 	call	48e40 <__sprint_r>
   43c00:	103a3b1e 	bne	r2,zero,424f0 <__alt_data_end+0xfffd04f0>
   43c04:	dc402617 	ldw	r17,152(sp)
   43c08:	d8c02017 	ldw	r3,128(sp)
   43c0c:	da000404 	addi	r8,sp,16
   43c10:	003f9c06 	br	43a84 <__alt_data_end+0xfffd1a84>
   43c14:	ac400043 	ldbu	r17,1(r21)
   43c18:	94800814 	ori	r18,r18,32
   43c1c:	ad400044 	addi	r21,r21,1
   43c20:	8c403fcc 	andi	r17,r17,255
   43c24:	8c40201c 	xori	r17,r17,128
   43c28:	8c7fe004 	addi	r17,r17,-128
   43c2c:	00398f06 	br	4226c <__alt_data_end+0xfffd026c>
   43c30:	d8c02d15 	stw	r3,180(sp)
   43c34:	0039883a 	mov	fp,zero
   43c38:	003e3506 	br	43510 <__alt_data_end+0xfffd1510>
   43c3c:	d9002c17 	ldw	r4,176(sp)
   43c40:	d9801e04 	addi	r6,sp,120
   43c44:	b80b883a 	mov	r5,r23
   43c48:	0048e400 	call	48e40 <__sprint_r>
   43c4c:	103a281e 	bne	r2,zero,424f0 <__alt_data_end+0xfffd04f0>
   43c50:	d8c02017 	ldw	r3,128(sp)
   43c54:	da000404 	addi	r8,sp,16
   43c58:	003cd006 	br	42f9c <__alt_data_end+0xfffd0f9c>
   43c5c:	8009883a 	mov	r4,r16
   43c60:	da003d15 	stw	r8,244(sp)
   43c64:	00420500 	call	42050 <strlen>
   43c68:	d8802e15 	stw	r2,184(sp)
   43c6c:	da003d17 	ldw	r8,244(sp)
   43c70:	103c340e 	bge	r2,zero,42d44 <__alt_data_end+0xfffd0d44>
   43c74:	0005883a 	mov	r2,zero
   43c78:	003c3206 	br	42d44 <__alt_data_end+0xfffd0d44>
   43c7c:	d9002c17 	ldw	r4,176(sp)
   43c80:	d9801e04 	addi	r6,sp,120
   43c84:	b80b883a 	mov	r5,r23
   43c88:	0048e400 	call	48e40 <__sprint_r>
   43c8c:	103a181e 	bne	r2,zero,424f0 <__alt_data_end+0xfffd04f0>
   43c90:	d8c02017 	ldw	r3,128(sp)
   43c94:	d8801f17 	ldw	r2,124(sp)
   43c98:	da000404 	addi	r8,sp,16
   43c9c:	d9403317 	ldw	r5,204(sp)
   43ca0:	10800044 	addi	r2,r2,1
   43ca4:	44000015 	stw	r16,0(r8)
   43ca8:	28c7883a 	add	r3,r5,r3
   43cac:	003b7d06 	br	42aa4 <__alt_data_end+0xfffd0aa4>
   43cb0:	01000174 	movhi	r4,5
   43cb4:	21052a84 	addi	r4,r4,5290
   43cb8:	d9003515 	stw	r4,212(sp)
   43cbc:	003b1406 	br	42910 <__alt_data_end+0xfffd0910>
   43cc0:	013fffc4 	movi	r4,-1
   43cc4:	003a3506 	br	4259c <__alt_data_end+0xfffd059c>
   43cc8:	0023883a 	mov	r17,zero
   43ccc:	003d9d06 	br	43344 <__alt_data_end+0xfffd1344>
   43cd0:	d9002c17 	ldw	r4,176(sp)
   43cd4:	d9801e04 	addi	r6,sp,120
   43cd8:	b80b883a 	mov	r5,r23
   43cdc:	0048e400 	call	48e40 <__sprint_r>
   43ce0:	103a031e 	bne	r2,zero,424f0 <__alt_data_end+0xfffd04f0>
   43ce4:	d8c02017 	ldw	r3,128(sp)
   43ce8:	da000404 	addi	r8,sp,16
   43cec:	003d9406 	br	43340 <__alt_data_end+0xfffd1340>
   43cf0:	01000174 	movhi	r4,5
   43cf4:	21052684 	addi	r4,r4,5274
   43cf8:	d9002b15 	stw	r4,172(sp)
   43cfc:	d9002b17 	ldw	r4,172(sp)
   43d00:	1c47883a 	add	r3,r3,r17
   43d04:	10800044 	addi	r2,r2,1
   43d08:	41000015 	stw	r4,0(r8)
   43d0c:	44400115 	stw	r17,4(r8)
   43d10:	d8c02015 	stw	r3,128(sp)
   43d14:	d8801f15 	stw	r2,124(sp)
   43d18:	010001c4 	movi	r4,7
   43d1c:	20bfd716 	blt	r4,r2,43c7c <__alt_data_end+0xfffd1c7c>
   43d20:	42000204 	addi	r8,r8,8
   43d24:	003fdd06 	br	43c9c <__alt_data_end+0xfffd1c9c>
   43d28:	d9002c17 	ldw	r4,176(sp)
   43d2c:	d9801e04 	addi	r6,sp,120
   43d30:	b80b883a 	mov	r5,r23
   43d34:	0048e400 	call	48e40 <__sprint_r>
   43d38:	1039ed1e 	bne	r2,zero,424f0 <__alt_data_end+0xfffd04f0>
   43d3c:	d8802617 	ldw	r2,152(sp)
   43d40:	d8c02017 	ldw	r3,128(sp)
   43d44:	da000404 	addi	r8,sp,16
   43d48:	003e1006 	br	4358c <__alt_data_end+0xfffd158c>
   43d4c:	00800044 	movi	r2,1
   43d50:	10803fcc 	andi	r2,r2,255
   43d54:	00c00044 	movi	r3,1
   43d58:	10fa3526 	beq	r2,r3,42630 <__alt_data_end+0xfffd0630>
   43d5c:	00c00084 	movi	r3,2
   43d60:	10fbcb26 	beq	r2,r3,42c90 <__alt_data_end+0xfffd0c90>
   43d64:	003a8f06 	br	427a4 <__alt_data_end+0xfffd07a4>
   43d68:	01000174 	movhi	r4,5
   43d6c:	21052a84 	addi	r4,r4,5290
   43d70:	d9003515 	stw	r4,212(sp)
   43d74:	003b7606 	br	42b50 <__alt_data_end+0xfffd0b50>
   43d78:	d8802917 	ldw	r2,164(sp)
   43d7c:	00c00184 	movi	r3,6
   43d80:	1880012e 	bgeu	r3,r2,43d88 <___vfprintf_internal_r+0x1ca0>
   43d84:	1805883a 	mov	r2,r3
   43d88:	d8802e15 	stw	r2,184(sp)
   43d8c:	1000ef16 	blt	r2,zero,4414c <___vfprintf_internal_r+0x2064>
   43d90:	04000174 	movhi	r16,5
   43d94:	d8802a15 	stw	r2,168(sp)
   43d98:	dcc02d15 	stw	r19,180(sp)
   43d9c:	d8002915 	stw	zero,164(sp)
   43da0:	d8003215 	stw	zero,200(sp)
   43da4:	84052404 	addi	r16,r16,5264
   43da8:	0039883a 	mov	fp,zero
   43dac:	003aa206 	br	42838 <__alt_data_end+0xfffd0838>
   43db0:	0021883a 	mov	r16,zero
   43db4:	003e0706 	br	435d4 <__alt_data_end+0xfffd15d4>
   43db8:	d9002c17 	ldw	r4,176(sp)
   43dbc:	d9801e04 	addi	r6,sp,120
   43dc0:	b80b883a 	mov	r5,r23
   43dc4:	0048e400 	call	48e40 <__sprint_r>
   43dc8:	1039c91e 	bne	r2,zero,424f0 <__alt_data_end+0xfffd04f0>
   43dcc:	d8802617 	ldw	r2,152(sp)
   43dd0:	d9403317 	ldw	r5,204(sp)
   43dd4:	d8c02017 	ldw	r3,128(sp)
   43dd8:	da000404 	addi	r8,sp,16
   43ddc:	2885c83a 	sub	r2,r5,r2
   43de0:	003dfb06 	br	435d0 <__alt_data_end+0xfffd15d0>
   43de4:	9080004c 	andi	r2,r18,1
   43de8:	103e8f1e 	bne	r2,zero,43828 <__alt_data_end+0xfffd1828>
   43dec:	d8802117 	ldw	r2,132(sp)
   43df0:	003e9e06 	br	4386c <__alt_data_end+0xfffd186c>
   43df4:	1025883a 	mov	r18,r2
   43df8:	0039883a 	mov	fp,zero
   43dfc:	00800084 	movi	r2,2
   43e00:	003fd306 	br	43d50 <__alt_data_end+0xfffd1d50>
   43e04:	07000b44 	movi	fp,45
   43e08:	df002785 	stb	fp,158(sp)
   43e0c:	003a4006 	br	42710 <__alt_data_end+0xfffd0710>
   43e10:	00c00b44 	movi	r3,45
   43e14:	d8c02785 	stb	r3,158(sp)
   43e18:	d8802a15 	stw	r2,168(sp)
   43e1c:	dc802b17 	ldw	r18,172(sp)
   43e20:	d8002915 	stw	zero,164(sp)
   43e24:	07000b44 	movi	fp,45
   43e28:	003a8006 	br	4282c <__alt_data_end+0xfffd082c>
   43e2c:	04000174 	movhi	r16,5
   43e30:	84051904 	addi	r16,r16,5220
   43e34:	003f4706 	br	43b54 <__alt_data_end+0xfffd1b54>
   43e38:	d8c02d17 	ldw	r3,180(sp)
   43e3c:	d9002f17 	ldw	r4,188(sp)
   43e40:	18800017 	ldw	r2,0(r3)
   43e44:	18c00104 	addi	r3,r3,4
   43e48:	d8c02d15 	stw	r3,180(sp)
   43e4c:	11000015 	stw	r4,0(r2)
   43e50:	0038dd06 	br	421c8 <__alt_data_end+0xfffd01c8>
   43e54:	dd802617 	ldw	r22,152(sp)
   43e58:	00bfff44 	movi	r2,-3
   43e5c:	b0801c16 	blt	r22,r2,43ed0 <___vfprintf_internal_r+0x1de8>
   43e60:	d9402917 	ldw	r5,164(sp)
   43e64:	2d801a16 	blt	r5,r22,43ed0 <___vfprintf_internal_r+0x1de8>
   43e68:	dd803215 	stw	r22,200(sp)
   43e6c:	003e8906 	br	43894 <__alt_data_end+0xfffd1894>
   43e70:	01000174 	movhi	r4,5
   43e74:	21052684 	addi	r4,r4,5274
   43e78:	d9002b15 	stw	r4,172(sp)
   43e7c:	003c9106 	br	430c4 <__alt_data_end+0xfffd10c4>
   43e80:	e005883a 	mov	r2,fp
   43e84:	003e7906 	br	4386c <__alt_data_end+0xfffd186c>
   43e88:	d9402917 	ldw	r5,164(sp)
   43e8c:	df002783 	ldbu	fp,158(sp)
   43e90:	dcc02d15 	stw	r19,180(sp)
   43e94:	d9402a15 	stw	r5,168(sp)
   43e98:	d9402e15 	stw	r5,184(sp)
   43e9c:	d8002915 	stw	zero,164(sp)
   43ea0:	d8003215 	stw	zero,200(sp)
   43ea4:	003a5d06 	br	4281c <__alt_data_end+0xfffd081c>
   43ea8:	9080004c 	andi	r2,r18,1
   43eac:	0039883a 	mov	fp,zero
   43eb0:	10000426 	beq	r2,zero,43ec4 <___vfprintf_internal_r+0x1ddc>
   43eb4:	00800c04 	movi	r2,48
   43eb8:	dc001dc4 	addi	r16,sp,119
   43ebc:	d8801dc5 	stb	r2,119(sp)
   43ec0:	003b8006 	br	42cc4 <__alt_data_end+0xfffd0cc4>
   43ec4:	d8002e15 	stw	zero,184(sp)
   43ec8:	dc001e04 	addi	r16,sp,120
   43ecc:	003a4d06 	br	42804 <__alt_data_end+0xfffd0804>
   43ed0:	8c7fff84 	addi	r17,r17,-2
   43ed4:	b5bfffc4 	addi	r22,r22,-1
   43ed8:	dd802615 	stw	r22,152(sp)
   43edc:	dc4022c5 	stb	r17,139(sp)
   43ee0:	b000bf16 	blt	r22,zero,441e0 <___vfprintf_internal_r+0x20f8>
   43ee4:	00800ac4 	movi	r2,43
   43ee8:	d8802305 	stb	r2,140(sp)
   43eec:	00800244 	movi	r2,9
   43ef0:	15807016 	blt	r2,r22,440b4 <___vfprintf_internal_r+0x1fcc>
   43ef4:	00800c04 	movi	r2,48
   43ef8:	b5800c04 	addi	r22,r22,48
   43efc:	d8802345 	stb	r2,141(sp)
   43f00:	dd802385 	stb	r22,142(sp)
   43f04:	d88023c4 	addi	r2,sp,143
   43f08:	df0022c4 	addi	fp,sp,139
   43f0c:	d8c03317 	ldw	r3,204(sp)
   43f10:	1739c83a 	sub	fp,r2,fp
   43f14:	d9003317 	ldw	r4,204(sp)
   43f18:	e0c7883a 	add	r3,fp,r3
   43f1c:	df003a15 	stw	fp,232(sp)
   43f20:	d8c02e15 	stw	r3,184(sp)
   43f24:	00800044 	movi	r2,1
   43f28:	1100b30e 	bge	r2,r4,441f8 <___vfprintf_internal_r+0x2110>
   43f2c:	d8c02e17 	ldw	r3,184(sp)
   43f30:	18c00044 	addi	r3,r3,1
   43f34:	d8c02e15 	stw	r3,184(sp)
   43f38:	1805883a 	mov	r2,r3
   43f3c:	1800ac16 	blt	r3,zero,441f0 <___vfprintf_internal_r+0x2108>
   43f40:	d8003215 	stw	zero,200(sp)
   43f44:	003e5d06 	br	438bc <__alt_data_end+0xfffd18bc>
   43f48:	d9002c17 	ldw	r4,176(sp)
   43f4c:	d9801e04 	addi	r6,sp,120
   43f50:	b80b883a 	mov	r5,r23
   43f54:	0048e400 	call	48e40 <__sprint_r>
   43f58:	1039651e 	bne	r2,zero,424f0 <__alt_data_end+0xfffd04f0>
   43f5c:	dc402617 	ldw	r17,152(sp)
   43f60:	d8c02017 	ldw	r3,128(sp)
   43f64:	d8801f17 	ldw	r2,124(sp)
   43f68:	da000404 	addi	r8,sp,16
   43f6c:	003ed606 	br	43ac8 <__alt_data_end+0xfffd1ac8>
   43f70:	582b883a 	mov	r21,r11
   43f74:	d8002915 	stw	zero,164(sp)
   43f78:	0038bd06 	br	42270 <__alt_data_end+0xfffd0270>
   43f7c:	d8802917 	ldw	r2,164(sp)
   43f80:	103e071e 	bne	r2,zero,437a0 <__alt_data_end+0xfffd17a0>
   43f84:	dc002915 	stw	r16,164(sp)
   43f88:	003e0506 	br	437a0 <__alt_data_end+0xfffd17a0>
   43f8c:	d9002917 	ldw	r4,164(sp)
   43f90:	20c00044 	addi	r3,r4,1
   43f94:	003e0f06 	br	437d4 <__alt_data_end+0xfffd17d4>
   43f98:	01400184 	movi	r5,6
   43f9c:	d9402915 	stw	r5,164(sp)
   43fa0:	003dff06 	br	437a0 <__alt_data_end+0xfffd17a0>
   43fa4:	d8802104 	addi	r2,sp,132
   43fa8:	d8800315 	stw	r2,12(sp)
   43fac:	d8802504 	addi	r2,sp,148
   43fb0:	d8800215 	stw	r2,8(sp)
   43fb4:	d8802604 	addi	r2,sp,152
   43fb8:	d8800115 	stw	r2,4(sp)
   43fbc:	d8802917 	ldw	r2,164(sp)
   43fc0:	d9403617 	ldw	r5,216(sp)
   43fc4:	d9002c17 	ldw	r4,176(sp)
   43fc8:	d8800015 	stw	r2,0(sp)
   43fcc:	01c000c4 	movi	r7,3
   43fd0:	980d883a 	mov	r6,r19
   43fd4:	da003d15 	stw	r8,244(sp)
   43fd8:	00447c00 	call	447c0 <_dtoa_r>
   43fdc:	d8c02917 	ldw	r3,164(sp)
   43fe0:	da003d17 	ldw	r8,244(sp)
   43fe4:	1021883a 	mov	r16,r2
   43fe8:	10f9883a 	add	fp,r2,r3
   43fec:	81000007 	ldb	r4,0(r16)
   43ff0:	00800c04 	movi	r2,48
   43ff4:	20805e26 	beq	r4,r2,44170 <___vfprintf_internal_r+0x2088>
   43ff8:	d8c02617 	ldw	r3,152(sp)
   43ffc:	e0f9883a 	add	fp,fp,r3
   44000:	003e0a06 	br	4382c <__alt_data_end+0xfffd182c>
   44004:	00c00b44 	movi	r3,45
   44008:	24e0003c 	xorhi	r19,r4,32768
   4400c:	d8c02a05 	stb	r3,168(sp)
   44010:	003de906 	br	437b8 <__alt_data_end+0xfffd17b8>
   44014:	d8c03217 	ldw	r3,200(sp)
   44018:	00c07a0e 	bge	zero,r3,44204 <___vfprintf_internal_r+0x211c>
   4401c:	00800044 	movi	r2,1
   44020:	d9003317 	ldw	r4,204(sp)
   44024:	1105883a 	add	r2,r2,r4
   44028:	d8802e15 	stw	r2,184(sp)
   4402c:	10004e16 	blt	r2,zero,44168 <___vfprintf_internal_r+0x2080>
   44030:	044019c4 	movi	r17,103
   44034:	003e2106 	br	438bc <__alt_data_end+0xfffd18bc>
   44038:	d9002917 	ldw	r4,164(sp)
   4403c:	d8802104 	addi	r2,sp,132
   44040:	d8800315 	stw	r2,12(sp)
   44044:	d9000015 	stw	r4,0(sp)
   44048:	d8802504 	addi	r2,sp,148
   4404c:	d9403617 	ldw	r5,216(sp)
   44050:	d9002c17 	ldw	r4,176(sp)
   44054:	d8800215 	stw	r2,8(sp)
   44058:	d8802604 	addi	r2,sp,152
   4405c:	d8800115 	stw	r2,4(sp)
   44060:	01c000c4 	movi	r7,3
   44064:	980d883a 	mov	r6,r19
   44068:	da003d15 	stw	r8,244(sp)
   4406c:	00447c00 	call	447c0 <_dtoa_r>
   44070:	d8c02917 	ldw	r3,164(sp)
   44074:	da003d17 	ldw	r8,244(sp)
   44078:	1021883a 	mov	r16,r2
   4407c:	00801184 	movi	r2,70
   44080:	80f9883a 	add	fp,r16,r3
   44084:	88bfd926 	beq	r17,r2,43fec <__alt_data_end+0xfffd1fec>
   44088:	003de806 	br	4382c <__alt_data_end+0xfffd182c>
   4408c:	d9002917 	ldw	r4,164(sp)
   44090:	00c04d0e 	bge	zero,r3,441c8 <___vfprintf_internal_r+0x20e0>
   44094:	2000441e 	bne	r4,zero,441a8 <___vfprintf_internal_r+0x20c0>
   44098:	9480004c 	andi	r18,r18,1
   4409c:	9000421e 	bne	r18,zero,441a8 <___vfprintf_internal_r+0x20c0>
   440a0:	1805883a 	mov	r2,r3
   440a4:	18007016 	blt	r3,zero,44268 <___vfprintf_internal_r+0x2180>
   440a8:	d8c03217 	ldw	r3,200(sp)
   440ac:	d8c02e15 	stw	r3,184(sp)
   440b0:	003e0206 	br	438bc <__alt_data_end+0xfffd18bc>
   440b4:	df0022c4 	addi	fp,sp,139
   440b8:	dc002915 	stw	r16,164(sp)
   440bc:	4027883a 	mov	r19,r8
   440c0:	e021883a 	mov	r16,fp
   440c4:	b009883a 	mov	r4,r22
   440c8:	01400284 	movi	r5,10
   440cc:	00408bc0 	call	408bc <__modsi3>
   440d0:	10800c04 	addi	r2,r2,48
   440d4:	843fffc4 	addi	r16,r16,-1
   440d8:	b009883a 	mov	r4,r22
   440dc:	01400284 	movi	r5,10
   440e0:	80800005 	stb	r2,0(r16)
   440e4:	00408380 	call	40838 <__divsi3>
   440e8:	102d883a 	mov	r22,r2
   440ec:	00800244 	movi	r2,9
   440f0:	15bff416 	blt	r2,r22,440c4 <__alt_data_end+0xfffd20c4>
   440f4:	9811883a 	mov	r8,r19
   440f8:	b0800c04 	addi	r2,r22,48
   440fc:	8027883a 	mov	r19,r16
   44100:	997fffc4 	addi	r5,r19,-1
   44104:	98bfffc5 	stb	r2,-1(r19)
   44108:	dc002917 	ldw	r16,164(sp)
   4410c:	2f006a2e 	bgeu	r5,fp,442b8 <___vfprintf_internal_r+0x21d0>
   44110:	d9c02384 	addi	r7,sp,142
   44114:	3ccfc83a 	sub	r7,r7,r19
   44118:	d9002344 	addi	r4,sp,141
   4411c:	e1cf883a 	add	r7,fp,r7
   44120:	00000106 	br	44128 <___vfprintf_internal_r+0x2040>
   44124:	28800003 	ldbu	r2,0(r5)
   44128:	20800005 	stb	r2,0(r4)
   4412c:	21000044 	addi	r4,r4,1
   44130:	29400044 	addi	r5,r5,1
   44134:	393ffb1e 	bne	r7,r4,44124 <__alt_data_end+0xfffd2124>
   44138:	d8802304 	addi	r2,sp,140
   4413c:	14c5c83a 	sub	r2,r2,r19
   44140:	d8c02344 	addi	r3,sp,141
   44144:	1885883a 	add	r2,r3,r2
   44148:	003f7006 	br	43f0c <__alt_data_end+0xfffd1f0c>
   4414c:	0005883a 	mov	r2,zero
   44150:	003f0f06 	br	43d90 <__alt_data_end+0xfffd1d90>
   44154:	d8c03217 	ldw	r3,200(sp)
   44158:	18c00044 	addi	r3,r3,1
   4415c:	d8c02e15 	stw	r3,184(sp)
   44160:	1805883a 	mov	r2,r3
   44164:	183fb20e 	bge	r3,zero,44030 <__alt_data_end+0xfffd2030>
   44168:	0005883a 	mov	r2,zero
   4416c:	003fb006 	br	44030 <__alt_data_end+0xfffd2030>
   44170:	d9003617 	ldw	r4,216(sp)
   44174:	000d883a 	mov	r6,zero
   44178:	000f883a 	mov	r7,zero
   4417c:	980b883a 	mov	r5,r19
   44180:	d8c03c15 	stw	r3,240(sp)
   44184:	da003d15 	stw	r8,244(sp)
   44188:	004c6e00 	call	4c6e0 <__eqdf2>
   4418c:	d8c03c17 	ldw	r3,240(sp)
   44190:	da003d17 	ldw	r8,244(sp)
   44194:	103f9826 	beq	r2,zero,43ff8 <__alt_data_end+0xfffd1ff8>
   44198:	00800044 	movi	r2,1
   4419c:	10c7c83a 	sub	r3,r2,r3
   441a0:	d8c02615 	stw	r3,152(sp)
   441a4:	003f9506 	br	43ffc <__alt_data_end+0xfffd1ffc>
   441a8:	d9002917 	ldw	r4,164(sp)
   441ac:	d8c03217 	ldw	r3,200(sp)
   441b0:	20800044 	addi	r2,r4,1
   441b4:	1885883a 	add	r2,r3,r2
   441b8:	d8802e15 	stw	r2,184(sp)
   441bc:	103dbf0e 	bge	r2,zero,438bc <__alt_data_end+0xfffd18bc>
   441c0:	0005883a 	mov	r2,zero
   441c4:	003dbd06 	br	438bc <__alt_data_end+0xfffd18bc>
   441c8:	2000211e 	bne	r4,zero,44250 <___vfprintf_internal_r+0x2168>
   441cc:	9480004c 	andi	r18,r18,1
   441d0:	90001f1e 	bne	r18,zero,44250 <___vfprintf_internal_r+0x2168>
   441d4:	00800044 	movi	r2,1
   441d8:	d8802e15 	stw	r2,184(sp)
   441dc:	003db706 	br	438bc <__alt_data_end+0xfffd18bc>
   441e0:	00800b44 	movi	r2,45
   441e4:	05adc83a 	sub	r22,zero,r22
   441e8:	d8802305 	stb	r2,140(sp)
   441ec:	003f3f06 	br	43eec <__alt_data_end+0xfffd1eec>
   441f0:	0005883a 	mov	r2,zero
   441f4:	003f5206 	br	43f40 <__alt_data_end+0xfffd1f40>
   441f8:	90a4703a 	and	r18,r18,r2
   441fc:	903f4e26 	beq	r18,zero,43f38 <__alt_data_end+0xfffd1f38>
   44200:	003f4a06 	br	43f2c <__alt_data_end+0xfffd1f2c>
   44204:	00800084 	movi	r2,2
   44208:	10c5c83a 	sub	r2,r2,r3
   4420c:	003f8406 	br	44020 <__alt_data_end+0xfffd2020>
   44210:	d8802d17 	ldw	r2,180(sp)
   44214:	d9002d17 	ldw	r4,180(sp)
   44218:	ac400043 	ldbu	r17,1(r21)
   4421c:	10800017 	ldw	r2,0(r2)
   44220:	582b883a 	mov	r21,r11
   44224:	d8802915 	stw	r2,164(sp)
   44228:	20800104 	addi	r2,r4,4
   4422c:	d9002917 	ldw	r4,164(sp)
   44230:	d8802d15 	stw	r2,180(sp)
   44234:	203e7a0e 	bge	r4,zero,43c20 <__alt_data_end+0xfffd1c20>
   44238:	8c403fcc 	andi	r17,r17,255
   4423c:	00bfffc4 	movi	r2,-1
   44240:	8c40201c 	xori	r17,r17,128
   44244:	d8802915 	stw	r2,164(sp)
   44248:	8c7fe004 	addi	r17,r17,-128
   4424c:	00380706 	br	4226c <__alt_data_end+0xfffd026c>
   44250:	d8c02917 	ldw	r3,164(sp)
   44254:	18c00084 	addi	r3,r3,2
   44258:	d8c02e15 	stw	r3,184(sp)
   4425c:	1805883a 	mov	r2,r3
   44260:	183d960e 	bge	r3,zero,438bc <__alt_data_end+0xfffd18bc>
   44264:	003fd606 	br	441c0 <__alt_data_end+0xfffd21c0>
   44268:	0005883a 	mov	r2,zero
   4426c:	003f8e06 	br	440a8 <__alt_data_end+0xfffd20a8>
   44270:	9080004c 	andi	r2,r18,1
   44274:	103f811e 	bne	r2,zero,4407c <__alt_data_end+0xfffd207c>
   44278:	d8802117 	ldw	r2,132(sp)
   4427c:	1405c83a 	sub	r2,r2,r16
   44280:	d8803315 	stw	r2,204(sp)
   44284:	b47ef326 	beq	r22,r17,43e54 <__alt_data_end+0xfffd1e54>
   44288:	dd802617 	ldw	r22,152(sp)
   4428c:	003f1106 	br	43ed4 <__alt_data_end+0xfffd1ed4>
   44290:	d9c02785 	stb	r7,158(sp)
   44294:	00390406 	br	426a8 <__alt_data_end+0xfffd06a8>
   44298:	d9c02785 	stb	r7,158(sp)
   4429c:	0038d306 	br	425ec <__alt_data_end+0xfffd05ec>
   442a0:	d9c02785 	stb	r7,158(sp)
   442a4:	003a6106 	br	42c2c <__alt_data_end+0xfffd0c2c>
   442a8:	d9c02785 	stb	r7,158(sp)
   442ac:	003af806 	br	42e90 <__alt_data_end+0xfffd0e90>
   442b0:	0005883a 	mov	r2,zero
   442b4:	003d7e06 	br	438b0 <__alt_data_end+0xfffd18b0>
   442b8:	d8802344 	addi	r2,sp,141
   442bc:	003f1306 	br	43f0c <__alt_data_end+0xfffd1f0c>
   442c0:	d9c02785 	stb	r7,158(sp)
   442c4:	00392306 	br	42754 <__alt_data_end+0xfffd0754>
   442c8:	d9c02785 	stb	r7,158(sp)
   442cc:	003aa906 	br	42d74 <__alt_data_end+0xfffd0d74>
   442d0:	d9c02785 	stb	r7,158(sp)
   442d4:	003a3d06 	br	42bcc <__alt_data_end+0xfffd0bcc>
   442d8:	d9c02785 	stb	r7,158(sp)
   442dc:	003aca06 	br	42e08 <__alt_data_end+0xfffd0e08>

000442e0 <__vfprintf_internal>:
   442e0:	00800174 	movhi	r2,5
   442e4:	108d6b04 	addi	r2,r2,13740
   442e8:	300f883a 	mov	r7,r6
   442ec:	280d883a 	mov	r6,r5
   442f0:	200b883a 	mov	r5,r4
   442f4:	11000017 	ldw	r4,0(r2)
   442f8:	00420e81 	jmpi	420e8 <___vfprintf_internal_r>

000442fc <__sbprintf>:
   442fc:	2880030b 	ldhu	r2,12(r5)
   44300:	2ac01917 	ldw	r11,100(r5)
   44304:	2a80038b 	ldhu	r10,14(r5)
   44308:	2a400717 	ldw	r9,28(r5)
   4430c:	2a000917 	ldw	r8,36(r5)
   44310:	defee204 	addi	sp,sp,-1144
   44314:	00c10004 	movi	r3,1024
   44318:	dc011a15 	stw	r16,1128(sp)
   4431c:	10bfff4c 	andi	r2,r2,65533
   44320:	2821883a 	mov	r16,r5
   44324:	d8cb883a 	add	r5,sp,r3
   44328:	dc811c15 	stw	r18,1136(sp)
   4432c:	dc411b15 	stw	r17,1132(sp)
   44330:	dfc11d15 	stw	ra,1140(sp)
   44334:	2025883a 	mov	r18,r4
   44338:	d881030d 	sth	r2,1036(sp)
   4433c:	dac11915 	stw	r11,1124(sp)
   44340:	da81038d 	sth	r10,1038(sp)
   44344:	da410715 	stw	r9,1052(sp)
   44348:	da010915 	stw	r8,1060(sp)
   4434c:	dec10015 	stw	sp,1024(sp)
   44350:	dec10415 	stw	sp,1040(sp)
   44354:	d8c10215 	stw	r3,1032(sp)
   44358:	d8c10515 	stw	r3,1044(sp)
   4435c:	d8010615 	stw	zero,1048(sp)
   44360:	00420e80 	call	420e8 <___vfprintf_internal_r>
   44364:	1023883a 	mov	r17,r2
   44368:	10000416 	blt	r2,zero,4437c <__sbprintf+0x80>
   4436c:	d9410004 	addi	r5,sp,1024
   44370:	9009883a 	mov	r4,r18
   44374:	00460640 	call	46064 <_fflush_r>
   44378:	10000d1e 	bne	r2,zero,443b0 <__sbprintf+0xb4>
   4437c:	d881030b 	ldhu	r2,1036(sp)
   44380:	1080100c 	andi	r2,r2,64
   44384:	10000326 	beq	r2,zero,44394 <__sbprintf+0x98>
   44388:	8080030b 	ldhu	r2,12(r16)
   4438c:	10801014 	ori	r2,r2,64
   44390:	8080030d 	sth	r2,12(r16)
   44394:	8805883a 	mov	r2,r17
   44398:	dfc11d17 	ldw	ra,1140(sp)
   4439c:	dc811c17 	ldw	r18,1136(sp)
   443a0:	dc411b17 	ldw	r17,1132(sp)
   443a4:	dc011a17 	ldw	r16,1128(sp)
   443a8:	dec11e04 	addi	sp,sp,1144
   443ac:	f800283a 	ret
   443b0:	047fffc4 	movi	r17,-1
   443b4:	003ff106 	br	4437c <__alt_data_end+0xfffd237c>

000443b8 <_write_r>:
   443b8:	defffd04 	addi	sp,sp,-12
   443bc:	2805883a 	mov	r2,r5
   443c0:	dc000015 	stw	r16,0(sp)
   443c4:	04000174 	movhi	r16,5
   443c8:	dc400115 	stw	r17,4(sp)
   443cc:	300b883a 	mov	r5,r6
   443d0:	84148304 	addi	r16,r16,21004
   443d4:	2023883a 	mov	r17,r4
   443d8:	380d883a 	mov	r6,r7
   443dc:	1009883a 	mov	r4,r2
   443e0:	dfc00215 	stw	ra,8(sp)
   443e4:	80000015 	stw	zero,0(r16)
   443e8:	004e9240 	call	4e924 <write>
   443ec:	00ffffc4 	movi	r3,-1
   443f0:	10c00526 	beq	r2,r3,44408 <_write_r+0x50>
   443f4:	dfc00217 	ldw	ra,8(sp)
   443f8:	dc400117 	ldw	r17,4(sp)
   443fc:	dc000017 	ldw	r16,0(sp)
   44400:	dec00304 	addi	sp,sp,12
   44404:	f800283a 	ret
   44408:	80c00017 	ldw	r3,0(r16)
   4440c:	183ff926 	beq	r3,zero,443f4 <__alt_data_end+0xfffd23f4>
   44410:	88c00015 	stw	r3,0(r17)
   44414:	003ff706 	br	443f4 <__alt_data_end+0xfffd23f4>

00044418 <__swsetup_r>:
   44418:	00800174 	movhi	r2,5
   4441c:	defffd04 	addi	sp,sp,-12
   44420:	108d6b04 	addi	r2,r2,13740
   44424:	dc400115 	stw	r17,4(sp)
   44428:	2023883a 	mov	r17,r4
   4442c:	11000017 	ldw	r4,0(r2)
   44430:	dc000015 	stw	r16,0(sp)
   44434:	dfc00215 	stw	ra,8(sp)
   44438:	2821883a 	mov	r16,r5
   4443c:	20000226 	beq	r4,zero,44448 <__swsetup_r+0x30>
   44440:	20800e17 	ldw	r2,56(r4)
   44444:	10003126 	beq	r2,zero,4450c <__swsetup_r+0xf4>
   44448:	8080030b 	ldhu	r2,12(r16)
   4444c:	10c0020c 	andi	r3,r2,8
   44450:	1009883a 	mov	r4,r2
   44454:	18000f26 	beq	r3,zero,44494 <__swsetup_r+0x7c>
   44458:	80c00417 	ldw	r3,16(r16)
   4445c:	18001526 	beq	r3,zero,444b4 <__swsetup_r+0x9c>
   44460:	1100004c 	andi	r4,r2,1
   44464:	20001c1e 	bne	r4,zero,444d8 <__swsetup_r+0xc0>
   44468:	1080008c 	andi	r2,r2,2
   4446c:	1000291e 	bne	r2,zero,44514 <__swsetup_r+0xfc>
   44470:	80800517 	ldw	r2,20(r16)
   44474:	80800215 	stw	r2,8(r16)
   44478:	18001c26 	beq	r3,zero,444ec <__swsetup_r+0xd4>
   4447c:	0005883a 	mov	r2,zero
   44480:	dfc00217 	ldw	ra,8(sp)
   44484:	dc400117 	ldw	r17,4(sp)
   44488:	dc000017 	ldw	r16,0(sp)
   4448c:	dec00304 	addi	sp,sp,12
   44490:	f800283a 	ret
   44494:	2080040c 	andi	r2,r4,16
   44498:	10002e26 	beq	r2,zero,44554 <__swsetup_r+0x13c>
   4449c:	2080010c 	andi	r2,r4,4
   444a0:	10001e1e 	bne	r2,zero,4451c <__swsetup_r+0x104>
   444a4:	80c00417 	ldw	r3,16(r16)
   444a8:	20800214 	ori	r2,r4,8
   444ac:	8080030d 	sth	r2,12(r16)
   444b0:	183feb1e 	bne	r3,zero,44460 <__alt_data_end+0xfffd2460>
   444b4:	1100a00c 	andi	r4,r2,640
   444b8:	01408004 	movi	r5,512
   444bc:	217fe826 	beq	r4,r5,44460 <__alt_data_end+0xfffd2460>
   444c0:	800b883a 	mov	r5,r16
   444c4:	8809883a 	mov	r4,r17
   444c8:	00410200 	call	41020 <__smakebuf_r>
   444cc:	8080030b 	ldhu	r2,12(r16)
   444d0:	80c00417 	ldw	r3,16(r16)
   444d4:	003fe206 	br	44460 <__alt_data_end+0xfffd2460>
   444d8:	80800517 	ldw	r2,20(r16)
   444dc:	80000215 	stw	zero,8(r16)
   444e0:	0085c83a 	sub	r2,zero,r2
   444e4:	80800615 	stw	r2,24(r16)
   444e8:	183fe41e 	bne	r3,zero,4447c <__alt_data_end+0xfffd247c>
   444ec:	80c0030b 	ldhu	r3,12(r16)
   444f0:	0005883a 	mov	r2,zero
   444f4:	1900200c 	andi	r4,r3,128
   444f8:	203fe126 	beq	r4,zero,44480 <__alt_data_end+0xfffd2480>
   444fc:	18c01014 	ori	r3,r3,64
   44500:	80c0030d 	sth	r3,12(r16)
   44504:	00bfffc4 	movi	r2,-1
   44508:	003fdd06 	br	44480 <__alt_data_end+0xfffd2480>
   4450c:	00464400 	call	46440 <__sinit>
   44510:	003fcd06 	br	44448 <__alt_data_end+0xfffd2448>
   44514:	0005883a 	mov	r2,zero
   44518:	003fd606 	br	44474 <__alt_data_end+0xfffd2474>
   4451c:	81400c17 	ldw	r5,48(r16)
   44520:	28000626 	beq	r5,zero,4453c <__swsetup_r+0x124>
   44524:	80801004 	addi	r2,r16,64
   44528:	28800326 	beq	r5,r2,44538 <__swsetup_r+0x120>
   4452c:	8809883a 	mov	r4,r17
   44530:	00466600 	call	46660 <_free_r>
   44534:	8100030b 	ldhu	r4,12(r16)
   44538:	80000c15 	stw	zero,48(r16)
   4453c:	80c00417 	ldw	r3,16(r16)
   44540:	00bff6c4 	movi	r2,-37
   44544:	1108703a 	and	r4,r2,r4
   44548:	80000115 	stw	zero,4(r16)
   4454c:	80c00015 	stw	r3,0(r16)
   44550:	003fd506 	br	444a8 <__alt_data_end+0xfffd24a8>
   44554:	00800244 	movi	r2,9
   44558:	88800015 	stw	r2,0(r17)
   4455c:	20801014 	ori	r2,r4,64
   44560:	8080030d 	sth	r2,12(r16)
   44564:	00bfffc4 	movi	r2,-1
   44568:	003fc506 	br	44480 <__alt_data_end+0xfffd2480>

0004456c <_close_r>:
   4456c:	defffd04 	addi	sp,sp,-12
   44570:	dc000015 	stw	r16,0(sp)
   44574:	04000174 	movhi	r16,5
   44578:	dc400115 	stw	r17,4(sp)
   4457c:	84148304 	addi	r16,r16,21004
   44580:	2023883a 	mov	r17,r4
   44584:	2809883a 	mov	r4,r5
   44588:	dfc00215 	stw	ra,8(sp)
   4458c:	80000015 	stw	zero,0(r16)
   44590:	004dbf00 	call	4dbf0 <close>
   44594:	00ffffc4 	movi	r3,-1
   44598:	10c00526 	beq	r2,r3,445b0 <_close_r+0x44>
   4459c:	dfc00217 	ldw	ra,8(sp)
   445a0:	dc400117 	ldw	r17,4(sp)
   445a4:	dc000017 	ldw	r16,0(sp)
   445a8:	dec00304 	addi	sp,sp,12
   445ac:	f800283a 	ret
   445b0:	80c00017 	ldw	r3,0(r16)
   445b4:	183ff926 	beq	r3,zero,4459c <__alt_data_end+0xfffd259c>
   445b8:	88c00015 	stw	r3,0(r17)
   445bc:	003ff706 	br	4459c <__alt_data_end+0xfffd259c>

000445c0 <quorem>:
   445c0:	defff704 	addi	sp,sp,-36
   445c4:	dc800215 	stw	r18,8(sp)
   445c8:	20800417 	ldw	r2,16(r4)
   445cc:	2c800417 	ldw	r18,16(r5)
   445d0:	dfc00815 	stw	ra,32(sp)
   445d4:	ddc00715 	stw	r23,28(sp)
   445d8:	dd800615 	stw	r22,24(sp)
   445dc:	dd400515 	stw	r21,20(sp)
   445e0:	dd000415 	stw	r20,16(sp)
   445e4:	dcc00315 	stw	r19,12(sp)
   445e8:	dc400115 	stw	r17,4(sp)
   445ec:	dc000015 	stw	r16,0(sp)
   445f0:	14807116 	blt	r2,r18,447b8 <quorem+0x1f8>
   445f4:	94bfffc4 	addi	r18,r18,-1
   445f8:	94ad883a 	add	r22,r18,r18
   445fc:	b5ad883a 	add	r22,r22,r22
   44600:	2c400504 	addi	r17,r5,20
   44604:	8da9883a 	add	r20,r17,r22
   44608:	25400504 	addi	r21,r4,20
   4460c:	282f883a 	mov	r23,r5
   44610:	adad883a 	add	r22,r21,r22
   44614:	a1400017 	ldw	r5,0(r20)
   44618:	2021883a 	mov	r16,r4
   4461c:	b1000017 	ldw	r4,0(r22)
   44620:	29400044 	addi	r5,r5,1
   44624:	00409300 	call	40930 <__udivsi3>
   44628:	1027883a 	mov	r19,r2
   4462c:	10002c26 	beq	r2,zero,446e0 <quorem+0x120>
   44630:	a813883a 	mov	r9,r21
   44634:	880b883a 	mov	r5,r17
   44638:	0009883a 	mov	r4,zero
   4463c:	000d883a 	mov	r6,zero
   44640:	2a000017 	ldw	r8,0(r5)
   44644:	49c00017 	ldw	r7,0(r9)
   44648:	29400104 	addi	r5,r5,4
   4464c:	40bfffcc 	andi	r2,r8,65535
   44650:	14c5383a 	mul	r2,r2,r19
   44654:	4010d43a 	srli	r8,r8,16
   44658:	38ffffcc 	andi	r3,r7,65535
   4465c:	1105883a 	add	r2,r2,r4
   44660:	1008d43a 	srli	r4,r2,16
   44664:	44d1383a 	mul	r8,r8,r19
   44668:	198d883a 	add	r6,r3,r6
   4466c:	10ffffcc 	andi	r3,r2,65535
   44670:	30c7c83a 	sub	r3,r6,r3
   44674:	380ed43a 	srli	r7,r7,16
   44678:	4105883a 	add	r2,r8,r4
   4467c:	180dd43a 	srai	r6,r3,16
   44680:	113fffcc 	andi	r4,r2,65535
   44684:	390fc83a 	sub	r7,r7,r4
   44688:	398d883a 	add	r6,r7,r6
   4468c:	300e943a 	slli	r7,r6,16
   44690:	18ffffcc 	andi	r3,r3,65535
   44694:	1008d43a 	srli	r4,r2,16
   44698:	38ceb03a 	or	r7,r7,r3
   4469c:	49c00015 	stw	r7,0(r9)
   446a0:	300dd43a 	srai	r6,r6,16
   446a4:	4a400104 	addi	r9,r9,4
   446a8:	a17fe52e 	bgeu	r20,r5,44640 <__alt_data_end+0xfffd2640>
   446ac:	b0800017 	ldw	r2,0(r22)
   446b0:	10000b1e 	bne	r2,zero,446e0 <quorem+0x120>
   446b4:	b0bfff04 	addi	r2,r22,-4
   446b8:	a880082e 	bgeu	r21,r2,446dc <quorem+0x11c>
   446bc:	b0ffff17 	ldw	r3,-4(r22)
   446c0:	18000326 	beq	r3,zero,446d0 <quorem+0x110>
   446c4:	00000506 	br	446dc <quorem+0x11c>
   446c8:	10c00017 	ldw	r3,0(r2)
   446cc:	1800031e 	bne	r3,zero,446dc <quorem+0x11c>
   446d0:	10bfff04 	addi	r2,r2,-4
   446d4:	94bfffc4 	addi	r18,r18,-1
   446d8:	a8bffb36 	bltu	r21,r2,446c8 <__alt_data_end+0xfffd26c8>
   446dc:	84800415 	stw	r18,16(r16)
   446e0:	b80b883a 	mov	r5,r23
   446e4:	8009883a 	mov	r4,r16
   446e8:	0047d940 	call	47d94 <__mcmp>
   446ec:	10002616 	blt	r2,zero,44788 <quorem+0x1c8>
   446f0:	9cc00044 	addi	r19,r19,1
   446f4:	a805883a 	mov	r2,r21
   446f8:	000b883a 	mov	r5,zero
   446fc:	11000017 	ldw	r4,0(r2)
   44700:	89800017 	ldw	r6,0(r17)
   44704:	10800104 	addi	r2,r2,4
   44708:	20ffffcc 	andi	r3,r4,65535
   4470c:	194b883a 	add	r5,r3,r5
   44710:	30ffffcc 	andi	r3,r6,65535
   44714:	28c7c83a 	sub	r3,r5,r3
   44718:	300cd43a 	srli	r6,r6,16
   4471c:	2008d43a 	srli	r4,r4,16
   44720:	180bd43a 	srai	r5,r3,16
   44724:	18ffffcc 	andi	r3,r3,65535
   44728:	2189c83a 	sub	r4,r4,r6
   4472c:	2149883a 	add	r4,r4,r5
   44730:	200c943a 	slli	r6,r4,16
   44734:	8c400104 	addi	r17,r17,4
   44738:	200bd43a 	srai	r5,r4,16
   4473c:	30c6b03a 	or	r3,r6,r3
   44740:	10ffff15 	stw	r3,-4(r2)
   44744:	a47fed2e 	bgeu	r20,r17,446fc <__alt_data_end+0xfffd26fc>
   44748:	9485883a 	add	r2,r18,r18
   4474c:	1085883a 	add	r2,r2,r2
   44750:	a887883a 	add	r3,r21,r2
   44754:	18800017 	ldw	r2,0(r3)
   44758:	10000b1e 	bne	r2,zero,44788 <quorem+0x1c8>
   4475c:	18bfff04 	addi	r2,r3,-4
   44760:	a880082e 	bgeu	r21,r2,44784 <quorem+0x1c4>
   44764:	18ffff17 	ldw	r3,-4(r3)
   44768:	18000326 	beq	r3,zero,44778 <quorem+0x1b8>
   4476c:	00000506 	br	44784 <quorem+0x1c4>
   44770:	10c00017 	ldw	r3,0(r2)
   44774:	1800031e 	bne	r3,zero,44784 <quorem+0x1c4>
   44778:	10bfff04 	addi	r2,r2,-4
   4477c:	94bfffc4 	addi	r18,r18,-1
   44780:	a8bffb36 	bltu	r21,r2,44770 <__alt_data_end+0xfffd2770>
   44784:	84800415 	stw	r18,16(r16)
   44788:	9805883a 	mov	r2,r19
   4478c:	dfc00817 	ldw	ra,32(sp)
   44790:	ddc00717 	ldw	r23,28(sp)
   44794:	dd800617 	ldw	r22,24(sp)
   44798:	dd400517 	ldw	r21,20(sp)
   4479c:	dd000417 	ldw	r20,16(sp)
   447a0:	dcc00317 	ldw	r19,12(sp)
   447a4:	dc800217 	ldw	r18,8(sp)
   447a8:	dc400117 	ldw	r17,4(sp)
   447ac:	dc000017 	ldw	r16,0(sp)
   447b0:	dec00904 	addi	sp,sp,36
   447b4:	f800283a 	ret
   447b8:	0005883a 	mov	r2,zero
   447bc:	003ff306 	br	4478c <__alt_data_end+0xfffd278c>

000447c0 <_dtoa_r>:
   447c0:	20801017 	ldw	r2,64(r4)
   447c4:	deffde04 	addi	sp,sp,-136
   447c8:	df002015 	stw	fp,128(sp)
   447cc:	dcc01b15 	stw	r19,108(sp)
   447d0:	dc801a15 	stw	r18,104(sp)
   447d4:	dc401915 	stw	r17,100(sp)
   447d8:	dc001815 	stw	r16,96(sp)
   447dc:	dfc02115 	stw	ra,132(sp)
   447e0:	ddc01f15 	stw	r23,124(sp)
   447e4:	dd801e15 	stw	r22,120(sp)
   447e8:	dd401d15 	stw	r21,116(sp)
   447ec:	dd001c15 	stw	r20,112(sp)
   447f0:	d9c00315 	stw	r7,12(sp)
   447f4:	2039883a 	mov	fp,r4
   447f8:	3023883a 	mov	r17,r6
   447fc:	2825883a 	mov	r18,r5
   44800:	dc002417 	ldw	r16,144(sp)
   44804:	3027883a 	mov	r19,r6
   44808:	10000826 	beq	r2,zero,4482c <_dtoa_r+0x6c>
   4480c:	21801117 	ldw	r6,68(r4)
   44810:	00c00044 	movi	r3,1
   44814:	100b883a 	mov	r5,r2
   44818:	1986983a 	sll	r3,r3,r6
   4481c:	11800115 	stw	r6,4(r2)
   44820:	10c00215 	stw	r3,8(r2)
   44824:	00475740 	call	47574 <_Bfree>
   44828:	e0001015 	stw	zero,64(fp)
   4482c:	88002e16 	blt	r17,zero,448e8 <_dtoa_r+0x128>
   44830:	80000015 	stw	zero,0(r16)
   44834:	889ffc2c 	andhi	r2,r17,32752
   44838:	00dffc34 	movhi	r3,32752
   4483c:	10c01c26 	beq	r2,r3,448b0 <_dtoa_r+0xf0>
   44840:	000d883a 	mov	r6,zero
   44844:	000f883a 	mov	r7,zero
   44848:	9009883a 	mov	r4,r18
   4484c:	980b883a 	mov	r5,r19
   44850:	004c6e00 	call	4c6e0 <__eqdf2>
   44854:	10002b1e 	bne	r2,zero,44904 <_dtoa_r+0x144>
   44858:	d9c02317 	ldw	r7,140(sp)
   4485c:	00800044 	movi	r2,1
   44860:	38800015 	stw	r2,0(r7)
   44864:	d8802517 	ldw	r2,148(sp)
   44868:	10019e26 	beq	r2,zero,44ee4 <_dtoa_r+0x724>
   4486c:	d8c02517 	ldw	r3,148(sp)
   44870:	00800174 	movhi	r2,5
   44874:	10852644 	addi	r2,r2,5273
   44878:	18800015 	stw	r2,0(r3)
   4487c:	10bfffc4 	addi	r2,r2,-1
   44880:	dfc02117 	ldw	ra,132(sp)
   44884:	df002017 	ldw	fp,128(sp)
   44888:	ddc01f17 	ldw	r23,124(sp)
   4488c:	dd801e17 	ldw	r22,120(sp)
   44890:	dd401d17 	ldw	r21,116(sp)
   44894:	dd001c17 	ldw	r20,112(sp)
   44898:	dcc01b17 	ldw	r19,108(sp)
   4489c:	dc801a17 	ldw	r18,104(sp)
   448a0:	dc401917 	ldw	r17,100(sp)
   448a4:	dc001817 	ldw	r16,96(sp)
   448a8:	dec02204 	addi	sp,sp,136
   448ac:	f800283a 	ret
   448b0:	d8c02317 	ldw	r3,140(sp)
   448b4:	0089c3c4 	movi	r2,9999
   448b8:	18800015 	stw	r2,0(r3)
   448bc:	90017726 	beq	r18,zero,44e9c <_dtoa_r+0x6dc>
   448c0:	00800174 	movhi	r2,5
   448c4:	10853204 	addi	r2,r2,5320
   448c8:	d9002517 	ldw	r4,148(sp)
   448cc:	203fec26 	beq	r4,zero,44880 <__alt_data_end+0xfffd2880>
   448d0:	10c000c7 	ldb	r3,3(r2)
   448d4:	1801781e 	bne	r3,zero,44eb8 <_dtoa_r+0x6f8>
   448d8:	10c000c4 	addi	r3,r2,3
   448dc:	d9802517 	ldw	r6,148(sp)
   448e0:	30c00015 	stw	r3,0(r6)
   448e4:	003fe606 	br	44880 <__alt_data_end+0xfffd2880>
   448e8:	04e00034 	movhi	r19,32768
   448ec:	9cffffc4 	addi	r19,r19,-1
   448f0:	00800044 	movi	r2,1
   448f4:	8ce6703a 	and	r19,r17,r19
   448f8:	80800015 	stw	r2,0(r16)
   448fc:	9823883a 	mov	r17,r19
   44900:	003fcc06 	br	44834 <__alt_data_end+0xfffd2834>
   44904:	d8800204 	addi	r2,sp,8
   44908:	d8800015 	stw	r2,0(sp)
   4490c:	d9c00104 	addi	r7,sp,4
   44910:	900b883a 	mov	r5,r18
   44914:	980d883a 	mov	r6,r19
   44918:	e009883a 	mov	r4,fp
   4491c:	8820d53a 	srli	r16,r17,20
   44920:	00481600 	call	48160 <__d2b>
   44924:	d8800915 	stw	r2,36(sp)
   44928:	8001651e 	bne	r16,zero,44ec0 <_dtoa_r+0x700>
   4492c:	dd800217 	ldw	r22,8(sp)
   44930:	dc000117 	ldw	r16,4(sp)
   44934:	00800804 	movi	r2,32
   44938:	b421883a 	add	r16,r22,r16
   4493c:	80c10c84 	addi	r3,r16,1074
   44940:	10c2d10e 	bge	r2,r3,45488 <_dtoa_r+0xcc8>
   44944:	00801004 	movi	r2,64
   44948:	81010484 	addi	r4,r16,1042
   4494c:	10c7c83a 	sub	r3,r2,r3
   44950:	9108d83a 	srl	r4,r18,r4
   44954:	88e2983a 	sll	r17,r17,r3
   44958:	2448b03a 	or	r4,r4,r17
   4495c:	004daa80 	call	4daa8 <__floatunsidf>
   44960:	017f8434 	movhi	r5,65040
   44964:	01800044 	movi	r6,1
   44968:	1009883a 	mov	r4,r2
   4496c:	194b883a 	add	r5,r3,r5
   44970:	843fffc4 	addi	r16,r16,-1
   44974:	d9801115 	stw	r6,68(sp)
   44978:	000d883a 	mov	r6,zero
   4497c:	01cffe34 	movhi	r7,16376
   44980:	004d0500 	call	4d050 <__subdf3>
   44984:	0198dbf4 	movhi	r6,25455
   44988:	01cff4f4 	movhi	r7,16339
   4498c:	3190d844 	addi	r6,r6,17249
   44990:	39e1e9c4 	addi	r7,r7,-30809
   44994:	1009883a 	mov	r4,r2
   44998:	180b883a 	mov	r5,r3
   4499c:	004c9380 	call	4c938 <__muldf3>
   449a0:	01a2d874 	movhi	r6,35681
   449a4:	01cff1f4 	movhi	r7,16327
   449a8:	31b22cc4 	addi	r6,r6,-14157
   449ac:	39e28a04 	addi	r7,r7,-30168
   449b0:	180b883a 	mov	r5,r3
   449b4:	1009883a 	mov	r4,r2
   449b8:	004b54c0 	call	4b54c <__adddf3>
   449bc:	8009883a 	mov	r4,r16
   449c0:	1029883a 	mov	r20,r2
   449c4:	1823883a 	mov	r17,r3
   449c8:	004d9cc0 	call	4d9cc <__floatsidf>
   449cc:	019427f4 	movhi	r6,20639
   449d0:	01cff4f4 	movhi	r7,16339
   449d4:	319e7ec4 	addi	r6,r6,31227
   449d8:	39d104c4 	addi	r7,r7,17427
   449dc:	1009883a 	mov	r4,r2
   449e0:	180b883a 	mov	r5,r3
   449e4:	004c9380 	call	4c938 <__muldf3>
   449e8:	100d883a 	mov	r6,r2
   449ec:	180f883a 	mov	r7,r3
   449f0:	a009883a 	mov	r4,r20
   449f4:	880b883a 	mov	r5,r17
   449f8:	004b54c0 	call	4b54c <__adddf3>
   449fc:	1009883a 	mov	r4,r2
   44a00:	180b883a 	mov	r5,r3
   44a04:	1029883a 	mov	r20,r2
   44a08:	1823883a 	mov	r17,r3
   44a0c:	004d94c0 	call	4d94c <__fixdfsi>
   44a10:	000d883a 	mov	r6,zero
   44a14:	000f883a 	mov	r7,zero
   44a18:	a009883a 	mov	r4,r20
   44a1c:	880b883a 	mov	r5,r17
   44a20:	d8800515 	stw	r2,20(sp)
   44a24:	004c8440 	call	4c844 <__ledf2>
   44a28:	10028716 	blt	r2,zero,45448 <_dtoa_r+0xc88>
   44a2c:	d8c00517 	ldw	r3,20(sp)
   44a30:	00800584 	movi	r2,22
   44a34:	10c27536 	bltu	r2,r3,4540c <_dtoa_r+0xc4c>
   44a38:	180490fa 	slli	r2,r3,3
   44a3c:	00c00174 	movhi	r3,5
   44a40:	18c54d04 	addi	r3,r3,5428
   44a44:	1885883a 	add	r2,r3,r2
   44a48:	11000017 	ldw	r4,0(r2)
   44a4c:	11400117 	ldw	r5,4(r2)
   44a50:	900d883a 	mov	r6,r18
   44a54:	980f883a 	mov	r7,r19
   44a58:	004c7680 	call	4c768 <__gedf2>
   44a5c:	00828d0e 	bge	zero,r2,45494 <_dtoa_r+0xcd4>
   44a60:	d9000517 	ldw	r4,20(sp)
   44a64:	d8000e15 	stw	zero,56(sp)
   44a68:	213fffc4 	addi	r4,r4,-1
   44a6c:	d9000515 	stw	r4,20(sp)
   44a70:	b42dc83a 	sub	r22,r22,r16
   44a74:	b5bfffc4 	addi	r22,r22,-1
   44a78:	b0026f16 	blt	r22,zero,45438 <_dtoa_r+0xc78>
   44a7c:	d8000815 	stw	zero,32(sp)
   44a80:	d9c00517 	ldw	r7,20(sp)
   44a84:	38026416 	blt	r7,zero,45418 <_dtoa_r+0xc58>
   44a88:	b1ed883a 	add	r22,r22,r7
   44a8c:	d9c00d15 	stw	r7,52(sp)
   44a90:	d8000a15 	stw	zero,40(sp)
   44a94:	d9800317 	ldw	r6,12(sp)
   44a98:	00800244 	movi	r2,9
   44a9c:	11811436 	bltu	r2,r6,44ef0 <_dtoa_r+0x730>
   44aa0:	00800144 	movi	r2,5
   44aa4:	1184e10e 	bge	r2,r6,45e2c <_dtoa_r+0x166c>
   44aa8:	31bfff04 	addi	r6,r6,-4
   44aac:	d9800315 	stw	r6,12(sp)
   44ab0:	0023883a 	mov	r17,zero
   44ab4:	d9800317 	ldw	r6,12(sp)
   44ab8:	008000c4 	movi	r2,3
   44abc:	30836726 	beq	r6,r2,4585c <_dtoa_r+0x109c>
   44ac0:	1183410e 	bge	r2,r6,457c8 <_dtoa_r+0x1008>
   44ac4:	d9c00317 	ldw	r7,12(sp)
   44ac8:	00800104 	movi	r2,4
   44acc:	38827c26 	beq	r7,r2,454c0 <_dtoa_r+0xd00>
   44ad0:	00800144 	movi	r2,5
   44ad4:	3884c41e 	bne	r7,r2,45de8 <_dtoa_r+0x1628>
   44ad8:	00800044 	movi	r2,1
   44adc:	d8800b15 	stw	r2,44(sp)
   44ae0:	d8c00517 	ldw	r3,20(sp)
   44ae4:	d9002217 	ldw	r4,136(sp)
   44ae8:	1907883a 	add	r3,r3,r4
   44aec:	19800044 	addi	r6,r3,1
   44af0:	d8c00c15 	stw	r3,48(sp)
   44af4:	d9800615 	stw	r6,24(sp)
   44af8:	0183a40e 	bge	zero,r6,4598c <_dtoa_r+0x11cc>
   44afc:	d9800617 	ldw	r6,24(sp)
   44b00:	3021883a 	mov	r16,r6
   44b04:	e0001115 	stw	zero,68(fp)
   44b08:	008005c4 	movi	r2,23
   44b0c:	1184c92e 	bgeu	r2,r6,45e34 <_dtoa_r+0x1674>
   44b10:	00c00044 	movi	r3,1
   44b14:	00800104 	movi	r2,4
   44b18:	1085883a 	add	r2,r2,r2
   44b1c:	11000504 	addi	r4,r2,20
   44b20:	180b883a 	mov	r5,r3
   44b24:	18c00044 	addi	r3,r3,1
   44b28:	313ffb2e 	bgeu	r6,r4,44b18 <__alt_data_end+0xfffd2b18>
   44b2c:	e1401115 	stw	r5,68(fp)
   44b30:	e009883a 	mov	r4,fp
   44b34:	00474cc0 	call	474cc <_Balloc>
   44b38:	d8800715 	stw	r2,28(sp)
   44b3c:	e0801015 	stw	r2,64(fp)
   44b40:	00800384 	movi	r2,14
   44b44:	1400f736 	bltu	r2,r16,44f24 <_dtoa_r+0x764>
   44b48:	8800f626 	beq	r17,zero,44f24 <_dtoa_r+0x764>
   44b4c:	d9c00517 	ldw	r7,20(sp)
   44b50:	01c39a0e 	bge	zero,r7,459bc <_dtoa_r+0x11fc>
   44b54:	388003cc 	andi	r2,r7,15
   44b58:	100490fa 	slli	r2,r2,3
   44b5c:	382bd13a 	srai	r21,r7,4
   44b60:	00c00174 	movhi	r3,5
   44b64:	18c54d04 	addi	r3,r3,5428
   44b68:	1885883a 	add	r2,r3,r2
   44b6c:	a8c0040c 	andi	r3,r21,16
   44b70:	12400017 	ldw	r9,0(r2)
   44b74:	12000117 	ldw	r8,4(r2)
   44b78:	18037926 	beq	r3,zero,45960 <_dtoa_r+0x11a0>
   44b7c:	00800174 	movhi	r2,5
   44b80:	10854304 	addi	r2,r2,5388
   44b84:	11800817 	ldw	r6,32(r2)
   44b88:	11c00917 	ldw	r7,36(r2)
   44b8c:	9009883a 	mov	r4,r18
   44b90:	980b883a 	mov	r5,r19
   44b94:	da001715 	stw	r8,92(sp)
   44b98:	da401615 	stw	r9,88(sp)
   44b9c:	004bdf80 	call	4bdf8 <__divdf3>
   44ba0:	da001717 	ldw	r8,92(sp)
   44ba4:	da401617 	ldw	r9,88(sp)
   44ba8:	ad4003cc 	andi	r21,r21,15
   44bac:	040000c4 	movi	r16,3
   44bb0:	1023883a 	mov	r17,r2
   44bb4:	1829883a 	mov	r20,r3
   44bb8:	a8001126 	beq	r21,zero,44c00 <_dtoa_r+0x440>
   44bbc:	05c00174 	movhi	r23,5
   44bc0:	bdc54304 	addi	r23,r23,5388
   44bc4:	4805883a 	mov	r2,r9
   44bc8:	4007883a 	mov	r3,r8
   44bcc:	a980004c 	andi	r6,r21,1
   44bd0:	1009883a 	mov	r4,r2
   44bd4:	a82bd07a 	srai	r21,r21,1
   44bd8:	180b883a 	mov	r5,r3
   44bdc:	30000426 	beq	r6,zero,44bf0 <_dtoa_r+0x430>
   44be0:	b9800017 	ldw	r6,0(r23)
   44be4:	b9c00117 	ldw	r7,4(r23)
   44be8:	84000044 	addi	r16,r16,1
   44bec:	004c9380 	call	4c938 <__muldf3>
   44bf0:	bdc00204 	addi	r23,r23,8
   44bf4:	a83ff51e 	bne	r21,zero,44bcc <__alt_data_end+0xfffd2bcc>
   44bf8:	1013883a 	mov	r9,r2
   44bfc:	1811883a 	mov	r8,r3
   44c00:	480d883a 	mov	r6,r9
   44c04:	400f883a 	mov	r7,r8
   44c08:	8809883a 	mov	r4,r17
   44c0c:	a00b883a 	mov	r5,r20
   44c10:	004bdf80 	call	4bdf8 <__divdf3>
   44c14:	d8800f15 	stw	r2,60(sp)
   44c18:	d8c01015 	stw	r3,64(sp)
   44c1c:	d8c00e17 	ldw	r3,56(sp)
   44c20:	18000626 	beq	r3,zero,44c3c <_dtoa_r+0x47c>
   44c24:	d9000f17 	ldw	r4,60(sp)
   44c28:	d9401017 	ldw	r5,64(sp)
   44c2c:	000d883a 	mov	r6,zero
   44c30:	01cffc34 	movhi	r7,16368
   44c34:	004c8440 	call	4c844 <__ledf2>
   44c38:	10040b16 	blt	r2,zero,45c68 <_dtoa_r+0x14a8>
   44c3c:	8009883a 	mov	r4,r16
   44c40:	004d9cc0 	call	4d9cc <__floatsidf>
   44c44:	d9800f17 	ldw	r6,60(sp)
   44c48:	d9c01017 	ldw	r7,64(sp)
   44c4c:	1009883a 	mov	r4,r2
   44c50:	180b883a 	mov	r5,r3
   44c54:	004c9380 	call	4c938 <__muldf3>
   44c58:	000d883a 	mov	r6,zero
   44c5c:	01d00734 	movhi	r7,16412
   44c60:	1009883a 	mov	r4,r2
   44c64:	180b883a 	mov	r5,r3
   44c68:	004b54c0 	call	4b54c <__adddf3>
   44c6c:	1021883a 	mov	r16,r2
   44c70:	d8800617 	ldw	r2,24(sp)
   44c74:	047f3034 	movhi	r17,64704
   44c78:	1c63883a 	add	r17,r3,r17
   44c7c:	10031826 	beq	r2,zero,458e0 <_dtoa_r+0x1120>
   44c80:	d8c00517 	ldw	r3,20(sp)
   44c84:	db000617 	ldw	r12,24(sp)
   44c88:	d8c01315 	stw	r3,76(sp)
   44c8c:	d9000b17 	ldw	r4,44(sp)
   44c90:	20038f26 	beq	r4,zero,45ad0 <_dtoa_r+0x1310>
   44c94:	60bfffc4 	addi	r2,r12,-1
   44c98:	100490fa 	slli	r2,r2,3
   44c9c:	00c00174 	movhi	r3,5
   44ca0:	18c54d04 	addi	r3,r3,5428
   44ca4:	1885883a 	add	r2,r3,r2
   44ca8:	11800017 	ldw	r6,0(r2)
   44cac:	11c00117 	ldw	r7,4(r2)
   44cb0:	d8800717 	ldw	r2,28(sp)
   44cb4:	0009883a 	mov	r4,zero
   44cb8:	014ff834 	movhi	r5,16352
   44cbc:	db001615 	stw	r12,88(sp)
   44cc0:	15c00044 	addi	r23,r2,1
   44cc4:	004bdf80 	call	4bdf8 <__divdf3>
   44cc8:	800d883a 	mov	r6,r16
   44ccc:	880f883a 	mov	r7,r17
   44cd0:	1009883a 	mov	r4,r2
   44cd4:	180b883a 	mov	r5,r3
   44cd8:	004d0500 	call	4d050 <__subdf3>
   44cdc:	d9401017 	ldw	r5,64(sp)
   44ce0:	d9000f17 	ldw	r4,60(sp)
   44ce4:	102b883a 	mov	r21,r2
   44ce8:	d8c01215 	stw	r3,72(sp)
   44cec:	004d94c0 	call	4d94c <__fixdfsi>
   44cf0:	1009883a 	mov	r4,r2
   44cf4:	1029883a 	mov	r20,r2
   44cf8:	004d9cc0 	call	4d9cc <__floatsidf>
   44cfc:	d9000f17 	ldw	r4,60(sp)
   44d00:	d9401017 	ldw	r5,64(sp)
   44d04:	100d883a 	mov	r6,r2
   44d08:	180f883a 	mov	r7,r3
   44d0c:	004d0500 	call	4d050 <__subdf3>
   44d10:	1823883a 	mov	r17,r3
   44d14:	d8c00717 	ldw	r3,28(sp)
   44d18:	d9401217 	ldw	r5,72(sp)
   44d1c:	a2000c04 	addi	r8,r20,48
   44d20:	1021883a 	mov	r16,r2
   44d24:	1a000005 	stb	r8,0(r3)
   44d28:	800d883a 	mov	r6,r16
   44d2c:	880f883a 	mov	r7,r17
   44d30:	a809883a 	mov	r4,r21
   44d34:	4029883a 	mov	r20,r8
   44d38:	004c7680 	call	4c768 <__gedf2>
   44d3c:	00841d16 	blt	zero,r2,45db4 <_dtoa_r+0x15f4>
   44d40:	800d883a 	mov	r6,r16
   44d44:	880f883a 	mov	r7,r17
   44d48:	0009883a 	mov	r4,zero
   44d4c:	014ffc34 	movhi	r5,16368
   44d50:	004d0500 	call	4d050 <__subdf3>
   44d54:	d9401217 	ldw	r5,72(sp)
   44d58:	100d883a 	mov	r6,r2
   44d5c:	180f883a 	mov	r7,r3
   44d60:	a809883a 	mov	r4,r21
   44d64:	004c7680 	call	4c768 <__gedf2>
   44d68:	db001617 	ldw	r12,88(sp)
   44d6c:	00840e16 	blt	zero,r2,45da8 <_dtoa_r+0x15e8>
   44d70:	00800044 	movi	r2,1
   44d74:	13006b0e 	bge	r2,r12,44f24 <_dtoa_r+0x764>
   44d78:	d9000717 	ldw	r4,28(sp)
   44d7c:	dd800f15 	stw	r22,60(sp)
   44d80:	dcc01015 	stw	r19,64(sp)
   44d84:	2319883a 	add	r12,r4,r12
   44d88:	dcc01217 	ldw	r19,72(sp)
   44d8c:	602d883a 	mov	r22,r12
   44d90:	dc801215 	stw	r18,72(sp)
   44d94:	b825883a 	mov	r18,r23
   44d98:	00000906 	br	44dc0 <_dtoa_r+0x600>
   44d9c:	004d0500 	call	4d050 <__subdf3>
   44da0:	a80d883a 	mov	r6,r21
   44da4:	980f883a 	mov	r7,r19
   44da8:	1009883a 	mov	r4,r2
   44dac:	180b883a 	mov	r5,r3
   44db0:	004c8440 	call	4c844 <__ledf2>
   44db4:	1003e816 	blt	r2,zero,45d58 <_dtoa_r+0x1598>
   44db8:	b825883a 	mov	r18,r23
   44dbc:	bd83e926 	beq	r23,r22,45d64 <_dtoa_r+0x15a4>
   44dc0:	a809883a 	mov	r4,r21
   44dc4:	980b883a 	mov	r5,r19
   44dc8:	000d883a 	mov	r6,zero
   44dcc:	01d00934 	movhi	r7,16420
   44dd0:	004c9380 	call	4c938 <__muldf3>
   44dd4:	000d883a 	mov	r6,zero
   44dd8:	01d00934 	movhi	r7,16420
   44ddc:	8009883a 	mov	r4,r16
   44de0:	880b883a 	mov	r5,r17
   44de4:	102b883a 	mov	r21,r2
   44de8:	1827883a 	mov	r19,r3
   44dec:	004c9380 	call	4c938 <__muldf3>
   44df0:	180b883a 	mov	r5,r3
   44df4:	1009883a 	mov	r4,r2
   44df8:	1821883a 	mov	r16,r3
   44dfc:	1023883a 	mov	r17,r2
   44e00:	004d94c0 	call	4d94c <__fixdfsi>
   44e04:	1009883a 	mov	r4,r2
   44e08:	1029883a 	mov	r20,r2
   44e0c:	004d9cc0 	call	4d9cc <__floatsidf>
   44e10:	8809883a 	mov	r4,r17
   44e14:	800b883a 	mov	r5,r16
   44e18:	100d883a 	mov	r6,r2
   44e1c:	180f883a 	mov	r7,r3
   44e20:	004d0500 	call	4d050 <__subdf3>
   44e24:	a5000c04 	addi	r20,r20,48
   44e28:	a80d883a 	mov	r6,r21
   44e2c:	980f883a 	mov	r7,r19
   44e30:	1009883a 	mov	r4,r2
   44e34:	180b883a 	mov	r5,r3
   44e38:	95000005 	stb	r20,0(r18)
   44e3c:	1021883a 	mov	r16,r2
   44e40:	1823883a 	mov	r17,r3
   44e44:	004c8440 	call	4c844 <__ledf2>
   44e48:	bdc00044 	addi	r23,r23,1
   44e4c:	800d883a 	mov	r6,r16
   44e50:	880f883a 	mov	r7,r17
   44e54:	0009883a 	mov	r4,zero
   44e58:	014ffc34 	movhi	r5,16368
   44e5c:	103fcf0e 	bge	r2,zero,44d9c <__alt_data_end+0xfffd2d9c>
   44e60:	d8c01317 	ldw	r3,76(sp)
   44e64:	d8c00515 	stw	r3,20(sp)
   44e68:	d9400917 	ldw	r5,36(sp)
   44e6c:	e009883a 	mov	r4,fp
   44e70:	00475740 	call	47574 <_Bfree>
   44e74:	d9000517 	ldw	r4,20(sp)
   44e78:	d9802317 	ldw	r6,140(sp)
   44e7c:	d9c02517 	ldw	r7,148(sp)
   44e80:	b8000005 	stb	zero,0(r23)
   44e84:	20800044 	addi	r2,r4,1
   44e88:	30800015 	stw	r2,0(r6)
   44e8c:	3802aa26 	beq	r7,zero,45938 <_dtoa_r+0x1178>
   44e90:	3dc00015 	stw	r23,0(r7)
   44e94:	d8800717 	ldw	r2,28(sp)
   44e98:	003e7906 	br	44880 <__alt_data_end+0xfffd2880>
   44e9c:	00800434 	movhi	r2,16
   44ea0:	10bfffc4 	addi	r2,r2,-1
   44ea4:	88a2703a 	and	r17,r17,r2
   44ea8:	883e851e 	bne	r17,zero,448c0 <__alt_data_end+0xfffd28c0>
   44eac:	00800174 	movhi	r2,5
   44eb0:	10852f04 	addi	r2,r2,5308
   44eb4:	003e8406 	br	448c8 <__alt_data_end+0xfffd28c8>
   44eb8:	10c00204 	addi	r3,r2,8
   44ebc:	003e8706 	br	448dc <__alt_data_end+0xfffd28dc>
   44ec0:	01400434 	movhi	r5,16
   44ec4:	297fffc4 	addi	r5,r5,-1
   44ec8:	994a703a 	and	r5,r19,r5
   44ecc:	9009883a 	mov	r4,r18
   44ed0:	843f0044 	addi	r16,r16,-1023
   44ed4:	294ffc34 	orhi	r5,r5,16368
   44ed8:	dd800217 	ldw	r22,8(sp)
   44edc:	d8001115 	stw	zero,68(sp)
   44ee0:	003ea506 	br	44978 <__alt_data_end+0xfffd2978>
   44ee4:	00800174 	movhi	r2,5
   44ee8:	10852604 	addi	r2,r2,5272
   44eec:	003e6406 	br	44880 <__alt_data_end+0xfffd2880>
   44ef0:	e0001115 	stw	zero,68(fp)
   44ef4:	000b883a 	mov	r5,zero
   44ef8:	e009883a 	mov	r4,fp
   44efc:	00474cc0 	call	474cc <_Balloc>
   44f00:	01bfffc4 	movi	r6,-1
   44f04:	01c00044 	movi	r7,1
   44f08:	d8800715 	stw	r2,28(sp)
   44f0c:	d9800c15 	stw	r6,48(sp)
   44f10:	e0801015 	stw	r2,64(fp)
   44f14:	d8000315 	stw	zero,12(sp)
   44f18:	d9c00b15 	stw	r7,44(sp)
   44f1c:	d9800615 	stw	r6,24(sp)
   44f20:	d8002215 	stw	zero,136(sp)
   44f24:	d8800117 	ldw	r2,4(sp)
   44f28:	10008916 	blt	r2,zero,45150 <_dtoa_r+0x990>
   44f2c:	d9000517 	ldw	r4,20(sp)
   44f30:	00c00384 	movi	r3,14
   44f34:	19008616 	blt	r3,r4,45150 <_dtoa_r+0x990>
   44f38:	200490fa 	slli	r2,r4,3
   44f3c:	00c00174 	movhi	r3,5
   44f40:	d9802217 	ldw	r6,136(sp)
   44f44:	18c54d04 	addi	r3,r3,5428
   44f48:	1885883a 	add	r2,r3,r2
   44f4c:	14000017 	ldw	r16,0(r2)
   44f50:	14400117 	ldw	r17,4(r2)
   44f54:	30016316 	blt	r6,zero,454e4 <_dtoa_r+0xd24>
   44f58:	800d883a 	mov	r6,r16
   44f5c:	880f883a 	mov	r7,r17
   44f60:	9009883a 	mov	r4,r18
   44f64:	980b883a 	mov	r5,r19
   44f68:	004bdf80 	call	4bdf8 <__divdf3>
   44f6c:	180b883a 	mov	r5,r3
   44f70:	1009883a 	mov	r4,r2
   44f74:	004d94c0 	call	4d94c <__fixdfsi>
   44f78:	1009883a 	mov	r4,r2
   44f7c:	102b883a 	mov	r21,r2
   44f80:	004d9cc0 	call	4d9cc <__floatsidf>
   44f84:	800d883a 	mov	r6,r16
   44f88:	880f883a 	mov	r7,r17
   44f8c:	1009883a 	mov	r4,r2
   44f90:	180b883a 	mov	r5,r3
   44f94:	004c9380 	call	4c938 <__muldf3>
   44f98:	100d883a 	mov	r6,r2
   44f9c:	180f883a 	mov	r7,r3
   44fa0:	9009883a 	mov	r4,r18
   44fa4:	980b883a 	mov	r5,r19
   44fa8:	004d0500 	call	4d050 <__subdf3>
   44fac:	d9c00717 	ldw	r7,28(sp)
   44fb0:	1009883a 	mov	r4,r2
   44fb4:	a8800c04 	addi	r2,r21,48
   44fb8:	38800005 	stb	r2,0(r7)
   44fbc:	3dc00044 	addi	r23,r7,1
   44fc0:	d9c00617 	ldw	r7,24(sp)
   44fc4:	01800044 	movi	r6,1
   44fc8:	180b883a 	mov	r5,r3
   44fcc:	2005883a 	mov	r2,r4
   44fd0:	39803826 	beq	r7,r6,450b4 <_dtoa_r+0x8f4>
   44fd4:	000d883a 	mov	r6,zero
   44fd8:	01d00934 	movhi	r7,16420
   44fdc:	004c9380 	call	4c938 <__muldf3>
   44fe0:	000d883a 	mov	r6,zero
   44fe4:	000f883a 	mov	r7,zero
   44fe8:	1009883a 	mov	r4,r2
   44fec:	180b883a 	mov	r5,r3
   44ff0:	1025883a 	mov	r18,r2
   44ff4:	1827883a 	mov	r19,r3
   44ff8:	004c6e00 	call	4c6e0 <__eqdf2>
   44ffc:	103f9a26 	beq	r2,zero,44e68 <__alt_data_end+0xfffd2e68>
   45000:	d9c00617 	ldw	r7,24(sp)
   45004:	d8c00717 	ldw	r3,28(sp)
   45008:	b829883a 	mov	r20,r23
   4500c:	38bfffc4 	addi	r2,r7,-1
   45010:	18ad883a 	add	r22,r3,r2
   45014:	00000a06 	br	45040 <_dtoa_r+0x880>
   45018:	004c9380 	call	4c938 <__muldf3>
   4501c:	000d883a 	mov	r6,zero
   45020:	000f883a 	mov	r7,zero
   45024:	1009883a 	mov	r4,r2
   45028:	180b883a 	mov	r5,r3
   4502c:	1025883a 	mov	r18,r2
   45030:	1827883a 	mov	r19,r3
   45034:	b829883a 	mov	r20,r23
   45038:	004c6e00 	call	4c6e0 <__eqdf2>
   4503c:	103f8a26 	beq	r2,zero,44e68 <__alt_data_end+0xfffd2e68>
   45040:	800d883a 	mov	r6,r16
   45044:	880f883a 	mov	r7,r17
   45048:	9009883a 	mov	r4,r18
   4504c:	980b883a 	mov	r5,r19
   45050:	004bdf80 	call	4bdf8 <__divdf3>
   45054:	180b883a 	mov	r5,r3
   45058:	1009883a 	mov	r4,r2
   4505c:	004d94c0 	call	4d94c <__fixdfsi>
   45060:	1009883a 	mov	r4,r2
   45064:	102b883a 	mov	r21,r2
   45068:	004d9cc0 	call	4d9cc <__floatsidf>
   4506c:	800d883a 	mov	r6,r16
   45070:	880f883a 	mov	r7,r17
   45074:	1009883a 	mov	r4,r2
   45078:	180b883a 	mov	r5,r3
   4507c:	004c9380 	call	4c938 <__muldf3>
   45080:	100d883a 	mov	r6,r2
   45084:	180f883a 	mov	r7,r3
   45088:	9009883a 	mov	r4,r18
   4508c:	980b883a 	mov	r5,r19
   45090:	004d0500 	call	4d050 <__subdf3>
   45094:	aa000c04 	addi	r8,r21,48
   45098:	a2000005 	stb	r8,0(r20)
   4509c:	000d883a 	mov	r6,zero
   450a0:	01d00934 	movhi	r7,16420
   450a4:	1009883a 	mov	r4,r2
   450a8:	180b883a 	mov	r5,r3
   450ac:	a5c00044 	addi	r23,r20,1
   450b0:	b53fd91e 	bne	r22,r20,45018 <__alt_data_end+0xfffd3018>
   450b4:	100d883a 	mov	r6,r2
   450b8:	180f883a 	mov	r7,r3
   450bc:	1009883a 	mov	r4,r2
   450c0:	180b883a 	mov	r5,r3
   450c4:	004b54c0 	call	4b54c <__adddf3>
   450c8:	100d883a 	mov	r6,r2
   450cc:	180f883a 	mov	r7,r3
   450d0:	8009883a 	mov	r4,r16
   450d4:	880b883a 	mov	r5,r17
   450d8:	1027883a 	mov	r19,r2
   450dc:	1825883a 	mov	r18,r3
   450e0:	004c8440 	call	4c844 <__ledf2>
   450e4:	10000816 	blt	r2,zero,45108 <_dtoa_r+0x948>
   450e8:	980d883a 	mov	r6,r19
   450ec:	900f883a 	mov	r7,r18
   450f0:	8009883a 	mov	r4,r16
   450f4:	880b883a 	mov	r5,r17
   450f8:	004c6e00 	call	4c6e0 <__eqdf2>
   450fc:	103f5a1e 	bne	r2,zero,44e68 <__alt_data_end+0xfffd2e68>
   45100:	ad40004c 	andi	r21,r21,1
   45104:	a83f5826 	beq	r21,zero,44e68 <__alt_data_end+0xfffd2e68>
   45108:	bd3fffc3 	ldbu	r20,-1(r23)
   4510c:	b8bfffc4 	addi	r2,r23,-1
   45110:	1007883a 	mov	r3,r2
   45114:	01400e44 	movi	r5,57
   45118:	d9800717 	ldw	r6,28(sp)
   4511c:	00000506 	br	45134 <_dtoa_r+0x974>
   45120:	18ffffc4 	addi	r3,r3,-1
   45124:	11824726 	beq	r2,r6,45a44 <_dtoa_r+0x1284>
   45128:	1d000003 	ldbu	r20,0(r3)
   4512c:	102f883a 	mov	r23,r2
   45130:	10bfffc4 	addi	r2,r2,-1
   45134:	a1003fcc 	andi	r4,r20,255
   45138:	2100201c 	xori	r4,r4,128
   4513c:	213fe004 	addi	r4,r4,-128
   45140:	217ff726 	beq	r4,r5,45120 <__alt_data_end+0xfffd3120>
   45144:	a2000044 	addi	r8,r20,1
   45148:	12000005 	stb	r8,0(r2)
   4514c:	003f4606 	br	44e68 <__alt_data_end+0xfffd2e68>
   45150:	d9000b17 	ldw	r4,44(sp)
   45154:	2000c826 	beq	r4,zero,45478 <_dtoa_r+0xcb8>
   45158:	d9800317 	ldw	r6,12(sp)
   4515c:	00c00044 	movi	r3,1
   45160:	1980f90e 	bge	r3,r6,45548 <_dtoa_r+0xd88>
   45164:	d8800617 	ldw	r2,24(sp)
   45168:	d8c00a17 	ldw	r3,40(sp)
   4516c:	157fffc4 	addi	r21,r2,-1
   45170:	1d41f316 	blt	r3,r21,45940 <_dtoa_r+0x1180>
   45174:	1d6bc83a 	sub	r21,r3,r21
   45178:	d9c00617 	ldw	r7,24(sp)
   4517c:	3802aa16 	blt	r7,zero,45c28 <_dtoa_r+0x1468>
   45180:	dd000817 	ldw	r20,32(sp)
   45184:	d8800617 	ldw	r2,24(sp)
   45188:	d8c00817 	ldw	r3,32(sp)
   4518c:	01400044 	movi	r5,1
   45190:	e009883a 	mov	r4,fp
   45194:	1887883a 	add	r3,r3,r2
   45198:	d8c00815 	stw	r3,32(sp)
   4519c:	b0ad883a 	add	r22,r22,r2
   451a0:	00478d80 	call	478d8 <__i2b>
   451a4:	1023883a 	mov	r17,r2
   451a8:	a0000826 	beq	r20,zero,451cc <_dtoa_r+0xa0c>
   451ac:	0580070e 	bge	zero,r22,451cc <_dtoa_r+0xa0c>
   451b0:	a005883a 	mov	r2,r20
   451b4:	b500b916 	blt	r22,r20,4549c <_dtoa_r+0xcdc>
   451b8:	d9000817 	ldw	r4,32(sp)
   451bc:	a0a9c83a 	sub	r20,r20,r2
   451c0:	b0adc83a 	sub	r22,r22,r2
   451c4:	2089c83a 	sub	r4,r4,r2
   451c8:	d9000815 	stw	r4,32(sp)
   451cc:	d9800a17 	ldw	r6,40(sp)
   451d0:	0181810e 	bge	zero,r6,457d8 <_dtoa_r+0x1018>
   451d4:	d9c00b17 	ldw	r7,44(sp)
   451d8:	3800b326 	beq	r7,zero,454a8 <_dtoa_r+0xce8>
   451dc:	a800b226 	beq	r21,zero,454a8 <_dtoa_r+0xce8>
   451e0:	880b883a 	mov	r5,r17
   451e4:	a80d883a 	mov	r6,r21
   451e8:	e009883a 	mov	r4,fp
   451ec:	0047b0c0 	call	47b0c <__pow5mult>
   451f0:	d9800917 	ldw	r6,36(sp)
   451f4:	100b883a 	mov	r5,r2
   451f8:	e009883a 	mov	r4,fp
   451fc:	1023883a 	mov	r17,r2
   45200:	00479140 	call	47914 <__multiply>
   45204:	1021883a 	mov	r16,r2
   45208:	d8800a17 	ldw	r2,40(sp)
   4520c:	d9400917 	ldw	r5,36(sp)
   45210:	e009883a 	mov	r4,fp
   45214:	1545c83a 	sub	r2,r2,r21
   45218:	d8800a15 	stw	r2,40(sp)
   4521c:	00475740 	call	47574 <_Bfree>
   45220:	d8c00a17 	ldw	r3,40(sp)
   45224:	18009f1e 	bne	r3,zero,454a4 <_dtoa_r+0xce4>
   45228:	05c00044 	movi	r23,1
   4522c:	e009883a 	mov	r4,fp
   45230:	b80b883a 	mov	r5,r23
   45234:	00478d80 	call	478d8 <__i2b>
   45238:	d9000d17 	ldw	r4,52(sp)
   4523c:	102b883a 	mov	r21,r2
   45240:	2000ce26 	beq	r4,zero,4557c <_dtoa_r+0xdbc>
   45244:	200d883a 	mov	r6,r4
   45248:	100b883a 	mov	r5,r2
   4524c:	e009883a 	mov	r4,fp
   45250:	0047b0c0 	call	47b0c <__pow5mult>
   45254:	d9800317 	ldw	r6,12(sp)
   45258:	102b883a 	mov	r21,r2
   4525c:	b981810e 	bge	r23,r6,45864 <_dtoa_r+0x10a4>
   45260:	0027883a 	mov	r19,zero
   45264:	a8800417 	ldw	r2,16(r21)
   45268:	05c00804 	movi	r23,32
   4526c:	10800104 	addi	r2,r2,4
   45270:	1085883a 	add	r2,r2,r2
   45274:	1085883a 	add	r2,r2,r2
   45278:	a885883a 	add	r2,r21,r2
   4527c:	11000017 	ldw	r4,0(r2)
   45280:	00477c00 	call	477c0 <__hi0bits>
   45284:	b885c83a 	sub	r2,r23,r2
   45288:	1585883a 	add	r2,r2,r22
   4528c:	108007cc 	andi	r2,r2,31
   45290:	1000b326 	beq	r2,zero,45560 <_dtoa_r+0xda0>
   45294:	00c00804 	movi	r3,32
   45298:	1887c83a 	sub	r3,r3,r2
   4529c:	01000104 	movi	r4,4
   452a0:	20c2cd0e 	bge	r4,r3,45dd8 <_dtoa_r+0x1618>
   452a4:	00c00704 	movi	r3,28
   452a8:	1885c83a 	sub	r2,r3,r2
   452ac:	d8c00817 	ldw	r3,32(sp)
   452b0:	a0a9883a 	add	r20,r20,r2
   452b4:	b0ad883a 	add	r22,r22,r2
   452b8:	1887883a 	add	r3,r3,r2
   452bc:	d8c00815 	stw	r3,32(sp)
   452c0:	d9800817 	ldw	r6,32(sp)
   452c4:	0180040e 	bge	zero,r6,452d8 <_dtoa_r+0xb18>
   452c8:	800b883a 	mov	r5,r16
   452cc:	e009883a 	mov	r4,fp
   452d0:	0047c4c0 	call	47c4c <__lshift>
   452d4:	1021883a 	mov	r16,r2
   452d8:	0580050e 	bge	zero,r22,452f0 <_dtoa_r+0xb30>
   452dc:	a80b883a 	mov	r5,r21
   452e0:	b00d883a 	mov	r6,r22
   452e4:	e009883a 	mov	r4,fp
   452e8:	0047c4c0 	call	47c4c <__lshift>
   452ec:	102b883a 	mov	r21,r2
   452f0:	d9c00e17 	ldw	r7,56(sp)
   452f4:	3801211e 	bne	r7,zero,4577c <_dtoa_r+0xfbc>
   452f8:	d9800617 	ldw	r6,24(sp)
   452fc:	0181380e 	bge	zero,r6,457e0 <_dtoa_r+0x1020>
   45300:	d8c00b17 	ldw	r3,44(sp)
   45304:	1800ab1e 	bne	r3,zero,455b4 <_dtoa_r+0xdf4>
   45308:	dc800717 	ldw	r18,28(sp)
   4530c:	dcc00617 	ldw	r19,24(sp)
   45310:	9029883a 	mov	r20,r18
   45314:	00000206 	br	45320 <_dtoa_r+0xb60>
   45318:	004759c0 	call	4759c <__multadd>
   4531c:	1021883a 	mov	r16,r2
   45320:	a80b883a 	mov	r5,r21
   45324:	8009883a 	mov	r4,r16
   45328:	00445c00 	call	445c0 <quorem>
   4532c:	10800c04 	addi	r2,r2,48
   45330:	90800005 	stb	r2,0(r18)
   45334:	94800044 	addi	r18,r18,1
   45338:	9507c83a 	sub	r3,r18,r20
   4533c:	000f883a 	mov	r7,zero
   45340:	01800284 	movi	r6,10
   45344:	800b883a 	mov	r5,r16
   45348:	e009883a 	mov	r4,fp
   4534c:	1cfff216 	blt	r3,r19,45318 <__alt_data_end+0xfffd3318>
   45350:	1011883a 	mov	r8,r2
   45354:	d8800617 	ldw	r2,24(sp)
   45358:	0082370e 	bge	zero,r2,45c38 <_dtoa_r+0x1478>
   4535c:	d9000717 	ldw	r4,28(sp)
   45360:	0025883a 	mov	r18,zero
   45364:	20af883a 	add	r23,r4,r2
   45368:	01800044 	movi	r6,1
   4536c:	800b883a 	mov	r5,r16
   45370:	e009883a 	mov	r4,fp
   45374:	da001715 	stw	r8,92(sp)
   45378:	0047c4c0 	call	47c4c <__lshift>
   4537c:	a80b883a 	mov	r5,r21
   45380:	1009883a 	mov	r4,r2
   45384:	d8800915 	stw	r2,36(sp)
   45388:	0047d940 	call	47d94 <__mcmp>
   4538c:	da001717 	ldw	r8,92(sp)
   45390:	0081800e 	bge	zero,r2,45994 <_dtoa_r+0x11d4>
   45394:	b93fffc3 	ldbu	r4,-1(r23)
   45398:	b8bfffc4 	addi	r2,r23,-1
   4539c:	1007883a 	mov	r3,r2
   453a0:	01800e44 	movi	r6,57
   453a4:	d9c00717 	ldw	r7,28(sp)
   453a8:	00000506 	br	453c0 <_dtoa_r+0xc00>
   453ac:	18ffffc4 	addi	r3,r3,-1
   453b0:	11c12326 	beq	r2,r7,45840 <_dtoa_r+0x1080>
   453b4:	19000003 	ldbu	r4,0(r3)
   453b8:	102f883a 	mov	r23,r2
   453bc:	10bfffc4 	addi	r2,r2,-1
   453c0:	21403fcc 	andi	r5,r4,255
   453c4:	2940201c 	xori	r5,r5,128
   453c8:	297fe004 	addi	r5,r5,-128
   453cc:	29bff726 	beq	r5,r6,453ac <__alt_data_end+0xfffd33ac>
   453d0:	21000044 	addi	r4,r4,1
   453d4:	11000005 	stb	r4,0(r2)
   453d8:	a80b883a 	mov	r5,r21
   453dc:	e009883a 	mov	r4,fp
   453e0:	00475740 	call	47574 <_Bfree>
   453e4:	883ea026 	beq	r17,zero,44e68 <__alt_data_end+0xfffd2e68>
   453e8:	90000426 	beq	r18,zero,453fc <_dtoa_r+0xc3c>
   453ec:	94400326 	beq	r18,r17,453fc <_dtoa_r+0xc3c>
   453f0:	900b883a 	mov	r5,r18
   453f4:	e009883a 	mov	r4,fp
   453f8:	00475740 	call	47574 <_Bfree>
   453fc:	880b883a 	mov	r5,r17
   45400:	e009883a 	mov	r4,fp
   45404:	00475740 	call	47574 <_Bfree>
   45408:	003e9706 	br	44e68 <__alt_data_end+0xfffd2e68>
   4540c:	01800044 	movi	r6,1
   45410:	d9800e15 	stw	r6,56(sp)
   45414:	003d9606 	br	44a70 <__alt_data_end+0xfffd2a70>
   45418:	d8800817 	ldw	r2,32(sp)
   4541c:	d8c00517 	ldw	r3,20(sp)
   45420:	d8000d15 	stw	zero,52(sp)
   45424:	10c5c83a 	sub	r2,r2,r3
   45428:	00c9c83a 	sub	r4,zero,r3
   4542c:	d8800815 	stw	r2,32(sp)
   45430:	d9000a15 	stw	r4,40(sp)
   45434:	003d9706 	br	44a94 <__alt_data_end+0xfffd2a94>
   45438:	05adc83a 	sub	r22,zero,r22
   4543c:	dd800815 	stw	r22,32(sp)
   45440:	002d883a 	mov	r22,zero
   45444:	003d8e06 	br	44a80 <__alt_data_end+0xfffd2a80>
   45448:	d9000517 	ldw	r4,20(sp)
   4544c:	004d9cc0 	call	4d9cc <__floatsidf>
   45450:	100d883a 	mov	r6,r2
   45454:	180f883a 	mov	r7,r3
   45458:	a009883a 	mov	r4,r20
   4545c:	880b883a 	mov	r5,r17
   45460:	004c6e00 	call	4c6e0 <__eqdf2>
   45464:	103d7126 	beq	r2,zero,44a2c <__alt_data_end+0xfffd2a2c>
   45468:	d9c00517 	ldw	r7,20(sp)
   4546c:	39ffffc4 	addi	r7,r7,-1
   45470:	d9c00515 	stw	r7,20(sp)
   45474:	003d6d06 	br	44a2c <__alt_data_end+0xfffd2a2c>
   45478:	dd400a17 	ldw	r21,40(sp)
   4547c:	dd000817 	ldw	r20,32(sp)
   45480:	0023883a 	mov	r17,zero
   45484:	003f4806 	br	451a8 <__alt_data_end+0xfffd31a8>
   45488:	10e3c83a 	sub	r17,r2,r3
   4548c:	9448983a 	sll	r4,r18,r17
   45490:	003d3206 	br	4495c <__alt_data_end+0xfffd295c>
   45494:	d8000e15 	stw	zero,56(sp)
   45498:	003d7506 	br	44a70 <__alt_data_end+0xfffd2a70>
   4549c:	b005883a 	mov	r2,r22
   454a0:	003f4506 	br	451b8 <__alt_data_end+0xfffd31b8>
   454a4:	dc000915 	stw	r16,36(sp)
   454a8:	d9800a17 	ldw	r6,40(sp)
   454ac:	d9400917 	ldw	r5,36(sp)
   454b0:	e009883a 	mov	r4,fp
   454b4:	0047b0c0 	call	47b0c <__pow5mult>
   454b8:	1021883a 	mov	r16,r2
   454bc:	003f5a06 	br	45228 <__alt_data_end+0xfffd3228>
   454c0:	01c00044 	movi	r7,1
   454c4:	d9c00b15 	stw	r7,44(sp)
   454c8:	d8802217 	ldw	r2,136(sp)
   454cc:	0081280e 	bge	zero,r2,45970 <_dtoa_r+0x11b0>
   454d0:	100d883a 	mov	r6,r2
   454d4:	1021883a 	mov	r16,r2
   454d8:	d8800c15 	stw	r2,48(sp)
   454dc:	d8800615 	stw	r2,24(sp)
   454e0:	003d8806 	br	44b04 <__alt_data_end+0xfffd2b04>
   454e4:	d8800617 	ldw	r2,24(sp)
   454e8:	00be9b16 	blt	zero,r2,44f58 <__alt_data_end+0xfffd2f58>
   454ec:	10010f1e 	bne	r2,zero,4592c <_dtoa_r+0x116c>
   454f0:	880b883a 	mov	r5,r17
   454f4:	000d883a 	mov	r6,zero
   454f8:	01d00534 	movhi	r7,16404
   454fc:	8009883a 	mov	r4,r16
   45500:	004c9380 	call	4c938 <__muldf3>
   45504:	900d883a 	mov	r6,r18
   45508:	980f883a 	mov	r7,r19
   4550c:	1009883a 	mov	r4,r2
   45510:	180b883a 	mov	r5,r3
   45514:	004c7680 	call	4c768 <__gedf2>
   45518:	002b883a 	mov	r21,zero
   4551c:	0023883a 	mov	r17,zero
   45520:	1000bf16 	blt	r2,zero,45820 <_dtoa_r+0x1060>
   45524:	d9802217 	ldw	r6,136(sp)
   45528:	ddc00717 	ldw	r23,28(sp)
   4552c:	018c303a 	nor	r6,zero,r6
   45530:	d9800515 	stw	r6,20(sp)
   45534:	a80b883a 	mov	r5,r21
   45538:	e009883a 	mov	r4,fp
   4553c:	00475740 	call	47574 <_Bfree>
   45540:	883e4926 	beq	r17,zero,44e68 <__alt_data_end+0xfffd2e68>
   45544:	003fad06 	br	453fc <__alt_data_end+0xfffd33fc>
   45548:	d9c01117 	ldw	r7,68(sp)
   4554c:	3801bc26 	beq	r7,zero,45c40 <_dtoa_r+0x1480>
   45550:	10810cc4 	addi	r2,r2,1075
   45554:	dd400a17 	ldw	r21,40(sp)
   45558:	dd000817 	ldw	r20,32(sp)
   4555c:	003f0a06 	br	45188 <__alt_data_end+0xfffd3188>
   45560:	00800704 	movi	r2,28
   45564:	d9000817 	ldw	r4,32(sp)
   45568:	a0a9883a 	add	r20,r20,r2
   4556c:	b0ad883a 	add	r22,r22,r2
   45570:	2089883a 	add	r4,r4,r2
   45574:	d9000815 	stw	r4,32(sp)
   45578:	003f5106 	br	452c0 <__alt_data_end+0xfffd32c0>
   4557c:	d8c00317 	ldw	r3,12(sp)
   45580:	b8c1fc0e 	bge	r23,r3,45d74 <_dtoa_r+0x15b4>
   45584:	0027883a 	mov	r19,zero
   45588:	b805883a 	mov	r2,r23
   4558c:	003f3e06 	br	45288 <__alt_data_end+0xfffd3288>
   45590:	880b883a 	mov	r5,r17
   45594:	e009883a 	mov	r4,fp
   45598:	000f883a 	mov	r7,zero
   4559c:	01800284 	movi	r6,10
   455a0:	004759c0 	call	4759c <__multadd>
   455a4:	d9000c17 	ldw	r4,48(sp)
   455a8:	1023883a 	mov	r17,r2
   455ac:	0102040e 	bge	zero,r4,45dc0 <_dtoa_r+0x1600>
   455b0:	d9000615 	stw	r4,24(sp)
   455b4:	0500050e 	bge	zero,r20,455cc <_dtoa_r+0xe0c>
   455b8:	880b883a 	mov	r5,r17
   455bc:	a00d883a 	mov	r6,r20
   455c0:	e009883a 	mov	r4,fp
   455c4:	0047c4c0 	call	47c4c <__lshift>
   455c8:	1023883a 	mov	r17,r2
   455cc:	9801241e 	bne	r19,zero,45a60 <_dtoa_r+0x12a0>
   455d0:	8829883a 	mov	r20,r17
   455d4:	d9000617 	ldw	r4,24(sp)
   455d8:	dcc00717 	ldw	r19,28(sp)
   455dc:	9480004c 	andi	r18,r18,1
   455e0:	20bfffc4 	addi	r2,r4,-1
   455e4:	9885883a 	add	r2,r19,r2
   455e8:	d8800415 	stw	r2,16(sp)
   455ec:	dc800615 	stw	r18,24(sp)
   455f0:	a80b883a 	mov	r5,r21
   455f4:	8009883a 	mov	r4,r16
   455f8:	00445c00 	call	445c0 <quorem>
   455fc:	880b883a 	mov	r5,r17
   45600:	8009883a 	mov	r4,r16
   45604:	102f883a 	mov	r23,r2
   45608:	0047d940 	call	47d94 <__mcmp>
   4560c:	a80b883a 	mov	r5,r21
   45610:	a00d883a 	mov	r6,r20
   45614:	e009883a 	mov	r4,fp
   45618:	102d883a 	mov	r22,r2
   4561c:	0047df40 	call	47df4 <__mdiff>
   45620:	1007883a 	mov	r3,r2
   45624:	10800317 	ldw	r2,12(r2)
   45628:	bc800c04 	addi	r18,r23,48
   4562c:	180b883a 	mov	r5,r3
   45630:	10004e1e 	bne	r2,zero,4576c <_dtoa_r+0xfac>
   45634:	8009883a 	mov	r4,r16
   45638:	d8c01615 	stw	r3,88(sp)
   4563c:	0047d940 	call	47d94 <__mcmp>
   45640:	d8c01617 	ldw	r3,88(sp)
   45644:	e009883a 	mov	r4,fp
   45648:	d8801615 	stw	r2,88(sp)
   4564c:	180b883a 	mov	r5,r3
   45650:	00475740 	call	47574 <_Bfree>
   45654:	d8801617 	ldw	r2,88(sp)
   45658:	1000041e 	bne	r2,zero,4566c <_dtoa_r+0xeac>
   4565c:	d9800317 	ldw	r6,12(sp)
   45660:	3000021e 	bne	r6,zero,4566c <_dtoa_r+0xeac>
   45664:	d8c00617 	ldw	r3,24(sp)
   45668:	18003726 	beq	r3,zero,45748 <_dtoa_r+0xf88>
   4566c:	b0002016 	blt	r22,zero,456f0 <_dtoa_r+0xf30>
   45670:	b000041e 	bne	r22,zero,45684 <_dtoa_r+0xec4>
   45674:	d9000317 	ldw	r4,12(sp)
   45678:	2000021e 	bne	r4,zero,45684 <_dtoa_r+0xec4>
   4567c:	d8c00617 	ldw	r3,24(sp)
   45680:	18001b26 	beq	r3,zero,456f0 <_dtoa_r+0xf30>
   45684:	00810716 	blt	zero,r2,45aa4 <_dtoa_r+0x12e4>
   45688:	d8c00417 	ldw	r3,16(sp)
   4568c:	9d800044 	addi	r22,r19,1
   45690:	9c800005 	stb	r18,0(r19)
   45694:	b02f883a 	mov	r23,r22
   45698:	98c10626 	beq	r19,r3,45ab4 <_dtoa_r+0x12f4>
   4569c:	800b883a 	mov	r5,r16
   456a0:	000f883a 	mov	r7,zero
   456a4:	01800284 	movi	r6,10
   456a8:	e009883a 	mov	r4,fp
   456ac:	004759c0 	call	4759c <__multadd>
   456b0:	1021883a 	mov	r16,r2
   456b4:	000f883a 	mov	r7,zero
   456b8:	01800284 	movi	r6,10
   456bc:	880b883a 	mov	r5,r17
   456c0:	e009883a 	mov	r4,fp
   456c4:	8d002526 	beq	r17,r20,4575c <_dtoa_r+0xf9c>
   456c8:	004759c0 	call	4759c <__multadd>
   456cc:	a00b883a 	mov	r5,r20
   456d0:	000f883a 	mov	r7,zero
   456d4:	01800284 	movi	r6,10
   456d8:	e009883a 	mov	r4,fp
   456dc:	1023883a 	mov	r17,r2
   456e0:	004759c0 	call	4759c <__multadd>
   456e4:	1029883a 	mov	r20,r2
   456e8:	b027883a 	mov	r19,r22
   456ec:	003fc006 	br	455f0 <__alt_data_end+0xfffd35f0>
   456f0:	9011883a 	mov	r8,r18
   456f4:	00800e0e 	bge	zero,r2,45730 <_dtoa_r+0xf70>
   456f8:	800b883a 	mov	r5,r16
   456fc:	01800044 	movi	r6,1
   45700:	e009883a 	mov	r4,fp
   45704:	da001715 	stw	r8,92(sp)
   45708:	0047c4c0 	call	47c4c <__lshift>
   4570c:	a80b883a 	mov	r5,r21
   45710:	1009883a 	mov	r4,r2
   45714:	1021883a 	mov	r16,r2
   45718:	0047d940 	call	47d94 <__mcmp>
   4571c:	da001717 	ldw	r8,92(sp)
   45720:	0081960e 	bge	zero,r2,45d7c <_dtoa_r+0x15bc>
   45724:	00800e44 	movi	r2,57
   45728:	40817026 	beq	r8,r2,45cec <_dtoa_r+0x152c>
   4572c:	ba000c44 	addi	r8,r23,49
   45730:	8825883a 	mov	r18,r17
   45734:	9dc00044 	addi	r23,r19,1
   45738:	9a000005 	stb	r8,0(r19)
   4573c:	a023883a 	mov	r17,r20
   45740:	dc000915 	stw	r16,36(sp)
   45744:	003f2406 	br	453d8 <__alt_data_end+0xfffd33d8>
   45748:	00800e44 	movi	r2,57
   4574c:	9011883a 	mov	r8,r18
   45750:	90816626 	beq	r18,r2,45cec <_dtoa_r+0x152c>
   45754:	05bff516 	blt	zero,r22,4572c <__alt_data_end+0xfffd372c>
   45758:	003ff506 	br	45730 <__alt_data_end+0xfffd3730>
   4575c:	004759c0 	call	4759c <__multadd>
   45760:	1023883a 	mov	r17,r2
   45764:	1029883a 	mov	r20,r2
   45768:	003fdf06 	br	456e8 <__alt_data_end+0xfffd36e8>
   4576c:	e009883a 	mov	r4,fp
   45770:	00475740 	call	47574 <_Bfree>
   45774:	00800044 	movi	r2,1
   45778:	003fbc06 	br	4566c <__alt_data_end+0xfffd366c>
   4577c:	a80b883a 	mov	r5,r21
   45780:	8009883a 	mov	r4,r16
   45784:	0047d940 	call	47d94 <__mcmp>
   45788:	103edb0e 	bge	r2,zero,452f8 <__alt_data_end+0xfffd32f8>
   4578c:	800b883a 	mov	r5,r16
   45790:	000f883a 	mov	r7,zero
   45794:	01800284 	movi	r6,10
   45798:	e009883a 	mov	r4,fp
   4579c:	004759c0 	call	4759c <__multadd>
   457a0:	1021883a 	mov	r16,r2
   457a4:	d8800517 	ldw	r2,20(sp)
   457a8:	d8c00b17 	ldw	r3,44(sp)
   457ac:	10bfffc4 	addi	r2,r2,-1
   457b0:	d8800515 	stw	r2,20(sp)
   457b4:	183f761e 	bne	r3,zero,45590 <__alt_data_end+0xfffd3590>
   457b8:	d9000c17 	ldw	r4,48(sp)
   457bc:	0101730e 	bge	zero,r4,45d8c <_dtoa_r+0x15cc>
   457c0:	d9000615 	stw	r4,24(sp)
   457c4:	003ed006 	br	45308 <__alt_data_end+0xfffd3308>
   457c8:	00800084 	movi	r2,2
   457cc:	3081861e 	bne	r6,r2,45de8 <_dtoa_r+0x1628>
   457d0:	d8000b15 	stw	zero,44(sp)
   457d4:	003f3c06 	br	454c8 <__alt_data_end+0xfffd34c8>
   457d8:	dc000917 	ldw	r16,36(sp)
   457dc:	003e9206 	br	45228 <__alt_data_end+0xfffd3228>
   457e0:	d9c00317 	ldw	r7,12(sp)
   457e4:	00800084 	movi	r2,2
   457e8:	11fec50e 	bge	r2,r7,45300 <__alt_data_end+0xfffd3300>
   457ec:	d9000617 	ldw	r4,24(sp)
   457f0:	20013c1e 	bne	r4,zero,45ce4 <_dtoa_r+0x1524>
   457f4:	a80b883a 	mov	r5,r21
   457f8:	000f883a 	mov	r7,zero
   457fc:	01800144 	movi	r6,5
   45800:	e009883a 	mov	r4,fp
   45804:	004759c0 	call	4759c <__multadd>
   45808:	100b883a 	mov	r5,r2
   4580c:	8009883a 	mov	r4,r16
   45810:	102b883a 	mov	r21,r2
   45814:	0047d940 	call	47d94 <__mcmp>
   45818:	dc000915 	stw	r16,36(sp)
   4581c:	00bf410e 	bge	zero,r2,45524 <__alt_data_end+0xfffd3524>
   45820:	d9c00717 	ldw	r7,28(sp)
   45824:	00800c44 	movi	r2,49
   45828:	38800005 	stb	r2,0(r7)
   4582c:	d8800517 	ldw	r2,20(sp)
   45830:	3dc00044 	addi	r23,r7,1
   45834:	10800044 	addi	r2,r2,1
   45838:	d8800515 	stw	r2,20(sp)
   4583c:	003f3d06 	br	45534 <__alt_data_end+0xfffd3534>
   45840:	d9800517 	ldw	r6,20(sp)
   45844:	d9c00717 	ldw	r7,28(sp)
   45848:	00800c44 	movi	r2,49
   4584c:	31800044 	addi	r6,r6,1
   45850:	d9800515 	stw	r6,20(sp)
   45854:	38800005 	stb	r2,0(r7)
   45858:	003edf06 	br	453d8 <__alt_data_end+0xfffd33d8>
   4585c:	d8000b15 	stw	zero,44(sp)
   45860:	003c9f06 	br	44ae0 <__alt_data_end+0xfffd2ae0>
   45864:	903e7e1e 	bne	r18,zero,45260 <__alt_data_end+0xfffd3260>
   45868:	00800434 	movhi	r2,16
   4586c:	10bfffc4 	addi	r2,r2,-1
   45870:	9884703a 	and	r2,r19,r2
   45874:	1000ea1e 	bne	r2,zero,45c20 <_dtoa_r+0x1460>
   45878:	9cdffc2c 	andhi	r19,r19,32752
   4587c:	9800e826 	beq	r19,zero,45c20 <_dtoa_r+0x1460>
   45880:	d9c00817 	ldw	r7,32(sp)
   45884:	b5800044 	addi	r22,r22,1
   45888:	04c00044 	movi	r19,1
   4588c:	39c00044 	addi	r7,r7,1
   45890:	d9c00815 	stw	r7,32(sp)
   45894:	d8800d17 	ldw	r2,52(sp)
   45898:	103e721e 	bne	r2,zero,45264 <__alt_data_end+0xfffd3264>
   4589c:	00800044 	movi	r2,1
   458a0:	003e7906 	br	45288 <__alt_data_end+0xfffd3288>
   458a4:	8009883a 	mov	r4,r16
   458a8:	004d9cc0 	call	4d9cc <__floatsidf>
   458ac:	d9800f17 	ldw	r6,60(sp)
   458b0:	d9c01017 	ldw	r7,64(sp)
   458b4:	1009883a 	mov	r4,r2
   458b8:	180b883a 	mov	r5,r3
   458bc:	004c9380 	call	4c938 <__muldf3>
   458c0:	000d883a 	mov	r6,zero
   458c4:	01d00734 	movhi	r7,16412
   458c8:	1009883a 	mov	r4,r2
   458cc:	180b883a 	mov	r5,r3
   458d0:	004b54c0 	call	4b54c <__adddf3>
   458d4:	047f3034 	movhi	r17,64704
   458d8:	1021883a 	mov	r16,r2
   458dc:	1c63883a 	add	r17,r3,r17
   458e0:	d9000f17 	ldw	r4,60(sp)
   458e4:	d9401017 	ldw	r5,64(sp)
   458e8:	000d883a 	mov	r6,zero
   458ec:	01d00534 	movhi	r7,16404
   458f0:	004d0500 	call	4d050 <__subdf3>
   458f4:	800d883a 	mov	r6,r16
   458f8:	880f883a 	mov	r7,r17
   458fc:	1009883a 	mov	r4,r2
   45900:	180b883a 	mov	r5,r3
   45904:	102b883a 	mov	r21,r2
   45908:	1829883a 	mov	r20,r3
   4590c:	004c7680 	call	4c768 <__gedf2>
   45910:	00806c16 	blt	zero,r2,45ac4 <_dtoa_r+0x1304>
   45914:	89e0003c 	xorhi	r7,r17,32768
   45918:	800d883a 	mov	r6,r16
   4591c:	a809883a 	mov	r4,r21
   45920:	a00b883a 	mov	r5,r20
   45924:	004c8440 	call	4c844 <__ledf2>
   45928:	103d7e0e 	bge	r2,zero,44f24 <__alt_data_end+0xfffd2f24>
   4592c:	002b883a 	mov	r21,zero
   45930:	0023883a 	mov	r17,zero
   45934:	003efb06 	br	45524 <__alt_data_end+0xfffd3524>
   45938:	d8800717 	ldw	r2,28(sp)
   4593c:	003bd006 	br	44880 <__alt_data_end+0xfffd2880>
   45940:	d9000a17 	ldw	r4,40(sp)
   45944:	d9800d17 	ldw	r6,52(sp)
   45948:	dd400a15 	stw	r21,40(sp)
   4594c:	a905c83a 	sub	r2,r21,r4
   45950:	308d883a 	add	r6,r6,r2
   45954:	d9800d15 	stw	r6,52(sp)
   45958:	002b883a 	mov	r21,zero
   4595c:	003e0606 	br	45178 <__alt_data_end+0xfffd3178>
   45960:	9023883a 	mov	r17,r18
   45964:	9829883a 	mov	r20,r19
   45968:	04000084 	movi	r16,2
   4596c:	003c9206 	br	44bb8 <__alt_data_end+0xfffd2bb8>
   45970:	04000044 	movi	r16,1
   45974:	dc000c15 	stw	r16,48(sp)
   45978:	dc000615 	stw	r16,24(sp)
   4597c:	dc002215 	stw	r16,136(sp)
   45980:	e0001115 	stw	zero,68(fp)
   45984:	000b883a 	mov	r5,zero
   45988:	003c6906 	br	44b30 <__alt_data_end+0xfffd2b30>
   4598c:	3021883a 	mov	r16,r6
   45990:	003ffb06 	br	45980 <__alt_data_end+0xfffd3980>
   45994:	1000021e 	bne	r2,zero,459a0 <_dtoa_r+0x11e0>
   45998:	4200004c 	andi	r8,r8,1
   4599c:	403e7d1e 	bne	r8,zero,45394 <__alt_data_end+0xfffd3394>
   459a0:	01000c04 	movi	r4,48
   459a4:	00000106 	br	459ac <_dtoa_r+0x11ec>
   459a8:	102f883a 	mov	r23,r2
   459ac:	b8bfffc4 	addi	r2,r23,-1
   459b0:	10c00007 	ldb	r3,0(r2)
   459b4:	193ffc26 	beq	r3,r4,459a8 <__alt_data_end+0xfffd39a8>
   459b8:	003e8706 	br	453d8 <__alt_data_end+0xfffd33d8>
   459bc:	d8800517 	ldw	r2,20(sp)
   459c0:	00a3c83a 	sub	r17,zero,r2
   459c4:	8800a426 	beq	r17,zero,45c58 <_dtoa_r+0x1498>
   459c8:	888003cc 	andi	r2,r17,15
   459cc:	100490fa 	slli	r2,r2,3
   459d0:	00c00174 	movhi	r3,5
   459d4:	18c54d04 	addi	r3,r3,5428
   459d8:	1885883a 	add	r2,r3,r2
   459dc:	11800017 	ldw	r6,0(r2)
   459e0:	11c00117 	ldw	r7,4(r2)
   459e4:	9009883a 	mov	r4,r18
   459e8:	980b883a 	mov	r5,r19
   459ec:	8823d13a 	srai	r17,r17,4
   459f0:	004c9380 	call	4c938 <__muldf3>
   459f4:	d8800f15 	stw	r2,60(sp)
   459f8:	d8c01015 	stw	r3,64(sp)
   459fc:	8800e826 	beq	r17,zero,45da0 <_dtoa_r+0x15e0>
   45a00:	05000174 	movhi	r20,5
   45a04:	a5054304 	addi	r20,r20,5388
   45a08:	04000084 	movi	r16,2
   45a0c:	8980004c 	andi	r6,r17,1
   45a10:	1009883a 	mov	r4,r2
   45a14:	8823d07a 	srai	r17,r17,1
   45a18:	180b883a 	mov	r5,r3
   45a1c:	30000426 	beq	r6,zero,45a30 <_dtoa_r+0x1270>
   45a20:	a1800017 	ldw	r6,0(r20)
   45a24:	a1c00117 	ldw	r7,4(r20)
   45a28:	84000044 	addi	r16,r16,1
   45a2c:	004c9380 	call	4c938 <__muldf3>
   45a30:	a5000204 	addi	r20,r20,8
   45a34:	883ff51e 	bne	r17,zero,45a0c <__alt_data_end+0xfffd3a0c>
   45a38:	d8800f15 	stw	r2,60(sp)
   45a3c:	d8c01015 	stw	r3,64(sp)
   45a40:	003c7606 	br	44c1c <__alt_data_end+0xfffd2c1c>
   45a44:	00c00c04 	movi	r3,48
   45a48:	10c00005 	stb	r3,0(r2)
   45a4c:	d8c00517 	ldw	r3,20(sp)
   45a50:	bd3fffc3 	ldbu	r20,-1(r23)
   45a54:	18c00044 	addi	r3,r3,1
   45a58:	d8c00515 	stw	r3,20(sp)
   45a5c:	003db906 	br	45144 <__alt_data_end+0xfffd3144>
   45a60:	89400117 	ldw	r5,4(r17)
   45a64:	e009883a 	mov	r4,fp
   45a68:	00474cc0 	call	474cc <_Balloc>
   45a6c:	89800417 	ldw	r6,16(r17)
   45a70:	89400304 	addi	r5,r17,12
   45a74:	11000304 	addi	r4,r2,12
   45a78:	31800084 	addi	r6,r6,2
   45a7c:	318d883a 	add	r6,r6,r6
   45a80:	318d883a 	add	r6,r6,r6
   45a84:	1027883a 	mov	r19,r2
   45a88:	00472280 	call	47228 <memcpy>
   45a8c:	01800044 	movi	r6,1
   45a90:	980b883a 	mov	r5,r19
   45a94:	e009883a 	mov	r4,fp
   45a98:	0047c4c0 	call	47c4c <__lshift>
   45a9c:	1029883a 	mov	r20,r2
   45aa0:	003ecc06 	br	455d4 <__alt_data_end+0xfffd35d4>
   45aa4:	00800e44 	movi	r2,57
   45aa8:	90809026 	beq	r18,r2,45cec <_dtoa_r+0x152c>
   45aac:	92000044 	addi	r8,r18,1
   45ab0:	003f1f06 	br	45730 <__alt_data_end+0xfffd3730>
   45ab4:	9011883a 	mov	r8,r18
   45ab8:	8825883a 	mov	r18,r17
   45abc:	a023883a 	mov	r17,r20
   45ac0:	003e2906 	br	45368 <__alt_data_end+0xfffd3368>
   45ac4:	002b883a 	mov	r21,zero
   45ac8:	0023883a 	mov	r17,zero
   45acc:	003f5406 	br	45820 <__alt_data_end+0xfffd3820>
   45ad0:	61bfffc4 	addi	r6,r12,-1
   45ad4:	300490fa 	slli	r2,r6,3
   45ad8:	00c00174 	movhi	r3,5
   45adc:	18c54d04 	addi	r3,r3,5428
   45ae0:	1885883a 	add	r2,r3,r2
   45ae4:	11000017 	ldw	r4,0(r2)
   45ae8:	11400117 	ldw	r5,4(r2)
   45aec:	d8800717 	ldw	r2,28(sp)
   45af0:	880f883a 	mov	r7,r17
   45af4:	d9801215 	stw	r6,72(sp)
   45af8:	800d883a 	mov	r6,r16
   45afc:	db001615 	stw	r12,88(sp)
   45b00:	15c00044 	addi	r23,r2,1
   45b04:	004c9380 	call	4c938 <__muldf3>
   45b08:	d9401017 	ldw	r5,64(sp)
   45b0c:	d9000f17 	ldw	r4,60(sp)
   45b10:	d8c01515 	stw	r3,84(sp)
   45b14:	d8801415 	stw	r2,80(sp)
   45b18:	004d94c0 	call	4d94c <__fixdfsi>
   45b1c:	1009883a 	mov	r4,r2
   45b20:	1021883a 	mov	r16,r2
   45b24:	004d9cc0 	call	4d9cc <__floatsidf>
   45b28:	d9000f17 	ldw	r4,60(sp)
   45b2c:	d9401017 	ldw	r5,64(sp)
   45b30:	100d883a 	mov	r6,r2
   45b34:	180f883a 	mov	r7,r3
   45b38:	004d0500 	call	4d050 <__subdf3>
   45b3c:	1829883a 	mov	r20,r3
   45b40:	d8c00717 	ldw	r3,28(sp)
   45b44:	84000c04 	addi	r16,r16,48
   45b48:	1023883a 	mov	r17,r2
   45b4c:	1c000005 	stb	r16,0(r3)
   45b50:	db001617 	ldw	r12,88(sp)
   45b54:	00800044 	movi	r2,1
   45b58:	60802226 	beq	r12,r2,45be4 <_dtoa_r+0x1424>
   45b5c:	d9c00717 	ldw	r7,28(sp)
   45b60:	8805883a 	mov	r2,r17
   45b64:	b82b883a 	mov	r21,r23
   45b68:	3b19883a 	add	r12,r7,r12
   45b6c:	6023883a 	mov	r17,r12
   45b70:	a007883a 	mov	r3,r20
   45b74:	dc800f15 	stw	r18,60(sp)
   45b78:	000d883a 	mov	r6,zero
   45b7c:	01d00934 	movhi	r7,16420
   45b80:	1009883a 	mov	r4,r2
   45b84:	180b883a 	mov	r5,r3
   45b88:	004c9380 	call	4c938 <__muldf3>
   45b8c:	180b883a 	mov	r5,r3
   45b90:	1009883a 	mov	r4,r2
   45b94:	1829883a 	mov	r20,r3
   45b98:	1025883a 	mov	r18,r2
   45b9c:	004d94c0 	call	4d94c <__fixdfsi>
   45ba0:	1009883a 	mov	r4,r2
   45ba4:	1021883a 	mov	r16,r2
   45ba8:	004d9cc0 	call	4d9cc <__floatsidf>
   45bac:	100d883a 	mov	r6,r2
   45bb0:	180f883a 	mov	r7,r3
   45bb4:	9009883a 	mov	r4,r18
   45bb8:	a00b883a 	mov	r5,r20
   45bbc:	84000c04 	addi	r16,r16,48
   45bc0:	004d0500 	call	4d050 <__subdf3>
   45bc4:	ad400044 	addi	r21,r21,1
   45bc8:	ac3fffc5 	stb	r16,-1(r21)
   45bcc:	ac7fea1e 	bne	r21,r17,45b78 <__alt_data_end+0xfffd3b78>
   45bd0:	1023883a 	mov	r17,r2
   45bd4:	d8801217 	ldw	r2,72(sp)
   45bd8:	dc800f17 	ldw	r18,60(sp)
   45bdc:	1829883a 	mov	r20,r3
   45be0:	b8af883a 	add	r23,r23,r2
   45be4:	d9001417 	ldw	r4,80(sp)
   45be8:	d9401517 	ldw	r5,84(sp)
   45bec:	000d883a 	mov	r6,zero
   45bf0:	01cff834 	movhi	r7,16352
   45bf4:	004b54c0 	call	4b54c <__adddf3>
   45bf8:	880d883a 	mov	r6,r17
   45bfc:	a00f883a 	mov	r7,r20
   45c00:	1009883a 	mov	r4,r2
   45c04:	180b883a 	mov	r5,r3
   45c08:	004c8440 	call	4c844 <__ledf2>
   45c0c:	10003e0e 	bge	r2,zero,45d08 <_dtoa_r+0x1548>
   45c10:	d9001317 	ldw	r4,76(sp)
   45c14:	bd3fffc3 	ldbu	r20,-1(r23)
   45c18:	d9000515 	stw	r4,20(sp)
   45c1c:	003d3b06 	br	4510c <__alt_data_end+0xfffd310c>
   45c20:	0027883a 	mov	r19,zero
   45c24:	003f1b06 	br	45894 <__alt_data_end+0xfffd3894>
   45c28:	d8800817 	ldw	r2,32(sp)
   45c2c:	11e9c83a 	sub	r20,r2,r7
   45c30:	0005883a 	mov	r2,zero
   45c34:	003d5406 	br	45188 <__alt_data_end+0xfffd3188>
   45c38:	00800044 	movi	r2,1
   45c3c:	003dc706 	br	4535c <__alt_data_end+0xfffd335c>
   45c40:	d8c00217 	ldw	r3,8(sp)
   45c44:	00800d84 	movi	r2,54
   45c48:	dd400a17 	ldw	r21,40(sp)
   45c4c:	10c5c83a 	sub	r2,r2,r3
   45c50:	dd000817 	ldw	r20,32(sp)
   45c54:	003d4c06 	br	45188 <__alt_data_end+0xfffd3188>
   45c58:	dc800f15 	stw	r18,60(sp)
   45c5c:	dcc01015 	stw	r19,64(sp)
   45c60:	04000084 	movi	r16,2
   45c64:	003bed06 	br	44c1c <__alt_data_end+0xfffd2c1c>
   45c68:	d9000617 	ldw	r4,24(sp)
   45c6c:	203f0d26 	beq	r4,zero,458a4 <__alt_data_end+0xfffd38a4>
   45c70:	d9800c17 	ldw	r6,48(sp)
   45c74:	01bcab0e 	bge	zero,r6,44f24 <__alt_data_end+0xfffd2f24>
   45c78:	d9401017 	ldw	r5,64(sp)
   45c7c:	d9000f17 	ldw	r4,60(sp)
   45c80:	000d883a 	mov	r6,zero
   45c84:	01d00934 	movhi	r7,16420
   45c88:	004c9380 	call	4c938 <__muldf3>
   45c8c:	81000044 	addi	r4,r16,1
   45c90:	d8800f15 	stw	r2,60(sp)
   45c94:	d8c01015 	stw	r3,64(sp)
   45c98:	004d9cc0 	call	4d9cc <__floatsidf>
   45c9c:	d9800f17 	ldw	r6,60(sp)
   45ca0:	d9c01017 	ldw	r7,64(sp)
   45ca4:	1009883a 	mov	r4,r2
   45ca8:	180b883a 	mov	r5,r3
   45cac:	004c9380 	call	4c938 <__muldf3>
   45cb0:	01d00734 	movhi	r7,16412
   45cb4:	000d883a 	mov	r6,zero
   45cb8:	1009883a 	mov	r4,r2
   45cbc:	180b883a 	mov	r5,r3
   45cc0:	004b54c0 	call	4b54c <__adddf3>
   45cc4:	d9c00517 	ldw	r7,20(sp)
   45cc8:	047f3034 	movhi	r17,64704
   45ccc:	1021883a 	mov	r16,r2
   45cd0:	39ffffc4 	addi	r7,r7,-1
   45cd4:	d9c01315 	stw	r7,76(sp)
   45cd8:	1c63883a 	add	r17,r3,r17
   45cdc:	db000c17 	ldw	r12,48(sp)
   45ce0:	003bea06 	br	44c8c <__alt_data_end+0xfffd2c8c>
   45ce4:	dc000915 	stw	r16,36(sp)
   45ce8:	003e0e06 	br	45524 <__alt_data_end+0xfffd3524>
   45cec:	01000e44 	movi	r4,57
   45cf0:	8825883a 	mov	r18,r17
   45cf4:	9dc00044 	addi	r23,r19,1
   45cf8:	99000005 	stb	r4,0(r19)
   45cfc:	a023883a 	mov	r17,r20
   45d00:	dc000915 	stw	r16,36(sp)
   45d04:	003da406 	br	45398 <__alt_data_end+0xfffd3398>
   45d08:	d9801417 	ldw	r6,80(sp)
   45d0c:	d9c01517 	ldw	r7,84(sp)
   45d10:	0009883a 	mov	r4,zero
   45d14:	014ff834 	movhi	r5,16352
   45d18:	004d0500 	call	4d050 <__subdf3>
   45d1c:	880d883a 	mov	r6,r17
   45d20:	a00f883a 	mov	r7,r20
   45d24:	1009883a 	mov	r4,r2
   45d28:	180b883a 	mov	r5,r3
   45d2c:	004c7680 	call	4c768 <__gedf2>
   45d30:	00bc7c0e 	bge	zero,r2,44f24 <__alt_data_end+0xfffd2f24>
   45d34:	01000c04 	movi	r4,48
   45d38:	00000106 	br	45d40 <_dtoa_r+0x1580>
   45d3c:	102f883a 	mov	r23,r2
   45d40:	b8bfffc4 	addi	r2,r23,-1
   45d44:	10c00007 	ldb	r3,0(r2)
   45d48:	193ffc26 	beq	r3,r4,45d3c <__alt_data_end+0xfffd3d3c>
   45d4c:	d9801317 	ldw	r6,76(sp)
   45d50:	d9800515 	stw	r6,20(sp)
   45d54:	003c4406 	br	44e68 <__alt_data_end+0xfffd2e68>
   45d58:	d9801317 	ldw	r6,76(sp)
   45d5c:	d9800515 	stw	r6,20(sp)
   45d60:	003cea06 	br	4510c <__alt_data_end+0xfffd310c>
   45d64:	dd800f17 	ldw	r22,60(sp)
   45d68:	dcc01017 	ldw	r19,64(sp)
   45d6c:	dc801217 	ldw	r18,72(sp)
   45d70:	003c6c06 	br	44f24 <__alt_data_end+0xfffd2f24>
   45d74:	903e031e 	bne	r18,zero,45584 <__alt_data_end+0xfffd3584>
   45d78:	003ebb06 	br	45868 <__alt_data_end+0xfffd3868>
   45d7c:	103e6c1e 	bne	r2,zero,45730 <__alt_data_end+0xfffd3730>
   45d80:	4080004c 	andi	r2,r8,1
   45d84:	103e6a26 	beq	r2,zero,45730 <__alt_data_end+0xfffd3730>
   45d88:	003e6606 	br	45724 <__alt_data_end+0xfffd3724>
   45d8c:	d8c00317 	ldw	r3,12(sp)
   45d90:	00800084 	movi	r2,2
   45d94:	10c02916 	blt	r2,r3,45e3c <_dtoa_r+0x167c>
   45d98:	d9000c17 	ldw	r4,48(sp)
   45d9c:	003e8806 	br	457c0 <__alt_data_end+0xfffd37c0>
   45da0:	04000084 	movi	r16,2
   45da4:	003b9d06 	br	44c1c <__alt_data_end+0xfffd2c1c>
   45da8:	d9001317 	ldw	r4,76(sp)
   45dac:	d9000515 	stw	r4,20(sp)
   45db0:	003cd606 	br	4510c <__alt_data_end+0xfffd310c>
   45db4:	d8801317 	ldw	r2,76(sp)
   45db8:	d8800515 	stw	r2,20(sp)
   45dbc:	003c2a06 	br	44e68 <__alt_data_end+0xfffd2e68>
   45dc0:	d9800317 	ldw	r6,12(sp)
   45dc4:	00800084 	movi	r2,2
   45dc8:	11801516 	blt	r2,r6,45e20 <_dtoa_r+0x1660>
   45dcc:	d9c00c17 	ldw	r7,48(sp)
   45dd0:	d9c00615 	stw	r7,24(sp)
   45dd4:	003df706 	br	455b4 <__alt_data_end+0xfffd35b4>
   45dd8:	193d3926 	beq	r3,r4,452c0 <__alt_data_end+0xfffd32c0>
   45ddc:	00c00f04 	movi	r3,60
   45de0:	1885c83a 	sub	r2,r3,r2
   45de4:	003ddf06 	br	45564 <__alt_data_end+0xfffd3564>
   45de8:	e009883a 	mov	r4,fp
   45dec:	e0001115 	stw	zero,68(fp)
   45df0:	000b883a 	mov	r5,zero
   45df4:	00474cc0 	call	474cc <_Balloc>
   45df8:	d8800715 	stw	r2,28(sp)
   45dfc:	d8c00717 	ldw	r3,28(sp)
   45e00:	00bfffc4 	movi	r2,-1
   45e04:	01000044 	movi	r4,1
   45e08:	d8800c15 	stw	r2,48(sp)
   45e0c:	e0c01015 	stw	r3,64(fp)
   45e10:	d9000b15 	stw	r4,44(sp)
   45e14:	d8800615 	stw	r2,24(sp)
   45e18:	d8002215 	stw	zero,136(sp)
   45e1c:	003c4106 	br	44f24 <__alt_data_end+0xfffd2f24>
   45e20:	d8c00c17 	ldw	r3,48(sp)
   45e24:	d8c00615 	stw	r3,24(sp)
   45e28:	003e7006 	br	457ec <__alt_data_end+0xfffd37ec>
   45e2c:	04400044 	movi	r17,1
   45e30:	003b2006 	br	44ab4 <__alt_data_end+0xfffd2ab4>
   45e34:	000b883a 	mov	r5,zero
   45e38:	003b3d06 	br	44b30 <__alt_data_end+0xfffd2b30>
   45e3c:	d8800c17 	ldw	r2,48(sp)
   45e40:	d8800615 	stw	r2,24(sp)
   45e44:	003e6906 	br	457ec <__alt_data_end+0xfffd37ec>

00045e48 <__sflush_r>:
   45e48:	2880030b 	ldhu	r2,12(r5)
   45e4c:	defffb04 	addi	sp,sp,-20
   45e50:	dcc00315 	stw	r19,12(sp)
   45e54:	dc400115 	stw	r17,4(sp)
   45e58:	dfc00415 	stw	ra,16(sp)
   45e5c:	dc800215 	stw	r18,8(sp)
   45e60:	dc000015 	stw	r16,0(sp)
   45e64:	10c0020c 	andi	r3,r2,8
   45e68:	2823883a 	mov	r17,r5
   45e6c:	2027883a 	mov	r19,r4
   45e70:	1800311e 	bne	r3,zero,45f38 <__sflush_r+0xf0>
   45e74:	28c00117 	ldw	r3,4(r5)
   45e78:	10820014 	ori	r2,r2,2048
   45e7c:	2880030d 	sth	r2,12(r5)
   45e80:	00c04b0e 	bge	zero,r3,45fb0 <__sflush_r+0x168>
   45e84:	8a000a17 	ldw	r8,40(r17)
   45e88:	40002326 	beq	r8,zero,45f18 <__sflush_r+0xd0>
   45e8c:	9c000017 	ldw	r16,0(r19)
   45e90:	10c4000c 	andi	r3,r2,4096
   45e94:	98000015 	stw	zero,0(r19)
   45e98:	18004826 	beq	r3,zero,45fbc <__sflush_r+0x174>
   45e9c:	89801417 	ldw	r6,80(r17)
   45ea0:	10c0010c 	andi	r3,r2,4
   45ea4:	18000626 	beq	r3,zero,45ec0 <__sflush_r+0x78>
   45ea8:	88c00117 	ldw	r3,4(r17)
   45eac:	88800c17 	ldw	r2,48(r17)
   45eb0:	30cdc83a 	sub	r6,r6,r3
   45eb4:	10000226 	beq	r2,zero,45ec0 <__sflush_r+0x78>
   45eb8:	88800f17 	ldw	r2,60(r17)
   45ebc:	308dc83a 	sub	r6,r6,r2
   45ec0:	89400717 	ldw	r5,28(r17)
   45ec4:	000f883a 	mov	r7,zero
   45ec8:	9809883a 	mov	r4,r19
   45ecc:	403ee83a 	callr	r8
   45ed0:	00ffffc4 	movi	r3,-1
   45ed4:	10c04426 	beq	r2,r3,45fe8 <__sflush_r+0x1a0>
   45ed8:	88c0030b 	ldhu	r3,12(r17)
   45edc:	89000417 	ldw	r4,16(r17)
   45ee0:	88000115 	stw	zero,4(r17)
   45ee4:	197dffcc 	andi	r5,r3,63487
   45ee8:	8940030d 	sth	r5,12(r17)
   45eec:	89000015 	stw	r4,0(r17)
   45ef0:	18c4000c 	andi	r3,r3,4096
   45ef4:	18002c1e 	bne	r3,zero,45fa8 <__sflush_r+0x160>
   45ef8:	89400c17 	ldw	r5,48(r17)
   45efc:	9c000015 	stw	r16,0(r19)
   45f00:	28000526 	beq	r5,zero,45f18 <__sflush_r+0xd0>
   45f04:	88801004 	addi	r2,r17,64
   45f08:	28800226 	beq	r5,r2,45f14 <__sflush_r+0xcc>
   45f0c:	9809883a 	mov	r4,r19
   45f10:	00466600 	call	46660 <_free_r>
   45f14:	88000c15 	stw	zero,48(r17)
   45f18:	0005883a 	mov	r2,zero
   45f1c:	dfc00417 	ldw	ra,16(sp)
   45f20:	dcc00317 	ldw	r19,12(sp)
   45f24:	dc800217 	ldw	r18,8(sp)
   45f28:	dc400117 	ldw	r17,4(sp)
   45f2c:	dc000017 	ldw	r16,0(sp)
   45f30:	dec00504 	addi	sp,sp,20
   45f34:	f800283a 	ret
   45f38:	2c800417 	ldw	r18,16(r5)
   45f3c:	903ff626 	beq	r18,zero,45f18 <__alt_data_end+0xfffd3f18>
   45f40:	2c000017 	ldw	r16,0(r5)
   45f44:	108000cc 	andi	r2,r2,3
   45f48:	2c800015 	stw	r18,0(r5)
   45f4c:	84a1c83a 	sub	r16,r16,r18
   45f50:	1000131e 	bne	r2,zero,45fa0 <__sflush_r+0x158>
   45f54:	28800517 	ldw	r2,20(r5)
   45f58:	88800215 	stw	r2,8(r17)
   45f5c:	04000316 	blt	zero,r16,45f6c <__sflush_r+0x124>
   45f60:	003fed06 	br	45f18 <__alt_data_end+0xfffd3f18>
   45f64:	90a5883a 	add	r18,r18,r2
   45f68:	043feb0e 	bge	zero,r16,45f18 <__alt_data_end+0xfffd3f18>
   45f6c:	88800917 	ldw	r2,36(r17)
   45f70:	89400717 	ldw	r5,28(r17)
   45f74:	800f883a 	mov	r7,r16
   45f78:	900d883a 	mov	r6,r18
   45f7c:	9809883a 	mov	r4,r19
   45f80:	103ee83a 	callr	r2
   45f84:	80a1c83a 	sub	r16,r16,r2
   45f88:	00bff616 	blt	zero,r2,45f64 <__alt_data_end+0xfffd3f64>
   45f8c:	88c0030b 	ldhu	r3,12(r17)
   45f90:	00bfffc4 	movi	r2,-1
   45f94:	18c01014 	ori	r3,r3,64
   45f98:	88c0030d 	sth	r3,12(r17)
   45f9c:	003fdf06 	br	45f1c <__alt_data_end+0xfffd3f1c>
   45fa0:	0005883a 	mov	r2,zero
   45fa4:	003fec06 	br	45f58 <__alt_data_end+0xfffd3f58>
   45fa8:	88801415 	stw	r2,80(r17)
   45fac:	003fd206 	br	45ef8 <__alt_data_end+0xfffd3ef8>
   45fb0:	28c00f17 	ldw	r3,60(r5)
   45fb4:	00ffb316 	blt	zero,r3,45e84 <__alt_data_end+0xfffd3e84>
   45fb8:	003fd706 	br	45f18 <__alt_data_end+0xfffd3f18>
   45fbc:	89400717 	ldw	r5,28(r17)
   45fc0:	000d883a 	mov	r6,zero
   45fc4:	01c00044 	movi	r7,1
   45fc8:	9809883a 	mov	r4,r19
   45fcc:	403ee83a 	callr	r8
   45fd0:	100d883a 	mov	r6,r2
   45fd4:	00bfffc4 	movi	r2,-1
   45fd8:	30801426 	beq	r6,r2,4602c <__sflush_r+0x1e4>
   45fdc:	8880030b 	ldhu	r2,12(r17)
   45fe0:	8a000a17 	ldw	r8,40(r17)
   45fe4:	003fae06 	br	45ea0 <__alt_data_end+0xfffd3ea0>
   45fe8:	98c00017 	ldw	r3,0(r19)
   45fec:	183fba26 	beq	r3,zero,45ed8 <__alt_data_end+0xfffd3ed8>
   45ff0:	01000744 	movi	r4,29
   45ff4:	19000626 	beq	r3,r4,46010 <__sflush_r+0x1c8>
   45ff8:	01000584 	movi	r4,22
   45ffc:	19000426 	beq	r3,r4,46010 <__sflush_r+0x1c8>
   46000:	88c0030b 	ldhu	r3,12(r17)
   46004:	18c01014 	ori	r3,r3,64
   46008:	88c0030d 	sth	r3,12(r17)
   4600c:	003fc306 	br	45f1c <__alt_data_end+0xfffd3f1c>
   46010:	8880030b 	ldhu	r2,12(r17)
   46014:	88c00417 	ldw	r3,16(r17)
   46018:	88000115 	stw	zero,4(r17)
   4601c:	10bdffcc 	andi	r2,r2,63487
   46020:	8880030d 	sth	r2,12(r17)
   46024:	88c00015 	stw	r3,0(r17)
   46028:	003fb306 	br	45ef8 <__alt_data_end+0xfffd3ef8>
   4602c:	98800017 	ldw	r2,0(r19)
   46030:	103fea26 	beq	r2,zero,45fdc <__alt_data_end+0xfffd3fdc>
   46034:	00c00744 	movi	r3,29
   46038:	10c00226 	beq	r2,r3,46044 <__sflush_r+0x1fc>
   4603c:	00c00584 	movi	r3,22
   46040:	10c0031e 	bne	r2,r3,46050 <__sflush_r+0x208>
   46044:	9c000015 	stw	r16,0(r19)
   46048:	0005883a 	mov	r2,zero
   4604c:	003fb306 	br	45f1c <__alt_data_end+0xfffd3f1c>
   46050:	88c0030b 	ldhu	r3,12(r17)
   46054:	3005883a 	mov	r2,r6
   46058:	18c01014 	ori	r3,r3,64
   4605c:	88c0030d 	sth	r3,12(r17)
   46060:	003fae06 	br	45f1c <__alt_data_end+0xfffd3f1c>

00046064 <_fflush_r>:
   46064:	defffd04 	addi	sp,sp,-12
   46068:	dc000115 	stw	r16,4(sp)
   4606c:	dfc00215 	stw	ra,8(sp)
   46070:	2021883a 	mov	r16,r4
   46074:	20000226 	beq	r4,zero,46080 <_fflush_r+0x1c>
   46078:	20800e17 	ldw	r2,56(r4)
   4607c:	10000c26 	beq	r2,zero,460b0 <_fflush_r+0x4c>
   46080:	2880030f 	ldh	r2,12(r5)
   46084:	1000051e 	bne	r2,zero,4609c <_fflush_r+0x38>
   46088:	0005883a 	mov	r2,zero
   4608c:	dfc00217 	ldw	ra,8(sp)
   46090:	dc000117 	ldw	r16,4(sp)
   46094:	dec00304 	addi	sp,sp,12
   46098:	f800283a 	ret
   4609c:	8009883a 	mov	r4,r16
   460a0:	dfc00217 	ldw	ra,8(sp)
   460a4:	dc000117 	ldw	r16,4(sp)
   460a8:	dec00304 	addi	sp,sp,12
   460ac:	0045e481 	jmpi	45e48 <__sflush_r>
   460b0:	d9400015 	stw	r5,0(sp)
   460b4:	00464400 	call	46440 <__sinit>
   460b8:	d9400017 	ldw	r5,0(sp)
   460bc:	003ff006 	br	46080 <__alt_data_end+0xfffd4080>

000460c0 <fflush>:
   460c0:	20000526 	beq	r4,zero,460d8 <fflush+0x18>
   460c4:	00800174 	movhi	r2,5
   460c8:	108d6b04 	addi	r2,r2,13740
   460cc:	200b883a 	mov	r5,r4
   460d0:	11000017 	ldw	r4,0(r2)
   460d4:	00460641 	jmpi	46064 <_fflush_r>
   460d8:	00800174 	movhi	r2,5
   460dc:	108d6a04 	addi	r2,r2,13736
   460e0:	11000017 	ldw	r4,0(r2)
   460e4:	01400134 	movhi	r5,4
   460e8:	29581904 	addi	r5,r5,24676
   460ec:	0046ef01 	jmpi	46ef0 <_fwalk_reent>

000460f0 <__fp_unlock>:
   460f0:	0005883a 	mov	r2,zero
   460f4:	f800283a 	ret

000460f8 <_cleanup_r>:
   460f8:	01400174 	movhi	r5,5
   460fc:	29696a04 	addi	r5,r5,-23128
   46100:	0046ef01 	jmpi	46ef0 <_fwalk_reent>

00046104 <__sinit.part.1>:
   46104:	defff704 	addi	sp,sp,-36
   46108:	00c00134 	movhi	r3,4
   4610c:	dfc00815 	stw	ra,32(sp)
   46110:	ddc00715 	stw	r23,28(sp)
   46114:	dd800615 	stw	r22,24(sp)
   46118:	dd400515 	stw	r21,20(sp)
   4611c:	dd000415 	stw	r20,16(sp)
   46120:	dcc00315 	stw	r19,12(sp)
   46124:	dc800215 	stw	r18,8(sp)
   46128:	dc400115 	stw	r17,4(sp)
   4612c:	dc000015 	stw	r16,0(sp)
   46130:	18d83e04 	addi	r3,r3,24824
   46134:	24000117 	ldw	r16,4(r4)
   46138:	20c00f15 	stw	r3,60(r4)
   4613c:	2080bb04 	addi	r2,r4,748
   46140:	00c000c4 	movi	r3,3
   46144:	20c0b915 	stw	r3,740(r4)
   46148:	2080ba15 	stw	r2,744(r4)
   4614c:	2000b815 	stw	zero,736(r4)
   46150:	05c00204 	movi	r23,8
   46154:	00800104 	movi	r2,4
   46158:	2025883a 	mov	r18,r4
   4615c:	b80d883a 	mov	r6,r23
   46160:	81001704 	addi	r4,r16,92
   46164:	000b883a 	mov	r5,zero
   46168:	80000015 	stw	zero,0(r16)
   4616c:	80000115 	stw	zero,4(r16)
   46170:	80000215 	stw	zero,8(r16)
   46174:	8080030d 	sth	r2,12(r16)
   46178:	80001915 	stw	zero,100(r16)
   4617c:	8000038d 	sth	zero,14(r16)
   46180:	80000415 	stw	zero,16(r16)
   46184:	80000515 	stw	zero,20(r16)
   46188:	80000615 	stw	zero,24(r16)
   4618c:	00419e80 	call	419e8 <memset>
   46190:	05800134 	movhi	r22,4
   46194:	94400217 	ldw	r17,8(r18)
   46198:	05400134 	movhi	r21,4
   4619c:	05000134 	movhi	r20,4
   461a0:	04c00134 	movhi	r19,4
   461a4:	b587c504 	addi	r22,r22,7956
   461a8:	ad47dc04 	addi	r21,r21,8048
   461ac:	a507fb04 	addi	r20,r20,8172
   461b0:	9cc81204 	addi	r19,r19,8264
   461b4:	85800815 	stw	r22,32(r16)
   461b8:	85400915 	stw	r21,36(r16)
   461bc:	85000a15 	stw	r20,40(r16)
   461c0:	84c00b15 	stw	r19,44(r16)
   461c4:	84000715 	stw	r16,28(r16)
   461c8:	00800284 	movi	r2,10
   461cc:	8880030d 	sth	r2,12(r17)
   461d0:	00800044 	movi	r2,1
   461d4:	b80d883a 	mov	r6,r23
   461d8:	89001704 	addi	r4,r17,92
   461dc:	000b883a 	mov	r5,zero
   461e0:	88000015 	stw	zero,0(r17)
   461e4:	88000115 	stw	zero,4(r17)
   461e8:	88000215 	stw	zero,8(r17)
   461ec:	88001915 	stw	zero,100(r17)
   461f0:	8880038d 	sth	r2,14(r17)
   461f4:	88000415 	stw	zero,16(r17)
   461f8:	88000515 	stw	zero,20(r17)
   461fc:	88000615 	stw	zero,24(r17)
   46200:	00419e80 	call	419e8 <memset>
   46204:	94000317 	ldw	r16,12(r18)
   46208:	00800484 	movi	r2,18
   4620c:	8c400715 	stw	r17,28(r17)
   46210:	8d800815 	stw	r22,32(r17)
   46214:	8d400915 	stw	r21,36(r17)
   46218:	8d000a15 	stw	r20,40(r17)
   4621c:	8cc00b15 	stw	r19,44(r17)
   46220:	8080030d 	sth	r2,12(r16)
   46224:	00800084 	movi	r2,2
   46228:	80000015 	stw	zero,0(r16)
   4622c:	80000115 	stw	zero,4(r16)
   46230:	80000215 	stw	zero,8(r16)
   46234:	80001915 	stw	zero,100(r16)
   46238:	8080038d 	sth	r2,14(r16)
   4623c:	80000415 	stw	zero,16(r16)
   46240:	80000515 	stw	zero,20(r16)
   46244:	80000615 	stw	zero,24(r16)
   46248:	b80d883a 	mov	r6,r23
   4624c:	000b883a 	mov	r5,zero
   46250:	81001704 	addi	r4,r16,92
   46254:	00419e80 	call	419e8 <memset>
   46258:	00800044 	movi	r2,1
   4625c:	84000715 	stw	r16,28(r16)
   46260:	85800815 	stw	r22,32(r16)
   46264:	85400915 	stw	r21,36(r16)
   46268:	85000a15 	stw	r20,40(r16)
   4626c:	84c00b15 	stw	r19,44(r16)
   46270:	90800e15 	stw	r2,56(r18)
   46274:	dfc00817 	ldw	ra,32(sp)
   46278:	ddc00717 	ldw	r23,28(sp)
   4627c:	dd800617 	ldw	r22,24(sp)
   46280:	dd400517 	ldw	r21,20(sp)
   46284:	dd000417 	ldw	r20,16(sp)
   46288:	dcc00317 	ldw	r19,12(sp)
   4628c:	dc800217 	ldw	r18,8(sp)
   46290:	dc400117 	ldw	r17,4(sp)
   46294:	dc000017 	ldw	r16,0(sp)
   46298:	dec00904 	addi	sp,sp,36
   4629c:	f800283a 	ret

000462a0 <__fp_lock>:
   462a0:	0005883a 	mov	r2,zero
   462a4:	f800283a 	ret

000462a8 <__sfmoreglue>:
   462a8:	defffc04 	addi	sp,sp,-16
   462ac:	dc400115 	stw	r17,4(sp)
   462b0:	2c7fffc4 	addi	r17,r5,-1
   462b4:	8c401a24 	muli	r17,r17,104
   462b8:	dc800215 	stw	r18,8(sp)
   462bc:	2825883a 	mov	r18,r5
   462c0:	89401d04 	addi	r5,r17,116
   462c4:	dc000015 	stw	r16,0(sp)
   462c8:	dfc00315 	stw	ra,12(sp)
   462cc:	00411dc0 	call	411dc <_malloc_r>
   462d0:	1021883a 	mov	r16,r2
   462d4:	10000726 	beq	r2,zero,462f4 <__sfmoreglue+0x4c>
   462d8:	11000304 	addi	r4,r2,12
   462dc:	10000015 	stw	zero,0(r2)
   462e0:	14800115 	stw	r18,4(r2)
   462e4:	11000215 	stw	r4,8(r2)
   462e8:	89801a04 	addi	r6,r17,104
   462ec:	000b883a 	mov	r5,zero
   462f0:	00419e80 	call	419e8 <memset>
   462f4:	8005883a 	mov	r2,r16
   462f8:	dfc00317 	ldw	ra,12(sp)
   462fc:	dc800217 	ldw	r18,8(sp)
   46300:	dc400117 	ldw	r17,4(sp)
   46304:	dc000017 	ldw	r16,0(sp)
   46308:	dec00404 	addi	sp,sp,16
   4630c:	f800283a 	ret

00046310 <__sfp>:
   46310:	defffb04 	addi	sp,sp,-20
   46314:	dc000015 	stw	r16,0(sp)
   46318:	04000174 	movhi	r16,5
   4631c:	840d6a04 	addi	r16,r16,13736
   46320:	dcc00315 	stw	r19,12(sp)
   46324:	2027883a 	mov	r19,r4
   46328:	81000017 	ldw	r4,0(r16)
   4632c:	dfc00415 	stw	ra,16(sp)
   46330:	dc800215 	stw	r18,8(sp)
   46334:	20800e17 	ldw	r2,56(r4)
   46338:	dc400115 	stw	r17,4(sp)
   4633c:	1000021e 	bne	r2,zero,46348 <__sfp+0x38>
   46340:	00461040 	call	46104 <__sinit.part.1>
   46344:	81000017 	ldw	r4,0(r16)
   46348:	2480b804 	addi	r18,r4,736
   4634c:	047fffc4 	movi	r17,-1
   46350:	91000117 	ldw	r4,4(r18)
   46354:	94000217 	ldw	r16,8(r18)
   46358:	213fffc4 	addi	r4,r4,-1
   4635c:	20000a16 	blt	r4,zero,46388 <__sfp+0x78>
   46360:	8080030f 	ldh	r2,12(r16)
   46364:	10000c26 	beq	r2,zero,46398 <__sfp+0x88>
   46368:	80c01d04 	addi	r3,r16,116
   4636c:	00000206 	br	46378 <__sfp+0x68>
   46370:	18bfe60f 	ldh	r2,-104(r3)
   46374:	10000826 	beq	r2,zero,46398 <__sfp+0x88>
   46378:	213fffc4 	addi	r4,r4,-1
   4637c:	1c3ffd04 	addi	r16,r3,-12
   46380:	18c01a04 	addi	r3,r3,104
   46384:	247ffa1e 	bne	r4,r17,46370 <__alt_data_end+0xfffd4370>
   46388:	90800017 	ldw	r2,0(r18)
   4638c:	10001d26 	beq	r2,zero,46404 <__sfp+0xf4>
   46390:	1025883a 	mov	r18,r2
   46394:	003fee06 	br	46350 <__alt_data_end+0xfffd4350>
   46398:	00bfffc4 	movi	r2,-1
   4639c:	8080038d 	sth	r2,14(r16)
   463a0:	00800044 	movi	r2,1
   463a4:	8080030d 	sth	r2,12(r16)
   463a8:	80001915 	stw	zero,100(r16)
   463ac:	80000015 	stw	zero,0(r16)
   463b0:	80000215 	stw	zero,8(r16)
   463b4:	80000115 	stw	zero,4(r16)
   463b8:	80000415 	stw	zero,16(r16)
   463bc:	80000515 	stw	zero,20(r16)
   463c0:	80000615 	stw	zero,24(r16)
   463c4:	01800204 	movi	r6,8
   463c8:	000b883a 	mov	r5,zero
   463cc:	81001704 	addi	r4,r16,92
   463d0:	00419e80 	call	419e8 <memset>
   463d4:	8005883a 	mov	r2,r16
   463d8:	80000c15 	stw	zero,48(r16)
   463dc:	80000d15 	stw	zero,52(r16)
   463e0:	80001115 	stw	zero,68(r16)
   463e4:	80001215 	stw	zero,72(r16)
   463e8:	dfc00417 	ldw	ra,16(sp)
   463ec:	dcc00317 	ldw	r19,12(sp)
   463f0:	dc800217 	ldw	r18,8(sp)
   463f4:	dc400117 	ldw	r17,4(sp)
   463f8:	dc000017 	ldw	r16,0(sp)
   463fc:	dec00504 	addi	sp,sp,20
   46400:	f800283a 	ret
   46404:	01400104 	movi	r5,4
   46408:	9809883a 	mov	r4,r19
   4640c:	00462a80 	call	462a8 <__sfmoreglue>
   46410:	90800015 	stw	r2,0(r18)
   46414:	103fde1e 	bne	r2,zero,46390 <__alt_data_end+0xfffd4390>
   46418:	00800304 	movi	r2,12
   4641c:	98800015 	stw	r2,0(r19)
   46420:	0005883a 	mov	r2,zero
   46424:	003ff006 	br	463e8 <__alt_data_end+0xfffd43e8>

00046428 <_cleanup>:
   46428:	00800174 	movhi	r2,5
   4642c:	108d6a04 	addi	r2,r2,13736
   46430:	11000017 	ldw	r4,0(r2)
   46434:	01400174 	movhi	r5,5
   46438:	29696a04 	addi	r5,r5,-23128
   4643c:	0046ef01 	jmpi	46ef0 <_fwalk_reent>

00046440 <__sinit>:
   46440:	20800e17 	ldw	r2,56(r4)
   46444:	10000126 	beq	r2,zero,4644c <__sinit+0xc>
   46448:	f800283a 	ret
   4644c:	00461041 	jmpi	46104 <__sinit.part.1>

00046450 <__sfp_lock_acquire>:
   46450:	f800283a 	ret

00046454 <__sfp_lock_release>:
   46454:	f800283a 	ret

00046458 <__sinit_lock_acquire>:
   46458:	f800283a 	ret

0004645c <__sinit_lock_release>:
   4645c:	f800283a 	ret

00046460 <__fp_lock_all>:
   46460:	00800174 	movhi	r2,5
   46464:	108d6b04 	addi	r2,r2,13740
   46468:	11000017 	ldw	r4,0(r2)
   4646c:	01400134 	movhi	r5,4
   46470:	2958a804 	addi	r5,r5,25248
   46474:	0046e2c1 	jmpi	46e2c <_fwalk>

00046478 <__fp_unlock_all>:
   46478:	00800174 	movhi	r2,5
   4647c:	108d6b04 	addi	r2,r2,13740
   46480:	11000017 	ldw	r4,0(r2)
   46484:	01400134 	movhi	r5,4
   46488:	29583c04 	addi	r5,r5,24816
   4648c:	0046e2c1 	jmpi	46e2c <_fwalk>

00046490 <__sflags>:
   46490:	28800007 	ldb	r2,0(r5)
   46494:	00c01c84 	movi	r3,114
   46498:	10c02426 	beq	r2,r3,4652c <__sflags+0x9c>
   4649c:	00c01dc4 	movi	r3,119
   464a0:	10c01e26 	beq	r2,r3,4651c <__sflags+0x8c>
   464a4:	00c01844 	movi	r3,97
   464a8:	10c00426 	beq	r2,r3,464bc <__sflags+0x2c>
   464ac:	00800584 	movi	r2,22
   464b0:	20800015 	stw	r2,0(r4)
   464b4:	0005883a 	mov	r2,zero
   464b8:	f800283a 	ret
   464bc:	02c08204 	movi	r11,520
   464c0:	01000044 	movi	r4,1
   464c4:	00804204 	movi	r2,264
   464c8:	01c00ac4 	movi	r7,43
   464cc:	02bff8c4 	movi	r10,-29
   464d0:	027fff04 	movi	r9,-4
   464d4:	02001e04 	movi	r8,120
   464d8:	29400044 	addi	r5,r5,1
   464dc:	28c00007 	ldb	r3,0(r5)
   464e0:	18000626 	beq	r3,zero,464fc <__sflags+0x6c>
   464e4:	19c00826 	beq	r3,r7,46508 <__sflags+0x78>
   464e8:	1a3ffb1e 	bne	r3,r8,464d8 <__alt_data_end+0xfffd44d8>
   464ec:	29400044 	addi	r5,r5,1
   464f0:	28c00007 	ldb	r3,0(r5)
   464f4:	21020014 	ori	r4,r4,2048
   464f8:	183ffa1e 	bne	r3,zero,464e4 <__alt_data_end+0xfffd44e4>
   464fc:	22c8b03a 	or	r4,r4,r11
   46500:	31000015 	stw	r4,0(r6)
   46504:	f800283a 	ret
   46508:	1284703a 	and	r2,r2,r10
   4650c:	2248703a 	and	r4,r4,r9
   46510:	10800414 	ori	r2,r2,16
   46514:	21000094 	ori	r4,r4,2
   46518:	003fef06 	br	464d8 <__alt_data_end+0xfffd44d8>
   4651c:	02c18004 	movi	r11,1536
   46520:	01000044 	movi	r4,1
   46524:	00800204 	movi	r2,8
   46528:	003fe706 	br	464c8 <__alt_data_end+0xfffd44c8>
   4652c:	0017883a 	mov	r11,zero
   46530:	0009883a 	mov	r4,zero
   46534:	00800104 	movi	r2,4
   46538:	003fe306 	br	464c8 <__alt_data_end+0xfffd44c8>

0004653c <_malloc_trim_r>:
   4653c:	defffb04 	addi	sp,sp,-20
   46540:	dcc00315 	stw	r19,12(sp)
   46544:	04c00174 	movhi	r19,5
   46548:	dc800215 	stw	r18,8(sp)
   4654c:	dc400115 	stw	r17,4(sp)
   46550:	dc000015 	stw	r16,0(sp)
   46554:	dfc00415 	stw	ra,16(sp)
   46558:	2821883a 	mov	r16,r5
   4655c:	9cc78004 	addi	r19,r19,7680
   46560:	2025883a 	mov	r18,r4
   46564:	004e3d00 	call	4e3d0 <__malloc_lock>
   46568:	98800217 	ldw	r2,8(r19)
   4656c:	14400117 	ldw	r17,4(r2)
   46570:	00bfff04 	movi	r2,-4
   46574:	88a2703a 	and	r17,r17,r2
   46578:	8c21c83a 	sub	r16,r17,r16
   4657c:	8403fbc4 	addi	r16,r16,4079
   46580:	8020d33a 	srli	r16,r16,12
   46584:	0083ffc4 	movi	r2,4095
   46588:	843fffc4 	addi	r16,r16,-1
   4658c:	8020933a 	slli	r16,r16,12
   46590:	1400060e 	bge	r2,r16,465ac <_malloc_trim_r+0x70>
   46594:	000b883a 	mov	r5,zero
   46598:	9009883a 	mov	r4,r18
   4659c:	0041ec00 	call	41ec0 <_sbrk_r>
   465a0:	98c00217 	ldw	r3,8(r19)
   465a4:	1c47883a 	add	r3,r3,r17
   465a8:	10c00a26 	beq	r2,r3,465d4 <_malloc_trim_r+0x98>
   465ac:	9009883a 	mov	r4,r18
   465b0:	004e3f40 	call	4e3f4 <__malloc_unlock>
   465b4:	0005883a 	mov	r2,zero
   465b8:	dfc00417 	ldw	ra,16(sp)
   465bc:	dcc00317 	ldw	r19,12(sp)
   465c0:	dc800217 	ldw	r18,8(sp)
   465c4:	dc400117 	ldw	r17,4(sp)
   465c8:	dc000017 	ldw	r16,0(sp)
   465cc:	dec00504 	addi	sp,sp,20
   465d0:	f800283a 	ret
   465d4:	040bc83a 	sub	r5,zero,r16
   465d8:	9009883a 	mov	r4,r18
   465dc:	0041ec00 	call	41ec0 <_sbrk_r>
   465e0:	00ffffc4 	movi	r3,-1
   465e4:	10c00d26 	beq	r2,r3,4661c <_malloc_trim_r+0xe0>
   465e8:	00c00174 	movhi	r3,5
   465ec:	18d49104 	addi	r3,r3,21060
   465f0:	18800017 	ldw	r2,0(r3)
   465f4:	99000217 	ldw	r4,8(r19)
   465f8:	8c23c83a 	sub	r17,r17,r16
   465fc:	8c400054 	ori	r17,r17,1
   46600:	1421c83a 	sub	r16,r2,r16
   46604:	24400115 	stw	r17,4(r4)
   46608:	9009883a 	mov	r4,r18
   4660c:	1c000015 	stw	r16,0(r3)
   46610:	004e3f40 	call	4e3f4 <__malloc_unlock>
   46614:	00800044 	movi	r2,1
   46618:	003fe706 	br	465b8 <__alt_data_end+0xfffd45b8>
   4661c:	000b883a 	mov	r5,zero
   46620:	9009883a 	mov	r4,r18
   46624:	0041ec00 	call	41ec0 <_sbrk_r>
   46628:	99000217 	ldw	r4,8(r19)
   4662c:	014003c4 	movi	r5,15
   46630:	1107c83a 	sub	r3,r2,r4
   46634:	28ffdd0e 	bge	r5,r3,465ac <__alt_data_end+0xfffd45ac>
   46638:	01400174 	movhi	r5,5
   4663c:	294d6c04 	addi	r5,r5,13744
   46640:	29400017 	ldw	r5,0(r5)
   46644:	18c00054 	ori	r3,r3,1
   46648:	20c00115 	stw	r3,4(r4)
   4664c:	00c00174 	movhi	r3,5
   46650:	1145c83a 	sub	r2,r2,r5
   46654:	18d49104 	addi	r3,r3,21060
   46658:	18800015 	stw	r2,0(r3)
   4665c:	003fd306 	br	465ac <__alt_data_end+0xfffd45ac>

00046660 <_free_r>:
   46660:	28004126 	beq	r5,zero,46768 <_free_r+0x108>
   46664:	defffd04 	addi	sp,sp,-12
   46668:	dc400115 	stw	r17,4(sp)
   4666c:	dc000015 	stw	r16,0(sp)
   46670:	2023883a 	mov	r17,r4
   46674:	2821883a 	mov	r16,r5
   46678:	dfc00215 	stw	ra,8(sp)
   4667c:	004e3d00 	call	4e3d0 <__malloc_lock>
   46680:	81ffff17 	ldw	r7,-4(r16)
   46684:	00bfff84 	movi	r2,-2
   46688:	01000174 	movhi	r4,5
   4668c:	81bffe04 	addi	r6,r16,-8
   46690:	3884703a 	and	r2,r7,r2
   46694:	21078004 	addi	r4,r4,7680
   46698:	308b883a 	add	r5,r6,r2
   4669c:	2a400117 	ldw	r9,4(r5)
   466a0:	22000217 	ldw	r8,8(r4)
   466a4:	00ffff04 	movi	r3,-4
   466a8:	48c6703a 	and	r3,r9,r3
   466ac:	2a005726 	beq	r5,r8,4680c <_free_r+0x1ac>
   466b0:	28c00115 	stw	r3,4(r5)
   466b4:	39c0004c 	andi	r7,r7,1
   466b8:	3800091e 	bne	r7,zero,466e0 <_free_r+0x80>
   466bc:	823ffe17 	ldw	r8,-8(r16)
   466c0:	22400204 	addi	r9,r4,8
   466c4:	320dc83a 	sub	r6,r6,r8
   466c8:	31c00217 	ldw	r7,8(r6)
   466cc:	1205883a 	add	r2,r2,r8
   466d0:	3a406526 	beq	r7,r9,46868 <_free_r+0x208>
   466d4:	32000317 	ldw	r8,12(r6)
   466d8:	3a000315 	stw	r8,12(r7)
   466dc:	41c00215 	stw	r7,8(r8)
   466e0:	28cf883a 	add	r7,r5,r3
   466e4:	39c00117 	ldw	r7,4(r7)
   466e8:	39c0004c 	andi	r7,r7,1
   466ec:	38003a26 	beq	r7,zero,467d8 <_free_r+0x178>
   466f0:	10c00054 	ori	r3,r2,1
   466f4:	30c00115 	stw	r3,4(r6)
   466f8:	3087883a 	add	r3,r6,r2
   466fc:	18800015 	stw	r2,0(r3)
   46700:	00c07fc4 	movi	r3,511
   46704:	18801936 	bltu	r3,r2,4676c <_free_r+0x10c>
   46708:	1004d0fa 	srli	r2,r2,3
   4670c:	01c00044 	movi	r7,1
   46710:	21400117 	ldw	r5,4(r4)
   46714:	10c00044 	addi	r3,r2,1
   46718:	18c7883a 	add	r3,r3,r3
   4671c:	1005d0ba 	srai	r2,r2,2
   46720:	18c7883a 	add	r3,r3,r3
   46724:	18c7883a 	add	r3,r3,r3
   46728:	1907883a 	add	r3,r3,r4
   4672c:	3884983a 	sll	r2,r7,r2
   46730:	19c00017 	ldw	r7,0(r3)
   46734:	1a3ffe04 	addi	r8,r3,-8
   46738:	1144b03a 	or	r2,r2,r5
   4673c:	32000315 	stw	r8,12(r6)
   46740:	31c00215 	stw	r7,8(r6)
   46744:	20800115 	stw	r2,4(r4)
   46748:	19800015 	stw	r6,0(r3)
   4674c:	39800315 	stw	r6,12(r7)
   46750:	8809883a 	mov	r4,r17
   46754:	dfc00217 	ldw	ra,8(sp)
   46758:	dc400117 	ldw	r17,4(sp)
   4675c:	dc000017 	ldw	r16,0(sp)
   46760:	dec00304 	addi	sp,sp,12
   46764:	004e3f41 	jmpi	4e3f4 <__malloc_unlock>
   46768:	f800283a 	ret
   4676c:	100ad27a 	srli	r5,r2,9
   46770:	00c00104 	movi	r3,4
   46774:	19404a36 	bltu	r3,r5,468a0 <_free_r+0x240>
   46778:	100ad1ba 	srli	r5,r2,6
   4677c:	28c00e44 	addi	r3,r5,57
   46780:	18c7883a 	add	r3,r3,r3
   46784:	29400e04 	addi	r5,r5,56
   46788:	18c7883a 	add	r3,r3,r3
   4678c:	18c7883a 	add	r3,r3,r3
   46790:	1909883a 	add	r4,r3,r4
   46794:	20c00017 	ldw	r3,0(r4)
   46798:	01c00174 	movhi	r7,5
   4679c:	213ffe04 	addi	r4,r4,-8
   467a0:	39c78004 	addi	r7,r7,7680
   467a4:	20c04426 	beq	r4,r3,468b8 <_free_r+0x258>
   467a8:	01ffff04 	movi	r7,-4
   467ac:	19400117 	ldw	r5,4(r3)
   467b0:	29ca703a 	and	r5,r5,r7
   467b4:	1140022e 	bgeu	r2,r5,467c0 <_free_r+0x160>
   467b8:	18c00217 	ldw	r3,8(r3)
   467bc:	20fffb1e 	bne	r4,r3,467ac <__alt_data_end+0xfffd47ac>
   467c0:	19000317 	ldw	r4,12(r3)
   467c4:	31000315 	stw	r4,12(r6)
   467c8:	30c00215 	stw	r3,8(r6)
   467cc:	21800215 	stw	r6,8(r4)
   467d0:	19800315 	stw	r6,12(r3)
   467d4:	003fde06 	br	46750 <__alt_data_end+0xfffd4750>
   467d8:	29c00217 	ldw	r7,8(r5)
   467dc:	10c5883a 	add	r2,r2,r3
   467e0:	00c00174 	movhi	r3,5
   467e4:	18c78204 	addi	r3,r3,7688
   467e8:	38c03b26 	beq	r7,r3,468d8 <_free_r+0x278>
   467ec:	2a000317 	ldw	r8,12(r5)
   467f0:	11400054 	ori	r5,r2,1
   467f4:	3087883a 	add	r3,r6,r2
   467f8:	3a000315 	stw	r8,12(r7)
   467fc:	41c00215 	stw	r7,8(r8)
   46800:	31400115 	stw	r5,4(r6)
   46804:	18800015 	stw	r2,0(r3)
   46808:	003fbd06 	br	46700 <__alt_data_end+0xfffd4700>
   4680c:	39c0004c 	andi	r7,r7,1
   46810:	10c5883a 	add	r2,r2,r3
   46814:	3800071e 	bne	r7,zero,46834 <_free_r+0x1d4>
   46818:	81fffe17 	ldw	r7,-8(r16)
   4681c:	31cdc83a 	sub	r6,r6,r7
   46820:	30c00317 	ldw	r3,12(r6)
   46824:	31400217 	ldw	r5,8(r6)
   46828:	11c5883a 	add	r2,r2,r7
   4682c:	28c00315 	stw	r3,12(r5)
   46830:	19400215 	stw	r5,8(r3)
   46834:	10c00054 	ori	r3,r2,1
   46838:	30c00115 	stw	r3,4(r6)
   4683c:	00c00174 	movhi	r3,5
   46840:	18cd6d04 	addi	r3,r3,13748
   46844:	18c00017 	ldw	r3,0(r3)
   46848:	21800215 	stw	r6,8(r4)
   4684c:	10ffc036 	bltu	r2,r3,46750 <__alt_data_end+0xfffd4750>
   46850:	00800174 	movhi	r2,5
   46854:	10948604 	addi	r2,r2,21016
   46858:	11400017 	ldw	r5,0(r2)
   4685c:	8809883a 	mov	r4,r17
   46860:	004653c0 	call	4653c <_malloc_trim_r>
   46864:	003fba06 	br	46750 <__alt_data_end+0xfffd4750>
   46868:	28c9883a 	add	r4,r5,r3
   4686c:	21000117 	ldw	r4,4(r4)
   46870:	2100004c 	andi	r4,r4,1
   46874:	2000391e 	bne	r4,zero,4695c <_free_r+0x2fc>
   46878:	29c00217 	ldw	r7,8(r5)
   4687c:	29000317 	ldw	r4,12(r5)
   46880:	1885883a 	add	r2,r3,r2
   46884:	10c00054 	ori	r3,r2,1
   46888:	39000315 	stw	r4,12(r7)
   4688c:	21c00215 	stw	r7,8(r4)
   46890:	30c00115 	stw	r3,4(r6)
   46894:	308d883a 	add	r6,r6,r2
   46898:	30800015 	stw	r2,0(r6)
   4689c:	003fac06 	br	46750 <__alt_data_end+0xfffd4750>
   468a0:	00c00504 	movi	r3,20
   468a4:	19401536 	bltu	r3,r5,468fc <_free_r+0x29c>
   468a8:	28c01704 	addi	r3,r5,92
   468ac:	18c7883a 	add	r3,r3,r3
   468b0:	294016c4 	addi	r5,r5,91
   468b4:	003fb406 	br	46788 <__alt_data_end+0xfffd4788>
   468b8:	280bd0ba 	srai	r5,r5,2
   468bc:	00c00044 	movi	r3,1
   468c0:	38800117 	ldw	r2,4(r7)
   468c4:	194a983a 	sll	r5,r3,r5
   468c8:	2007883a 	mov	r3,r4
   468cc:	2884b03a 	or	r2,r5,r2
   468d0:	38800115 	stw	r2,4(r7)
   468d4:	003fbb06 	br	467c4 <__alt_data_end+0xfffd47c4>
   468d8:	21800515 	stw	r6,20(r4)
   468dc:	21800415 	stw	r6,16(r4)
   468e0:	10c00054 	ori	r3,r2,1
   468e4:	31c00315 	stw	r7,12(r6)
   468e8:	31c00215 	stw	r7,8(r6)
   468ec:	30c00115 	stw	r3,4(r6)
   468f0:	308d883a 	add	r6,r6,r2
   468f4:	30800015 	stw	r2,0(r6)
   468f8:	003f9506 	br	46750 <__alt_data_end+0xfffd4750>
   468fc:	00c01504 	movi	r3,84
   46900:	19400536 	bltu	r3,r5,46918 <_free_r+0x2b8>
   46904:	100ad33a 	srli	r5,r2,12
   46908:	28c01bc4 	addi	r3,r5,111
   4690c:	18c7883a 	add	r3,r3,r3
   46910:	29401b84 	addi	r5,r5,110
   46914:	003f9c06 	br	46788 <__alt_data_end+0xfffd4788>
   46918:	00c05504 	movi	r3,340
   4691c:	19400536 	bltu	r3,r5,46934 <_free_r+0x2d4>
   46920:	100ad3fa 	srli	r5,r2,15
   46924:	28c01e04 	addi	r3,r5,120
   46928:	18c7883a 	add	r3,r3,r3
   4692c:	29401dc4 	addi	r5,r5,119
   46930:	003f9506 	br	46788 <__alt_data_end+0xfffd4788>
   46934:	00c15504 	movi	r3,1364
   46938:	19400536 	bltu	r3,r5,46950 <_free_r+0x2f0>
   4693c:	100ad4ba 	srli	r5,r2,18
   46940:	28c01f44 	addi	r3,r5,125
   46944:	18c7883a 	add	r3,r3,r3
   46948:	29401f04 	addi	r5,r5,124
   4694c:	003f8e06 	br	46788 <__alt_data_end+0xfffd4788>
   46950:	00c03f84 	movi	r3,254
   46954:	01401f84 	movi	r5,126
   46958:	003f8b06 	br	46788 <__alt_data_end+0xfffd4788>
   4695c:	10c00054 	ori	r3,r2,1
   46960:	30c00115 	stw	r3,4(r6)
   46964:	308d883a 	add	r6,r6,r2
   46968:	30800015 	stw	r2,0(r6)
   4696c:	003f7806 	br	46750 <__alt_data_end+0xfffd4750>

00046970 <__sfvwrite_r>:
   46970:	30800217 	ldw	r2,8(r6)
   46974:	10006726 	beq	r2,zero,46b14 <__sfvwrite_r+0x1a4>
   46978:	28c0030b 	ldhu	r3,12(r5)
   4697c:	defff404 	addi	sp,sp,-48
   46980:	dd400715 	stw	r21,28(sp)
   46984:	dd000615 	stw	r20,24(sp)
   46988:	dc000215 	stw	r16,8(sp)
   4698c:	dfc00b15 	stw	ra,44(sp)
   46990:	df000a15 	stw	fp,40(sp)
   46994:	ddc00915 	stw	r23,36(sp)
   46998:	dd800815 	stw	r22,32(sp)
   4699c:	dcc00515 	stw	r19,20(sp)
   469a0:	dc800415 	stw	r18,16(sp)
   469a4:	dc400315 	stw	r17,12(sp)
   469a8:	1880020c 	andi	r2,r3,8
   469ac:	2821883a 	mov	r16,r5
   469b0:	202b883a 	mov	r21,r4
   469b4:	3029883a 	mov	r20,r6
   469b8:	10002726 	beq	r2,zero,46a58 <__sfvwrite_r+0xe8>
   469bc:	28800417 	ldw	r2,16(r5)
   469c0:	10002526 	beq	r2,zero,46a58 <__sfvwrite_r+0xe8>
   469c4:	1880008c 	andi	r2,r3,2
   469c8:	a4400017 	ldw	r17,0(r20)
   469cc:	10002a26 	beq	r2,zero,46a78 <__sfvwrite_r+0x108>
   469d0:	05a00034 	movhi	r22,32768
   469d4:	0027883a 	mov	r19,zero
   469d8:	0025883a 	mov	r18,zero
   469dc:	b5bf0004 	addi	r22,r22,-1024
   469e0:	980d883a 	mov	r6,r19
   469e4:	a809883a 	mov	r4,r21
   469e8:	90004626 	beq	r18,zero,46b04 <__sfvwrite_r+0x194>
   469ec:	900f883a 	mov	r7,r18
   469f0:	b480022e 	bgeu	r22,r18,469fc <__sfvwrite_r+0x8c>
   469f4:	01e00034 	movhi	r7,32768
   469f8:	39ff0004 	addi	r7,r7,-1024
   469fc:	80800917 	ldw	r2,36(r16)
   46a00:	81400717 	ldw	r5,28(r16)
   46a04:	103ee83a 	callr	r2
   46a08:	0080570e 	bge	zero,r2,46b68 <__sfvwrite_r+0x1f8>
   46a0c:	a0c00217 	ldw	r3,8(r20)
   46a10:	98a7883a 	add	r19,r19,r2
   46a14:	90a5c83a 	sub	r18,r18,r2
   46a18:	1885c83a 	sub	r2,r3,r2
   46a1c:	a0800215 	stw	r2,8(r20)
   46a20:	103fef1e 	bne	r2,zero,469e0 <__alt_data_end+0xfffd49e0>
   46a24:	0005883a 	mov	r2,zero
   46a28:	dfc00b17 	ldw	ra,44(sp)
   46a2c:	df000a17 	ldw	fp,40(sp)
   46a30:	ddc00917 	ldw	r23,36(sp)
   46a34:	dd800817 	ldw	r22,32(sp)
   46a38:	dd400717 	ldw	r21,28(sp)
   46a3c:	dd000617 	ldw	r20,24(sp)
   46a40:	dcc00517 	ldw	r19,20(sp)
   46a44:	dc800417 	ldw	r18,16(sp)
   46a48:	dc400317 	ldw	r17,12(sp)
   46a4c:	dc000217 	ldw	r16,8(sp)
   46a50:	dec00c04 	addi	sp,sp,48
   46a54:	f800283a 	ret
   46a58:	800b883a 	mov	r5,r16
   46a5c:	a809883a 	mov	r4,r21
   46a60:	00444180 	call	44418 <__swsetup_r>
   46a64:	1000eb1e 	bne	r2,zero,46e14 <__sfvwrite_r+0x4a4>
   46a68:	80c0030b 	ldhu	r3,12(r16)
   46a6c:	a4400017 	ldw	r17,0(r20)
   46a70:	1880008c 	andi	r2,r3,2
   46a74:	103fd61e 	bne	r2,zero,469d0 <__alt_data_end+0xfffd49d0>
   46a78:	1880004c 	andi	r2,r3,1
   46a7c:	10003f1e 	bne	r2,zero,46b7c <__sfvwrite_r+0x20c>
   46a80:	0039883a 	mov	fp,zero
   46a84:	0025883a 	mov	r18,zero
   46a88:	90001a26 	beq	r18,zero,46af4 <__sfvwrite_r+0x184>
   46a8c:	1880800c 	andi	r2,r3,512
   46a90:	84c00217 	ldw	r19,8(r16)
   46a94:	10002126 	beq	r2,zero,46b1c <__sfvwrite_r+0x1ac>
   46a98:	982f883a 	mov	r23,r19
   46a9c:	94c09336 	bltu	r18,r19,46cec <__sfvwrite_r+0x37c>
   46aa0:	1881200c 	andi	r2,r3,1152
   46aa4:	10009e1e 	bne	r2,zero,46d20 <__sfvwrite_r+0x3b0>
   46aa8:	81000017 	ldw	r4,0(r16)
   46aac:	b80d883a 	mov	r6,r23
   46ab0:	e00b883a 	mov	r5,fp
   46ab4:	00473700 	call	47370 <memmove>
   46ab8:	80c00217 	ldw	r3,8(r16)
   46abc:	81000017 	ldw	r4,0(r16)
   46ac0:	9005883a 	mov	r2,r18
   46ac4:	1ce7c83a 	sub	r19,r3,r19
   46ac8:	25cf883a 	add	r7,r4,r23
   46acc:	84c00215 	stw	r19,8(r16)
   46ad0:	81c00015 	stw	r7,0(r16)
   46ad4:	a0c00217 	ldw	r3,8(r20)
   46ad8:	e0b9883a 	add	fp,fp,r2
   46adc:	90a5c83a 	sub	r18,r18,r2
   46ae0:	18a7c83a 	sub	r19,r3,r2
   46ae4:	a4c00215 	stw	r19,8(r20)
   46ae8:	983fce26 	beq	r19,zero,46a24 <__alt_data_end+0xfffd4a24>
   46aec:	80c0030b 	ldhu	r3,12(r16)
   46af0:	903fe61e 	bne	r18,zero,46a8c <__alt_data_end+0xfffd4a8c>
   46af4:	8f000017 	ldw	fp,0(r17)
   46af8:	8c800117 	ldw	r18,4(r17)
   46afc:	8c400204 	addi	r17,r17,8
   46b00:	003fe106 	br	46a88 <__alt_data_end+0xfffd4a88>
   46b04:	8cc00017 	ldw	r19,0(r17)
   46b08:	8c800117 	ldw	r18,4(r17)
   46b0c:	8c400204 	addi	r17,r17,8
   46b10:	003fb306 	br	469e0 <__alt_data_end+0xfffd49e0>
   46b14:	0005883a 	mov	r2,zero
   46b18:	f800283a 	ret
   46b1c:	81000017 	ldw	r4,0(r16)
   46b20:	80800417 	ldw	r2,16(r16)
   46b24:	11005736 	bltu	r2,r4,46c84 <__sfvwrite_r+0x314>
   46b28:	85c00517 	ldw	r23,20(r16)
   46b2c:	95c05536 	bltu	r18,r23,46c84 <__sfvwrite_r+0x314>
   46b30:	00a00034 	movhi	r2,32768
   46b34:	10bfffc4 	addi	r2,r2,-1
   46b38:	9009883a 	mov	r4,r18
   46b3c:	1480012e 	bgeu	r2,r18,46b44 <__sfvwrite_r+0x1d4>
   46b40:	1009883a 	mov	r4,r2
   46b44:	b80b883a 	mov	r5,r23
   46b48:	00408380 	call	40838 <__divsi3>
   46b4c:	15cf383a 	mul	r7,r2,r23
   46b50:	81400717 	ldw	r5,28(r16)
   46b54:	80800917 	ldw	r2,36(r16)
   46b58:	e00d883a 	mov	r6,fp
   46b5c:	a809883a 	mov	r4,r21
   46b60:	103ee83a 	callr	r2
   46b64:	00bfdb16 	blt	zero,r2,46ad4 <__alt_data_end+0xfffd4ad4>
   46b68:	8080030b 	ldhu	r2,12(r16)
   46b6c:	10801014 	ori	r2,r2,64
   46b70:	8080030d 	sth	r2,12(r16)
   46b74:	00bfffc4 	movi	r2,-1
   46b78:	003fab06 	br	46a28 <__alt_data_end+0xfffd4a28>
   46b7c:	0027883a 	mov	r19,zero
   46b80:	0011883a 	mov	r8,zero
   46b84:	0039883a 	mov	fp,zero
   46b88:	0025883a 	mov	r18,zero
   46b8c:	90001f26 	beq	r18,zero,46c0c <__sfvwrite_r+0x29c>
   46b90:	40005a26 	beq	r8,zero,46cfc <__sfvwrite_r+0x38c>
   46b94:	982d883a 	mov	r22,r19
   46b98:	94c0012e 	bgeu	r18,r19,46ba0 <__sfvwrite_r+0x230>
   46b9c:	902d883a 	mov	r22,r18
   46ba0:	81000017 	ldw	r4,0(r16)
   46ba4:	80800417 	ldw	r2,16(r16)
   46ba8:	b02f883a 	mov	r23,r22
   46bac:	81c00517 	ldw	r7,20(r16)
   46bb0:	1100032e 	bgeu	r2,r4,46bc0 <__sfvwrite_r+0x250>
   46bb4:	80c00217 	ldw	r3,8(r16)
   46bb8:	38c7883a 	add	r3,r7,r3
   46bbc:	1d801816 	blt	r3,r22,46c20 <__sfvwrite_r+0x2b0>
   46bc0:	b1c03e16 	blt	r22,r7,46cbc <__sfvwrite_r+0x34c>
   46bc4:	80800917 	ldw	r2,36(r16)
   46bc8:	81400717 	ldw	r5,28(r16)
   46bcc:	e00d883a 	mov	r6,fp
   46bd0:	da000115 	stw	r8,4(sp)
   46bd4:	a809883a 	mov	r4,r21
   46bd8:	103ee83a 	callr	r2
   46bdc:	102f883a 	mov	r23,r2
   46be0:	da000117 	ldw	r8,4(sp)
   46be4:	00bfe00e 	bge	zero,r2,46b68 <__alt_data_end+0xfffd4b68>
   46be8:	9de7c83a 	sub	r19,r19,r23
   46bec:	98001f26 	beq	r19,zero,46c6c <__sfvwrite_r+0x2fc>
   46bf0:	a0800217 	ldw	r2,8(r20)
   46bf4:	e5f9883a 	add	fp,fp,r23
   46bf8:	95e5c83a 	sub	r18,r18,r23
   46bfc:	15efc83a 	sub	r23,r2,r23
   46c00:	a5c00215 	stw	r23,8(r20)
   46c04:	b83f8726 	beq	r23,zero,46a24 <__alt_data_end+0xfffd4a24>
   46c08:	903fe11e 	bne	r18,zero,46b90 <__alt_data_end+0xfffd4b90>
   46c0c:	8f000017 	ldw	fp,0(r17)
   46c10:	8c800117 	ldw	r18,4(r17)
   46c14:	0011883a 	mov	r8,zero
   46c18:	8c400204 	addi	r17,r17,8
   46c1c:	003fdb06 	br	46b8c <__alt_data_end+0xfffd4b8c>
   46c20:	180d883a 	mov	r6,r3
   46c24:	e00b883a 	mov	r5,fp
   46c28:	da000115 	stw	r8,4(sp)
   46c2c:	d8c00015 	stw	r3,0(sp)
   46c30:	00473700 	call	47370 <memmove>
   46c34:	d8c00017 	ldw	r3,0(sp)
   46c38:	80800017 	ldw	r2,0(r16)
   46c3c:	800b883a 	mov	r5,r16
   46c40:	a809883a 	mov	r4,r21
   46c44:	10c5883a 	add	r2,r2,r3
   46c48:	80800015 	stw	r2,0(r16)
   46c4c:	d8c00015 	stw	r3,0(sp)
   46c50:	00460640 	call	46064 <_fflush_r>
   46c54:	d8c00017 	ldw	r3,0(sp)
   46c58:	da000117 	ldw	r8,4(sp)
   46c5c:	103fc21e 	bne	r2,zero,46b68 <__alt_data_end+0xfffd4b68>
   46c60:	182f883a 	mov	r23,r3
   46c64:	9de7c83a 	sub	r19,r19,r23
   46c68:	983fe11e 	bne	r19,zero,46bf0 <__alt_data_end+0xfffd4bf0>
   46c6c:	800b883a 	mov	r5,r16
   46c70:	a809883a 	mov	r4,r21
   46c74:	00460640 	call	46064 <_fflush_r>
   46c78:	103fbb1e 	bne	r2,zero,46b68 <__alt_data_end+0xfffd4b68>
   46c7c:	0011883a 	mov	r8,zero
   46c80:	003fdb06 	br	46bf0 <__alt_data_end+0xfffd4bf0>
   46c84:	94c0012e 	bgeu	r18,r19,46c8c <__sfvwrite_r+0x31c>
   46c88:	9027883a 	mov	r19,r18
   46c8c:	980d883a 	mov	r6,r19
   46c90:	e00b883a 	mov	r5,fp
   46c94:	00473700 	call	47370 <memmove>
   46c98:	80800217 	ldw	r2,8(r16)
   46c9c:	80c00017 	ldw	r3,0(r16)
   46ca0:	14c5c83a 	sub	r2,r2,r19
   46ca4:	1cc7883a 	add	r3,r3,r19
   46ca8:	80800215 	stw	r2,8(r16)
   46cac:	80c00015 	stw	r3,0(r16)
   46cb0:	10004326 	beq	r2,zero,46dc0 <__sfvwrite_r+0x450>
   46cb4:	9805883a 	mov	r2,r19
   46cb8:	003f8606 	br	46ad4 <__alt_data_end+0xfffd4ad4>
   46cbc:	b00d883a 	mov	r6,r22
   46cc0:	e00b883a 	mov	r5,fp
   46cc4:	da000115 	stw	r8,4(sp)
   46cc8:	00473700 	call	47370 <memmove>
   46ccc:	80800217 	ldw	r2,8(r16)
   46cd0:	80c00017 	ldw	r3,0(r16)
   46cd4:	da000117 	ldw	r8,4(sp)
   46cd8:	1585c83a 	sub	r2,r2,r22
   46cdc:	1dad883a 	add	r22,r3,r22
   46ce0:	80800215 	stw	r2,8(r16)
   46ce4:	85800015 	stw	r22,0(r16)
   46ce8:	003fbf06 	br	46be8 <__alt_data_end+0xfffd4be8>
   46cec:	81000017 	ldw	r4,0(r16)
   46cf0:	9027883a 	mov	r19,r18
   46cf4:	902f883a 	mov	r23,r18
   46cf8:	003f6c06 	br	46aac <__alt_data_end+0xfffd4aac>
   46cfc:	900d883a 	mov	r6,r18
   46d00:	01400284 	movi	r5,10
   46d04:	e009883a 	mov	r4,fp
   46d08:	00471440 	call	47144 <memchr>
   46d0c:	10003e26 	beq	r2,zero,46e08 <__sfvwrite_r+0x498>
   46d10:	10800044 	addi	r2,r2,1
   46d14:	1727c83a 	sub	r19,r2,fp
   46d18:	02000044 	movi	r8,1
   46d1c:	003f9d06 	br	46b94 <__alt_data_end+0xfffd4b94>
   46d20:	80800517 	ldw	r2,20(r16)
   46d24:	81400417 	ldw	r5,16(r16)
   46d28:	81c00017 	ldw	r7,0(r16)
   46d2c:	10a7883a 	add	r19,r2,r2
   46d30:	9885883a 	add	r2,r19,r2
   46d34:	1026d7fa 	srli	r19,r2,31
   46d38:	396dc83a 	sub	r22,r7,r5
   46d3c:	b1000044 	addi	r4,r22,1
   46d40:	9885883a 	add	r2,r19,r2
   46d44:	1027d07a 	srai	r19,r2,1
   46d48:	2485883a 	add	r2,r4,r18
   46d4c:	980d883a 	mov	r6,r19
   46d50:	9880022e 	bgeu	r19,r2,46d5c <__sfvwrite_r+0x3ec>
   46d54:	1027883a 	mov	r19,r2
   46d58:	100d883a 	mov	r6,r2
   46d5c:	18c1000c 	andi	r3,r3,1024
   46d60:	18001c26 	beq	r3,zero,46dd4 <__sfvwrite_r+0x464>
   46d64:	300b883a 	mov	r5,r6
   46d68:	a809883a 	mov	r4,r21
   46d6c:	00411dc0 	call	411dc <_malloc_r>
   46d70:	102f883a 	mov	r23,r2
   46d74:	10002926 	beq	r2,zero,46e1c <__sfvwrite_r+0x4ac>
   46d78:	81400417 	ldw	r5,16(r16)
   46d7c:	b00d883a 	mov	r6,r22
   46d80:	1009883a 	mov	r4,r2
   46d84:	00472280 	call	47228 <memcpy>
   46d88:	8080030b 	ldhu	r2,12(r16)
   46d8c:	00fedfc4 	movi	r3,-1153
   46d90:	10c4703a 	and	r2,r2,r3
   46d94:	10802014 	ori	r2,r2,128
   46d98:	8080030d 	sth	r2,12(r16)
   46d9c:	bd89883a 	add	r4,r23,r22
   46da0:	9d8fc83a 	sub	r7,r19,r22
   46da4:	85c00415 	stw	r23,16(r16)
   46da8:	84c00515 	stw	r19,20(r16)
   46dac:	81000015 	stw	r4,0(r16)
   46db0:	9027883a 	mov	r19,r18
   46db4:	81c00215 	stw	r7,8(r16)
   46db8:	902f883a 	mov	r23,r18
   46dbc:	003f3b06 	br	46aac <__alt_data_end+0xfffd4aac>
   46dc0:	800b883a 	mov	r5,r16
   46dc4:	a809883a 	mov	r4,r21
   46dc8:	00460640 	call	46064 <_fflush_r>
   46dcc:	103fb926 	beq	r2,zero,46cb4 <__alt_data_end+0xfffd4cb4>
   46dd0:	003f6506 	br	46b68 <__alt_data_end+0xfffd4b68>
   46dd4:	a809883a 	mov	r4,r21
   46dd8:	00486900 	call	48690 <_realloc_r>
   46ddc:	102f883a 	mov	r23,r2
   46de0:	103fee1e 	bne	r2,zero,46d9c <__alt_data_end+0xfffd4d9c>
   46de4:	81400417 	ldw	r5,16(r16)
   46de8:	a809883a 	mov	r4,r21
   46dec:	00466600 	call	46660 <_free_r>
   46df0:	8080030b 	ldhu	r2,12(r16)
   46df4:	00ffdfc4 	movi	r3,-129
   46df8:	1884703a 	and	r2,r3,r2
   46dfc:	00c00304 	movi	r3,12
   46e00:	a8c00015 	stw	r3,0(r21)
   46e04:	003f5906 	br	46b6c <__alt_data_end+0xfffd4b6c>
   46e08:	94c00044 	addi	r19,r18,1
   46e0c:	02000044 	movi	r8,1
   46e10:	003f6006 	br	46b94 <__alt_data_end+0xfffd4b94>
   46e14:	00bfffc4 	movi	r2,-1
   46e18:	003f0306 	br	46a28 <__alt_data_end+0xfffd4a28>
   46e1c:	00800304 	movi	r2,12
   46e20:	a8800015 	stw	r2,0(r21)
   46e24:	8080030b 	ldhu	r2,12(r16)
   46e28:	003f5006 	br	46b6c <__alt_data_end+0xfffd4b6c>

00046e2c <_fwalk>:
   46e2c:	defff704 	addi	sp,sp,-36
   46e30:	dd000415 	stw	r20,16(sp)
   46e34:	dfc00815 	stw	ra,32(sp)
   46e38:	ddc00715 	stw	r23,28(sp)
   46e3c:	dd800615 	stw	r22,24(sp)
   46e40:	dd400515 	stw	r21,20(sp)
   46e44:	dcc00315 	stw	r19,12(sp)
   46e48:	dc800215 	stw	r18,8(sp)
   46e4c:	dc400115 	stw	r17,4(sp)
   46e50:	dc000015 	stw	r16,0(sp)
   46e54:	2500b804 	addi	r20,r4,736
   46e58:	a0002326 	beq	r20,zero,46ee8 <_fwalk+0xbc>
   46e5c:	282b883a 	mov	r21,r5
   46e60:	002f883a 	mov	r23,zero
   46e64:	05800044 	movi	r22,1
   46e68:	04ffffc4 	movi	r19,-1
   46e6c:	a4400117 	ldw	r17,4(r20)
   46e70:	a4800217 	ldw	r18,8(r20)
   46e74:	8c7fffc4 	addi	r17,r17,-1
   46e78:	88000d16 	blt	r17,zero,46eb0 <_fwalk+0x84>
   46e7c:	94000304 	addi	r16,r18,12
   46e80:	94800384 	addi	r18,r18,14
   46e84:	8080000b 	ldhu	r2,0(r16)
   46e88:	8c7fffc4 	addi	r17,r17,-1
   46e8c:	813ffd04 	addi	r4,r16,-12
   46e90:	b080042e 	bgeu	r22,r2,46ea4 <_fwalk+0x78>
   46e94:	9080000f 	ldh	r2,0(r18)
   46e98:	14c00226 	beq	r2,r19,46ea4 <_fwalk+0x78>
   46e9c:	a83ee83a 	callr	r21
   46ea0:	b8aeb03a 	or	r23,r23,r2
   46ea4:	84001a04 	addi	r16,r16,104
   46ea8:	94801a04 	addi	r18,r18,104
   46eac:	8cfff51e 	bne	r17,r19,46e84 <__alt_data_end+0xfffd4e84>
   46eb0:	a5000017 	ldw	r20,0(r20)
   46eb4:	a03fed1e 	bne	r20,zero,46e6c <__alt_data_end+0xfffd4e6c>
   46eb8:	b805883a 	mov	r2,r23
   46ebc:	dfc00817 	ldw	ra,32(sp)
   46ec0:	ddc00717 	ldw	r23,28(sp)
   46ec4:	dd800617 	ldw	r22,24(sp)
   46ec8:	dd400517 	ldw	r21,20(sp)
   46ecc:	dd000417 	ldw	r20,16(sp)
   46ed0:	dcc00317 	ldw	r19,12(sp)
   46ed4:	dc800217 	ldw	r18,8(sp)
   46ed8:	dc400117 	ldw	r17,4(sp)
   46edc:	dc000017 	ldw	r16,0(sp)
   46ee0:	dec00904 	addi	sp,sp,36
   46ee4:	f800283a 	ret
   46ee8:	002f883a 	mov	r23,zero
   46eec:	003ff206 	br	46eb8 <__alt_data_end+0xfffd4eb8>

00046ef0 <_fwalk_reent>:
   46ef0:	defff704 	addi	sp,sp,-36
   46ef4:	dd000415 	stw	r20,16(sp)
   46ef8:	dfc00815 	stw	ra,32(sp)
   46efc:	ddc00715 	stw	r23,28(sp)
   46f00:	dd800615 	stw	r22,24(sp)
   46f04:	dd400515 	stw	r21,20(sp)
   46f08:	dcc00315 	stw	r19,12(sp)
   46f0c:	dc800215 	stw	r18,8(sp)
   46f10:	dc400115 	stw	r17,4(sp)
   46f14:	dc000015 	stw	r16,0(sp)
   46f18:	2500b804 	addi	r20,r4,736
   46f1c:	a0002326 	beq	r20,zero,46fac <_fwalk_reent+0xbc>
   46f20:	282b883a 	mov	r21,r5
   46f24:	2027883a 	mov	r19,r4
   46f28:	002f883a 	mov	r23,zero
   46f2c:	05800044 	movi	r22,1
   46f30:	04bfffc4 	movi	r18,-1
   46f34:	a4400117 	ldw	r17,4(r20)
   46f38:	a4000217 	ldw	r16,8(r20)
   46f3c:	8c7fffc4 	addi	r17,r17,-1
   46f40:	88000c16 	blt	r17,zero,46f74 <_fwalk_reent+0x84>
   46f44:	84000304 	addi	r16,r16,12
   46f48:	8080000b 	ldhu	r2,0(r16)
   46f4c:	8c7fffc4 	addi	r17,r17,-1
   46f50:	817ffd04 	addi	r5,r16,-12
   46f54:	b080052e 	bgeu	r22,r2,46f6c <_fwalk_reent+0x7c>
   46f58:	8080008f 	ldh	r2,2(r16)
   46f5c:	9809883a 	mov	r4,r19
   46f60:	14800226 	beq	r2,r18,46f6c <_fwalk_reent+0x7c>
   46f64:	a83ee83a 	callr	r21
   46f68:	b8aeb03a 	or	r23,r23,r2
   46f6c:	84001a04 	addi	r16,r16,104
   46f70:	8cbff51e 	bne	r17,r18,46f48 <__alt_data_end+0xfffd4f48>
   46f74:	a5000017 	ldw	r20,0(r20)
   46f78:	a03fee1e 	bne	r20,zero,46f34 <__alt_data_end+0xfffd4f34>
   46f7c:	b805883a 	mov	r2,r23
   46f80:	dfc00817 	ldw	ra,32(sp)
   46f84:	ddc00717 	ldw	r23,28(sp)
   46f88:	dd800617 	ldw	r22,24(sp)
   46f8c:	dd400517 	ldw	r21,20(sp)
   46f90:	dd000417 	ldw	r20,16(sp)
   46f94:	dcc00317 	ldw	r19,12(sp)
   46f98:	dc800217 	ldw	r18,8(sp)
   46f9c:	dc400117 	ldw	r17,4(sp)
   46fa0:	dc000017 	ldw	r16,0(sp)
   46fa4:	dec00904 	addi	sp,sp,36
   46fa8:	f800283a 	ret
   46fac:	002f883a 	mov	r23,zero
   46fb0:	003ff206 	br	46f7c <__alt_data_end+0xfffd4f7c>

00046fb4 <_isatty_r>:
   46fb4:	defffd04 	addi	sp,sp,-12
   46fb8:	dc000015 	stw	r16,0(sp)
   46fbc:	04000174 	movhi	r16,5
   46fc0:	dc400115 	stw	r17,4(sp)
   46fc4:	84148304 	addi	r16,r16,21004
   46fc8:	2023883a 	mov	r17,r4
   46fcc:	2809883a 	mov	r4,r5
   46fd0:	dfc00215 	stw	ra,8(sp)
   46fd4:	80000015 	stw	zero,0(r16)
   46fd8:	004e0b40 	call	4e0b4 <isatty>
   46fdc:	00ffffc4 	movi	r3,-1
   46fe0:	10c00526 	beq	r2,r3,46ff8 <_isatty_r+0x44>
   46fe4:	dfc00217 	ldw	ra,8(sp)
   46fe8:	dc400117 	ldw	r17,4(sp)
   46fec:	dc000017 	ldw	r16,0(sp)
   46ff0:	dec00304 	addi	sp,sp,12
   46ff4:	f800283a 	ret
   46ff8:	80c00017 	ldw	r3,0(r16)
   46ffc:	183ff926 	beq	r3,zero,46fe4 <__alt_data_end+0xfffd4fe4>
   47000:	88c00015 	stw	r3,0(r17)
   47004:	003ff706 	br	46fe4 <__alt_data_end+0xfffd4fe4>

00047008 <_setlocale_r>:
   47008:	30001b26 	beq	r6,zero,47078 <_setlocale_r+0x70>
   4700c:	01400174 	movhi	r5,5
   47010:	defffe04 	addi	sp,sp,-8
   47014:	29453304 	addi	r5,r5,5324
   47018:	3009883a 	mov	r4,r6
   4701c:	dc000015 	stw	r16,0(sp)
   47020:	dfc00115 	stw	ra,4(sp)
   47024:	3021883a 	mov	r16,r6
   47028:	0048c680 	call	48c68 <strcmp>
   4702c:	1000061e 	bne	r2,zero,47048 <_setlocale_r+0x40>
   47030:	00800174 	movhi	r2,5
   47034:	10851404 	addi	r2,r2,5200
   47038:	dfc00117 	ldw	ra,4(sp)
   4703c:	dc000017 	ldw	r16,0(sp)
   47040:	dec00204 	addi	sp,sp,8
   47044:	f800283a 	ret
   47048:	01400174 	movhi	r5,5
   4704c:	29451404 	addi	r5,r5,5200
   47050:	8009883a 	mov	r4,r16
   47054:	0048c680 	call	48c68 <strcmp>
   47058:	103ff526 	beq	r2,zero,47030 <__alt_data_end+0xfffd5030>
   4705c:	01400174 	movhi	r5,5
   47060:	29451e04 	addi	r5,r5,5240
   47064:	8009883a 	mov	r4,r16
   47068:	0048c680 	call	48c68 <strcmp>
   4706c:	103ff026 	beq	r2,zero,47030 <__alt_data_end+0xfffd5030>
   47070:	0005883a 	mov	r2,zero
   47074:	003ff006 	br	47038 <__alt_data_end+0xfffd5038>
   47078:	00800174 	movhi	r2,5
   4707c:	10851404 	addi	r2,r2,5200
   47080:	f800283a 	ret

00047084 <__locale_charset>:
   47084:	00800174 	movhi	r2,5
   47088:	10888a04 	addi	r2,r2,8744
   4708c:	f800283a 	ret

00047090 <__locale_mb_cur_max>:
   47090:	00800174 	movhi	r2,5
   47094:	108d6e04 	addi	r2,r2,13752
   47098:	10800017 	ldw	r2,0(r2)
   4709c:	f800283a 	ret

000470a0 <__locale_msgcharset>:
   470a0:	00800174 	movhi	r2,5
   470a4:	10888204 	addi	r2,r2,8712
   470a8:	f800283a 	ret

000470ac <__locale_cjk_lang>:
   470ac:	0005883a 	mov	r2,zero
   470b0:	f800283a 	ret

000470b4 <_localeconv_r>:
   470b4:	00800174 	movhi	r2,5
   470b8:	10889204 	addi	r2,r2,8776
   470bc:	f800283a 	ret

000470c0 <setlocale>:
   470c0:	00800174 	movhi	r2,5
   470c4:	108d6b04 	addi	r2,r2,13740
   470c8:	280d883a 	mov	r6,r5
   470cc:	200b883a 	mov	r5,r4
   470d0:	11000017 	ldw	r4,0(r2)
   470d4:	00470081 	jmpi	47008 <_setlocale_r>

000470d8 <localeconv>:
   470d8:	00800174 	movhi	r2,5
   470dc:	10889204 	addi	r2,r2,8776
   470e0:	f800283a 	ret

000470e4 <_lseek_r>:
   470e4:	defffd04 	addi	sp,sp,-12
   470e8:	2805883a 	mov	r2,r5
   470ec:	dc000015 	stw	r16,0(sp)
   470f0:	04000174 	movhi	r16,5
   470f4:	dc400115 	stw	r17,4(sp)
   470f8:	300b883a 	mov	r5,r6
   470fc:	84148304 	addi	r16,r16,21004
   47100:	2023883a 	mov	r17,r4
   47104:	380d883a 	mov	r6,r7
   47108:	1009883a 	mov	r4,r2
   4710c:	dfc00215 	stw	ra,8(sp)
   47110:	80000015 	stw	zero,0(r16)
   47114:	004e2800 	call	4e280 <lseek>
   47118:	00ffffc4 	movi	r3,-1
   4711c:	10c00526 	beq	r2,r3,47134 <_lseek_r+0x50>
   47120:	dfc00217 	ldw	ra,8(sp)
   47124:	dc400117 	ldw	r17,4(sp)
   47128:	dc000017 	ldw	r16,0(sp)
   4712c:	dec00304 	addi	sp,sp,12
   47130:	f800283a 	ret
   47134:	80c00017 	ldw	r3,0(r16)
   47138:	183ff926 	beq	r3,zero,47120 <__alt_data_end+0xfffd5120>
   4713c:	88c00015 	stw	r3,0(r17)
   47140:	003ff706 	br	47120 <__alt_data_end+0xfffd5120>

00047144 <memchr>:
   47144:	208000cc 	andi	r2,r4,3
   47148:	280f883a 	mov	r7,r5
   4714c:	10003426 	beq	r2,zero,47220 <memchr+0xdc>
   47150:	30bfffc4 	addi	r2,r6,-1
   47154:	30001a26 	beq	r6,zero,471c0 <memchr+0x7c>
   47158:	20c00003 	ldbu	r3,0(r4)
   4715c:	29803fcc 	andi	r6,r5,255
   47160:	30c0051e 	bne	r6,r3,47178 <memchr+0x34>
   47164:	00001806 	br	471c8 <memchr+0x84>
   47168:	10001526 	beq	r2,zero,471c0 <memchr+0x7c>
   4716c:	20c00003 	ldbu	r3,0(r4)
   47170:	10bfffc4 	addi	r2,r2,-1
   47174:	30c01426 	beq	r6,r3,471c8 <memchr+0x84>
   47178:	21000044 	addi	r4,r4,1
   4717c:	20c000cc 	andi	r3,r4,3
   47180:	183ff91e 	bne	r3,zero,47168 <__alt_data_end+0xfffd5168>
   47184:	020000c4 	movi	r8,3
   47188:	40801136 	bltu	r8,r2,471d0 <memchr+0x8c>
   4718c:	10000c26 	beq	r2,zero,471c0 <memchr+0x7c>
   47190:	20c00003 	ldbu	r3,0(r4)
   47194:	29403fcc 	andi	r5,r5,255
   47198:	28c00b26 	beq	r5,r3,471c8 <memchr+0x84>
   4719c:	20c00044 	addi	r3,r4,1
   471a0:	39803fcc 	andi	r6,r7,255
   471a4:	2089883a 	add	r4,r4,r2
   471a8:	00000306 	br	471b8 <memchr+0x74>
   471ac:	18c00044 	addi	r3,r3,1
   471b0:	197fffc3 	ldbu	r5,-1(r3)
   471b4:	31400526 	beq	r6,r5,471cc <memchr+0x88>
   471b8:	1805883a 	mov	r2,r3
   471bc:	20fffb1e 	bne	r4,r3,471ac <__alt_data_end+0xfffd51ac>
   471c0:	0005883a 	mov	r2,zero
   471c4:	f800283a 	ret
   471c8:	2005883a 	mov	r2,r4
   471cc:	f800283a 	ret
   471d0:	28c03fcc 	andi	r3,r5,255
   471d4:	1812923a 	slli	r9,r3,8
   471d8:	02ffbff4 	movhi	r11,65279
   471dc:	02a02074 	movhi	r10,32897
   471e0:	48d2b03a 	or	r9,r9,r3
   471e4:	4806943a 	slli	r3,r9,16
   471e8:	5affbfc4 	addi	r11,r11,-257
   471ec:	52a02004 	addi	r10,r10,-32640
   471f0:	48d2b03a 	or	r9,r9,r3
   471f4:	20c00017 	ldw	r3,0(r4)
   471f8:	48c6f03a 	xor	r3,r9,r3
   471fc:	1acd883a 	add	r6,r3,r11
   47200:	00c6303a 	nor	r3,zero,r3
   47204:	30c6703a 	and	r3,r6,r3
   47208:	1a86703a 	and	r3,r3,r10
   4720c:	183fe01e 	bne	r3,zero,47190 <__alt_data_end+0xfffd5190>
   47210:	10bfff04 	addi	r2,r2,-4
   47214:	21000104 	addi	r4,r4,4
   47218:	40bff636 	bltu	r8,r2,471f4 <__alt_data_end+0xfffd51f4>
   4721c:	003fdb06 	br	4718c <__alt_data_end+0xfffd518c>
   47220:	3005883a 	mov	r2,r6
   47224:	003fd706 	br	47184 <__alt_data_end+0xfffd5184>

00047228 <memcpy>:
   47228:	defffd04 	addi	sp,sp,-12
   4722c:	dfc00215 	stw	ra,8(sp)
   47230:	dc400115 	stw	r17,4(sp)
   47234:	dc000015 	stw	r16,0(sp)
   47238:	00c003c4 	movi	r3,15
   4723c:	2005883a 	mov	r2,r4
   47240:	1980452e 	bgeu	r3,r6,47358 <memcpy+0x130>
   47244:	2906b03a 	or	r3,r5,r4
   47248:	18c000cc 	andi	r3,r3,3
   4724c:	1800441e 	bne	r3,zero,47360 <memcpy+0x138>
   47250:	347ffc04 	addi	r17,r6,-16
   47254:	8822d13a 	srli	r17,r17,4
   47258:	28c00104 	addi	r3,r5,4
   4725c:	23400104 	addi	r13,r4,4
   47260:	8820913a 	slli	r16,r17,4
   47264:	2b000204 	addi	r12,r5,8
   47268:	22c00204 	addi	r11,r4,8
   4726c:	84000504 	addi	r16,r16,20
   47270:	2a800304 	addi	r10,r5,12
   47274:	22400304 	addi	r9,r4,12
   47278:	2c21883a 	add	r16,r5,r16
   4727c:	2811883a 	mov	r8,r5
   47280:	200f883a 	mov	r7,r4
   47284:	41000017 	ldw	r4,0(r8)
   47288:	1fc00017 	ldw	ra,0(r3)
   4728c:	63c00017 	ldw	r15,0(r12)
   47290:	39000015 	stw	r4,0(r7)
   47294:	53800017 	ldw	r14,0(r10)
   47298:	6fc00015 	stw	ra,0(r13)
   4729c:	5bc00015 	stw	r15,0(r11)
   472a0:	4b800015 	stw	r14,0(r9)
   472a4:	18c00404 	addi	r3,r3,16
   472a8:	39c00404 	addi	r7,r7,16
   472ac:	42000404 	addi	r8,r8,16
   472b0:	6b400404 	addi	r13,r13,16
   472b4:	63000404 	addi	r12,r12,16
   472b8:	5ac00404 	addi	r11,r11,16
   472bc:	52800404 	addi	r10,r10,16
   472c0:	4a400404 	addi	r9,r9,16
   472c4:	1c3fef1e 	bne	r3,r16,47284 <__alt_data_end+0xfffd5284>
   472c8:	89c00044 	addi	r7,r17,1
   472cc:	380e913a 	slli	r7,r7,4
   472d0:	310003cc 	andi	r4,r6,15
   472d4:	02c000c4 	movi	r11,3
   472d8:	11c7883a 	add	r3,r2,r7
   472dc:	29cb883a 	add	r5,r5,r7
   472e0:	5900212e 	bgeu	r11,r4,47368 <memcpy+0x140>
   472e4:	1813883a 	mov	r9,r3
   472e8:	2811883a 	mov	r8,r5
   472ec:	200f883a 	mov	r7,r4
   472f0:	42800017 	ldw	r10,0(r8)
   472f4:	4a400104 	addi	r9,r9,4
   472f8:	39ffff04 	addi	r7,r7,-4
   472fc:	4abfff15 	stw	r10,-4(r9)
   47300:	42000104 	addi	r8,r8,4
   47304:	59fffa36 	bltu	r11,r7,472f0 <__alt_data_end+0xfffd52f0>
   47308:	213fff04 	addi	r4,r4,-4
   4730c:	2008d0ba 	srli	r4,r4,2
   47310:	318000cc 	andi	r6,r6,3
   47314:	21000044 	addi	r4,r4,1
   47318:	2109883a 	add	r4,r4,r4
   4731c:	2109883a 	add	r4,r4,r4
   47320:	1907883a 	add	r3,r3,r4
   47324:	290b883a 	add	r5,r5,r4
   47328:	30000626 	beq	r6,zero,47344 <memcpy+0x11c>
   4732c:	198d883a 	add	r6,r3,r6
   47330:	29c00003 	ldbu	r7,0(r5)
   47334:	18c00044 	addi	r3,r3,1
   47338:	29400044 	addi	r5,r5,1
   4733c:	19ffffc5 	stb	r7,-1(r3)
   47340:	19bffb1e 	bne	r3,r6,47330 <__alt_data_end+0xfffd5330>
   47344:	dfc00217 	ldw	ra,8(sp)
   47348:	dc400117 	ldw	r17,4(sp)
   4734c:	dc000017 	ldw	r16,0(sp)
   47350:	dec00304 	addi	sp,sp,12
   47354:	f800283a 	ret
   47358:	2007883a 	mov	r3,r4
   4735c:	003ff206 	br	47328 <__alt_data_end+0xfffd5328>
   47360:	2007883a 	mov	r3,r4
   47364:	003ff106 	br	4732c <__alt_data_end+0xfffd532c>
   47368:	200d883a 	mov	r6,r4
   4736c:	003fee06 	br	47328 <__alt_data_end+0xfffd5328>

00047370 <memmove>:
   47370:	2005883a 	mov	r2,r4
   47374:	29000b2e 	bgeu	r5,r4,473a4 <memmove+0x34>
   47378:	298f883a 	add	r7,r5,r6
   4737c:	21c0092e 	bgeu	r4,r7,473a4 <memmove+0x34>
   47380:	2187883a 	add	r3,r4,r6
   47384:	198bc83a 	sub	r5,r3,r6
   47388:	30004826 	beq	r6,zero,474ac <memmove+0x13c>
   4738c:	39ffffc4 	addi	r7,r7,-1
   47390:	39000003 	ldbu	r4,0(r7)
   47394:	18ffffc4 	addi	r3,r3,-1
   47398:	19000005 	stb	r4,0(r3)
   4739c:	28fffb1e 	bne	r5,r3,4738c <__alt_data_end+0xfffd538c>
   473a0:	f800283a 	ret
   473a4:	00c003c4 	movi	r3,15
   473a8:	1980412e 	bgeu	r3,r6,474b0 <memmove+0x140>
   473ac:	2886b03a 	or	r3,r5,r2
   473b0:	18c000cc 	andi	r3,r3,3
   473b4:	1800401e 	bne	r3,zero,474b8 <memmove+0x148>
   473b8:	33fffc04 	addi	r15,r6,-16
   473bc:	781ed13a 	srli	r15,r15,4
   473c0:	28c00104 	addi	r3,r5,4
   473c4:	13400104 	addi	r13,r2,4
   473c8:	781c913a 	slli	r14,r15,4
   473cc:	2b000204 	addi	r12,r5,8
   473d0:	12c00204 	addi	r11,r2,8
   473d4:	73800504 	addi	r14,r14,20
   473d8:	2a800304 	addi	r10,r5,12
   473dc:	12400304 	addi	r9,r2,12
   473e0:	2b9d883a 	add	r14,r5,r14
   473e4:	2811883a 	mov	r8,r5
   473e8:	100f883a 	mov	r7,r2
   473ec:	41000017 	ldw	r4,0(r8)
   473f0:	39c00404 	addi	r7,r7,16
   473f4:	18c00404 	addi	r3,r3,16
   473f8:	393ffc15 	stw	r4,-16(r7)
   473fc:	193ffc17 	ldw	r4,-16(r3)
   47400:	6b400404 	addi	r13,r13,16
   47404:	5ac00404 	addi	r11,r11,16
   47408:	693ffc15 	stw	r4,-16(r13)
   4740c:	61000017 	ldw	r4,0(r12)
   47410:	4a400404 	addi	r9,r9,16
   47414:	42000404 	addi	r8,r8,16
   47418:	593ffc15 	stw	r4,-16(r11)
   4741c:	51000017 	ldw	r4,0(r10)
   47420:	63000404 	addi	r12,r12,16
   47424:	52800404 	addi	r10,r10,16
   47428:	493ffc15 	stw	r4,-16(r9)
   4742c:	1bbfef1e 	bne	r3,r14,473ec <__alt_data_end+0xfffd53ec>
   47430:	79000044 	addi	r4,r15,1
   47434:	2008913a 	slli	r4,r4,4
   47438:	328003cc 	andi	r10,r6,15
   4743c:	02c000c4 	movi	r11,3
   47440:	1107883a 	add	r3,r2,r4
   47444:	290b883a 	add	r5,r5,r4
   47448:	5a801e2e 	bgeu	r11,r10,474c4 <memmove+0x154>
   4744c:	1813883a 	mov	r9,r3
   47450:	2811883a 	mov	r8,r5
   47454:	500f883a 	mov	r7,r10
   47458:	41000017 	ldw	r4,0(r8)
   4745c:	4a400104 	addi	r9,r9,4
   47460:	39ffff04 	addi	r7,r7,-4
   47464:	493fff15 	stw	r4,-4(r9)
   47468:	42000104 	addi	r8,r8,4
   4746c:	59fffa36 	bltu	r11,r7,47458 <__alt_data_end+0xfffd5458>
   47470:	513fff04 	addi	r4,r10,-4
   47474:	2008d0ba 	srli	r4,r4,2
   47478:	318000cc 	andi	r6,r6,3
   4747c:	21000044 	addi	r4,r4,1
   47480:	2109883a 	add	r4,r4,r4
   47484:	2109883a 	add	r4,r4,r4
   47488:	1907883a 	add	r3,r3,r4
   4748c:	290b883a 	add	r5,r5,r4
   47490:	30000b26 	beq	r6,zero,474c0 <memmove+0x150>
   47494:	198d883a 	add	r6,r3,r6
   47498:	29c00003 	ldbu	r7,0(r5)
   4749c:	18c00044 	addi	r3,r3,1
   474a0:	29400044 	addi	r5,r5,1
   474a4:	19ffffc5 	stb	r7,-1(r3)
   474a8:	19bffb1e 	bne	r3,r6,47498 <__alt_data_end+0xfffd5498>
   474ac:	f800283a 	ret
   474b0:	1007883a 	mov	r3,r2
   474b4:	003ff606 	br	47490 <__alt_data_end+0xfffd5490>
   474b8:	1007883a 	mov	r3,r2
   474bc:	003ff506 	br	47494 <__alt_data_end+0xfffd5494>
   474c0:	f800283a 	ret
   474c4:	500d883a 	mov	r6,r10
   474c8:	003ff106 	br	47490 <__alt_data_end+0xfffd5490>

000474cc <_Balloc>:
   474cc:	20801317 	ldw	r2,76(r4)
   474d0:	defffc04 	addi	sp,sp,-16
   474d4:	dc400115 	stw	r17,4(sp)
   474d8:	dc000015 	stw	r16,0(sp)
   474dc:	dfc00315 	stw	ra,12(sp)
   474e0:	dc800215 	stw	r18,8(sp)
   474e4:	2023883a 	mov	r17,r4
   474e8:	2821883a 	mov	r16,r5
   474ec:	10000f26 	beq	r2,zero,4752c <_Balloc+0x60>
   474f0:	8407883a 	add	r3,r16,r16
   474f4:	18c7883a 	add	r3,r3,r3
   474f8:	10c7883a 	add	r3,r2,r3
   474fc:	18800017 	ldw	r2,0(r3)
   47500:	10001126 	beq	r2,zero,47548 <_Balloc+0x7c>
   47504:	11000017 	ldw	r4,0(r2)
   47508:	19000015 	stw	r4,0(r3)
   4750c:	10000415 	stw	zero,16(r2)
   47510:	10000315 	stw	zero,12(r2)
   47514:	dfc00317 	ldw	ra,12(sp)
   47518:	dc800217 	ldw	r18,8(sp)
   4751c:	dc400117 	ldw	r17,4(sp)
   47520:	dc000017 	ldw	r16,0(sp)
   47524:	dec00404 	addi	sp,sp,16
   47528:	f800283a 	ret
   4752c:	01800844 	movi	r6,33
   47530:	01400104 	movi	r5,4
   47534:	004a4e40 	call	4a4e4 <_calloc_r>
   47538:	88801315 	stw	r2,76(r17)
   4753c:	103fec1e 	bne	r2,zero,474f0 <__alt_data_end+0xfffd54f0>
   47540:	0005883a 	mov	r2,zero
   47544:	003ff306 	br	47514 <__alt_data_end+0xfffd5514>
   47548:	01400044 	movi	r5,1
   4754c:	2c24983a 	sll	r18,r5,r16
   47550:	8809883a 	mov	r4,r17
   47554:	91800144 	addi	r6,r18,5
   47558:	318d883a 	add	r6,r6,r6
   4755c:	318d883a 	add	r6,r6,r6
   47560:	004a4e40 	call	4a4e4 <_calloc_r>
   47564:	103ff626 	beq	r2,zero,47540 <__alt_data_end+0xfffd5540>
   47568:	14000115 	stw	r16,4(r2)
   4756c:	14800215 	stw	r18,8(r2)
   47570:	003fe606 	br	4750c <__alt_data_end+0xfffd550c>

00047574 <_Bfree>:
   47574:	28000826 	beq	r5,zero,47598 <_Bfree+0x24>
   47578:	28c00117 	ldw	r3,4(r5)
   4757c:	20801317 	ldw	r2,76(r4)
   47580:	18c7883a 	add	r3,r3,r3
   47584:	18c7883a 	add	r3,r3,r3
   47588:	10c5883a 	add	r2,r2,r3
   4758c:	10c00017 	ldw	r3,0(r2)
   47590:	28c00015 	stw	r3,0(r5)
   47594:	11400015 	stw	r5,0(r2)
   47598:	f800283a 	ret

0004759c <__multadd>:
   4759c:	defffa04 	addi	sp,sp,-24
   475a0:	dc800315 	stw	r18,12(sp)
   475a4:	dc400215 	stw	r17,8(sp)
   475a8:	dc000115 	stw	r16,4(sp)
   475ac:	2823883a 	mov	r17,r5
   475b0:	2c000417 	ldw	r16,16(r5)
   475b4:	dfc00515 	stw	ra,20(sp)
   475b8:	dcc00415 	stw	r19,16(sp)
   475bc:	2025883a 	mov	r18,r4
   475c0:	29400504 	addi	r5,r5,20
   475c4:	0011883a 	mov	r8,zero
   475c8:	28c00017 	ldw	r3,0(r5)
   475cc:	29400104 	addi	r5,r5,4
   475d0:	42000044 	addi	r8,r8,1
   475d4:	18bfffcc 	andi	r2,r3,65535
   475d8:	1185383a 	mul	r2,r2,r6
   475dc:	1806d43a 	srli	r3,r3,16
   475e0:	11cf883a 	add	r7,r2,r7
   475e4:	3808d43a 	srli	r4,r7,16
   475e8:	1987383a 	mul	r3,r3,r6
   475ec:	38bfffcc 	andi	r2,r7,65535
   475f0:	1907883a 	add	r3,r3,r4
   475f4:	1808943a 	slli	r4,r3,16
   475f8:	180ed43a 	srli	r7,r3,16
   475fc:	2085883a 	add	r2,r4,r2
   47600:	28bfff15 	stw	r2,-4(r5)
   47604:	443ff016 	blt	r8,r16,475c8 <__alt_data_end+0xfffd55c8>
   47608:	38000926 	beq	r7,zero,47630 <__multadd+0x94>
   4760c:	88800217 	ldw	r2,8(r17)
   47610:	80800f0e 	bge	r16,r2,47650 <__multadd+0xb4>
   47614:	80800144 	addi	r2,r16,5
   47618:	1085883a 	add	r2,r2,r2
   4761c:	1085883a 	add	r2,r2,r2
   47620:	8885883a 	add	r2,r17,r2
   47624:	11c00015 	stw	r7,0(r2)
   47628:	84000044 	addi	r16,r16,1
   4762c:	8c000415 	stw	r16,16(r17)
   47630:	8805883a 	mov	r2,r17
   47634:	dfc00517 	ldw	ra,20(sp)
   47638:	dcc00417 	ldw	r19,16(sp)
   4763c:	dc800317 	ldw	r18,12(sp)
   47640:	dc400217 	ldw	r17,8(sp)
   47644:	dc000117 	ldw	r16,4(sp)
   47648:	dec00604 	addi	sp,sp,24
   4764c:	f800283a 	ret
   47650:	89400117 	ldw	r5,4(r17)
   47654:	9009883a 	mov	r4,r18
   47658:	d9c00015 	stw	r7,0(sp)
   4765c:	29400044 	addi	r5,r5,1
   47660:	00474cc0 	call	474cc <_Balloc>
   47664:	89800417 	ldw	r6,16(r17)
   47668:	89400304 	addi	r5,r17,12
   4766c:	11000304 	addi	r4,r2,12
   47670:	31800084 	addi	r6,r6,2
   47674:	318d883a 	add	r6,r6,r6
   47678:	318d883a 	add	r6,r6,r6
   4767c:	1027883a 	mov	r19,r2
   47680:	00472280 	call	47228 <memcpy>
   47684:	d9c00017 	ldw	r7,0(sp)
   47688:	88000a26 	beq	r17,zero,476b4 <__multadd+0x118>
   4768c:	88c00117 	ldw	r3,4(r17)
   47690:	90801317 	ldw	r2,76(r18)
   47694:	18c7883a 	add	r3,r3,r3
   47698:	18c7883a 	add	r3,r3,r3
   4769c:	10c5883a 	add	r2,r2,r3
   476a0:	10c00017 	ldw	r3,0(r2)
   476a4:	88c00015 	stw	r3,0(r17)
   476a8:	14400015 	stw	r17,0(r2)
   476ac:	9823883a 	mov	r17,r19
   476b0:	003fd806 	br	47614 <__alt_data_end+0xfffd5614>
   476b4:	9823883a 	mov	r17,r19
   476b8:	003fd606 	br	47614 <__alt_data_end+0xfffd5614>

000476bc <__s2b>:
   476bc:	defff904 	addi	sp,sp,-28
   476c0:	dc400115 	stw	r17,4(sp)
   476c4:	dc000015 	stw	r16,0(sp)
   476c8:	2023883a 	mov	r17,r4
   476cc:	2821883a 	mov	r16,r5
   476d0:	39000204 	addi	r4,r7,8
   476d4:	01400244 	movi	r5,9
   476d8:	dcc00315 	stw	r19,12(sp)
   476dc:	dc800215 	stw	r18,8(sp)
   476e0:	dfc00615 	stw	ra,24(sp)
   476e4:	dd400515 	stw	r21,20(sp)
   476e8:	dd000415 	stw	r20,16(sp)
   476ec:	3825883a 	mov	r18,r7
   476f0:	3027883a 	mov	r19,r6
   476f4:	00408380 	call	40838 <__divsi3>
   476f8:	00c00044 	movi	r3,1
   476fc:	000b883a 	mov	r5,zero
   47700:	1880030e 	bge	r3,r2,47710 <__s2b+0x54>
   47704:	18c7883a 	add	r3,r3,r3
   47708:	29400044 	addi	r5,r5,1
   4770c:	18bffd16 	blt	r3,r2,47704 <__alt_data_end+0xfffd5704>
   47710:	8809883a 	mov	r4,r17
   47714:	00474cc0 	call	474cc <_Balloc>
   47718:	d8c00717 	ldw	r3,28(sp)
   4771c:	10c00515 	stw	r3,20(r2)
   47720:	00c00044 	movi	r3,1
   47724:	10c00415 	stw	r3,16(r2)
   47728:	00c00244 	movi	r3,9
   4772c:	1cc0210e 	bge	r3,r19,477b4 <__s2b+0xf8>
   47730:	80eb883a 	add	r21,r16,r3
   47734:	a829883a 	mov	r20,r21
   47738:	84e1883a 	add	r16,r16,r19
   4773c:	a1c00007 	ldb	r7,0(r20)
   47740:	01800284 	movi	r6,10
   47744:	a5000044 	addi	r20,r20,1
   47748:	100b883a 	mov	r5,r2
   4774c:	39fff404 	addi	r7,r7,-48
   47750:	8809883a 	mov	r4,r17
   47754:	004759c0 	call	4759c <__multadd>
   47758:	a43ff81e 	bne	r20,r16,4773c <__alt_data_end+0xfffd573c>
   4775c:	ace1883a 	add	r16,r21,r19
   47760:	843ffe04 	addi	r16,r16,-8
   47764:	9c800a0e 	bge	r19,r18,47790 <__s2b+0xd4>
   47768:	94e5c83a 	sub	r18,r18,r19
   4776c:	84a5883a 	add	r18,r16,r18
   47770:	81c00007 	ldb	r7,0(r16)
   47774:	01800284 	movi	r6,10
   47778:	84000044 	addi	r16,r16,1
   4777c:	100b883a 	mov	r5,r2
   47780:	39fff404 	addi	r7,r7,-48
   47784:	8809883a 	mov	r4,r17
   47788:	004759c0 	call	4759c <__multadd>
   4778c:	84bff81e 	bne	r16,r18,47770 <__alt_data_end+0xfffd5770>
   47790:	dfc00617 	ldw	ra,24(sp)
   47794:	dd400517 	ldw	r21,20(sp)
   47798:	dd000417 	ldw	r20,16(sp)
   4779c:	dcc00317 	ldw	r19,12(sp)
   477a0:	dc800217 	ldw	r18,8(sp)
   477a4:	dc400117 	ldw	r17,4(sp)
   477a8:	dc000017 	ldw	r16,0(sp)
   477ac:	dec00704 	addi	sp,sp,28
   477b0:	f800283a 	ret
   477b4:	84000284 	addi	r16,r16,10
   477b8:	1827883a 	mov	r19,r3
   477bc:	003fe906 	br	47764 <__alt_data_end+0xfffd5764>

000477c0 <__hi0bits>:
   477c0:	20bfffec 	andhi	r2,r4,65535
   477c4:	1000141e 	bne	r2,zero,47818 <__hi0bits+0x58>
   477c8:	2008943a 	slli	r4,r4,16
   477cc:	00800404 	movi	r2,16
   477d0:	20ffc02c 	andhi	r3,r4,65280
   477d4:	1800021e 	bne	r3,zero,477e0 <__hi0bits+0x20>
   477d8:	2008923a 	slli	r4,r4,8
   477dc:	10800204 	addi	r2,r2,8
   477e0:	20fc002c 	andhi	r3,r4,61440
   477e4:	1800021e 	bne	r3,zero,477f0 <__hi0bits+0x30>
   477e8:	2008913a 	slli	r4,r4,4
   477ec:	10800104 	addi	r2,r2,4
   477f0:	20f0002c 	andhi	r3,r4,49152
   477f4:	1800031e 	bne	r3,zero,47804 <__hi0bits+0x44>
   477f8:	2109883a 	add	r4,r4,r4
   477fc:	10800084 	addi	r2,r2,2
   47800:	2109883a 	add	r4,r4,r4
   47804:	20000316 	blt	r4,zero,47814 <__hi0bits+0x54>
   47808:	2110002c 	andhi	r4,r4,16384
   4780c:	2000041e 	bne	r4,zero,47820 <__hi0bits+0x60>
   47810:	00800804 	movi	r2,32
   47814:	f800283a 	ret
   47818:	0005883a 	mov	r2,zero
   4781c:	003fec06 	br	477d0 <__alt_data_end+0xfffd57d0>
   47820:	10800044 	addi	r2,r2,1
   47824:	f800283a 	ret

00047828 <__lo0bits>:
   47828:	20c00017 	ldw	r3,0(r4)
   4782c:	188001cc 	andi	r2,r3,7
   47830:	10000826 	beq	r2,zero,47854 <__lo0bits+0x2c>
   47834:	1880004c 	andi	r2,r3,1
   47838:	1000211e 	bne	r2,zero,478c0 <__lo0bits+0x98>
   4783c:	1880008c 	andi	r2,r3,2
   47840:	1000211e 	bne	r2,zero,478c8 <__lo0bits+0xa0>
   47844:	1806d0ba 	srli	r3,r3,2
   47848:	00800084 	movi	r2,2
   4784c:	20c00015 	stw	r3,0(r4)
   47850:	f800283a 	ret
   47854:	18bfffcc 	andi	r2,r3,65535
   47858:	10001326 	beq	r2,zero,478a8 <__lo0bits+0x80>
   4785c:	0005883a 	mov	r2,zero
   47860:	19403fcc 	andi	r5,r3,255
   47864:	2800021e 	bne	r5,zero,47870 <__lo0bits+0x48>
   47868:	1806d23a 	srli	r3,r3,8
   4786c:	10800204 	addi	r2,r2,8
   47870:	194003cc 	andi	r5,r3,15
   47874:	2800021e 	bne	r5,zero,47880 <__lo0bits+0x58>
   47878:	1806d13a 	srli	r3,r3,4
   4787c:	10800104 	addi	r2,r2,4
   47880:	194000cc 	andi	r5,r3,3
   47884:	2800021e 	bne	r5,zero,47890 <__lo0bits+0x68>
   47888:	1806d0ba 	srli	r3,r3,2
   4788c:	10800084 	addi	r2,r2,2
   47890:	1940004c 	andi	r5,r3,1
   47894:	2800081e 	bne	r5,zero,478b8 <__lo0bits+0x90>
   47898:	1806d07a 	srli	r3,r3,1
   4789c:	1800051e 	bne	r3,zero,478b4 <__lo0bits+0x8c>
   478a0:	00800804 	movi	r2,32
   478a4:	f800283a 	ret
   478a8:	1806d43a 	srli	r3,r3,16
   478ac:	00800404 	movi	r2,16
   478b0:	003feb06 	br	47860 <__alt_data_end+0xfffd5860>
   478b4:	10800044 	addi	r2,r2,1
   478b8:	20c00015 	stw	r3,0(r4)
   478bc:	f800283a 	ret
   478c0:	0005883a 	mov	r2,zero
   478c4:	f800283a 	ret
   478c8:	1806d07a 	srli	r3,r3,1
   478cc:	00800044 	movi	r2,1
   478d0:	20c00015 	stw	r3,0(r4)
   478d4:	f800283a 	ret

000478d8 <__i2b>:
   478d8:	defffd04 	addi	sp,sp,-12
   478dc:	dc000015 	stw	r16,0(sp)
   478e0:	04000044 	movi	r16,1
   478e4:	dc400115 	stw	r17,4(sp)
   478e8:	2823883a 	mov	r17,r5
   478ec:	800b883a 	mov	r5,r16
   478f0:	dfc00215 	stw	ra,8(sp)
   478f4:	00474cc0 	call	474cc <_Balloc>
   478f8:	14400515 	stw	r17,20(r2)
   478fc:	14000415 	stw	r16,16(r2)
   47900:	dfc00217 	ldw	ra,8(sp)
   47904:	dc400117 	ldw	r17,4(sp)
   47908:	dc000017 	ldw	r16,0(sp)
   4790c:	dec00304 	addi	sp,sp,12
   47910:	f800283a 	ret

00047914 <__multiply>:
   47914:	defffa04 	addi	sp,sp,-24
   47918:	dcc00315 	stw	r19,12(sp)
   4791c:	dc800215 	stw	r18,8(sp)
   47920:	34c00417 	ldw	r19,16(r6)
   47924:	2c800417 	ldw	r18,16(r5)
   47928:	dd000415 	stw	r20,16(sp)
   4792c:	dc400115 	stw	r17,4(sp)
   47930:	dfc00515 	stw	ra,20(sp)
   47934:	dc000015 	stw	r16,0(sp)
   47938:	2829883a 	mov	r20,r5
   4793c:	3023883a 	mov	r17,r6
   47940:	94c0050e 	bge	r18,r19,47958 <__multiply+0x44>
   47944:	9007883a 	mov	r3,r18
   47948:	3029883a 	mov	r20,r6
   4794c:	9825883a 	mov	r18,r19
   47950:	2823883a 	mov	r17,r5
   47954:	1827883a 	mov	r19,r3
   47958:	a0800217 	ldw	r2,8(r20)
   4795c:	94e1883a 	add	r16,r18,r19
   47960:	a1400117 	ldw	r5,4(r20)
   47964:	1400010e 	bge	r2,r16,4796c <__multiply+0x58>
   47968:	29400044 	addi	r5,r5,1
   4796c:	00474cc0 	call	474cc <_Balloc>
   47970:	8415883a 	add	r10,r16,r16
   47974:	12c00504 	addi	r11,r2,20
   47978:	5295883a 	add	r10,r10,r10
   4797c:	5a95883a 	add	r10,r11,r10
   47980:	5807883a 	mov	r3,r11
   47984:	5a80032e 	bgeu	r11,r10,47994 <__multiply+0x80>
   47988:	18000015 	stw	zero,0(r3)
   4798c:	18c00104 	addi	r3,r3,4
   47990:	1abffd36 	bltu	r3,r10,47988 <__alt_data_end+0xfffd5988>
   47994:	9ce7883a 	add	r19,r19,r19
   47998:	94a5883a 	add	r18,r18,r18
   4799c:	89800504 	addi	r6,r17,20
   479a0:	9ce7883a 	add	r19,r19,r19
   479a4:	a3400504 	addi	r13,r20,20
   479a8:	94a5883a 	add	r18,r18,r18
   479ac:	34d9883a 	add	r12,r6,r19
   479b0:	6c93883a 	add	r9,r13,r18
   479b4:	3300422e 	bgeu	r6,r12,47ac0 <__multiply+0x1ac>
   479b8:	37c00017 	ldw	ra,0(r6)
   479bc:	fbffffcc 	andi	r15,ra,65535
   479c0:	78001b26 	beq	r15,zero,47a30 <__multiply+0x11c>
   479c4:	5811883a 	mov	r8,r11
   479c8:	681d883a 	mov	r14,r13
   479cc:	000f883a 	mov	r7,zero
   479d0:	71000017 	ldw	r4,0(r14)
   479d4:	40c00017 	ldw	r3,0(r8)
   479d8:	73800104 	addi	r14,r14,4
   479dc:	217fffcc 	andi	r5,r4,65535
   479e0:	2bcb383a 	mul	r5,r5,r15
   479e4:	2008d43a 	srli	r4,r4,16
   479e8:	1c7fffcc 	andi	r17,r3,65535
   479ec:	2c4b883a 	add	r5,r5,r17
   479f0:	29cb883a 	add	r5,r5,r7
   479f4:	23c9383a 	mul	r4,r4,r15
   479f8:	1806d43a 	srli	r3,r3,16
   479fc:	280ed43a 	srli	r7,r5,16
   47a00:	297fffcc 	andi	r5,r5,65535
   47a04:	20c7883a 	add	r3,r4,r3
   47a08:	19c7883a 	add	r3,r3,r7
   47a0c:	1808943a 	slli	r4,r3,16
   47a10:	4023883a 	mov	r17,r8
   47a14:	180ed43a 	srli	r7,r3,16
   47a18:	214ab03a 	or	r5,r4,r5
   47a1c:	41400015 	stw	r5,0(r8)
   47a20:	42000104 	addi	r8,r8,4
   47a24:	727fea36 	bltu	r14,r9,479d0 <__alt_data_end+0xfffd59d0>
   47a28:	89c00115 	stw	r7,4(r17)
   47a2c:	37c00017 	ldw	ra,0(r6)
   47a30:	f83ed43a 	srli	ra,ra,16
   47a34:	f8001f26 	beq	ra,zero,47ab4 <__multiply+0x1a0>
   47a38:	58c00017 	ldw	r3,0(r11)
   47a3c:	681d883a 	mov	r14,r13
   47a40:	581f883a 	mov	r15,r11
   47a44:	1811883a 	mov	r8,r3
   47a48:	5825883a 	mov	r18,r11
   47a4c:	000f883a 	mov	r7,zero
   47a50:	00000106 	br	47a58 <__multiply+0x144>
   47a54:	8825883a 	mov	r18,r17
   47a58:	7140000b 	ldhu	r5,0(r14)
   47a5c:	4010d43a 	srli	r8,r8,16
   47a60:	193fffcc 	andi	r4,r3,65535
   47a64:	2fcb383a 	mul	r5,r5,ra
   47a68:	7bc00104 	addi	r15,r15,4
   47a6c:	73800104 	addi	r14,r14,4
   47a70:	2a0b883a 	add	r5,r5,r8
   47a74:	29cb883a 	add	r5,r5,r7
   47a78:	2806943a 	slli	r3,r5,16
   47a7c:	94400104 	addi	r17,r18,4
   47a80:	280ad43a 	srli	r5,r5,16
   47a84:	1908b03a 	or	r4,r3,r4
   47a88:	793fff15 	stw	r4,-4(r15)
   47a8c:	70ffff17 	ldw	r3,-4(r14)
   47a90:	8a000017 	ldw	r8,0(r17)
   47a94:	1806d43a 	srli	r3,r3,16
   47a98:	413fffcc 	andi	r4,r8,65535
   47a9c:	1fc7383a 	mul	r3,r3,ra
   47aa0:	1907883a 	add	r3,r3,r4
   47aa4:	1947883a 	add	r3,r3,r5
   47aa8:	180ed43a 	srli	r7,r3,16
   47aac:	727fe936 	bltu	r14,r9,47a54 <__alt_data_end+0xfffd5a54>
   47ab0:	90c00115 	stw	r3,4(r18)
   47ab4:	31800104 	addi	r6,r6,4
   47ab8:	5ac00104 	addi	r11,r11,4
   47abc:	333fbe36 	bltu	r6,r12,479b8 <__alt_data_end+0xfffd59b8>
   47ac0:	0400090e 	bge	zero,r16,47ae8 <__multiply+0x1d4>
   47ac4:	50ffff17 	ldw	r3,-4(r10)
   47ac8:	52bfff04 	addi	r10,r10,-4
   47acc:	18000326 	beq	r3,zero,47adc <__multiply+0x1c8>
   47ad0:	00000506 	br	47ae8 <__multiply+0x1d4>
   47ad4:	50c00017 	ldw	r3,0(r10)
   47ad8:	1800031e 	bne	r3,zero,47ae8 <__multiply+0x1d4>
   47adc:	843fffc4 	addi	r16,r16,-1
   47ae0:	52bfff04 	addi	r10,r10,-4
   47ae4:	803ffb1e 	bne	r16,zero,47ad4 <__alt_data_end+0xfffd5ad4>
   47ae8:	14000415 	stw	r16,16(r2)
   47aec:	dfc00517 	ldw	ra,20(sp)
   47af0:	dd000417 	ldw	r20,16(sp)
   47af4:	dcc00317 	ldw	r19,12(sp)
   47af8:	dc800217 	ldw	r18,8(sp)
   47afc:	dc400117 	ldw	r17,4(sp)
   47b00:	dc000017 	ldw	r16,0(sp)
   47b04:	dec00604 	addi	sp,sp,24
   47b08:	f800283a 	ret

00047b0c <__pow5mult>:
   47b0c:	defffa04 	addi	sp,sp,-24
   47b10:	dcc00315 	stw	r19,12(sp)
   47b14:	dc000015 	stw	r16,0(sp)
   47b18:	dfc00515 	stw	ra,20(sp)
   47b1c:	dd000415 	stw	r20,16(sp)
   47b20:	dc800215 	stw	r18,8(sp)
   47b24:	dc400115 	stw	r17,4(sp)
   47b28:	308000cc 	andi	r2,r6,3
   47b2c:	3021883a 	mov	r16,r6
   47b30:	2027883a 	mov	r19,r4
   47b34:	10002f1e 	bne	r2,zero,47bf4 <__pow5mult+0xe8>
   47b38:	2825883a 	mov	r18,r5
   47b3c:	8021d0ba 	srai	r16,r16,2
   47b40:	80001a26 	beq	r16,zero,47bac <__pow5mult+0xa0>
   47b44:	9c401217 	ldw	r17,72(r19)
   47b48:	8800061e 	bne	r17,zero,47b64 <__pow5mult+0x58>
   47b4c:	00003406 	br	47c20 <__pow5mult+0x114>
   47b50:	8021d07a 	srai	r16,r16,1
   47b54:	80001526 	beq	r16,zero,47bac <__pow5mult+0xa0>
   47b58:	88800017 	ldw	r2,0(r17)
   47b5c:	10001c26 	beq	r2,zero,47bd0 <__pow5mult+0xc4>
   47b60:	1023883a 	mov	r17,r2
   47b64:	8080004c 	andi	r2,r16,1
   47b68:	103ff926 	beq	r2,zero,47b50 <__alt_data_end+0xfffd5b50>
   47b6c:	880d883a 	mov	r6,r17
   47b70:	900b883a 	mov	r5,r18
   47b74:	9809883a 	mov	r4,r19
   47b78:	00479140 	call	47914 <__multiply>
   47b7c:	90001b26 	beq	r18,zero,47bec <__pow5mult+0xe0>
   47b80:	91000117 	ldw	r4,4(r18)
   47b84:	98c01317 	ldw	r3,76(r19)
   47b88:	8021d07a 	srai	r16,r16,1
   47b8c:	2109883a 	add	r4,r4,r4
   47b90:	2109883a 	add	r4,r4,r4
   47b94:	1907883a 	add	r3,r3,r4
   47b98:	19000017 	ldw	r4,0(r3)
   47b9c:	91000015 	stw	r4,0(r18)
   47ba0:	1c800015 	stw	r18,0(r3)
   47ba4:	1025883a 	mov	r18,r2
   47ba8:	803feb1e 	bne	r16,zero,47b58 <__alt_data_end+0xfffd5b58>
   47bac:	9005883a 	mov	r2,r18
   47bb0:	dfc00517 	ldw	ra,20(sp)
   47bb4:	dd000417 	ldw	r20,16(sp)
   47bb8:	dcc00317 	ldw	r19,12(sp)
   47bbc:	dc800217 	ldw	r18,8(sp)
   47bc0:	dc400117 	ldw	r17,4(sp)
   47bc4:	dc000017 	ldw	r16,0(sp)
   47bc8:	dec00604 	addi	sp,sp,24
   47bcc:	f800283a 	ret
   47bd0:	880d883a 	mov	r6,r17
   47bd4:	880b883a 	mov	r5,r17
   47bd8:	9809883a 	mov	r4,r19
   47bdc:	00479140 	call	47914 <__multiply>
   47be0:	88800015 	stw	r2,0(r17)
   47be4:	10000015 	stw	zero,0(r2)
   47be8:	003fdd06 	br	47b60 <__alt_data_end+0xfffd5b60>
   47bec:	1025883a 	mov	r18,r2
   47bf0:	003fd706 	br	47b50 <__alt_data_end+0xfffd5b50>
   47bf4:	10bfffc4 	addi	r2,r2,-1
   47bf8:	1085883a 	add	r2,r2,r2
   47bfc:	00c00174 	movhi	r3,5
   47c00:	18c53604 	addi	r3,r3,5336
   47c04:	1085883a 	add	r2,r2,r2
   47c08:	1885883a 	add	r2,r3,r2
   47c0c:	11800017 	ldw	r6,0(r2)
   47c10:	000f883a 	mov	r7,zero
   47c14:	004759c0 	call	4759c <__multadd>
   47c18:	1025883a 	mov	r18,r2
   47c1c:	003fc706 	br	47b3c <__alt_data_end+0xfffd5b3c>
   47c20:	05000044 	movi	r20,1
   47c24:	a00b883a 	mov	r5,r20
   47c28:	9809883a 	mov	r4,r19
   47c2c:	00474cc0 	call	474cc <_Balloc>
   47c30:	1023883a 	mov	r17,r2
   47c34:	00809c44 	movi	r2,625
   47c38:	88800515 	stw	r2,20(r17)
   47c3c:	8d000415 	stw	r20,16(r17)
   47c40:	9c401215 	stw	r17,72(r19)
   47c44:	88000015 	stw	zero,0(r17)
   47c48:	003fc606 	br	47b64 <__alt_data_end+0xfffd5b64>

00047c4c <__lshift>:
   47c4c:	defff904 	addi	sp,sp,-28
   47c50:	dd400515 	stw	r21,20(sp)
   47c54:	dcc00315 	stw	r19,12(sp)
   47c58:	302bd17a 	srai	r21,r6,5
   47c5c:	2cc00417 	ldw	r19,16(r5)
   47c60:	28800217 	ldw	r2,8(r5)
   47c64:	dd000415 	stw	r20,16(sp)
   47c68:	ace7883a 	add	r19,r21,r19
   47c6c:	dc800215 	stw	r18,8(sp)
   47c70:	dc400115 	stw	r17,4(sp)
   47c74:	dc000015 	stw	r16,0(sp)
   47c78:	dfc00615 	stw	ra,24(sp)
   47c7c:	9c000044 	addi	r16,r19,1
   47c80:	2823883a 	mov	r17,r5
   47c84:	3029883a 	mov	r20,r6
   47c88:	2025883a 	mov	r18,r4
   47c8c:	29400117 	ldw	r5,4(r5)
   47c90:	1400030e 	bge	r2,r16,47ca0 <__lshift+0x54>
   47c94:	1085883a 	add	r2,r2,r2
   47c98:	29400044 	addi	r5,r5,1
   47c9c:	143ffd16 	blt	r2,r16,47c94 <__alt_data_end+0xfffd5c94>
   47ca0:	9009883a 	mov	r4,r18
   47ca4:	00474cc0 	call	474cc <_Balloc>
   47ca8:	10c00504 	addi	r3,r2,20
   47cac:	0540070e 	bge	zero,r21,47ccc <__lshift+0x80>
   47cb0:	ad6b883a 	add	r21,r21,r21
   47cb4:	ad6b883a 	add	r21,r21,r21
   47cb8:	1809883a 	mov	r4,r3
   47cbc:	1d47883a 	add	r3,r3,r21
   47cc0:	20000015 	stw	zero,0(r4)
   47cc4:	21000104 	addi	r4,r4,4
   47cc8:	193ffd1e 	bne	r3,r4,47cc0 <__alt_data_end+0xfffd5cc0>
   47ccc:	8a000417 	ldw	r8,16(r17)
   47cd0:	89000504 	addi	r4,r17,20
   47cd4:	a18007cc 	andi	r6,r20,31
   47cd8:	4211883a 	add	r8,r8,r8
   47cdc:	4211883a 	add	r8,r8,r8
   47ce0:	2211883a 	add	r8,r4,r8
   47ce4:	30002326 	beq	r6,zero,47d74 <__lshift+0x128>
   47ce8:	02400804 	movi	r9,32
   47cec:	4993c83a 	sub	r9,r9,r6
   47cf0:	000b883a 	mov	r5,zero
   47cf4:	21c00017 	ldw	r7,0(r4)
   47cf8:	1815883a 	mov	r10,r3
   47cfc:	18c00104 	addi	r3,r3,4
   47d00:	398e983a 	sll	r7,r7,r6
   47d04:	21000104 	addi	r4,r4,4
   47d08:	394ab03a 	or	r5,r7,r5
   47d0c:	197fff15 	stw	r5,-4(r3)
   47d10:	217fff17 	ldw	r5,-4(r4)
   47d14:	2a4ad83a 	srl	r5,r5,r9
   47d18:	223ff636 	bltu	r4,r8,47cf4 <__alt_data_end+0xfffd5cf4>
   47d1c:	51400115 	stw	r5,4(r10)
   47d20:	28001a1e 	bne	r5,zero,47d8c <__lshift+0x140>
   47d24:	843fffc4 	addi	r16,r16,-1
   47d28:	14000415 	stw	r16,16(r2)
   47d2c:	88000826 	beq	r17,zero,47d50 <__lshift+0x104>
   47d30:	89000117 	ldw	r4,4(r17)
   47d34:	90c01317 	ldw	r3,76(r18)
   47d38:	2109883a 	add	r4,r4,r4
   47d3c:	2109883a 	add	r4,r4,r4
   47d40:	1907883a 	add	r3,r3,r4
   47d44:	19000017 	ldw	r4,0(r3)
   47d48:	89000015 	stw	r4,0(r17)
   47d4c:	1c400015 	stw	r17,0(r3)
   47d50:	dfc00617 	ldw	ra,24(sp)
   47d54:	dd400517 	ldw	r21,20(sp)
   47d58:	dd000417 	ldw	r20,16(sp)
   47d5c:	dcc00317 	ldw	r19,12(sp)
   47d60:	dc800217 	ldw	r18,8(sp)
   47d64:	dc400117 	ldw	r17,4(sp)
   47d68:	dc000017 	ldw	r16,0(sp)
   47d6c:	dec00704 	addi	sp,sp,28
   47d70:	f800283a 	ret
   47d74:	21400017 	ldw	r5,0(r4)
   47d78:	18c00104 	addi	r3,r3,4
   47d7c:	21000104 	addi	r4,r4,4
   47d80:	197fff15 	stw	r5,-4(r3)
   47d84:	223ffb36 	bltu	r4,r8,47d74 <__alt_data_end+0xfffd5d74>
   47d88:	003fe606 	br	47d24 <__alt_data_end+0xfffd5d24>
   47d8c:	9c000084 	addi	r16,r19,2
   47d90:	003fe406 	br	47d24 <__alt_data_end+0xfffd5d24>

00047d94 <__mcmp>:
   47d94:	20800417 	ldw	r2,16(r4)
   47d98:	28c00417 	ldw	r3,16(r5)
   47d9c:	10c5c83a 	sub	r2,r2,r3
   47da0:	1000111e 	bne	r2,zero,47de8 <__mcmp+0x54>
   47da4:	18c7883a 	add	r3,r3,r3
   47da8:	18c7883a 	add	r3,r3,r3
   47dac:	21000504 	addi	r4,r4,20
   47db0:	29400504 	addi	r5,r5,20
   47db4:	20c5883a 	add	r2,r4,r3
   47db8:	28cb883a 	add	r5,r5,r3
   47dbc:	00000106 	br	47dc4 <__mcmp+0x30>
   47dc0:	20800a2e 	bgeu	r4,r2,47dec <__mcmp+0x58>
   47dc4:	10bfff04 	addi	r2,r2,-4
   47dc8:	297fff04 	addi	r5,r5,-4
   47dcc:	11800017 	ldw	r6,0(r2)
   47dd0:	28c00017 	ldw	r3,0(r5)
   47dd4:	30fffa26 	beq	r6,r3,47dc0 <__alt_data_end+0xfffd5dc0>
   47dd8:	30c00236 	bltu	r6,r3,47de4 <__mcmp+0x50>
   47ddc:	00800044 	movi	r2,1
   47de0:	f800283a 	ret
   47de4:	00bfffc4 	movi	r2,-1
   47de8:	f800283a 	ret
   47dec:	0005883a 	mov	r2,zero
   47df0:	f800283a 	ret

00047df4 <__mdiff>:
   47df4:	28c00417 	ldw	r3,16(r5)
   47df8:	30800417 	ldw	r2,16(r6)
   47dfc:	defffa04 	addi	sp,sp,-24
   47e00:	dcc00315 	stw	r19,12(sp)
   47e04:	dc800215 	stw	r18,8(sp)
   47e08:	dfc00515 	stw	ra,20(sp)
   47e0c:	dd000415 	stw	r20,16(sp)
   47e10:	dc400115 	stw	r17,4(sp)
   47e14:	dc000015 	stw	r16,0(sp)
   47e18:	1887c83a 	sub	r3,r3,r2
   47e1c:	2825883a 	mov	r18,r5
   47e20:	3027883a 	mov	r19,r6
   47e24:	1800141e 	bne	r3,zero,47e78 <__mdiff+0x84>
   47e28:	1085883a 	add	r2,r2,r2
   47e2c:	1085883a 	add	r2,r2,r2
   47e30:	2a000504 	addi	r8,r5,20
   47e34:	34000504 	addi	r16,r6,20
   47e38:	4087883a 	add	r3,r8,r2
   47e3c:	8085883a 	add	r2,r16,r2
   47e40:	00000106 	br	47e48 <__mdiff+0x54>
   47e44:	40c0592e 	bgeu	r8,r3,47fac <__mdiff+0x1b8>
   47e48:	18ffff04 	addi	r3,r3,-4
   47e4c:	10bfff04 	addi	r2,r2,-4
   47e50:	19c00017 	ldw	r7,0(r3)
   47e54:	11400017 	ldw	r5,0(r2)
   47e58:	397ffa26 	beq	r7,r5,47e44 <__alt_data_end+0xfffd5e44>
   47e5c:	3940592e 	bgeu	r7,r5,47fc4 <__mdiff+0x1d0>
   47e60:	9005883a 	mov	r2,r18
   47e64:	4023883a 	mov	r17,r8
   47e68:	9825883a 	mov	r18,r19
   47e6c:	05000044 	movi	r20,1
   47e70:	1027883a 	mov	r19,r2
   47e74:	00000406 	br	47e88 <__mdiff+0x94>
   47e78:	18005616 	blt	r3,zero,47fd4 <__mdiff+0x1e0>
   47e7c:	34400504 	addi	r17,r6,20
   47e80:	2c000504 	addi	r16,r5,20
   47e84:	0029883a 	mov	r20,zero
   47e88:	91400117 	ldw	r5,4(r18)
   47e8c:	00474cc0 	call	474cc <_Balloc>
   47e90:	92400417 	ldw	r9,16(r18)
   47e94:	9b000417 	ldw	r12,16(r19)
   47e98:	12c00504 	addi	r11,r2,20
   47e9c:	4a51883a 	add	r8,r9,r9
   47ea0:	6319883a 	add	r12,r12,r12
   47ea4:	4211883a 	add	r8,r8,r8
   47ea8:	6319883a 	add	r12,r12,r12
   47eac:	15000315 	stw	r20,12(r2)
   47eb0:	8211883a 	add	r8,r16,r8
   47eb4:	8b19883a 	add	r12,r17,r12
   47eb8:	0007883a 	mov	r3,zero
   47ebc:	81400017 	ldw	r5,0(r16)
   47ec0:	89c00017 	ldw	r7,0(r17)
   47ec4:	59800104 	addi	r6,r11,4
   47ec8:	293fffcc 	andi	r4,r5,65535
   47ecc:	20c7883a 	add	r3,r4,r3
   47ed0:	393fffcc 	andi	r4,r7,65535
   47ed4:	1909c83a 	sub	r4,r3,r4
   47ed8:	280ad43a 	srli	r5,r5,16
   47edc:	380ed43a 	srli	r7,r7,16
   47ee0:	2007d43a 	srai	r3,r4,16
   47ee4:	213fffcc 	andi	r4,r4,65535
   47ee8:	29cbc83a 	sub	r5,r5,r7
   47eec:	28c7883a 	add	r3,r5,r3
   47ef0:	180a943a 	slli	r5,r3,16
   47ef4:	8c400104 	addi	r17,r17,4
   47ef8:	84000104 	addi	r16,r16,4
   47efc:	2908b03a 	or	r4,r5,r4
   47f00:	59000015 	stw	r4,0(r11)
   47f04:	1807d43a 	srai	r3,r3,16
   47f08:	3015883a 	mov	r10,r6
   47f0c:	3017883a 	mov	r11,r6
   47f10:	8b3fea36 	bltu	r17,r12,47ebc <__alt_data_end+0xfffd5ebc>
   47f14:	8200162e 	bgeu	r16,r8,47f70 <__mdiff+0x17c>
   47f18:	8017883a 	mov	r11,r16
   47f1c:	59400017 	ldw	r5,0(r11)
   47f20:	31800104 	addi	r6,r6,4
   47f24:	5ac00104 	addi	r11,r11,4
   47f28:	293fffcc 	andi	r4,r5,65535
   47f2c:	20c7883a 	add	r3,r4,r3
   47f30:	280ed43a 	srli	r7,r5,16
   47f34:	180bd43a 	srai	r5,r3,16
   47f38:	193fffcc 	andi	r4,r3,65535
   47f3c:	3947883a 	add	r3,r7,r5
   47f40:	180a943a 	slli	r5,r3,16
   47f44:	1807d43a 	srai	r3,r3,16
   47f48:	2908b03a 	or	r4,r5,r4
   47f4c:	313fff15 	stw	r4,-4(r6)
   47f50:	5a3ff236 	bltu	r11,r8,47f1c <__alt_data_end+0xfffd5f1c>
   47f54:	0406303a 	nor	r3,zero,r16
   47f58:	1a07883a 	add	r3,r3,r8
   47f5c:	1806d0ba 	srli	r3,r3,2
   47f60:	18c00044 	addi	r3,r3,1
   47f64:	18c7883a 	add	r3,r3,r3
   47f68:	18c7883a 	add	r3,r3,r3
   47f6c:	50d5883a 	add	r10,r10,r3
   47f70:	50ffff04 	addi	r3,r10,-4
   47f74:	2000041e 	bne	r4,zero,47f88 <__mdiff+0x194>
   47f78:	18ffff04 	addi	r3,r3,-4
   47f7c:	19000017 	ldw	r4,0(r3)
   47f80:	4a7fffc4 	addi	r9,r9,-1
   47f84:	203ffc26 	beq	r4,zero,47f78 <__alt_data_end+0xfffd5f78>
   47f88:	12400415 	stw	r9,16(r2)
   47f8c:	dfc00517 	ldw	ra,20(sp)
   47f90:	dd000417 	ldw	r20,16(sp)
   47f94:	dcc00317 	ldw	r19,12(sp)
   47f98:	dc800217 	ldw	r18,8(sp)
   47f9c:	dc400117 	ldw	r17,4(sp)
   47fa0:	dc000017 	ldw	r16,0(sp)
   47fa4:	dec00604 	addi	sp,sp,24
   47fa8:	f800283a 	ret
   47fac:	000b883a 	mov	r5,zero
   47fb0:	00474cc0 	call	474cc <_Balloc>
   47fb4:	00c00044 	movi	r3,1
   47fb8:	10c00415 	stw	r3,16(r2)
   47fbc:	10000515 	stw	zero,20(r2)
   47fc0:	003ff206 	br	47f8c <__alt_data_end+0xfffd5f8c>
   47fc4:	8023883a 	mov	r17,r16
   47fc8:	0029883a 	mov	r20,zero
   47fcc:	4021883a 	mov	r16,r8
   47fd0:	003fad06 	br	47e88 <__alt_data_end+0xfffd5e88>
   47fd4:	9005883a 	mov	r2,r18
   47fd8:	94400504 	addi	r17,r18,20
   47fdc:	9c000504 	addi	r16,r19,20
   47fe0:	9825883a 	mov	r18,r19
   47fe4:	05000044 	movi	r20,1
   47fe8:	1027883a 	mov	r19,r2
   47fec:	003fa606 	br	47e88 <__alt_data_end+0xfffd5e88>

00047ff0 <__ulp>:
   47ff0:	295ffc2c 	andhi	r5,r5,32752
   47ff4:	00bf3034 	movhi	r2,64704
   47ff8:	2887883a 	add	r3,r5,r2
   47ffc:	00c0020e 	bge	zero,r3,48008 <__ulp+0x18>
   48000:	0005883a 	mov	r2,zero
   48004:	f800283a 	ret
   48008:	00c7c83a 	sub	r3,zero,r3
   4800c:	1807d53a 	srai	r3,r3,20
   48010:	008004c4 	movi	r2,19
   48014:	10c00b0e 	bge	r2,r3,48044 <__ulp+0x54>
   48018:	18bffb04 	addi	r2,r3,-20
   4801c:	01000784 	movi	r4,30
   48020:	0007883a 	mov	r3,zero
   48024:	20800516 	blt	r4,r2,4803c <__ulp+0x4c>
   48028:	010007c4 	movi	r4,31
   4802c:	2089c83a 	sub	r4,r4,r2
   48030:	00800044 	movi	r2,1
   48034:	1104983a 	sll	r2,r2,r4
   48038:	f800283a 	ret
   4803c:	00800044 	movi	r2,1
   48040:	f800283a 	ret
   48044:	01400234 	movhi	r5,8
   48048:	28c7d83a 	sra	r3,r5,r3
   4804c:	0005883a 	mov	r2,zero
   48050:	f800283a 	ret

00048054 <__b2d>:
   48054:	defffa04 	addi	sp,sp,-24
   48058:	dc000015 	stw	r16,0(sp)
   4805c:	24000417 	ldw	r16,16(r4)
   48060:	dc400115 	stw	r17,4(sp)
   48064:	24400504 	addi	r17,r4,20
   48068:	8421883a 	add	r16,r16,r16
   4806c:	8421883a 	add	r16,r16,r16
   48070:	8c21883a 	add	r16,r17,r16
   48074:	dc800215 	stw	r18,8(sp)
   48078:	84bfff17 	ldw	r18,-4(r16)
   4807c:	dd000415 	stw	r20,16(sp)
   48080:	dcc00315 	stw	r19,12(sp)
   48084:	9009883a 	mov	r4,r18
   48088:	2829883a 	mov	r20,r5
   4808c:	dfc00515 	stw	ra,20(sp)
   48090:	00477c00 	call	477c0 <__hi0bits>
   48094:	00c00804 	movi	r3,32
   48098:	1889c83a 	sub	r4,r3,r2
   4809c:	a1000015 	stw	r4,0(r20)
   480a0:	01000284 	movi	r4,10
   480a4:	84ffff04 	addi	r19,r16,-4
   480a8:	20801216 	blt	r4,r2,480f4 <__b2d+0xa0>
   480ac:	018002c4 	movi	r6,11
   480b0:	308dc83a 	sub	r6,r6,r2
   480b4:	9186d83a 	srl	r3,r18,r6
   480b8:	18cffc34 	orhi	r3,r3,16368
   480bc:	8cc0212e 	bgeu	r17,r19,48144 <__b2d+0xf0>
   480c0:	813ffe17 	ldw	r4,-8(r16)
   480c4:	218cd83a 	srl	r6,r4,r6
   480c8:	10800544 	addi	r2,r2,21
   480cc:	9084983a 	sll	r2,r18,r2
   480d0:	1184b03a 	or	r2,r2,r6
   480d4:	dfc00517 	ldw	ra,20(sp)
   480d8:	dd000417 	ldw	r20,16(sp)
   480dc:	dcc00317 	ldw	r19,12(sp)
   480e0:	dc800217 	ldw	r18,8(sp)
   480e4:	dc400117 	ldw	r17,4(sp)
   480e8:	dc000017 	ldw	r16,0(sp)
   480ec:	dec00604 	addi	sp,sp,24
   480f0:	f800283a 	ret
   480f4:	8cc00f2e 	bgeu	r17,r19,48134 <__b2d+0xe0>
   480f8:	117ffd44 	addi	r5,r2,-11
   480fc:	80bffe17 	ldw	r2,-8(r16)
   48100:	28000e26 	beq	r5,zero,4813c <__b2d+0xe8>
   48104:	1949c83a 	sub	r4,r3,r5
   48108:	9164983a 	sll	r18,r18,r5
   4810c:	1106d83a 	srl	r3,r2,r4
   48110:	81bffe04 	addi	r6,r16,-8
   48114:	948ffc34 	orhi	r18,r18,16368
   48118:	90c6b03a 	or	r3,r18,r3
   4811c:	89800e2e 	bgeu	r17,r6,48158 <__b2d+0x104>
   48120:	81bffd17 	ldw	r6,-12(r16)
   48124:	1144983a 	sll	r2,r2,r5
   48128:	310ad83a 	srl	r5,r6,r4
   4812c:	2884b03a 	or	r2,r5,r2
   48130:	003fe806 	br	480d4 <__alt_data_end+0xfffd60d4>
   48134:	10bffd44 	addi	r2,r2,-11
   48138:	1000041e 	bne	r2,zero,4814c <__b2d+0xf8>
   4813c:	90cffc34 	orhi	r3,r18,16368
   48140:	003fe406 	br	480d4 <__alt_data_end+0xfffd60d4>
   48144:	000d883a 	mov	r6,zero
   48148:	003fdf06 	br	480c8 <__alt_data_end+0xfffd60c8>
   4814c:	90a4983a 	sll	r18,r18,r2
   48150:	0005883a 	mov	r2,zero
   48154:	003ff906 	br	4813c <__alt_data_end+0xfffd613c>
   48158:	1144983a 	sll	r2,r2,r5
   4815c:	003fdd06 	br	480d4 <__alt_data_end+0xfffd60d4>

00048160 <__d2b>:
   48160:	defff804 	addi	sp,sp,-32
   48164:	dc000215 	stw	r16,8(sp)
   48168:	3021883a 	mov	r16,r6
   4816c:	dc400315 	stw	r17,12(sp)
   48170:	8022907a 	slli	r17,r16,1
   48174:	dd000615 	stw	r20,24(sp)
   48178:	2829883a 	mov	r20,r5
   4817c:	01400044 	movi	r5,1
   48180:	dcc00515 	stw	r19,20(sp)
   48184:	dc800415 	stw	r18,16(sp)
   48188:	dfc00715 	stw	ra,28(sp)
   4818c:	3825883a 	mov	r18,r7
   48190:	8822d57a 	srli	r17,r17,21
   48194:	00474cc0 	call	474cc <_Balloc>
   48198:	1027883a 	mov	r19,r2
   4819c:	00800434 	movhi	r2,16
   481a0:	10bfffc4 	addi	r2,r2,-1
   481a4:	808c703a 	and	r6,r16,r2
   481a8:	88000126 	beq	r17,zero,481b0 <__d2b+0x50>
   481ac:	31800434 	orhi	r6,r6,16
   481b0:	d9800015 	stw	r6,0(sp)
   481b4:	a0002426 	beq	r20,zero,48248 <__d2b+0xe8>
   481b8:	d9000104 	addi	r4,sp,4
   481bc:	dd000115 	stw	r20,4(sp)
   481c0:	00478280 	call	47828 <__lo0bits>
   481c4:	d8c00017 	ldw	r3,0(sp)
   481c8:	10002f1e 	bne	r2,zero,48288 <__d2b+0x128>
   481cc:	d9000117 	ldw	r4,4(sp)
   481d0:	99000515 	stw	r4,20(r19)
   481d4:	1821003a 	cmpeq	r16,r3,zero
   481d8:	01000084 	movi	r4,2
   481dc:	2421c83a 	sub	r16,r4,r16
   481e0:	98c00615 	stw	r3,24(r19)
   481e4:	9c000415 	stw	r16,16(r19)
   481e8:	88001f1e 	bne	r17,zero,48268 <__d2b+0x108>
   481ec:	10bef384 	addi	r2,r2,-1074
   481f0:	90800015 	stw	r2,0(r18)
   481f4:	00900034 	movhi	r2,16384
   481f8:	10bfffc4 	addi	r2,r2,-1
   481fc:	8085883a 	add	r2,r16,r2
   48200:	1085883a 	add	r2,r2,r2
   48204:	1085883a 	add	r2,r2,r2
   48208:	9885883a 	add	r2,r19,r2
   4820c:	11000517 	ldw	r4,20(r2)
   48210:	8020917a 	slli	r16,r16,5
   48214:	00477c00 	call	477c0 <__hi0bits>
   48218:	d8c00817 	ldw	r3,32(sp)
   4821c:	8085c83a 	sub	r2,r16,r2
   48220:	18800015 	stw	r2,0(r3)
   48224:	9805883a 	mov	r2,r19
   48228:	dfc00717 	ldw	ra,28(sp)
   4822c:	dd000617 	ldw	r20,24(sp)
   48230:	dcc00517 	ldw	r19,20(sp)
   48234:	dc800417 	ldw	r18,16(sp)
   48238:	dc400317 	ldw	r17,12(sp)
   4823c:	dc000217 	ldw	r16,8(sp)
   48240:	dec00804 	addi	sp,sp,32
   48244:	f800283a 	ret
   48248:	d809883a 	mov	r4,sp
   4824c:	00478280 	call	47828 <__lo0bits>
   48250:	d8c00017 	ldw	r3,0(sp)
   48254:	04000044 	movi	r16,1
   48258:	9c000415 	stw	r16,16(r19)
   4825c:	98c00515 	stw	r3,20(r19)
   48260:	10800804 	addi	r2,r2,32
   48264:	883fe126 	beq	r17,zero,481ec <__alt_data_end+0xfffd61ec>
   48268:	00c00d44 	movi	r3,53
   4826c:	8c7ef344 	addi	r17,r17,-1075
   48270:	88a3883a 	add	r17,r17,r2
   48274:	1885c83a 	sub	r2,r3,r2
   48278:	d8c00817 	ldw	r3,32(sp)
   4827c:	94400015 	stw	r17,0(r18)
   48280:	18800015 	stw	r2,0(r3)
   48284:	003fe706 	br	48224 <__alt_data_end+0xfffd6224>
   48288:	01000804 	movi	r4,32
   4828c:	2089c83a 	sub	r4,r4,r2
   48290:	1908983a 	sll	r4,r3,r4
   48294:	d9400117 	ldw	r5,4(sp)
   48298:	1886d83a 	srl	r3,r3,r2
   4829c:	2148b03a 	or	r4,r4,r5
   482a0:	99000515 	stw	r4,20(r19)
   482a4:	d8c00015 	stw	r3,0(sp)
   482a8:	003fca06 	br	481d4 <__alt_data_end+0xfffd61d4>

000482ac <__ratio>:
   482ac:	defff904 	addi	sp,sp,-28
   482b0:	dc400315 	stw	r17,12(sp)
   482b4:	2823883a 	mov	r17,r5
   482b8:	d9400104 	addi	r5,sp,4
   482bc:	dfc00615 	stw	ra,24(sp)
   482c0:	dcc00515 	stw	r19,20(sp)
   482c4:	dc800415 	stw	r18,16(sp)
   482c8:	2027883a 	mov	r19,r4
   482cc:	dc000215 	stw	r16,8(sp)
   482d0:	00480540 	call	48054 <__b2d>
   482d4:	d80b883a 	mov	r5,sp
   482d8:	8809883a 	mov	r4,r17
   482dc:	1025883a 	mov	r18,r2
   482e0:	1821883a 	mov	r16,r3
   482e4:	00480540 	call	48054 <__b2d>
   482e8:	8a000417 	ldw	r8,16(r17)
   482ec:	99000417 	ldw	r4,16(r19)
   482f0:	d9400117 	ldw	r5,4(sp)
   482f4:	2209c83a 	sub	r4,r4,r8
   482f8:	2010917a 	slli	r8,r4,5
   482fc:	d9000017 	ldw	r4,0(sp)
   48300:	2909c83a 	sub	r4,r5,r4
   48304:	4109883a 	add	r4,r8,r4
   48308:	01000e0e 	bge	zero,r4,48344 <__ratio+0x98>
   4830c:	2008953a 	slli	r4,r4,20
   48310:	2421883a 	add	r16,r4,r16
   48314:	100d883a 	mov	r6,r2
   48318:	180f883a 	mov	r7,r3
   4831c:	9009883a 	mov	r4,r18
   48320:	800b883a 	mov	r5,r16
   48324:	004bdf80 	call	4bdf8 <__divdf3>
   48328:	dfc00617 	ldw	ra,24(sp)
   4832c:	dcc00517 	ldw	r19,20(sp)
   48330:	dc800417 	ldw	r18,16(sp)
   48334:	dc400317 	ldw	r17,12(sp)
   48338:	dc000217 	ldw	r16,8(sp)
   4833c:	dec00704 	addi	sp,sp,28
   48340:	f800283a 	ret
   48344:	2008953a 	slli	r4,r4,20
   48348:	1907c83a 	sub	r3,r3,r4
   4834c:	003ff106 	br	48314 <__alt_data_end+0xfffd6314>

00048350 <_mprec_log10>:
   48350:	defffe04 	addi	sp,sp,-8
   48354:	dc000015 	stw	r16,0(sp)
   48358:	dfc00115 	stw	ra,4(sp)
   4835c:	008005c4 	movi	r2,23
   48360:	2021883a 	mov	r16,r4
   48364:	11000d0e 	bge	r2,r4,4839c <_mprec_log10+0x4c>
   48368:	0005883a 	mov	r2,zero
   4836c:	00cffc34 	movhi	r3,16368
   48370:	843fffc4 	addi	r16,r16,-1
   48374:	000d883a 	mov	r6,zero
   48378:	01d00934 	movhi	r7,16420
   4837c:	1009883a 	mov	r4,r2
   48380:	180b883a 	mov	r5,r3
   48384:	004c9380 	call	4c938 <__muldf3>
   48388:	803ff91e 	bne	r16,zero,48370 <__alt_data_end+0xfffd6370>
   4838c:	dfc00117 	ldw	ra,4(sp)
   48390:	dc000017 	ldw	r16,0(sp)
   48394:	dec00204 	addi	sp,sp,8
   48398:	f800283a 	ret
   4839c:	202090fa 	slli	r16,r4,3
   483a0:	00800174 	movhi	r2,5
   483a4:	10854d04 	addi	r2,r2,5428
   483a8:	1421883a 	add	r16,r2,r16
   483ac:	80800017 	ldw	r2,0(r16)
   483b0:	80c00117 	ldw	r3,4(r16)
   483b4:	dfc00117 	ldw	ra,4(sp)
   483b8:	dc000017 	ldw	r16,0(sp)
   483bc:	dec00204 	addi	sp,sp,8
   483c0:	f800283a 	ret

000483c4 <__copybits>:
   483c4:	297fffc4 	addi	r5,r5,-1
   483c8:	280fd17a 	srai	r7,r5,5
   483cc:	30c00417 	ldw	r3,16(r6)
   483d0:	30800504 	addi	r2,r6,20
   483d4:	39c00044 	addi	r7,r7,1
   483d8:	18c7883a 	add	r3,r3,r3
   483dc:	39cf883a 	add	r7,r7,r7
   483e0:	18c7883a 	add	r3,r3,r3
   483e4:	39cf883a 	add	r7,r7,r7
   483e8:	10c7883a 	add	r3,r2,r3
   483ec:	21cf883a 	add	r7,r4,r7
   483f0:	10c00d2e 	bgeu	r2,r3,48428 <__copybits+0x64>
   483f4:	200b883a 	mov	r5,r4
   483f8:	12000017 	ldw	r8,0(r2)
   483fc:	29400104 	addi	r5,r5,4
   48400:	10800104 	addi	r2,r2,4
   48404:	2a3fff15 	stw	r8,-4(r5)
   48408:	10fffb36 	bltu	r2,r3,483f8 <__alt_data_end+0xfffd63f8>
   4840c:	1985c83a 	sub	r2,r3,r6
   48410:	10bffac4 	addi	r2,r2,-21
   48414:	1004d0ba 	srli	r2,r2,2
   48418:	10800044 	addi	r2,r2,1
   4841c:	1085883a 	add	r2,r2,r2
   48420:	1085883a 	add	r2,r2,r2
   48424:	2089883a 	add	r4,r4,r2
   48428:	21c0032e 	bgeu	r4,r7,48438 <__copybits+0x74>
   4842c:	20000015 	stw	zero,0(r4)
   48430:	21000104 	addi	r4,r4,4
   48434:	21fffd36 	bltu	r4,r7,4842c <__alt_data_end+0xfffd642c>
   48438:	f800283a 	ret

0004843c <__any_on>:
   4843c:	20c00417 	ldw	r3,16(r4)
   48440:	2805d17a 	srai	r2,r5,5
   48444:	21000504 	addi	r4,r4,20
   48448:	18800d0e 	bge	r3,r2,48480 <__any_on+0x44>
   4844c:	18c7883a 	add	r3,r3,r3
   48450:	18c7883a 	add	r3,r3,r3
   48454:	20c7883a 	add	r3,r4,r3
   48458:	20c0192e 	bgeu	r4,r3,484c0 <__any_on+0x84>
   4845c:	18bfff17 	ldw	r2,-4(r3)
   48460:	18ffff04 	addi	r3,r3,-4
   48464:	1000041e 	bne	r2,zero,48478 <__any_on+0x3c>
   48468:	20c0142e 	bgeu	r4,r3,484bc <__any_on+0x80>
   4846c:	18ffff04 	addi	r3,r3,-4
   48470:	19400017 	ldw	r5,0(r3)
   48474:	283ffc26 	beq	r5,zero,48468 <__alt_data_end+0xfffd6468>
   48478:	00800044 	movi	r2,1
   4847c:	f800283a 	ret
   48480:	10c00a0e 	bge	r2,r3,484ac <__any_on+0x70>
   48484:	1085883a 	add	r2,r2,r2
   48488:	1085883a 	add	r2,r2,r2
   4848c:	294007cc 	andi	r5,r5,31
   48490:	2087883a 	add	r3,r4,r2
   48494:	283ff026 	beq	r5,zero,48458 <__alt_data_end+0xfffd6458>
   48498:	19800017 	ldw	r6,0(r3)
   4849c:	3144d83a 	srl	r2,r6,r5
   484a0:	114a983a 	sll	r5,r2,r5
   484a4:	317ff41e 	bne	r6,r5,48478 <__alt_data_end+0xfffd6478>
   484a8:	003feb06 	br	48458 <__alt_data_end+0xfffd6458>
   484ac:	1085883a 	add	r2,r2,r2
   484b0:	1085883a 	add	r2,r2,r2
   484b4:	2087883a 	add	r3,r4,r2
   484b8:	003fe706 	br	48458 <__alt_data_end+0xfffd6458>
   484bc:	f800283a 	ret
   484c0:	0005883a 	mov	r2,zero
   484c4:	f800283a 	ret

000484c8 <_putc_r>:
   484c8:	defffc04 	addi	sp,sp,-16
   484cc:	dc000215 	stw	r16,8(sp)
   484d0:	dfc00315 	stw	ra,12(sp)
   484d4:	2021883a 	mov	r16,r4
   484d8:	20000226 	beq	r4,zero,484e4 <_putc_r+0x1c>
   484dc:	20800e17 	ldw	r2,56(r4)
   484e0:	10001b26 	beq	r2,zero,48550 <_putc_r+0x88>
   484e4:	30800217 	ldw	r2,8(r6)
   484e8:	10bfffc4 	addi	r2,r2,-1
   484ec:	30800215 	stw	r2,8(r6)
   484f0:	10000a16 	blt	r2,zero,4851c <_putc_r+0x54>
   484f4:	30800017 	ldw	r2,0(r6)
   484f8:	11400005 	stb	r5,0(r2)
   484fc:	30800017 	ldw	r2,0(r6)
   48500:	10c00044 	addi	r3,r2,1
   48504:	30c00015 	stw	r3,0(r6)
   48508:	10800003 	ldbu	r2,0(r2)
   4850c:	dfc00317 	ldw	ra,12(sp)
   48510:	dc000217 	ldw	r16,8(sp)
   48514:	dec00404 	addi	sp,sp,16
   48518:	f800283a 	ret
   4851c:	30c00617 	ldw	r3,24(r6)
   48520:	10c00616 	blt	r2,r3,4853c <_putc_r+0x74>
   48524:	30800017 	ldw	r2,0(r6)
   48528:	00c00284 	movi	r3,10
   4852c:	11400005 	stb	r5,0(r2)
   48530:	30800017 	ldw	r2,0(r6)
   48534:	11400003 	ldbu	r5,0(r2)
   48538:	28fff11e 	bne	r5,r3,48500 <__alt_data_end+0xfffd6500>
   4853c:	8009883a 	mov	r4,r16
   48540:	dfc00317 	ldw	ra,12(sp)
   48544:	dc000217 	ldw	r16,8(sp)
   48548:	dec00404 	addi	sp,sp,16
   4854c:	004a38c1 	jmpi	4a38c <__swbuf_r>
   48550:	d9400015 	stw	r5,0(sp)
   48554:	d9800115 	stw	r6,4(sp)
   48558:	00464400 	call	46440 <__sinit>
   4855c:	d9800117 	ldw	r6,4(sp)
   48560:	d9400017 	ldw	r5,0(sp)
   48564:	003fdf06 	br	484e4 <__alt_data_end+0xfffd64e4>

00048568 <putc>:
   48568:	00800174 	movhi	r2,5
   4856c:	defffc04 	addi	sp,sp,-16
   48570:	108d6b04 	addi	r2,r2,13740
   48574:	dc000115 	stw	r16,4(sp)
   48578:	14000017 	ldw	r16,0(r2)
   4857c:	dc400215 	stw	r17,8(sp)
   48580:	dfc00315 	stw	ra,12(sp)
   48584:	2023883a 	mov	r17,r4
   48588:	80000226 	beq	r16,zero,48594 <putc+0x2c>
   4858c:	80800e17 	ldw	r2,56(r16)
   48590:	10001a26 	beq	r2,zero,485fc <putc+0x94>
   48594:	28800217 	ldw	r2,8(r5)
   48598:	10bfffc4 	addi	r2,r2,-1
   4859c:	28800215 	stw	r2,8(r5)
   485a0:	10000b16 	blt	r2,zero,485d0 <putc+0x68>
   485a4:	28800017 	ldw	r2,0(r5)
   485a8:	14400005 	stb	r17,0(r2)
   485ac:	28800017 	ldw	r2,0(r5)
   485b0:	10c00044 	addi	r3,r2,1
   485b4:	28c00015 	stw	r3,0(r5)
   485b8:	10800003 	ldbu	r2,0(r2)
   485bc:	dfc00317 	ldw	ra,12(sp)
   485c0:	dc400217 	ldw	r17,8(sp)
   485c4:	dc000117 	ldw	r16,4(sp)
   485c8:	dec00404 	addi	sp,sp,16
   485cc:	f800283a 	ret
   485d0:	28c00617 	ldw	r3,24(r5)
   485d4:	10c00e16 	blt	r2,r3,48610 <putc+0xa8>
   485d8:	28800017 	ldw	r2,0(r5)
   485dc:	01000284 	movi	r4,10
   485e0:	14400005 	stb	r17,0(r2)
   485e4:	28800017 	ldw	r2,0(r5)
   485e8:	10c00003 	ldbu	r3,0(r2)
   485ec:	193ff01e 	bne	r3,r4,485b0 <__alt_data_end+0xfffd65b0>
   485f0:	280d883a 	mov	r6,r5
   485f4:	180b883a 	mov	r5,r3
   485f8:	00000706 	br	48618 <putc+0xb0>
   485fc:	8009883a 	mov	r4,r16
   48600:	d9400015 	stw	r5,0(sp)
   48604:	00464400 	call	46440 <__sinit>
   48608:	d9400017 	ldw	r5,0(sp)
   4860c:	003fe106 	br	48594 <__alt_data_end+0xfffd6594>
   48610:	280d883a 	mov	r6,r5
   48614:	880b883a 	mov	r5,r17
   48618:	8009883a 	mov	r4,r16
   4861c:	dfc00317 	ldw	ra,12(sp)
   48620:	dc400217 	ldw	r17,8(sp)
   48624:	dc000117 	ldw	r16,4(sp)
   48628:	dec00404 	addi	sp,sp,16
   4862c:	004a38c1 	jmpi	4a38c <__swbuf_r>

00048630 <_read_r>:
   48630:	defffd04 	addi	sp,sp,-12
   48634:	2805883a 	mov	r2,r5
   48638:	dc000015 	stw	r16,0(sp)
   4863c:	04000174 	movhi	r16,5
   48640:	dc400115 	stw	r17,4(sp)
   48644:	300b883a 	mov	r5,r6
   48648:	84148304 	addi	r16,r16,21004
   4864c:	2023883a 	mov	r17,r4
   48650:	380d883a 	mov	r6,r7
   48654:	1009883a 	mov	r4,r2
   48658:	dfc00215 	stw	ra,8(sp)
   4865c:	80000015 	stw	zero,0(r16)
   48660:	004e6a80 	call	4e6a8 <read>
   48664:	00ffffc4 	movi	r3,-1
   48668:	10c00526 	beq	r2,r3,48680 <_read_r+0x50>
   4866c:	dfc00217 	ldw	ra,8(sp)
   48670:	dc400117 	ldw	r17,4(sp)
   48674:	dc000017 	ldw	r16,0(sp)
   48678:	dec00304 	addi	sp,sp,12
   4867c:	f800283a 	ret
   48680:	80c00017 	ldw	r3,0(r16)
   48684:	183ff926 	beq	r3,zero,4866c <__alt_data_end+0xfffd666c>
   48688:	88c00015 	stw	r3,0(r17)
   4868c:	003ff706 	br	4866c <__alt_data_end+0xfffd666c>

00048690 <_realloc_r>:
   48690:	defff604 	addi	sp,sp,-40
   48694:	dc800215 	stw	r18,8(sp)
   48698:	dfc00915 	stw	ra,36(sp)
   4869c:	df000815 	stw	fp,32(sp)
   486a0:	ddc00715 	stw	r23,28(sp)
   486a4:	dd800615 	stw	r22,24(sp)
   486a8:	dd400515 	stw	r21,20(sp)
   486ac:	dd000415 	stw	r20,16(sp)
   486b0:	dcc00315 	stw	r19,12(sp)
   486b4:	dc400115 	stw	r17,4(sp)
   486b8:	dc000015 	stw	r16,0(sp)
   486bc:	3025883a 	mov	r18,r6
   486c0:	2800b726 	beq	r5,zero,489a0 <_realloc_r+0x310>
   486c4:	282b883a 	mov	r21,r5
   486c8:	2029883a 	mov	r20,r4
   486cc:	004e3d00 	call	4e3d0 <__malloc_lock>
   486d0:	a8bfff17 	ldw	r2,-4(r21)
   486d4:	043fff04 	movi	r16,-4
   486d8:	90c002c4 	addi	r3,r18,11
   486dc:	01000584 	movi	r4,22
   486e0:	acfffe04 	addi	r19,r21,-8
   486e4:	1420703a 	and	r16,r2,r16
   486e8:	20c0332e 	bgeu	r4,r3,487b8 <_realloc_r+0x128>
   486ec:	047ffe04 	movi	r17,-8
   486f0:	1c62703a 	and	r17,r3,r17
   486f4:	8807883a 	mov	r3,r17
   486f8:	88005816 	blt	r17,zero,4885c <_realloc_r+0x1cc>
   486fc:	8c805736 	bltu	r17,r18,4885c <_realloc_r+0x1cc>
   48700:	80c0300e 	bge	r16,r3,487c4 <_realloc_r+0x134>
   48704:	07000174 	movhi	fp,5
   48708:	e7078004 	addi	fp,fp,7680
   4870c:	e1c00217 	ldw	r7,8(fp)
   48710:	9c09883a 	add	r4,r19,r16
   48714:	22000117 	ldw	r8,4(r4)
   48718:	21c06326 	beq	r4,r7,488a8 <_realloc_r+0x218>
   4871c:	017fff84 	movi	r5,-2
   48720:	414a703a 	and	r5,r8,r5
   48724:	214b883a 	add	r5,r4,r5
   48728:	29800117 	ldw	r6,4(r5)
   4872c:	3180004c 	andi	r6,r6,1
   48730:	30003f26 	beq	r6,zero,48830 <_realloc_r+0x1a0>
   48734:	1080004c 	andi	r2,r2,1
   48738:	10008326 	beq	r2,zero,48948 <_realloc_r+0x2b8>
   4873c:	900b883a 	mov	r5,r18
   48740:	a009883a 	mov	r4,r20
   48744:	00411dc0 	call	411dc <_malloc_r>
   48748:	1025883a 	mov	r18,r2
   4874c:	10011e26 	beq	r2,zero,48bc8 <_realloc_r+0x538>
   48750:	a93fff17 	ldw	r4,-4(r21)
   48754:	10fffe04 	addi	r3,r2,-8
   48758:	00bfff84 	movi	r2,-2
   4875c:	2084703a 	and	r2,r4,r2
   48760:	9885883a 	add	r2,r19,r2
   48764:	1880ee26 	beq	r3,r2,48b20 <_realloc_r+0x490>
   48768:	81bfff04 	addi	r6,r16,-4
   4876c:	00800904 	movi	r2,36
   48770:	1180b836 	bltu	r2,r6,48a54 <_realloc_r+0x3c4>
   48774:	00c004c4 	movi	r3,19
   48778:	19809636 	bltu	r3,r6,489d4 <_realloc_r+0x344>
   4877c:	9005883a 	mov	r2,r18
   48780:	a807883a 	mov	r3,r21
   48784:	19000017 	ldw	r4,0(r3)
   48788:	11000015 	stw	r4,0(r2)
   4878c:	19000117 	ldw	r4,4(r3)
   48790:	11000115 	stw	r4,4(r2)
   48794:	18c00217 	ldw	r3,8(r3)
   48798:	10c00215 	stw	r3,8(r2)
   4879c:	a80b883a 	mov	r5,r21
   487a0:	a009883a 	mov	r4,r20
   487a4:	00466600 	call	46660 <_free_r>
   487a8:	a009883a 	mov	r4,r20
   487ac:	004e3f40 	call	4e3f4 <__malloc_unlock>
   487b0:	9005883a 	mov	r2,r18
   487b4:	00001206 	br	48800 <_realloc_r+0x170>
   487b8:	00c00404 	movi	r3,16
   487bc:	1823883a 	mov	r17,r3
   487c0:	003fce06 	br	486fc <__alt_data_end+0xfffd66fc>
   487c4:	a825883a 	mov	r18,r21
   487c8:	8445c83a 	sub	r2,r16,r17
   487cc:	00c003c4 	movi	r3,15
   487d0:	18802636 	bltu	r3,r2,4886c <_realloc_r+0x1dc>
   487d4:	99800117 	ldw	r6,4(r19)
   487d8:	9c07883a 	add	r3,r19,r16
   487dc:	3180004c 	andi	r6,r6,1
   487e0:	3420b03a 	or	r16,r6,r16
   487e4:	9c000115 	stw	r16,4(r19)
   487e8:	18800117 	ldw	r2,4(r3)
   487ec:	10800054 	ori	r2,r2,1
   487f0:	18800115 	stw	r2,4(r3)
   487f4:	a009883a 	mov	r4,r20
   487f8:	004e3f40 	call	4e3f4 <__malloc_unlock>
   487fc:	9005883a 	mov	r2,r18
   48800:	dfc00917 	ldw	ra,36(sp)
   48804:	df000817 	ldw	fp,32(sp)
   48808:	ddc00717 	ldw	r23,28(sp)
   4880c:	dd800617 	ldw	r22,24(sp)
   48810:	dd400517 	ldw	r21,20(sp)
   48814:	dd000417 	ldw	r20,16(sp)
   48818:	dcc00317 	ldw	r19,12(sp)
   4881c:	dc800217 	ldw	r18,8(sp)
   48820:	dc400117 	ldw	r17,4(sp)
   48824:	dc000017 	ldw	r16,0(sp)
   48828:	dec00a04 	addi	sp,sp,40
   4882c:	f800283a 	ret
   48830:	017fff04 	movi	r5,-4
   48834:	414a703a 	and	r5,r8,r5
   48838:	814d883a 	add	r6,r16,r5
   4883c:	30c01f16 	blt	r6,r3,488bc <_realloc_r+0x22c>
   48840:	20800317 	ldw	r2,12(r4)
   48844:	20c00217 	ldw	r3,8(r4)
   48848:	a825883a 	mov	r18,r21
   4884c:	3021883a 	mov	r16,r6
   48850:	18800315 	stw	r2,12(r3)
   48854:	10c00215 	stw	r3,8(r2)
   48858:	003fdb06 	br	487c8 <__alt_data_end+0xfffd67c8>
   4885c:	00800304 	movi	r2,12
   48860:	a0800015 	stw	r2,0(r20)
   48864:	0005883a 	mov	r2,zero
   48868:	003fe506 	br	48800 <__alt_data_end+0xfffd6800>
   4886c:	98c00117 	ldw	r3,4(r19)
   48870:	9c4b883a 	add	r5,r19,r17
   48874:	11000054 	ori	r4,r2,1
   48878:	18c0004c 	andi	r3,r3,1
   4887c:	1c62b03a 	or	r17,r3,r17
   48880:	9c400115 	stw	r17,4(r19)
   48884:	29000115 	stw	r4,4(r5)
   48888:	2885883a 	add	r2,r5,r2
   4888c:	10c00117 	ldw	r3,4(r2)
   48890:	29400204 	addi	r5,r5,8
   48894:	a009883a 	mov	r4,r20
   48898:	18c00054 	ori	r3,r3,1
   4889c:	10c00115 	stw	r3,4(r2)
   488a0:	00466600 	call	46660 <_free_r>
   488a4:	003fd306 	br	487f4 <__alt_data_end+0xfffd67f4>
   488a8:	017fff04 	movi	r5,-4
   488ac:	414a703a 	and	r5,r8,r5
   488b0:	89800404 	addi	r6,r17,16
   488b4:	8151883a 	add	r8,r16,r5
   488b8:	4180590e 	bge	r8,r6,48a20 <_realloc_r+0x390>
   488bc:	1080004c 	andi	r2,r2,1
   488c0:	103f9e1e 	bne	r2,zero,4873c <__alt_data_end+0xfffd673c>
   488c4:	adbffe17 	ldw	r22,-8(r21)
   488c8:	00bfff04 	movi	r2,-4
   488cc:	9dadc83a 	sub	r22,r19,r22
   488d0:	b1800117 	ldw	r6,4(r22)
   488d4:	3084703a 	and	r2,r6,r2
   488d8:	20002026 	beq	r4,zero,4895c <_realloc_r+0x2cc>
   488dc:	80af883a 	add	r23,r16,r2
   488e0:	b96f883a 	add	r23,r23,r5
   488e4:	21c05f26 	beq	r4,r7,48a64 <_realloc_r+0x3d4>
   488e8:	b8c01c16 	blt	r23,r3,4895c <_realloc_r+0x2cc>
   488ec:	20800317 	ldw	r2,12(r4)
   488f0:	20c00217 	ldw	r3,8(r4)
   488f4:	81bfff04 	addi	r6,r16,-4
   488f8:	01000904 	movi	r4,36
   488fc:	18800315 	stw	r2,12(r3)
   48900:	10c00215 	stw	r3,8(r2)
   48904:	b0c00217 	ldw	r3,8(r22)
   48908:	b0800317 	ldw	r2,12(r22)
   4890c:	b4800204 	addi	r18,r22,8
   48910:	18800315 	stw	r2,12(r3)
   48914:	10c00215 	stw	r3,8(r2)
   48918:	21801b36 	bltu	r4,r6,48988 <_realloc_r+0x2f8>
   4891c:	008004c4 	movi	r2,19
   48920:	1180352e 	bgeu	r2,r6,489f8 <_realloc_r+0x368>
   48924:	a8800017 	ldw	r2,0(r21)
   48928:	b0800215 	stw	r2,8(r22)
   4892c:	a8800117 	ldw	r2,4(r21)
   48930:	b0800315 	stw	r2,12(r22)
   48934:	008006c4 	movi	r2,27
   48938:	11807f36 	bltu	r2,r6,48b38 <_realloc_r+0x4a8>
   4893c:	b0800404 	addi	r2,r22,16
   48940:	ad400204 	addi	r21,r21,8
   48944:	00002d06 	br	489fc <_realloc_r+0x36c>
   48948:	adbffe17 	ldw	r22,-8(r21)
   4894c:	00bfff04 	movi	r2,-4
   48950:	9dadc83a 	sub	r22,r19,r22
   48954:	b1000117 	ldw	r4,4(r22)
   48958:	2084703a 	and	r2,r4,r2
   4895c:	b03f7726 	beq	r22,zero,4873c <__alt_data_end+0xfffd673c>
   48960:	80af883a 	add	r23,r16,r2
   48964:	b8ff7516 	blt	r23,r3,4873c <__alt_data_end+0xfffd673c>
   48968:	b0800317 	ldw	r2,12(r22)
   4896c:	b0c00217 	ldw	r3,8(r22)
   48970:	81bfff04 	addi	r6,r16,-4
   48974:	01000904 	movi	r4,36
   48978:	18800315 	stw	r2,12(r3)
   4897c:	10c00215 	stw	r3,8(r2)
   48980:	b4800204 	addi	r18,r22,8
   48984:	21bfe52e 	bgeu	r4,r6,4891c <__alt_data_end+0xfffd691c>
   48988:	a80b883a 	mov	r5,r21
   4898c:	9009883a 	mov	r4,r18
   48990:	00473700 	call	47370 <memmove>
   48994:	b821883a 	mov	r16,r23
   48998:	b027883a 	mov	r19,r22
   4899c:	003f8a06 	br	487c8 <__alt_data_end+0xfffd67c8>
   489a0:	300b883a 	mov	r5,r6
   489a4:	dfc00917 	ldw	ra,36(sp)
   489a8:	df000817 	ldw	fp,32(sp)
   489ac:	ddc00717 	ldw	r23,28(sp)
   489b0:	dd800617 	ldw	r22,24(sp)
   489b4:	dd400517 	ldw	r21,20(sp)
   489b8:	dd000417 	ldw	r20,16(sp)
   489bc:	dcc00317 	ldw	r19,12(sp)
   489c0:	dc800217 	ldw	r18,8(sp)
   489c4:	dc400117 	ldw	r17,4(sp)
   489c8:	dc000017 	ldw	r16,0(sp)
   489cc:	dec00a04 	addi	sp,sp,40
   489d0:	00411dc1 	jmpi	411dc <_malloc_r>
   489d4:	a8c00017 	ldw	r3,0(r21)
   489d8:	90c00015 	stw	r3,0(r18)
   489dc:	a8c00117 	ldw	r3,4(r21)
   489e0:	90c00115 	stw	r3,4(r18)
   489e4:	00c006c4 	movi	r3,27
   489e8:	19804536 	bltu	r3,r6,48b00 <_realloc_r+0x470>
   489ec:	90800204 	addi	r2,r18,8
   489f0:	a8c00204 	addi	r3,r21,8
   489f4:	003f6306 	br	48784 <__alt_data_end+0xfffd6784>
   489f8:	9005883a 	mov	r2,r18
   489fc:	a8c00017 	ldw	r3,0(r21)
   48a00:	b821883a 	mov	r16,r23
   48a04:	b027883a 	mov	r19,r22
   48a08:	10c00015 	stw	r3,0(r2)
   48a0c:	a8c00117 	ldw	r3,4(r21)
   48a10:	10c00115 	stw	r3,4(r2)
   48a14:	a8c00217 	ldw	r3,8(r21)
   48a18:	10c00215 	stw	r3,8(r2)
   48a1c:	003f6a06 	br	487c8 <__alt_data_end+0xfffd67c8>
   48a20:	9c67883a 	add	r19,r19,r17
   48a24:	4445c83a 	sub	r2,r8,r17
   48a28:	e4c00215 	stw	r19,8(fp)
   48a2c:	10800054 	ori	r2,r2,1
   48a30:	98800115 	stw	r2,4(r19)
   48a34:	a8bfff17 	ldw	r2,-4(r21)
   48a38:	a009883a 	mov	r4,r20
   48a3c:	1080004c 	andi	r2,r2,1
   48a40:	1462b03a 	or	r17,r2,r17
   48a44:	ac7fff15 	stw	r17,-4(r21)
   48a48:	004e3f40 	call	4e3f4 <__malloc_unlock>
   48a4c:	a805883a 	mov	r2,r21
   48a50:	003f6b06 	br	48800 <__alt_data_end+0xfffd6800>
   48a54:	a80b883a 	mov	r5,r21
   48a58:	9009883a 	mov	r4,r18
   48a5c:	00473700 	call	47370 <memmove>
   48a60:	003f4e06 	br	4879c <__alt_data_end+0xfffd679c>
   48a64:	89000404 	addi	r4,r17,16
   48a68:	b93fbc16 	blt	r23,r4,4895c <__alt_data_end+0xfffd695c>
   48a6c:	b0800317 	ldw	r2,12(r22)
   48a70:	b0c00217 	ldw	r3,8(r22)
   48a74:	81bfff04 	addi	r6,r16,-4
   48a78:	01000904 	movi	r4,36
   48a7c:	18800315 	stw	r2,12(r3)
   48a80:	10c00215 	stw	r3,8(r2)
   48a84:	b4800204 	addi	r18,r22,8
   48a88:	21804336 	bltu	r4,r6,48b98 <_realloc_r+0x508>
   48a8c:	008004c4 	movi	r2,19
   48a90:	11803f2e 	bgeu	r2,r6,48b90 <_realloc_r+0x500>
   48a94:	a8800017 	ldw	r2,0(r21)
   48a98:	b0800215 	stw	r2,8(r22)
   48a9c:	a8800117 	ldw	r2,4(r21)
   48aa0:	b0800315 	stw	r2,12(r22)
   48aa4:	008006c4 	movi	r2,27
   48aa8:	11803f36 	bltu	r2,r6,48ba8 <_realloc_r+0x518>
   48aac:	b0800404 	addi	r2,r22,16
   48ab0:	ad400204 	addi	r21,r21,8
   48ab4:	a8c00017 	ldw	r3,0(r21)
   48ab8:	10c00015 	stw	r3,0(r2)
   48abc:	a8c00117 	ldw	r3,4(r21)
   48ac0:	10c00115 	stw	r3,4(r2)
   48ac4:	a8c00217 	ldw	r3,8(r21)
   48ac8:	10c00215 	stw	r3,8(r2)
   48acc:	b447883a 	add	r3,r22,r17
   48ad0:	bc45c83a 	sub	r2,r23,r17
   48ad4:	e0c00215 	stw	r3,8(fp)
   48ad8:	10800054 	ori	r2,r2,1
   48adc:	18800115 	stw	r2,4(r3)
   48ae0:	b0800117 	ldw	r2,4(r22)
   48ae4:	a009883a 	mov	r4,r20
   48ae8:	1080004c 	andi	r2,r2,1
   48aec:	1462b03a 	or	r17,r2,r17
   48af0:	b4400115 	stw	r17,4(r22)
   48af4:	004e3f40 	call	4e3f4 <__malloc_unlock>
   48af8:	9005883a 	mov	r2,r18
   48afc:	003f4006 	br	48800 <__alt_data_end+0xfffd6800>
   48b00:	a8c00217 	ldw	r3,8(r21)
   48b04:	90c00215 	stw	r3,8(r18)
   48b08:	a8c00317 	ldw	r3,12(r21)
   48b0c:	90c00315 	stw	r3,12(r18)
   48b10:	30801126 	beq	r6,r2,48b58 <_realloc_r+0x4c8>
   48b14:	90800404 	addi	r2,r18,16
   48b18:	a8c00404 	addi	r3,r21,16
   48b1c:	003f1906 	br	48784 <__alt_data_end+0xfffd6784>
   48b20:	90ffff17 	ldw	r3,-4(r18)
   48b24:	00bfff04 	movi	r2,-4
   48b28:	a825883a 	mov	r18,r21
   48b2c:	1884703a 	and	r2,r3,r2
   48b30:	80a1883a 	add	r16,r16,r2
   48b34:	003f2406 	br	487c8 <__alt_data_end+0xfffd67c8>
   48b38:	a8800217 	ldw	r2,8(r21)
   48b3c:	b0800415 	stw	r2,16(r22)
   48b40:	a8800317 	ldw	r2,12(r21)
   48b44:	b0800515 	stw	r2,20(r22)
   48b48:	31000a26 	beq	r6,r4,48b74 <_realloc_r+0x4e4>
   48b4c:	b0800604 	addi	r2,r22,24
   48b50:	ad400404 	addi	r21,r21,16
   48b54:	003fa906 	br	489fc <__alt_data_end+0xfffd69fc>
   48b58:	a9000417 	ldw	r4,16(r21)
   48b5c:	90800604 	addi	r2,r18,24
   48b60:	a8c00604 	addi	r3,r21,24
   48b64:	91000415 	stw	r4,16(r18)
   48b68:	a9000517 	ldw	r4,20(r21)
   48b6c:	91000515 	stw	r4,20(r18)
   48b70:	003f0406 	br	48784 <__alt_data_end+0xfffd6784>
   48b74:	a8c00417 	ldw	r3,16(r21)
   48b78:	ad400604 	addi	r21,r21,24
   48b7c:	b0800804 	addi	r2,r22,32
   48b80:	b0c00615 	stw	r3,24(r22)
   48b84:	a8ffff17 	ldw	r3,-4(r21)
   48b88:	b0c00715 	stw	r3,28(r22)
   48b8c:	003f9b06 	br	489fc <__alt_data_end+0xfffd69fc>
   48b90:	9005883a 	mov	r2,r18
   48b94:	003fc706 	br	48ab4 <__alt_data_end+0xfffd6ab4>
   48b98:	a80b883a 	mov	r5,r21
   48b9c:	9009883a 	mov	r4,r18
   48ba0:	00473700 	call	47370 <memmove>
   48ba4:	003fc906 	br	48acc <__alt_data_end+0xfffd6acc>
   48ba8:	a8800217 	ldw	r2,8(r21)
   48bac:	b0800415 	stw	r2,16(r22)
   48bb0:	a8800317 	ldw	r2,12(r21)
   48bb4:	b0800515 	stw	r2,20(r22)
   48bb8:	31000726 	beq	r6,r4,48bd8 <_realloc_r+0x548>
   48bbc:	b0800604 	addi	r2,r22,24
   48bc0:	ad400404 	addi	r21,r21,16
   48bc4:	003fbb06 	br	48ab4 <__alt_data_end+0xfffd6ab4>
   48bc8:	a009883a 	mov	r4,r20
   48bcc:	004e3f40 	call	4e3f4 <__malloc_unlock>
   48bd0:	0005883a 	mov	r2,zero
   48bd4:	003f0a06 	br	48800 <__alt_data_end+0xfffd6800>
   48bd8:	a8c00417 	ldw	r3,16(r21)
   48bdc:	ad400604 	addi	r21,r21,24
   48be0:	b0800804 	addi	r2,r22,32
   48be4:	b0c00615 	stw	r3,24(r22)
   48be8:	a8ffff17 	ldw	r3,-4(r21)
   48bec:	b0c00715 	stw	r3,28(r22)
   48bf0:	003fb006 	br	48ab4 <__alt_data_end+0xfffd6ab4>

00048bf4 <__fpclassifyd>:
   48bf4:	00a00034 	movhi	r2,32768
   48bf8:	10bfffc4 	addi	r2,r2,-1
   48bfc:	2884703a 	and	r2,r5,r2
   48c00:	10000726 	beq	r2,zero,48c20 <__fpclassifyd+0x2c>
   48c04:	00fffc34 	movhi	r3,65520
   48c08:	019ff834 	movhi	r6,32736
   48c0c:	28c7883a 	add	r3,r5,r3
   48c10:	31bfffc4 	addi	r6,r6,-1
   48c14:	30c00536 	bltu	r6,r3,48c2c <__fpclassifyd+0x38>
   48c18:	00800104 	movi	r2,4
   48c1c:	f800283a 	ret
   48c20:	2000021e 	bne	r4,zero,48c2c <__fpclassifyd+0x38>
   48c24:	00800084 	movi	r2,2
   48c28:	f800283a 	ret
   48c2c:	00dffc34 	movhi	r3,32752
   48c30:	019ff834 	movhi	r6,32736
   48c34:	28cb883a 	add	r5,r5,r3
   48c38:	31bfffc4 	addi	r6,r6,-1
   48c3c:	317ff62e 	bgeu	r6,r5,48c18 <__alt_data_end+0xfffd6c18>
   48c40:	01400434 	movhi	r5,16
   48c44:	297fffc4 	addi	r5,r5,-1
   48c48:	28800236 	bltu	r5,r2,48c54 <__fpclassifyd+0x60>
   48c4c:	008000c4 	movi	r2,3
   48c50:	f800283a 	ret
   48c54:	10c00226 	beq	r2,r3,48c60 <__fpclassifyd+0x6c>
   48c58:	0005883a 	mov	r2,zero
   48c5c:	f800283a 	ret
   48c60:	2005003a 	cmpeq	r2,r4,zero
   48c64:	f800283a 	ret

00048c68 <strcmp>:
   48c68:	2144b03a 	or	r2,r4,r5
   48c6c:	108000cc 	andi	r2,r2,3
   48c70:	1000171e 	bne	r2,zero,48cd0 <strcmp+0x68>
   48c74:	20800017 	ldw	r2,0(r4)
   48c78:	28c00017 	ldw	r3,0(r5)
   48c7c:	10c0141e 	bne	r2,r3,48cd0 <strcmp+0x68>
   48c80:	027fbff4 	movhi	r9,65279
   48c84:	4a7fbfc4 	addi	r9,r9,-257
   48c88:	0086303a 	nor	r3,zero,r2
   48c8c:	02202074 	movhi	r8,32897
   48c90:	1245883a 	add	r2,r2,r9
   48c94:	42202004 	addi	r8,r8,-32640
   48c98:	10c4703a 	and	r2,r2,r3
   48c9c:	1204703a 	and	r2,r2,r8
   48ca0:	10000226 	beq	r2,zero,48cac <strcmp+0x44>
   48ca4:	00002306 	br	48d34 <strcmp+0xcc>
   48ca8:	1000221e 	bne	r2,zero,48d34 <strcmp+0xcc>
   48cac:	21000104 	addi	r4,r4,4
   48cb0:	20c00017 	ldw	r3,0(r4)
   48cb4:	29400104 	addi	r5,r5,4
   48cb8:	29800017 	ldw	r6,0(r5)
   48cbc:	1a4f883a 	add	r7,r3,r9
   48cc0:	00c4303a 	nor	r2,zero,r3
   48cc4:	3884703a 	and	r2,r7,r2
   48cc8:	1204703a 	and	r2,r2,r8
   48ccc:	19bff626 	beq	r3,r6,48ca8 <__alt_data_end+0xfffd6ca8>
   48cd0:	20800003 	ldbu	r2,0(r4)
   48cd4:	10c03fcc 	andi	r3,r2,255
   48cd8:	18c0201c 	xori	r3,r3,128
   48cdc:	18ffe004 	addi	r3,r3,-128
   48ce0:	18000c26 	beq	r3,zero,48d14 <strcmp+0xac>
   48ce4:	29800007 	ldb	r6,0(r5)
   48ce8:	19800326 	beq	r3,r6,48cf8 <strcmp+0x90>
   48cec:	00001306 	br	48d3c <strcmp+0xd4>
   48cf0:	29800007 	ldb	r6,0(r5)
   48cf4:	11800b1e 	bne	r2,r6,48d24 <strcmp+0xbc>
   48cf8:	21000044 	addi	r4,r4,1
   48cfc:	20c00003 	ldbu	r3,0(r4)
   48d00:	29400044 	addi	r5,r5,1
   48d04:	18803fcc 	andi	r2,r3,255
   48d08:	1080201c 	xori	r2,r2,128
   48d0c:	10bfe004 	addi	r2,r2,-128
   48d10:	103ff71e 	bne	r2,zero,48cf0 <__alt_data_end+0xfffd6cf0>
   48d14:	0007883a 	mov	r3,zero
   48d18:	28800003 	ldbu	r2,0(r5)
   48d1c:	1885c83a 	sub	r2,r3,r2
   48d20:	f800283a 	ret
   48d24:	28800003 	ldbu	r2,0(r5)
   48d28:	18c03fcc 	andi	r3,r3,255
   48d2c:	1885c83a 	sub	r2,r3,r2
   48d30:	f800283a 	ret
   48d34:	0005883a 	mov	r2,zero
   48d38:	f800283a 	ret
   48d3c:	10c03fcc 	andi	r3,r2,255
   48d40:	003ff506 	br	48d18 <__alt_data_end+0xfffd6d18>

00048d44 <__sprint_r.part.0>:
   48d44:	28801917 	ldw	r2,100(r5)
   48d48:	defff604 	addi	sp,sp,-40
   48d4c:	dd400515 	stw	r21,20(sp)
   48d50:	dfc00915 	stw	ra,36(sp)
   48d54:	df000815 	stw	fp,32(sp)
   48d58:	ddc00715 	stw	r23,28(sp)
   48d5c:	dd800615 	stw	r22,24(sp)
   48d60:	dd000415 	stw	r20,16(sp)
   48d64:	dcc00315 	stw	r19,12(sp)
   48d68:	dc800215 	stw	r18,8(sp)
   48d6c:	dc400115 	stw	r17,4(sp)
   48d70:	dc000015 	stw	r16,0(sp)
   48d74:	1088000c 	andi	r2,r2,8192
   48d78:	302b883a 	mov	r21,r6
   48d7c:	10002e26 	beq	r2,zero,48e38 <__sprint_r.part.0+0xf4>
   48d80:	30800217 	ldw	r2,8(r6)
   48d84:	35800017 	ldw	r22,0(r6)
   48d88:	10002926 	beq	r2,zero,48e30 <__sprint_r.part.0+0xec>
   48d8c:	2827883a 	mov	r19,r5
   48d90:	2029883a 	mov	r20,r4
   48d94:	b5c00104 	addi	r23,r22,4
   48d98:	04bfffc4 	movi	r18,-1
   48d9c:	bc400017 	ldw	r17,0(r23)
   48da0:	b4000017 	ldw	r16,0(r22)
   48da4:	0039883a 	mov	fp,zero
   48da8:	8822d0ba 	srli	r17,r17,2
   48dac:	8800031e 	bne	r17,zero,48dbc <__sprint_r.part.0+0x78>
   48db0:	00001806 	br	48e14 <__sprint_r.part.0+0xd0>
   48db4:	84000104 	addi	r16,r16,4
   48db8:	8f001526 	beq	r17,fp,48e10 <__sprint_r.part.0+0xcc>
   48dbc:	81400017 	ldw	r5,0(r16)
   48dc0:	980d883a 	mov	r6,r19
   48dc4:	a009883a 	mov	r4,r20
   48dc8:	004a8100 	call	4a810 <_fputwc_r>
   48dcc:	e7000044 	addi	fp,fp,1
   48dd0:	14bff81e 	bne	r2,r18,48db4 <__alt_data_end+0xfffd6db4>
   48dd4:	9005883a 	mov	r2,r18
   48dd8:	a8000215 	stw	zero,8(r21)
   48ddc:	a8000115 	stw	zero,4(r21)
   48de0:	dfc00917 	ldw	ra,36(sp)
   48de4:	df000817 	ldw	fp,32(sp)
   48de8:	ddc00717 	ldw	r23,28(sp)
   48dec:	dd800617 	ldw	r22,24(sp)
   48df0:	dd400517 	ldw	r21,20(sp)
   48df4:	dd000417 	ldw	r20,16(sp)
   48df8:	dcc00317 	ldw	r19,12(sp)
   48dfc:	dc800217 	ldw	r18,8(sp)
   48e00:	dc400117 	ldw	r17,4(sp)
   48e04:	dc000017 	ldw	r16,0(sp)
   48e08:	dec00a04 	addi	sp,sp,40
   48e0c:	f800283a 	ret
   48e10:	a8800217 	ldw	r2,8(r21)
   48e14:	8c63883a 	add	r17,r17,r17
   48e18:	8c63883a 	add	r17,r17,r17
   48e1c:	1445c83a 	sub	r2,r2,r17
   48e20:	a8800215 	stw	r2,8(r21)
   48e24:	b5800204 	addi	r22,r22,8
   48e28:	bdc00204 	addi	r23,r23,8
   48e2c:	103fdb1e 	bne	r2,zero,48d9c <__alt_data_end+0xfffd6d9c>
   48e30:	0005883a 	mov	r2,zero
   48e34:	003fe806 	br	48dd8 <__alt_data_end+0xfffd6dd8>
   48e38:	00469700 	call	46970 <__sfvwrite_r>
   48e3c:	003fe606 	br	48dd8 <__alt_data_end+0xfffd6dd8>

00048e40 <__sprint_r>:
   48e40:	30c00217 	ldw	r3,8(r6)
   48e44:	18000126 	beq	r3,zero,48e4c <__sprint_r+0xc>
   48e48:	0048d441 	jmpi	48d44 <__sprint_r.part.0>
   48e4c:	30000115 	stw	zero,4(r6)
   48e50:	0005883a 	mov	r2,zero
   48e54:	f800283a 	ret

00048e58 <___vfiprintf_internal_r>:
   48e58:	deffc904 	addi	sp,sp,-220
   48e5c:	df003515 	stw	fp,212(sp)
   48e60:	dd003115 	stw	r20,196(sp)
   48e64:	dfc03615 	stw	ra,216(sp)
   48e68:	ddc03415 	stw	r23,208(sp)
   48e6c:	dd803315 	stw	r22,204(sp)
   48e70:	dd403215 	stw	r21,200(sp)
   48e74:	dcc03015 	stw	r19,192(sp)
   48e78:	dc802f15 	stw	r18,188(sp)
   48e7c:	dc402e15 	stw	r17,184(sp)
   48e80:	dc002d15 	stw	r16,180(sp)
   48e84:	d9002015 	stw	r4,128(sp)
   48e88:	d9c02215 	stw	r7,136(sp)
   48e8c:	2829883a 	mov	r20,r5
   48e90:	3039883a 	mov	fp,r6
   48e94:	20000226 	beq	r4,zero,48ea0 <___vfiprintf_internal_r+0x48>
   48e98:	20800e17 	ldw	r2,56(r4)
   48e9c:	1000cf26 	beq	r2,zero,491dc <___vfiprintf_internal_r+0x384>
   48ea0:	a080030b 	ldhu	r2,12(r20)
   48ea4:	10c8000c 	andi	r3,r2,8192
   48ea8:	1800061e 	bne	r3,zero,48ec4 <___vfiprintf_internal_r+0x6c>
   48eac:	a1001917 	ldw	r4,100(r20)
   48eb0:	00f7ffc4 	movi	r3,-8193
   48eb4:	10880014 	ori	r2,r2,8192
   48eb8:	20c6703a 	and	r3,r4,r3
   48ebc:	a080030d 	sth	r2,12(r20)
   48ec0:	a0c01915 	stw	r3,100(r20)
   48ec4:	10c0020c 	andi	r3,r2,8
   48ec8:	1800a926 	beq	r3,zero,49170 <___vfiprintf_internal_r+0x318>
   48ecc:	a0c00417 	ldw	r3,16(r20)
   48ed0:	1800a726 	beq	r3,zero,49170 <___vfiprintf_internal_r+0x318>
   48ed4:	1080068c 	andi	r2,r2,26
   48ed8:	00c00284 	movi	r3,10
   48edc:	10c0ac26 	beq	r2,r3,49190 <___vfiprintf_internal_r+0x338>
   48ee0:	da801a04 	addi	r10,sp,104
   48ee4:	da801e15 	stw	r10,120(sp)
   48ee8:	d8801e17 	ldw	r2,120(sp)
   48eec:	da8019c4 	addi	r10,sp,103
   48ef0:	05800174 	movhi	r22,5
   48ef4:	05c00174 	movhi	r23,5
   48ef8:	da801f15 	stw	r10,124(sp)
   48efc:	1295c83a 	sub	r10,r2,r10
   48f00:	b5858304 	addi	r22,r22,5644
   48f04:	bdc57f04 	addi	r23,r23,5628
   48f08:	dec01a15 	stw	sp,104(sp)
   48f0c:	d8001c15 	stw	zero,112(sp)
   48f10:	d8001b15 	stw	zero,108(sp)
   48f14:	d8002615 	stw	zero,152(sp)
   48f18:	d8002315 	stw	zero,140(sp)
   48f1c:	da802715 	stw	r10,156(sp)
   48f20:	d811883a 	mov	r8,sp
   48f24:	dd002115 	stw	r20,132(sp)
   48f28:	e021883a 	mov	r16,fp
   48f2c:	80800007 	ldb	r2,0(r16)
   48f30:	1003ea26 	beq	r2,zero,49edc <___vfiprintf_internal_r+0x1084>
   48f34:	00c00944 	movi	r3,37
   48f38:	8025883a 	mov	r18,r16
   48f3c:	10c0021e 	bne	r2,r3,48f48 <___vfiprintf_internal_r+0xf0>
   48f40:	00001606 	br	48f9c <___vfiprintf_internal_r+0x144>
   48f44:	10c00326 	beq	r2,r3,48f54 <___vfiprintf_internal_r+0xfc>
   48f48:	94800044 	addi	r18,r18,1
   48f4c:	90800007 	ldb	r2,0(r18)
   48f50:	103ffc1e 	bne	r2,zero,48f44 <__alt_data_end+0xfffd6f44>
   48f54:	9423c83a 	sub	r17,r18,r16
   48f58:	88001026 	beq	r17,zero,48f9c <___vfiprintf_internal_r+0x144>
   48f5c:	d8c01c17 	ldw	r3,112(sp)
   48f60:	d8801b17 	ldw	r2,108(sp)
   48f64:	44000015 	stw	r16,0(r8)
   48f68:	88c7883a 	add	r3,r17,r3
   48f6c:	10800044 	addi	r2,r2,1
   48f70:	44400115 	stw	r17,4(r8)
   48f74:	d8c01c15 	stw	r3,112(sp)
   48f78:	d8801b15 	stw	r2,108(sp)
   48f7c:	010001c4 	movi	r4,7
   48f80:	2080760e 	bge	r4,r2,4915c <___vfiprintf_internal_r+0x304>
   48f84:	1803821e 	bne	r3,zero,49d90 <___vfiprintf_internal_r+0xf38>
   48f88:	da802317 	ldw	r10,140(sp)
   48f8c:	d8001b15 	stw	zero,108(sp)
   48f90:	d811883a 	mov	r8,sp
   48f94:	5455883a 	add	r10,r10,r17
   48f98:	da802315 	stw	r10,140(sp)
   48f9c:	90800007 	ldb	r2,0(r18)
   48fa0:	10044626 	beq	r2,zero,4a0bc <___vfiprintf_internal_r+0x1264>
   48fa4:	90c00047 	ldb	r3,1(r18)
   48fa8:	94000044 	addi	r16,r18,1
   48fac:	d8001d85 	stb	zero,118(sp)
   48fb0:	0009883a 	mov	r4,zero
   48fb4:	000f883a 	mov	r7,zero
   48fb8:	027fffc4 	movi	r9,-1
   48fbc:	0023883a 	mov	r17,zero
   48fc0:	0029883a 	mov	r20,zero
   48fc4:	01401604 	movi	r5,88
   48fc8:	01800244 	movi	r6,9
   48fcc:	03400a84 	movi	r13,42
   48fd0:	03001b04 	movi	r12,108
   48fd4:	84000044 	addi	r16,r16,1
   48fd8:	18bff804 	addi	r2,r3,-32
   48fdc:	28827336 	bltu	r5,r2,499ac <___vfiprintf_internal_r+0xb54>
   48fe0:	100490ba 	slli	r2,r2,2
   48fe4:	02800174 	movhi	r10,5
   48fe8:	52a3fe04 	addi	r10,r10,-28680
   48fec:	1285883a 	add	r2,r2,r10
   48ff0:	10800017 	ldw	r2,0(r2)
   48ff4:	1000683a 	jmp	r2
   48ff8:	000496e0 	cmpeqi	zero,zero,4699
   48ffc:	000499ac 	andhi	zero,zero,4710
   49000:	000499ac 	andhi	zero,zero,4710
   49004:	00049700 	call	4970 <__reset-0x3b690>
   49008:	000499ac 	andhi	zero,zero,4710
   4900c:	000499ac 	andhi	zero,zero,4710
   49010:	000499ac 	andhi	zero,zero,4710
   49014:	000499ac 	andhi	zero,zero,4710
   49018:	000499ac 	andhi	zero,zero,4710
   4901c:	000499ac 	andhi	zero,zero,4710
   49020:	000498e8 	cmpgeui	zero,zero,4707
   49024:	00049904 	movi	zero,4708
   49028:	000499ac 	andhi	zero,zero,4710
   4902c:	000491ec 	andhi	zero,zero,4679
   49030:	00049914 	movui	zero,4708
   49034:	000499ac 	andhi	zero,zero,4710
   49038:	0004970c 	andi	zero,zero,4700
   4903c:	00049718 	cmpnei	zero,zero,4700
   49040:	00049718 	cmpnei	zero,zero,4700
   49044:	00049718 	cmpnei	zero,zero,4700
   49048:	00049718 	cmpnei	zero,zero,4700
   4904c:	00049718 	cmpnei	zero,zero,4700
   49050:	00049718 	cmpnei	zero,zero,4700
   49054:	00049718 	cmpnei	zero,zero,4700
   49058:	00049718 	cmpnei	zero,zero,4700
   4905c:	00049718 	cmpnei	zero,zero,4700
   49060:	000499ac 	andhi	zero,zero,4710
   49064:	000499ac 	andhi	zero,zero,4710
   49068:	000499ac 	andhi	zero,zero,4710
   4906c:	000499ac 	andhi	zero,zero,4710
   49070:	000499ac 	andhi	zero,zero,4710
   49074:	000499ac 	andhi	zero,zero,4710
   49078:	000499ac 	andhi	zero,zero,4710
   4907c:	000499ac 	andhi	zero,zero,4710
   49080:	000499ac 	andhi	zero,zero,4710
   49084:	000499ac 	andhi	zero,zero,4710
   49088:	00049744 	movi	zero,4701
   4908c:	000499ac 	andhi	zero,zero,4710
   49090:	000499ac 	andhi	zero,zero,4710
   49094:	000499ac 	andhi	zero,zero,4710
   49098:	000499ac 	andhi	zero,zero,4710
   4909c:	000499ac 	andhi	zero,zero,4710
   490a0:	000499ac 	andhi	zero,zero,4710
   490a4:	000499ac 	andhi	zero,zero,4710
   490a8:	000499ac 	andhi	zero,zero,4710
   490ac:	000499ac 	andhi	zero,zero,4710
   490b0:	000499ac 	andhi	zero,zero,4710
   490b4:	0004977c 	xorhi	zero,zero,4701
   490b8:	000499ac 	andhi	zero,zero,4710
   490bc:	000499ac 	andhi	zero,zero,4710
   490c0:	000499ac 	andhi	zero,zero,4710
   490c4:	000499ac 	andhi	zero,zero,4710
   490c8:	000499ac 	andhi	zero,zero,4710
   490cc:	000497d4 	movui	zero,4703
   490d0:	000499ac 	andhi	zero,zero,4710
   490d4:	000499ac 	andhi	zero,zero,4710
   490d8:	00049844 	movi	zero,4705
   490dc:	000499ac 	andhi	zero,zero,4710
   490e0:	000499ac 	andhi	zero,zero,4710
   490e4:	000499ac 	andhi	zero,zero,4710
   490e8:	000499ac 	andhi	zero,zero,4710
   490ec:	000499ac 	andhi	zero,zero,4710
   490f0:	000499ac 	andhi	zero,zero,4710
   490f4:	000499ac 	andhi	zero,zero,4710
   490f8:	000499ac 	andhi	zero,zero,4710
   490fc:	000499ac 	andhi	zero,zero,4710
   49100:	000499ac 	andhi	zero,zero,4710
   49104:	000495f0 	cmpltui	zero,zero,4695
   49108:	0004961c 	xori	zero,zero,4696
   4910c:	000499ac 	andhi	zero,zero,4710
   49110:	000499ac 	andhi	zero,zero,4710
   49114:	000499ac 	andhi	zero,zero,4710
   49118:	00049954 	movui	zero,4709
   4911c:	0004961c 	xori	zero,zero,4696
   49120:	000499ac 	andhi	zero,zero,4710
   49124:	000499ac 	andhi	zero,zero,4710
   49128:	000494b0 	cmpltui	zero,zero,4690
   4912c:	000499ac 	andhi	zero,zero,4710
   49130:	000494c0 	call	494c <__reset-0x3b6b4>
   49134:	000494fc 	xorhi	zero,zero,4691
   49138:	000491f8 	rdprs	zero,zero,4679
   4913c:	000494a4 	muli	zero,zero,4690
   49140:	000499ac 	andhi	zero,zero,4710
   49144:	00049880 	call	4988 <__reset-0x3b678>
   49148:	000499ac 	andhi	zero,zero,4710
   4914c:	000498d8 	cmpnei	zero,zero,4707
   49150:	000499ac 	andhi	zero,zero,4710
   49154:	000499ac 	andhi	zero,zero,4710
   49158:	0004959c 	xori	zero,zero,4694
   4915c:	42000204 	addi	r8,r8,8
   49160:	da802317 	ldw	r10,140(sp)
   49164:	5455883a 	add	r10,r10,r17
   49168:	da802315 	stw	r10,140(sp)
   4916c:	003f8b06 	br	48f9c <__alt_data_end+0xfffd6f9c>
   49170:	d9002017 	ldw	r4,128(sp)
   49174:	a00b883a 	mov	r5,r20
   49178:	00444180 	call	44418 <__swsetup_r>
   4917c:	1003b11e 	bne	r2,zero,4a044 <___vfiprintf_internal_r+0x11ec>
   49180:	a080030b 	ldhu	r2,12(r20)
   49184:	00c00284 	movi	r3,10
   49188:	1080068c 	andi	r2,r2,26
   4918c:	10ff541e 	bne	r2,r3,48ee0 <__alt_data_end+0xfffd6ee0>
   49190:	a080038f 	ldh	r2,14(r20)
   49194:	103f5216 	blt	r2,zero,48ee0 <__alt_data_end+0xfffd6ee0>
   49198:	d9c02217 	ldw	r7,136(sp)
   4919c:	d9002017 	ldw	r4,128(sp)
   491a0:	e00d883a 	mov	r6,fp
   491a4:	a00b883a 	mov	r5,r20
   491a8:	004a2d00 	call	4a2d0 <__sbprintf>
   491ac:	dfc03617 	ldw	ra,216(sp)
   491b0:	df003517 	ldw	fp,212(sp)
   491b4:	ddc03417 	ldw	r23,208(sp)
   491b8:	dd803317 	ldw	r22,204(sp)
   491bc:	dd403217 	ldw	r21,200(sp)
   491c0:	dd003117 	ldw	r20,196(sp)
   491c4:	dcc03017 	ldw	r19,192(sp)
   491c8:	dc802f17 	ldw	r18,188(sp)
   491cc:	dc402e17 	ldw	r17,184(sp)
   491d0:	dc002d17 	ldw	r16,180(sp)
   491d4:	dec03704 	addi	sp,sp,220
   491d8:	f800283a 	ret
   491dc:	00464400 	call	46440 <__sinit>
   491e0:	003f2f06 	br	48ea0 <__alt_data_end+0xfffd6ea0>
   491e4:	0463c83a 	sub	r17,zero,r17
   491e8:	d8802215 	stw	r2,136(sp)
   491ec:	a5000114 	ori	r20,r20,4
   491f0:	80c00007 	ldb	r3,0(r16)
   491f4:	003f7706 	br	48fd4 <__alt_data_end+0xfffd6fd4>
   491f8:	00800c04 	movi	r2,48
   491fc:	da802217 	ldw	r10,136(sp)
   49200:	d8801d05 	stb	r2,116(sp)
   49204:	00801e04 	movi	r2,120
   49208:	d8801d45 	stb	r2,117(sp)
   4920c:	d8001d85 	stb	zero,118(sp)
   49210:	50c00104 	addi	r3,r10,4
   49214:	54800017 	ldw	r18,0(r10)
   49218:	0027883a 	mov	r19,zero
   4921c:	a0800094 	ori	r2,r20,2
   49220:	48030b16 	blt	r9,zero,49e50 <___vfiprintf_internal_r+0xff8>
   49224:	00bfdfc4 	movi	r2,-129
   49228:	a096703a 	and	r11,r20,r2
   4922c:	d8c02215 	stw	r3,136(sp)
   49230:	5d000094 	ori	r20,r11,2
   49234:	90032b1e 	bne	r18,zero,49ee4 <___vfiprintf_internal_r+0x108c>
   49238:	00800174 	movhi	r2,5
   4923c:	10851f04 	addi	r2,r2,5244
   49240:	d8802615 	stw	r2,152(sp)
   49244:	0039883a 	mov	fp,zero
   49248:	48017b1e 	bne	r9,zero,49838 <___vfiprintf_internal_r+0x9e0>
   4924c:	0013883a 	mov	r9,zero
   49250:	0027883a 	mov	r19,zero
   49254:	dd401a04 	addi	r21,sp,104
   49258:	4825883a 	mov	r18,r9
   4925c:	4cc0010e 	bge	r9,r19,49264 <___vfiprintf_internal_r+0x40c>
   49260:	9825883a 	mov	r18,r19
   49264:	e7003fcc 	andi	fp,fp,255
   49268:	e700201c 	xori	fp,fp,128
   4926c:	e73fe004 	addi	fp,fp,-128
   49270:	e0000126 	beq	fp,zero,49278 <___vfiprintf_internal_r+0x420>
   49274:	94800044 	addi	r18,r18,1
   49278:	a380008c 	andi	r14,r20,2
   4927c:	70000126 	beq	r14,zero,49284 <___vfiprintf_internal_r+0x42c>
   49280:	94800084 	addi	r18,r18,2
   49284:	a700210c 	andi	fp,r20,132
   49288:	e001df1e 	bne	fp,zero,49a08 <___vfiprintf_internal_r+0xbb0>
   4928c:	8c87c83a 	sub	r3,r17,r18
   49290:	00c1dd0e 	bge	zero,r3,49a08 <___vfiprintf_internal_r+0xbb0>
   49294:	01c00404 	movi	r7,16
   49298:	d8801c17 	ldw	r2,112(sp)
   4929c:	38c3ad0e 	bge	r7,r3,4a154 <___vfiprintf_internal_r+0x12fc>
   492a0:	02800174 	movhi	r10,5
   492a4:	52858304 	addi	r10,r10,5644
   492a8:	dc002915 	stw	r16,164(sp)
   492ac:	d9801b17 	ldw	r6,108(sp)
   492b0:	da802415 	stw	r10,144(sp)
   492b4:	03c001c4 	movi	r15,7
   492b8:	da402515 	stw	r9,148(sp)
   492bc:	db802815 	stw	r14,160(sp)
   492c0:	1821883a 	mov	r16,r3
   492c4:	00000506 	br	492dc <___vfiprintf_internal_r+0x484>
   492c8:	31400084 	addi	r5,r6,2
   492cc:	42000204 	addi	r8,r8,8
   492d0:	200d883a 	mov	r6,r4
   492d4:	843ffc04 	addi	r16,r16,-16
   492d8:	3c000d0e 	bge	r7,r16,49310 <___vfiprintf_internal_r+0x4b8>
   492dc:	10800404 	addi	r2,r2,16
   492e0:	31000044 	addi	r4,r6,1
   492e4:	45800015 	stw	r22,0(r8)
   492e8:	41c00115 	stw	r7,4(r8)
   492ec:	d8801c15 	stw	r2,112(sp)
   492f0:	d9001b15 	stw	r4,108(sp)
   492f4:	793ff40e 	bge	r15,r4,492c8 <__alt_data_end+0xfffd72c8>
   492f8:	1001b51e 	bne	r2,zero,499d0 <___vfiprintf_internal_r+0xb78>
   492fc:	843ffc04 	addi	r16,r16,-16
   49300:	000d883a 	mov	r6,zero
   49304:	01400044 	movi	r5,1
   49308:	d811883a 	mov	r8,sp
   4930c:	3c3ff316 	blt	r7,r16,492dc <__alt_data_end+0xfffd72dc>
   49310:	8007883a 	mov	r3,r16
   49314:	da402517 	ldw	r9,148(sp)
   49318:	db802817 	ldw	r14,160(sp)
   4931c:	dc002917 	ldw	r16,164(sp)
   49320:	da802417 	ldw	r10,144(sp)
   49324:	1885883a 	add	r2,r3,r2
   49328:	40c00115 	stw	r3,4(r8)
   4932c:	42800015 	stw	r10,0(r8)
   49330:	d8801c15 	stw	r2,112(sp)
   49334:	d9401b15 	stw	r5,108(sp)
   49338:	00c001c4 	movi	r3,7
   4933c:	19426016 	blt	r3,r5,49cc0 <___vfiprintf_internal_r+0xe68>
   49340:	d8c01d87 	ldb	r3,118(sp)
   49344:	42000204 	addi	r8,r8,8
   49348:	29000044 	addi	r4,r5,1
   4934c:	1801b31e 	bne	r3,zero,49a1c <___vfiprintf_internal_r+0xbc4>
   49350:	7001c026 	beq	r14,zero,49a54 <___vfiprintf_internal_r+0xbfc>
   49354:	d8c01d04 	addi	r3,sp,116
   49358:	10800084 	addi	r2,r2,2
   4935c:	40c00015 	stw	r3,0(r8)
   49360:	00c00084 	movi	r3,2
   49364:	40c00115 	stw	r3,4(r8)
   49368:	d8801c15 	stw	r2,112(sp)
   4936c:	d9001b15 	stw	r4,108(sp)
   49370:	00c001c4 	movi	r3,7
   49374:	1902650e 	bge	r3,r4,49d0c <___vfiprintf_internal_r+0xeb4>
   49378:	10029a1e 	bne	r2,zero,49de4 <___vfiprintf_internal_r+0xf8c>
   4937c:	00c02004 	movi	r3,128
   49380:	01000044 	movi	r4,1
   49384:	000b883a 	mov	r5,zero
   49388:	d811883a 	mov	r8,sp
   4938c:	e0c1b31e 	bne	fp,r3,49a5c <___vfiprintf_internal_r+0xc04>
   49390:	8cb9c83a 	sub	fp,r17,r18
   49394:	0701b10e 	bge	zero,fp,49a5c <___vfiprintf_internal_r+0xc04>
   49398:	01c00404 	movi	r7,16
   4939c:	3f03890e 	bge	r7,fp,4a1c4 <___vfiprintf_internal_r+0x136c>
   493a0:	00c00174 	movhi	r3,5
   493a4:	18c57f04 	addi	r3,r3,5628
   493a8:	d8c02415 	stw	r3,144(sp)
   493ac:	8007883a 	mov	r3,r16
   493b0:	034001c4 	movi	r13,7
   493b4:	e021883a 	mov	r16,fp
   493b8:	da402515 	stw	r9,148(sp)
   493bc:	1839883a 	mov	fp,r3
   493c0:	00000506 	br	493d8 <___vfiprintf_internal_r+0x580>
   493c4:	29800084 	addi	r6,r5,2
   493c8:	42000204 	addi	r8,r8,8
   493cc:	180b883a 	mov	r5,r3
   493d0:	843ffc04 	addi	r16,r16,-16
   493d4:	3c000d0e 	bge	r7,r16,4940c <___vfiprintf_internal_r+0x5b4>
   493d8:	10800404 	addi	r2,r2,16
   493dc:	28c00044 	addi	r3,r5,1
   493e0:	45c00015 	stw	r23,0(r8)
   493e4:	41c00115 	stw	r7,4(r8)
   493e8:	d8801c15 	stw	r2,112(sp)
   493ec:	d8c01b15 	stw	r3,108(sp)
   493f0:	68fff40e 	bge	r13,r3,493c4 <__alt_data_end+0xfffd73c4>
   493f4:	1002241e 	bne	r2,zero,49c88 <___vfiprintf_internal_r+0xe30>
   493f8:	843ffc04 	addi	r16,r16,-16
   493fc:	01800044 	movi	r6,1
   49400:	000b883a 	mov	r5,zero
   49404:	d811883a 	mov	r8,sp
   49408:	3c3ff316 	blt	r7,r16,493d8 <__alt_data_end+0xfffd73d8>
   4940c:	da402517 	ldw	r9,148(sp)
   49410:	e007883a 	mov	r3,fp
   49414:	8039883a 	mov	fp,r16
   49418:	1821883a 	mov	r16,r3
   4941c:	d8c02417 	ldw	r3,144(sp)
   49420:	1705883a 	add	r2,r2,fp
   49424:	47000115 	stw	fp,4(r8)
   49428:	40c00015 	stw	r3,0(r8)
   4942c:	d8801c15 	stw	r2,112(sp)
   49430:	d9801b15 	stw	r6,108(sp)
   49434:	00c001c4 	movi	r3,7
   49438:	19827616 	blt	r3,r6,49e14 <___vfiprintf_internal_r+0xfbc>
   4943c:	4cf9c83a 	sub	fp,r9,r19
   49440:	42000204 	addi	r8,r8,8
   49444:	31000044 	addi	r4,r6,1
   49448:	300b883a 	mov	r5,r6
   4944c:	07018516 	blt	zero,fp,49a64 <___vfiprintf_internal_r+0xc0c>
   49450:	9885883a 	add	r2,r19,r2
   49454:	45400015 	stw	r21,0(r8)
   49458:	44c00115 	stw	r19,4(r8)
   4945c:	d8801c15 	stw	r2,112(sp)
   49460:	d9001b15 	stw	r4,108(sp)
   49464:	00c001c4 	movi	r3,7
   49468:	1901dd0e 	bge	r3,r4,49be0 <___vfiprintf_internal_r+0xd88>
   4946c:	1002401e 	bne	r2,zero,49d70 <___vfiprintf_internal_r+0xf18>
   49470:	d8001b15 	stw	zero,108(sp)
   49474:	a2c0010c 	andi	r11,r20,4
   49478:	58000226 	beq	r11,zero,49484 <___vfiprintf_internal_r+0x62c>
   4947c:	8ca7c83a 	sub	r19,r17,r18
   49480:	04c2f216 	blt	zero,r19,4a04c <___vfiprintf_internal_r+0x11f4>
   49484:	8c80010e 	bge	r17,r18,4948c <___vfiprintf_internal_r+0x634>
   49488:	9023883a 	mov	r17,r18
   4948c:	da802317 	ldw	r10,140(sp)
   49490:	5455883a 	add	r10,r10,r17
   49494:	da802315 	stw	r10,140(sp)
   49498:	d8001b15 	stw	zero,108(sp)
   4949c:	d811883a 	mov	r8,sp
   494a0:	003ea206 	br	48f2c <__alt_data_end+0xfffd6f2c>
   494a4:	a5000814 	ori	r20,r20,32
   494a8:	80c00007 	ldb	r3,0(r16)
   494ac:	003ec906 	br	48fd4 <__alt_data_end+0xfffd6fd4>
   494b0:	80c00007 	ldb	r3,0(r16)
   494b4:	1b030926 	beq	r3,r12,4a0dc <___vfiprintf_internal_r+0x1284>
   494b8:	a5000414 	ori	r20,r20,16
   494bc:	003ec506 	br	48fd4 <__alt_data_end+0xfffd6fd4>
   494c0:	21003fcc 	andi	r4,r4,255
   494c4:	20035e1e 	bne	r4,zero,4a240 <___vfiprintf_internal_r+0x13e8>
   494c8:	a080080c 	andi	r2,r20,32
   494cc:	1002a526 	beq	r2,zero,49f64 <___vfiprintf_internal_r+0x110c>
   494d0:	da802217 	ldw	r10,136(sp)
   494d4:	50800017 	ldw	r2,0(r10)
   494d8:	da802317 	ldw	r10,140(sp)
   494dc:	5007d7fa 	srai	r3,r10,31
   494e0:	da802217 	ldw	r10,136(sp)
   494e4:	10c00115 	stw	r3,4(r2)
   494e8:	52800104 	addi	r10,r10,4
   494ec:	da802215 	stw	r10,136(sp)
   494f0:	da802317 	ldw	r10,140(sp)
   494f4:	12800015 	stw	r10,0(r2)
   494f8:	003e8c06 	br	48f2c <__alt_data_end+0xfffd6f2c>
   494fc:	21003fcc 	andi	r4,r4,255
   49500:	2003511e 	bne	r4,zero,4a248 <___vfiprintf_internal_r+0x13f0>
   49504:	a080080c 	andi	r2,r20,32
   49508:	1000a126 	beq	r2,zero,49790 <___vfiprintf_internal_r+0x938>
   4950c:	da802217 	ldw	r10,136(sp)
   49510:	d8001d85 	stb	zero,118(sp)
   49514:	50800204 	addi	r2,r10,8
   49518:	54800017 	ldw	r18,0(r10)
   4951c:	54c00117 	ldw	r19,4(r10)
   49520:	4802b416 	blt	r9,zero,49ff4 <___vfiprintf_internal_r+0x119c>
   49524:	013fdfc4 	movi	r4,-129
   49528:	94c6b03a 	or	r3,r18,r19
   4952c:	d8802215 	stw	r2,136(sp)
   49530:	a128703a 	and	r20,r20,r4
   49534:	1800a226 	beq	r3,zero,497c0 <___vfiprintf_internal_r+0x968>
   49538:	0039883a 	mov	fp,zero
   4953c:	dd401a04 	addi	r21,sp,104
   49540:	9006d0fa 	srli	r3,r18,3
   49544:	9808977a 	slli	r4,r19,29
   49548:	9826d0fa 	srli	r19,r19,3
   4954c:	948001cc 	andi	r18,r18,7
   49550:	90800c04 	addi	r2,r18,48
   49554:	ad7fffc4 	addi	r21,r21,-1
   49558:	20e4b03a 	or	r18,r4,r3
   4955c:	a8800005 	stb	r2,0(r21)
   49560:	94c6b03a 	or	r3,r18,r19
   49564:	183ff61e 	bne	r3,zero,49540 <__alt_data_end+0xfffd7540>
   49568:	a0c0004c 	andi	r3,r20,1
   4956c:	18005926 	beq	r3,zero,496d4 <___vfiprintf_internal_r+0x87c>
   49570:	10803fcc 	andi	r2,r2,255
   49574:	1080201c 	xori	r2,r2,128
   49578:	10bfe004 	addi	r2,r2,-128
   4957c:	00c00c04 	movi	r3,48
   49580:	10c05426 	beq	r2,r3,496d4 <___vfiprintf_internal_r+0x87c>
   49584:	da801e17 	ldw	r10,120(sp)
   49588:	a8bfffc4 	addi	r2,r21,-1
   4958c:	a8ffffc5 	stb	r3,-1(r21)
   49590:	50a7c83a 	sub	r19,r10,r2
   49594:	102b883a 	mov	r21,r2
   49598:	003f2f06 	br	49258 <__alt_data_end+0xfffd7258>
   4959c:	21003fcc 	andi	r4,r4,255
   495a0:	2003421e 	bne	r4,zero,4a2ac <___vfiprintf_internal_r+0x1454>
   495a4:	00800174 	movhi	r2,5
   495a8:	10851f04 	addi	r2,r2,5244
   495ac:	d8802615 	stw	r2,152(sp)
   495b0:	a080080c 	andi	r2,r20,32
   495b4:	1000aa26 	beq	r2,zero,49860 <___vfiprintf_internal_r+0xa08>
   495b8:	da802217 	ldw	r10,136(sp)
   495bc:	54800017 	ldw	r18,0(r10)
   495c0:	54c00117 	ldw	r19,4(r10)
   495c4:	52800204 	addi	r10,r10,8
   495c8:	da802215 	stw	r10,136(sp)
   495cc:	a080004c 	andi	r2,r20,1
   495d0:	1001d226 	beq	r2,zero,49d1c <___vfiprintf_internal_r+0xec4>
   495d4:	94c4b03a 	or	r2,r18,r19
   495d8:	1002351e 	bne	r2,zero,49eb0 <___vfiprintf_internal_r+0x1058>
   495dc:	d8001d85 	stb	zero,118(sp)
   495e0:	48022216 	blt	r9,zero,49e6c <___vfiprintf_internal_r+0x1014>
   495e4:	00bfdfc4 	movi	r2,-129
   495e8:	a0a8703a 	and	r20,r20,r2
   495ec:	003f1506 	br	49244 <__alt_data_end+0xfffd7244>
   495f0:	da802217 	ldw	r10,136(sp)
   495f4:	04800044 	movi	r18,1
   495f8:	d8001d85 	stb	zero,118(sp)
   495fc:	50800017 	ldw	r2,0(r10)
   49600:	52800104 	addi	r10,r10,4
   49604:	da802215 	stw	r10,136(sp)
   49608:	d8801005 	stb	r2,64(sp)
   4960c:	9027883a 	mov	r19,r18
   49610:	dd401004 	addi	r21,sp,64
   49614:	0013883a 	mov	r9,zero
   49618:	003f1706 	br	49278 <__alt_data_end+0xfffd7278>
   4961c:	21003fcc 	andi	r4,r4,255
   49620:	2003201e 	bne	r4,zero,4a2a4 <___vfiprintf_internal_r+0x144c>
   49624:	a080080c 	andi	r2,r20,32
   49628:	10004b26 	beq	r2,zero,49758 <___vfiprintf_internal_r+0x900>
   4962c:	da802217 	ldw	r10,136(sp)
   49630:	50800117 	ldw	r2,4(r10)
   49634:	54800017 	ldw	r18,0(r10)
   49638:	52800204 	addi	r10,r10,8
   4963c:	da802215 	stw	r10,136(sp)
   49640:	1027883a 	mov	r19,r2
   49644:	10022c16 	blt	r2,zero,49ef8 <___vfiprintf_internal_r+0x10a0>
   49648:	df001d83 	ldbu	fp,118(sp)
   4964c:	48007216 	blt	r9,zero,49818 <___vfiprintf_internal_r+0x9c0>
   49650:	00ffdfc4 	movi	r3,-129
   49654:	94c4b03a 	or	r2,r18,r19
   49658:	a0e8703a 	and	r20,r20,r3
   4965c:	1000cc26 	beq	r2,zero,49990 <___vfiprintf_internal_r+0xb38>
   49660:	98021026 	beq	r19,zero,49ea4 <___vfiprintf_internal_r+0x104c>
   49664:	dc402415 	stw	r17,144(sp)
   49668:	dc002515 	stw	r16,148(sp)
   4966c:	9823883a 	mov	r17,r19
   49670:	9021883a 	mov	r16,r18
   49674:	dd401a04 	addi	r21,sp,104
   49678:	4825883a 	mov	r18,r9
   4967c:	4027883a 	mov	r19,r8
   49680:	8009883a 	mov	r4,r16
   49684:	880b883a 	mov	r5,r17
   49688:	01800284 	movi	r6,10
   4968c:	000f883a 	mov	r7,zero
   49690:	004b0140 	call	4b014 <__umoddi3>
   49694:	10800c04 	addi	r2,r2,48
   49698:	ad7fffc4 	addi	r21,r21,-1
   4969c:	8009883a 	mov	r4,r16
   496a0:	880b883a 	mov	r5,r17
   496a4:	a8800005 	stb	r2,0(r21)
   496a8:	01800284 	movi	r6,10
   496ac:	000f883a 	mov	r7,zero
   496b0:	004aa9c0 	call	4aa9c <__udivdi3>
   496b4:	1021883a 	mov	r16,r2
   496b8:	10c4b03a 	or	r2,r2,r3
   496bc:	1823883a 	mov	r17,r3
   496c0:	103fef1e 	bne	r2,zero,49680 <__alt_data_end+0xfffd7680>
   496c4:	dc402417 	ldw	r17,144(sp)
   496c8:	dc002517 	ldw	r16,148(sp)
   496cc:	9013883a 	mov	r9,r18
   496d0:	9811883a 	mov	r8,r19
   496d4:	da801e17 	ldw	r10,120(sp)
   496d8:	5567c83a 	sub	r19,r10,r21
   496dc:	003ede06 	br	49258 <__alt_data_end+0xfffd7258>
   496e0:	38803fcc 	andi	r2,r7,255
   496e4:	1080201c 	xori	r2,r2,128
   496e8:	10bfe004 	addi	r2,r2,-128
   496ec:	1002371e 	bne	r2,zero,49fcc <___vfiprintf_internal_r+0x1174>
   496f0:	01000044 	movi	r4,1
   496f4:	01c00804 	movi	r7,32
   496f8:	80c00007 	ldb	r3,0(r16)
   496fc:	003e3506 	br	48fd4 <__alt_data_end+0xfffd6fd4>
   49700:	a5000054 	ori	r20,r20,1
   49704:	80c00007 	ldb	r3,0(r16)
   49708:	003e3206 	br	48fd4 <__alt_data_end+0xfffd6fd4>
   4970c:	a5002014 	ori	r20,r20,128
   49710:	80c00007 	ldb	r3,0(r16)
   49714:	003e2f06 	br	48fd4 <__alt_data_end+0xfffd6fd4>
   49718:	8015883a 	mov	r10,r16
   4971c:	0023883a 	mov	r17,zero
   49720:	18bff404 	addi	r2,r3,-48
   49724:	50c00007 	ldb	r3,0(r10)
   49728:	8c4002a4 	muli	r17,r17,10
   4972c:	84000044 	addi	r16,r16,1
   49730:	8015883a 	mov	r10,r16
   49734:	1463883a 	add	r17,r2,r17
   49738:	18bff404 	addi	r2,r3,-48
   4973c:	30bff92e 	bgeu	r6,r2,49724 <__alt_data_end+0xfffd7724>
   49740:	003e2506 	br	48fd8 <__alt_data_end+0xfffd6fd8>
   49744:	21003fcc 	andi	r4,r4,255
   49748:	2002d41e 	bne	r4,zero,4a29c <___vfiprintf_internal_r+0x1444>
   4974c:	a5000414 	ori	r20,r20,16
   49750:	a080080c 	andi	r2,r20,32
   49754:	103fb51e 	bne	r2,zero,4962c <__alt_data_end+0xfffd762c>
   49758:	a080040c 	andi	r2,r20,16
   4975c:	1001f826 	beq	r2,zero,49f40 <___vfiprintf_internal_r+0x10e8>
   49760:	da802217 	ldw	r10,136(sp)
   49764:	54800017 	ldw	r18,0(r10)
   49768:	52800104 	addi	r10,r10,4
   4976c:	da802215 	stw	r10,136(sp)
   49770:	9027d7fa 	srai	r19,r18,31
   49774:	9805883a 	mov	r2,r19
   49778:	003fb206 	br	49644 <__alt_data_end+0xfffd7644>
   4977c:	21003fcc 	andi	r4,r4,255
   49780:	2002c41e 	bne	r4,zero,4a294 <___vfiprintf_internal_r+0x143c>
   49784:	a5000414 	ori	r20,r20,16
   49788:	a080080c 	andi	r2,r20,32
   4978c:	103f5f1e 	bne	r2,zero,4950c <__alt_data_end+0xfffd750c>
   49790:	a080040c 	andi	r2,r20,16
   49794:	10020f26 	beq	r2,zero,49fd4 <___vfiprintf_internal_r+0x117c>
   49798:	da802217 	ldw	r10,136(sp)
   4979c:	d8001d85 	stb	zero,118(sp)
   497a0:	0027883a 	mov	r19,zero
   497a4:	50800104 	addi	r2,r10,4
   497a8:	54800017 	ldw	r18,0(r10)
   497ac:	48021116 	blt	r9,zero,49ff4 <___vfiprintf_internal_r+0x119c>
   497b0:	00ffdfc4 	movi	r3,-129
   497b4:	d8802215 	stw	r2,136(sp)
   497b8:	a0e8703a 	and	r20,r20,r3
   497bc:	903f5e1e 	bne	r18,zero,49538 <__alt_data_end+0xfffd7538>
   497c0:	0039883a 	mov	fp,zero
   497c4:	4802a626 	beq	r9,zero,4a260 <___vfiprintf_internal_r+0x1408>
   497c8:	0025883a 	mov	r18,zero
   497cc:	0027883a 	mov	r19,zero
   497d0:	003f5a06 	br	4953c <__alt_data_end+0xfffd753c>
   497d4:	21003fcc 	andi	r4,r4,255
   497d8:	20029f1e 	bne	r4,zero,4a258 <___vfiprintf_internal_r+0x1400>
   497dc:	a5000414 	ori	r20,r20,16
   497e0:	a080080c 	andi	r2,r20,32
   497e4:	10005e1e 	bne	r2,zero,49960 <___vfiprintf_internal_r+0xb08>
   497e8:	a080040c 	andi	r2,r20,16
   497ec:	1001a21e 	bne	r2,zero,49e78 <___vfiprintf_internal_r+0x1020>
   497f0:	a080100c 	andi	r2,r20,64
   497f4:	d8001d85 	stb	zero,118(sp)
   497f8:	da802217 	ldw	r10,136(sp)
   497fc:	1002231e 	bne	r2,zero,4a08c <___vfiprintf_internal_r+0x1234>
   49800:	50800104 	addi	r2,r10,4
   49804:	54800017 	ldw	r18,0(r10)
   49808:	0027883a 	mov	r19,zero
   4980c:	4801a00e 	bge	r9,zero,49e90 <___vfiprintf_internal_r+0x1038>
   49810:	d8802215 	stw	r2,136(sp)
   49814:	0039883a 	mov	fp,zero
   49818:	94c4b03a 	or	r2,r18,r19
   4981c:	103f901e 	bne	r2,zero,49660 <__alt_data_end+0xfffd7660>
   49820:	00800044 	movi	r2,1
   49824:	10803fcc 	andi	r2,r2,255
   49828:	00c00044 	movi	r3,1
   4982c:	10c05926 	beq	r2,r3,49994 <___vfiprintf_internal_r+0xb3c>
   49830:	00c00084 	movi	r3,2
   49834:	10ffe41e 	bne	r2,r3,497c8 <__alt_data_end+0xfffd77c8>
   49838:	0025883a 	mov	r18,zero
   4983c:	0027883a 	mov	r19,zero
   49840:	00013d06 	br	49d38 <___vfiprintf_internal_r+0xee0>
   49844:	21003fcc 	andi	r4,r4,255
   49848:	2002811e 	bne	r4,zero,4a250 <___vfiprintf_internal_r+0x13f8>
   4984c:	00800174 	movhi	r2,5
   49850:	10851a04 	addi	r2,r2,5224
   49854:	d8802615 	stw	r2,152(sp)
   49858:	a080080c 	andi	r2,r20,32
   4985c:	103f561e 	bne	r2,zero,495b8 <__alt_data_end+0xfffd75b8>
   49860:	a080040c 	andi	r2,r20,16
   49864:	1001d126 	beq	r2,zero,49fac <___vfiprintf_internal_r+0x1154>
   49868:	da802217 	ldw	r10,136(sp)
   4986c:	0027883a 	mov	r19,zero
   49870:	54800017 	ldw	r18,0(r10)
   49874:	52800104 	addi	r10,r10,4
   49878:	da802215 	stw	r10,136(sp)
   4987c:	003f5306 	br	495cc <__alt_data_end+0xfffd75cc>
   49880:	da802217 	ldw	r10,136(sp)
   49884:	d8001d85 	stb	zero,118(sp)
   49888:	55400017 	ldw	r21,0(r10)
   4988c:	50c00104 	addi	r3,r10,4
   49890:	a8024226 	beq	r21,zero,4a19c <___vfiprintf_internal_r+0x1344>
   49894:	48021816 	blt	r9,zero,4a0f8 <___vfiprintf_internal_r+0x12a0>
   49898:	480d883a 	mov	r6,r9
   4989c:	000b883a 	mov	r5,zero
   498a0:	a809883a 	mov	r4,r21
   498a4:	d8c02a15 	stw	r3,168(sp)
   498a8:	da002b15 	stw	r8,172(sp)
   498ac:	da402c15 	stw	r9,176(sp)
   498b0:	00471440 	call	47144 <memchr>
   498b4:	d8c02a17 	ldw	r3,168(sp)
   498b8:	da002b17 	ldw	r8,172(sp)
   498bc:	da402c17 	ldw	r9,176(sp)
   498c0:	10024826 	beq	r2,zero,4a1e4 <___vfiprintf_internal_r+0x138c>
   498c4:	1567c83a 	sub	r19,r2,r21
   498c8:	df001d83 	ldbu	fp,118(sp)
   498cc:	d8c02215 	stw	r3,136(sp)
   498d0:	0013883a 	mov	r9,zero
   498d4:	003e6006 	br	49258 <__alt_data_end+0xfffd7258>
   498d8:	21003fcc 	andi	r4,r4,255
   498dc:	203fc026 	beq	r4,zero,497e0 <__alt_data_end+0xfffd77e0>
   498e0:	d9c01d85 	stb	r7,118(sp)
   498e4:	003fbe06 	br	497e0 <__alt_data_end+0xfffd77e0>
   498e8:	da802217 	ldw	r10,136(sp)
   498ec:	54400017 	ldw	r17,0(r10)
   498f0:	50800104 	addi	r2,r10,4
   498f4:	883e3b16 	blt	r17,zero,491e4 <__alt_data_end+0xfffd71e4>
   498f8:	d8802215 	stw	r2,136(sp)
   498fc:	80c00007 	ldb	r3,0(r16)
   49900:	003db406 	br	48fd4 <__alt_data_end+0xfffd6fd4>
   49904:	01000044 	movi	r4,1
   49908:	01c00ac4 	movi	r7,43
   4990c:	80c00007 	ldb	r3,0(r16)
   49910:	003db006 	br	48fd4 <__alt_data_end+0xfffd6fd4>
   49914:	80c00007 	ldb	r3,0(r16)
   49918:	82800044 	addi	r10,r16,1
   4991c:	1b423c26 	beq	r3,r13,4a210 <___vfiprintf_internal_r+0x13b8>
   49920:	18bff404 	addi	r2,r3,-48
   49924:	0013883a 	mov	r9,zero
   49928:	30822b36 	bltu	r6,r2,4a1d8 <___vfiprintf_internal_r+0x1380>
   4992c:	50c00007 	ldb	r3,0(r10)
   49930:	4a4002a4 	muli	r9,r9,10
   49934:	54000044 	addi	r16,r10,1
   49938:	8015883a 	mov	r10,r16
   4993c:	4893883a 	add	r9,r9,r2
   49940:	18bff404 	addi	r2,r3,-48
   49944:	30bff92e 	bgeu	r6,r2,4992c <__alt_data_end+0xfffd792c>
   49948:	483da30e 	bge	r9,zero,48fd8 <__alt_data_end+0xfffd6fd8>
   4994c:	027fffc4 	movi	r9,-1
   49950:	003da106 	br	48fd8 <__alt_data_end+0xfffd6fd8>
   49954:	a5001014 	ori	r20,r20,64
   49958:	80c00007 	ldb	r3,0(r16)
   4995c:	003d9d06 	br	48fd4 <__alt_data_end+0xfffd6fd4>
   49960:	da802217 	ldw	r10,136(sp)
   49964:	d8001d85 	stb	zero,118(sp)
   49968:	50c00204 	addi	r3,r10,8
   4996c:	54800017 	ldw	r18,0(r10)
   49970:	54c00117 	ldw	r19,4(r10)
   49974:	4801ca16 	blt	r9,zero,4a0a0 <___vfiprintf_internal_r+0x1248>
   49978:	013fdfc4 	movi	r4,-129
   4997c:	94c4b03a 	or	r2,r18,r19
   49980:	d8c02215 	stw	r3,136(sp)
   49984:	a128703a 	and	r20,r20,r4
   49988:	0039883a 	mov	fp,zero
   4998c:	103f341e 	bne	r2,zero,49660 <__alt_data_end+0xfffd7660>
   49990:	483e2e26 	beq	r9,zero,4924c <__alt_data_end+0xfffd724c>
   49994:	0025883a 	mov	r18,zero
   49998:	94800c04 	addi	r18,r18,48
   4999c:	dc8019c5 	stb	r18,103(sp)
   499a0:	dcc02717 	ldw	r19,156(sp)
   499a4:	dd4019c4 	addi	r21,sp,103
   499a8:	003e2b06 	br	49258 <__alt_data_end+0xfffd7258>
   499ac:	21003fcc 	andi	r4,r4,255
   499b0:	2002361e 	bne	r4,zero,4a28c <___vfiprintf_internal_r+0x1434>
   499b4:	1801c126 	beq	r3,zero,4a0bc <___vfiprintf_internal_r+0x1264>
   499b8:	04800044 	movi	r18,1
   499bc:	d8c01005 	stb	r3,64(sp)
   499c0:	d8001d85 	stb	zero,118(sp)
   499c4:	9027883a 	mov	r19,r18
   499c8:	dd401004 	addi	r21,sp,64
   499cc:	003f1106 	br	49614 <__alt_data_end+0xfffd7614>
   499d0:	d9402117 	ldw	r5,132(sp)
   499d4:	d9002017 	ldw	r4,128(sp)
   499d8:	d9801a04 	addi	r6,sp,104
   499dc:	d9c02b15 	stw	r7,172(sp)
   499e0:	dbc02a15 	stw	r15,168(sp)
   499e4:	0048d440 	call	48d44 <__sprint_r.part.0>
   499e8:	d9c02b17 	ldw	r7,172(sp)
   499ec:	dbc02a17 	ldw	r15,168(sp)
   499f0:	10006d1e 	bne	r2,zero,49ba8 <___vfiprintf_internal_r+0xd50>
   499f4:	d9801b17 	ldw	r6,108(sp)
   499f8:	d8801c17 	ldw	r2,112(sp)
   499fc:	d811883a 	mov	r8,sp
   49a00:	31400044 	addi	r5,r6,1
   49a04:	003e3306 	br	492d4 <__alt_data_end+0xfffd72d4>
   49a08:	d9401b17 	ldw	r5,108(sp)
   49a0c:	d8801c17 	ldw	r2,112(sp)
   49a10:	29000044 	addi	r4,r5,1
   49a14:	d8c01d87 	ldb	r3,118(sp)
   49a18:	183e4d26 	beq	r3,zero,49350 <__alt_data_end+0xfffd7350>
   49a1c:	00c00044 	movi	r3,1
   49a20:	d9401d84 	addi	r5,sp,118
   49a24:	10c5883a 	add	r2,r2,r3
   49a28:	41400015 	stw	r5,0(r8)
   49a2c:	40c00115 	stw	r3,4(r8)
   49a30:	d8801c15 	stw	r2,112(sp)
   49a34:	d9001b15 	stw	r4,108(sp)
   49a38:	014001c4 	movi	r5,7
   49a3c:	2900a90e 	bge	r5,r4,49ce4 <___vfiprintf_internal_r+0xe8c>
   49a40:	1000da1e 	bne	r2,zero,49dac <___vfiprintf_internal_r+0xf54>
   49a44:	7000ab1e 	bne	r14,zero,49cf4 <___vfiprintf_internal_r+0xe9c>
   49a48:	000b883a 	mov	r5,zero
   49a4c:	1809883a 	mov	r4,r3
   49a50:	d811883a 	mov	r8,sp
   49a54:	00c02004 	movi	r3,128
   49a58:	e0fe4d26 	beq	fp,r3,49390 <__alt_data_end+0xfffd7390>
   49a5c:	4cf9c83a 	sub	fp,r9,r19
   49a60:	073e7b0e 	bge	zero,fp,49450 <__alt_data_end+0xfffd7450>
   49a64:	01c00404 	movi	r7,16
   49a68:	3f01900e 	bge	r7,fp,4a0ac <___vfiprintf_internal_r+0x1254>
   49a6c:	00c00174 	movhi	r3,5
   49a70:	18c57f04 	addi	r3,r3,5628
   49a74:	d8c02415 	stw	r3,144(sp)
   49a78:	034001c4 	movi	r13,7
   49a7c:	00000506 	br	49a94 <___vfiprintf_internal_r+0xc3c>
   49a80:	29000084 	addi	r4,r5,2
   49a84:	42000204 	addi	r8,r8,8
   49a88:	180b883a 	mov	r5,r3
   49a8c:	e73ffc04 	addi	fp,fp,-16
   49a90:	3f000d0e 	bge	r7,fp,49ac8 <___vfiprintf_internal_r+0xc70>
   49a94:	10800404 	addi	r2,r2,16
   49a98:	28c00044 	addi	r3,r5,1
   49a9c:	45c00015 	stw	r23,0(r8)
   49aa0:	41c00115 	stw	r7,4(r8)
   49aa4:	d8801c15 	stw	r2,112(sp)
   49aa8:	d8c01b15 	stw	r3,108(sp)
   49aac:	68fff40e 	bge	r13,r3,49a80 <__alt_data_end+0xfffd7a80>
   49ab0:	1000101e 	bne	r2,zero,49af4 <___vfiprintf_internal_r+0xc9c>
   49ab4:	e73ffc04 	addi	fp,fp,-16
   49ab8:	01000044 	movi	r4,1
   49abc:	000b883a 	mov	r5,zero
   49ac0:	d811883a 	mov	r8,sp
   49ac4:	3f3ff316 	blt	r7,fp,49a94 <__alt_data_end+0xfffd7a94>
   49ac8:	da802417 	ldw	r10,144(sp)
   49acc:	1705883a 	add	r2,r2,fp
   49ad0:	47000115 	stw	fp,4(r8)
   49ad4:	42800015 	stw	r10,0(r8)
   49ad8:	d8801c15 	stw	r2,112(sp)
   49adc:	d9001b15 	stw	r4,108(sp)
   49ae0:	00c001c4 	movi	r3,7
   49ae4:	19003616 	blt	r3,r4,49bc0 <___vfiprintf_internal_r+0xd68>
   49ae8:	42000204 	addi	r8,r8,8
   49aec:	21000044 	addi	r4,r4,1
   49af0:	003e5706 	br	49450 <__alt_data_end+0xfffd7450>
   49af4:	d9402117 	ldw	r5,132(sp)
   49af8:	d9002017 	ldw	r4,128(sp)
   49afc:	d9801a04 	addi	r6,sp,104
   49b00:	d9c02b15 	stw	r7,172(sp)
   49b04:	db402a15 	stw	r13,168(sp)
   49b08:	0048d440 	call	48d44 <__sprint_r.part.0>
   49b0c:	d9c02b17 	ldw	r7,172(sp)
   49b10:	db402a17 	ldw	r13,168(sp)
   49b14:	1000241e 	bne	r2,zero,49ba8 <___vfiprintf_internal_r+0xd50>
   49b18:	d9401b17 	ldw	r5,108(sp)
   49b1c:	d8801c17 	ldw	r2,112(sp)
   49b20:	d811883a 	mov	r8,sp
   49b24:	29000044 	addi	r4,r5,1
   49b28:	003fd806 	br	49a8c <__alt_data_end+0xfffd7a8c>
   49b2c:	d9401b17 	ldw	r5,108(sp)
   49b30:	00c00174 	movhi	r3,5
   49b34:	18c58304 	addi	r3,r3,5644
   49b38:	d8c02415 	stw	r3,144(sp)
   49b3c:	29400044 	addi	r5,r5,1
   49b40:	d8c02417 	ldw	r3,144(sp)
   49b44:	14c5883a 	add	r2,r2,r19
   49b48:	44c00115 	stw	r19,4(r8)
   49b4c:	40c00015 	stw	r3,0(r8)
   49b50:	d8801c15 	stw	r2,112(sp)
   49b54:	d9401b15 	stw	r5,108(sp)
   49b58:	00c001c4 	movi	r3,7
   49b5c:	1940070e 	bge	r3,r5,49b7c <___vfiprintf_internal_r+0xd24>
   49b60:	103e4826 	beq	r2,zero,49484 <__alt_data_end+0xfffd7484>
   49b64:	d9402117 	ldw	r5,132(sp)
   49b68:	d9002017 	ldw	r4,128(sp)
   49b6c:	d9801a04 	addi	r6,sp,104
   49b70:	0048d440 	call	48d44 <__sprint_r.part.0>
   49b74:	10000c1e 	bne	r2,zero,49ba8 <___vfiprintf_internal_r+0xd50>
   49b78:	d8801c17 	ldw	r2,112(sp)
   49b7c:	8c80010e 	bge	r17,r18,49b84 <___vfiprintf_internal_r+0xd2c>
   49b80:	9023883a 	mov	r17,r18
   49b84:	da802317 	ldw	r10,140(sp)
   49b88:	5455883a 	add	r10,r10,r17
   49b8c:	da802315 	stw	r10,140(sp)
   49b90:	103e4126 	beq	r2,zero,49498 <__alt_data_end+0xfffd7498>
   49b94:	d9402117 	ldw	r5,132(sp)
   49b98:	d9002017 	ldw	r4,128(sp)
   49b9c:	d9801a04 	addi	r6,sp,104
   49ba0:	0048d440 	call	48d44 <__sprint_r.part.0>
   49ba4:	103e3c26 	beq	r2,zero,49498 <__alt_data_end+0xfffd7498>
   49ba8:	dd002117 	ldw	r20,132(sp)
   49bac:	a080030b 	ldhu	r2,12(r20)
   49bb0:	1080100c 	andi	r2,r2,64
   49bb4:	1001231e 	bne	r2,zero,4a044 <___vfiprintf_internal_r+0x11ec>
   49bb8:	d8802317 	ldw	r2,140(sp)
   49bbc:	003d7b06 	br	491ac <__alt_data_end+0xfffd71ac>
   49bc0:	1000991e 	bne	r2,zero,49e28 <___vfiprintf_internal_r+0xfd0>
   49bc4:	00c00044 	movi	r3,1
   49bc8:	9805883a 	mov	r2,r19
   49bcc:	dd400015 	stw	r21,0(sp)
   49bd0:	dcc00115 	stw	r19,4(sp)
   49bd4:	dcc01c15 	stw	r19,112(sp)
   49bd8:	d8c01b15 	stw	r3,108(sp)
   49bdc:	d811883a 	mov	r8,sp
   49be0:	42000204 	addi	r8,r8,8
   49be4:	a2c0010c 	andi	r11,r20,4
   49be8:	583fe426 	beq	r11,zero,49b7c <__alt_data_end+0xfffd7b7c>
   49bec:	8ca7c83a 	sub	r19,r17,r18
   49bf0:	04ffe20e 	bge	zero,r19,49b7c <__alt_data_end+0xfffd7b7c>
   49bf4:	01c00404 	movi	r7,16
   49bf8:	3cffcc0e 	bge	r7,r19,49b2c <__alt_data_end+0xfffd7b2c>
   49bfc:	02800174 	movhi	r10,5
   49c00:	52858304 	addi	r10,r10,5644
   49c04:	d9001b17 	ldw	r4,108(sp)
   49c08:	da802415 	stw	r10,144(sp)
   49c0c:	382b883a 	mov	r21,r7
   49c10:	050001c4 	movi	r20,7
   49c14:	df002017 	ldw	fp,128(sp)
   49c18:	00000506 	br	49c30 <___vfiprintf_internal_r+0xdd8>
   49c1c:	21400084 	addi	r5,r4,2
   49c20:	42000204 	addi	r8,r8,8
   49c24:	1809883a 	mov	r4,r3
   49c28:	9cfffc04 	addi	r19,r19,-16
   49c2c:	acffc40e 	bge	r21,r19,49b40 <__alt_data_end+0xfffd7b40>
   49c30:	10800404 	addi	r2,r2,16
   49c34:	20c00044 	addi	r3,r4,1
   49c38:	45800015 	stw	r22,0(r8)
   49c3c:	45400115 	stw	r21,4(r8)
   49c40:	d8801c15 	stw	r2,112(sp)
   49c44:	d8c01b15 	stw	r3,108(sp)
   49c48:	a0fff40e 	bge	r20,r3,49c1c <__alt_data_end+0xfffd7c1c>
   49c4c:	1000041e 	bne	r2,zero,49c60 <___vfiprintf_internal_r+0xe08>
   49c50:	01400044 	movi	r5,1
   49c54:	0009883a 	mov	r4,zero
   49c58:	d811883a 	mov	r8,sp
   49c5c:	003ff206 	br	49c28 <__alt_data_end+0xfffd7c28>
   49c60:	d9402117 	ldw	r5,132(sp)
   49c64:	d9801a04 	addi	r6,sp,104
   49c68:	e009883a 	mov	r4,fp
   49c6c:	0048d440 	call	48d44 <__sprint_r.part.0>
   49c70:	103fcd1e 	bne	r2,zero,49ba8 <__alt_data_end+0xfffd7ba8>
   49c74:	d9001b17 	ldw	r4,108(sp)
   49c78:	d8801c17 	ldw	r2,112(sp)
   49c7c:	d811883a 	mov	r8,sp
   49c80:	21400044 	addi	r5,r4,1
   49c84:	003fe806 	br	49c28 <__alt_data_end+0xfffd7c28>
   49c88:	d9402117 	ldw	r5,132(sp)
   49c8c:	d9002017 	ldw	r4,128(sp)
   49c90:	d9801a04 	addi	r6,sp,104
   49c94:	d9c02b15 	stw	r7,172(sp)
   49c98:	db402a15 	stw	r13,168(sp)
   49c9c:	0048d440 	call	48d44 <__sprint_r.part.0>
   49ca0:	d9c02b17 	ldw	r7,172(sp)
   49ca4:	db402a17 	ldw	r13,168(sp)
   49ca8:	103fbf1e 	bne	r2,zero,49ba8 <__alt_data_end+0xfffd7ba8>
   49cac:	d9401b17 	ldw	r5,108(sp)
   49cb0:	d8801c17 	ldw	r2,112(sp)
   49cb4:	d811883a 	mov	r8,sp
   49cb8:	29800044 	addi	r6,r5,1
   49cbc:	003dc406 	br	493d0 <__alt_data_end+0xfffd73d0>
   49cc0:	1000d21e 	bne	r2,zero,4a00c <___vfiprintf_internal_r+0x11b4>
   49cc4:	d8c01d87 	ldb	r3,118(sp)
   49cc8:	18009526 	beq	r3,zero,49f20 <___vfiprintf_internal_r+0x10c8>
   49ccc:	00800044 	movi	r2,1
   49cd0:	d8c01d84 	addi	r3,sp,118
   49cd4:	1009883a 	mov	r4,r2
   49cd8:	d8c00015 	stw	r3,0(sp)
   49cdc:	d8800115 	stw	r2,4(sp)
   49ce0:	d811883a 	mov	r8,sp
   49ce4:	200b883a 	mov	r5,r4
   49ce8:	42000204 	addi	r8,r8,8
   49cec:	21000044 	addi	r4,r4,1
   49cf0:	003d9706 	br	49350 <__alt_data_end+0xfffd7350>
   49cf4:	d9001d04 	addi	r4,sp,116
   49cf8:	00800084 	movi	r2,2
   49cfc:	d9000015 	stw	r4,0(sp)
   49d00:	d8800115 	stw	r2,4(sp)
   49d04:	1809883a 	mov	r4,r3
   49d08:	d811883a 	mov	r8,sp
   49d0c:	200b883a 	mov	r5,r4
   49d10:	42000204 	addi	r8,r8,8
   49d14:	21000044 	addi	r4,r4,1
   49d18:	003f4e06 	br	49a54 <__alt_data_end+0xfffd7a54>
   49d1c:	d8001d85 	stb	zero,118(sp)
   49d20:	48005016 	blt	r9,zero,49e64 <___vfiprintf_internal_r+0x100c>
   49d24:	00ffdfc4 	movi	r3,-129
   49d28:	94c4b03a 	or	r2,r18,r19
   49d2c:	a0e8703a 	and	r20,r20,r3
   49d30:	103d4426 	beq	r2,zero,49244 <__alt_data_end+0xfffd7244>
   49d34:	0039883a 	mov	fp,zero
   49d38:	d9002617 	ldw	r4,152(sp)
   49d3c:	dd401a04 	addi	r21,sp,104
   49d40:	908003cc 	andi	r2,r18,15
   49d44:	9806973a 	slli	r3,r19,28
   49d48:	2085883a 	add	r2,r4,r2
   49d4c:	9024d13a 	srli	r18,r18,4
   49d50:	10800003 	ldbu	r2,0(r2)
   49d54:	9826d13a 	srli	r19,r19,4
   49d58:	ad7fffc4 	addi	r21,r21,-1
   49d5c:	1ca4b03a 	or	r18,r3,r18
   49d60:	a8800005 	stb	r2,0(r21)
   49d64:	94c4b03a 	or	r2,r18,r19
   49d68:	103ff51e 	bne	r2,zero,49d40 <__alt_data_end+0xfffd7d40>
   49d6c:	003e5906 	br	496d4 <__alt_data_end+0xfffd76d4>
   49d70:	d9402117 	ldw	r5,132(sp)
   49d74:	d9002017 	ldw	r4,128(sp)
   49d78:	d9801a04 	addi	r6,sp,104
   49d7c:	0048d440 	call	48d44 <__sprint_r.part.0>
   49d80:	103f891e 	bne	r2,zero,49ba8 <__alt_data_end+0xfffd7ba8>
   49d84:	d8801c17 	ldw	r2,112(sp)
   49d88:	d811883a 	mov	r8,sp
   49d8c:	003f9506 	br	49be4 <__alt_data_end+0xfffd7be4>
   49d90:	d9402117 	ldw	r5,132(sp)
   49d94:	d9002017 	ldw	r4,128(sp)
   49d98:	d9801a04 	addi	r6,sp,104
   49d9c:	0048d440 	call	48d44 <__sprint_r.part.0>
   49da0:	103f811e 	bne	r2,zero,49ba8 <__alt_data_end+0xfffd7ba8>
   49da4:	d811883a 	mov	r8,sp
   49da8:	003ced06 	br	49160 <__alt_data_end+0xfffd7160>
   49dac:	d9402117 	ldw	r5,132(sp)
   49db0:	d9002017 	ldw	r4,128(sp)
   49db4:	d9801a04 	addi	r6,sp,104
   49db8:	da402c15 	stw	r9,176(sp)
   49dbc:	db802a15 	stw	r14,168(sp)
   49dc0:	0048d440 	call	48d44 <__sprint_r.part.0>
   49dc4:	da402c17 	ldw	r9,176(sp)
   49dc8:	db802a17 	ldw	r14,168(sp)
   49dcc:	103f761e 	bne	r2,zero,49ba8 <__alt_data_end+0xfffd7ba8>
   49dd0:	d9401b17 	ldw	r5,108(sp)
   49dd4:	d8801c17 	ldw	r2,112(sp)
   49dd8:	d811883a 	mov	r8,sp
   49ddc:	29000044 	addi	r4,r5,1
   49de0:	003d5b06 	br	49350 <__alt_data_end+0xfffd7350>
   49de4:	d9402117 	ldw	r5,132(sp)
   49de8:	d9002017 	ldw	r4,128(sp)
   49dec:	d9801a04 	addi	r6,sp,104
   49df0:	da402c15 	stw	r9,176(sp)
   49df4:	0048d440 	call	48d44 <__sprint_r.part.0>
   49df8:	da402c17 	ldw	r9,176(sp)
   49dfc:	103f6a1e 	bne	r2,zero,49ba8 <__alt_data_end+0xfffd7ba8>
   49e00:	d9401b17 	ldw	r5,108(sp)
   49e04:	d8801c17 	ldw	r2,112(sp)
   49e08:	d811883a 	mov	r8,sp
   49e0c:	29000044 	addi	r4,r5,1
   49e10:	003f1006 	br	49a54 <__alt_data_end+0xfffd7a54>
   49e14:	1000c31e 	bne	r2,zero,4a124 <___vfiprintf_internal_r+0x12cc>
   49e18:	01000044 	movi	r4,1
   49e1c:	000b883a 	mov	r5,zero
   49e20:	d811883a 	mov	r8,sp
   49e24:	003f0d06 	br	49a5c <__alt_data_end+0xfffd7a5c>
   49e28:	d9402117 	ldw	r5,132(sp)
   49e2c:	d9002017 	ldw	r4,128(sp)
   49e30:	d9801a04 	addi	r6,sp,104
   49e34:	0048d440 	call	48d44 <__sprint_r.part.0>
   49e38:	103f5b1e 	bne	r2,zero,49ba8 <__alt_data_end+0xfffd7ba8>
   49e3c:	d9001b17 	ldw	r4,108(sp)
   49e40:	d8801c17 	ldw	r2,112(sp)
   49e44:	d811883a 	mov	r8,sp
   49e48:	21000044 	addi	r4,r4,1
   49e4c:	003d8006 	br	49450 <__alt_data_end+0xfffd7450>
   49e50:	01000174 	movhi	r4,5
   49e54:	21051f04 	addi	r4,r4,5244
   49e58:	d9002615 	stw	r4,152(sp)
   49e5c:	d8c02215 	stw	r3,136(sp)
   49e60:	1029883a 	mov	r20,r2
   49e64:	94c4b03a 	or	r2,r18,r19
   49e68:	103fb21e 	bne	r2,zero,49d34 <__alt_data_end+0xfffd7d34>
   49e6c:	0039883a 	mov	fp,zero
   49e70:	00800084 	movi	r2,2
   49e74:	003e6b06 	br	49824 <__alt_data_end+0xfffd7824>
   49e78:	da802217 	ldw	r10,136(sp)
   49e7c:	d8001d85 	stb	zero,118(sp)
   49e80:	0027883a 	mov	r19,zero
   49e84:	50800104 	addi	r2,r10,4
   49e88:	54800017 	ldw	r18,0(r10)
   49e8c:	483e6016 	blt	r9,zero,49810 <__alt_data_end+0xfffd7810>
   49e90:	00ffdfc4 	movi	r3,-129
   49e94:	d8802215 	stw	r2,136(sp)
   49e98:	a0e8703a 	and	r20,r20,r3
   49e9c:	0039883a 	mov	fp,zero
   49ea0:	903ebb26 	beq	r18,zero,49990 <__alt_data_end+0xfffd7990>
   49ea4:	00800244 	movi	r2,9
   49ea8:	14bdee36 	bltu	r2,r18,49664 <__alt_data_end+0xfffd7664>
   49eac:	003eba06 	br	49998 <__alt_data_end+0xfffd7998>
   49eb0:	00800c04 	movi	r2,48
   49eb4:	d8c01d45 	stb	r3,117(sp)
   49eb8:	d8801d05 	stb	r2,116(sp)
   49ebc:	d8001d85 	stb	zero,118(sp)
   49ec0:	a0c00094 	ori	r3,r20,2
   49ec4:	4800a916 	blt	r9,zero,4a16c <___vfiprintf_internal_r+0x1314>
   49ec8:	00bfdfc4 	movi	r2,-129
   49ecc:	a096703a 	and	r11,r20,r2
   49ed0:	5d000094 	ori	r20,r11,2
   49ed4:	0039883a 	mov	fp,zero
   49ed8:	003f9706 	br	49d38 <__alt_data_end+0xfffd7d38>
   49edc:	8025883a 	mov	r18,r16
   49ee0:	003c2e06 	br	48f9c <__alt_data_end+0xfffd6f9c>
   49ee4:	00800174 	movhi	r2,5
   49ee8:	10851f04 	addi	r2,r2,5244
   49eec:	0039883a 	mov	fp,zero
   49ef0:	d8802615 	stw	r2,152(sp)
   49ef4:	003f9006 	br	49d38 <__alt_data_end+0xfffd7d38>
   49ef8:	04a5c83a 	sub	r18,zero,r18
   49efc:	07000b44 	movi	fp,45
   49f00:	9004c03a 	cmpne	r2,r18,zero
   49f04:	04e7c83a 	sub	r19,zero,r19
   49f08:	df001d85 	stb	fp,118(sp)
   49f0c:	98a7c83a 	sub	r19,r19,r2
   49f10:	48009f16 	blt	r9,zero,4a190 <___vfiprintf_internal_r+0x1338>
   49f14:	00bfdfc4 	movi	r2,-129
   49f18:	a0a8703a 	and	r20,r20,r2
   49f1c:	003dd006 	br	49660 <__alt_data_end+0xfffd7660>
   49f20:	70004c26 	beq	r14,zero,4a054 <___vfiprintf_internal_r+0x11fc>
   49f24:	00800084 	movi	r2,2
   49f28:	d8c01d04 	addi	r3,sp,116
   49f2c:	d8c00015 	stw	r3,0(sp)
   49f30:	d8800115 	stw	r2,4(sp)
   49f34:	01000044 	movi	r4,1
   49f38:	d811883a 	mov	r8,sp
   49f3c:	003f7306 	br	49d0c <__alt_data_end+0xfffd7d0c>
   49f40:	a080100c 	andi	r2,r20,64
   49f44:	da802217 	ldw	r10,136(sp)
   49f48:	103e0626 	beq	r2,zero,49764 <__alt_data_end+0xfffd7764>
   49f4c:	5480000f 	ldh	r18,0(r10)
   49f50:	52800104 	addi	r10,r10,4
   49f54:	da802215 	stw	r10,136(sp)
   49f58:	9027d7fa 	srai	r19,r18,31
   49f5c:	9805883a 	mov	r2,r19
   49f60:	003db806 	br	49644 <__alt_data_end+0xfffd7644>
   49f64:	a080040c 	andi	r2,r20,16
   49f68:	1000091e 	bne	r2,zero,49f90 <___vfiprintf_internal_r+0x1138>
   49f6c:	a2c0100c 	andi	r11,r20,64
   49f70:	58000726 	beq	r11,zero,49f90 <___vfiprintf_internal_r+0x1138>
   49f74:	da802217 	ldw	r10,136(sp)
   49f78:	50800017 	ldw	r2,0(r10)
   49f7c:	52800104 	addi	r10,r10,4
   49f80:	da802215 	stw	r10,136(sp)
   49f84:	da802317 	ldw	r10,140(sp)
   49f88:	1280000d 	sth	r10,0(r2)
   49f8c:	003be706 	br	48f2c <__alt_data_end+0xfffd6f2c>
   49f90:	da802217 	ldw	r10,136(sp)
   49f94:	50800017 	ldw	r2,0(r10)
   49f98:	52800104 	addi	r10,r10,4
   49f9c:	da802215 	stw	r10,136(sp)
   49fa0:	da802317 	ldw	r10,140(sp)
   49fa4:	12800015 	stw	r10,0(r2)
   49fa8:	003be006 	br	48f2c <__alt_data_end+0xfffd6f2c>
   49fac:	a080100c 	andi	r2,r20,64
   49fb0:	da802217 	ldw	r10,136(sp)
   49fb4:	10003026 	beq	r2,zero,4a078 <___vfiprintf_internal_r+0x1220>
   49fb8:	5480000b 	ldhu	r18,0(r10)
   49fbc:	52800104 	addi	r10,r10,4
   49fc0:	0027883a 	mov	r19,zero
   49fc4:	da802215 	stw	r10,136(sp)
   49fc8:	003d8006 	br	495cc <__alt_data_end+0xfffd75cc>
   49fcc:	80c00007 	ldb	r3,0(r16)
   49fd0:	003c0006 	br	48fd4 <__alt_data_end+0xfffd6fd4>
   49fd4:	a080100c 	andi	r2,r20,64
   49fd8:	d8001d85 	stb	zero,118(sp)
   49fdc:	da802217 	ldw	r10,136(sp)
   49fe0:	1000201e 	bne	r2,zero,4a064 <___vfiprintf_internal_r+0x120c>
   49fe4:	50800104 	addi	r2,r10,4
   49fe8:	54800017 	ldw	r18,0(r10)
   49fec:	0027883a 	mov	r19,zero
   49ff0:	483def0e 	bge	r9,zero,497b0 <__alt_data_end+0xfffd77b0>
   49ff4:	94c6b03a 	or	r3,r18,r19
   49ff8:	d8802215 	stw	r2,136(sp)
   49ffc:	183d4e1e 	bne	r3,zero,49538 <__alt_data_end+0xfffd7538>
   4a000:	0039883a 	mov	fp,zero
   4a004:	0005883a 	mov	r2,zero
   4a008:	003e0606 	br	49824 <__alt_data_end+0xfffd7824>
   4a00c:	d9402117 	ldw	r5,132(sp)
   4a010:	d9002017 	ldw	r4,128(sp)
   4a014:	d9801a04 	addi	r6,sp,104
   4a018:	da402c15 	stw	r9,176(sp)
   4a01c:	db802a15 	stw	r14,168(sp)
   4a020:	0048d440 	call	48d44 <__sprint_r.part.0>
   4a024:	da402c17 	ldw	r9,176(sp)
   4a028:	db802a17 	ldw	r14,168(sp)
   4a02c:	103ede1e 	bne	r2,zero,49ba8 <__alt_data_end+0xfffd7ba8>
   4a030:	d9401b17 	ldw	r5,108(sp)
   4a034:	d8801c17 	ldw	r2,112(sp)
   4a038:	d811883a 	mov	r8,sp
   4a03c:	29000044 	addi	r4,r5,1
   4a040:	003e7406 	br	49a14 <__alt_data_end+0xfffd7a14>
   4a044:	00bfffc4 	movi	r2,-1
   4a048:	003c5806 	br	491ac <__alt_data_end+0xfffd71ac>
   4a04c:	d811883a 	mov	r8,sp
   4a050:	003ee806 	br	49bf4 <__alt_data_end+0xfffd7bf4>
   4a054:	000b883a 	mov	r5,zero
   4a058:	01000044 	movi	r4,1
   4a05c:	d811883a 	mov	r8,sp
   4a060:	003e7c06 	br	49a54 <__alt_data_end+0xfffd7a54>
   4a064:	50800104 	addi	r2,r10,4
   4a068:	5480000b 	ldhu	r18,0(r10)
   4a06c:	0027883a 	mov	r19,zero
   4a070:	483dcf0e 	bge	r9,zero,497b0 <__alt_data_end+0xfffd77b0>
   4a074:	003fdf06 	br	49ff4 <__alt_data_end+0xfffd7ff4>
   4a078:	54800017 	ldw	r18,0(r10)
   4a07c:	52800104 	addi	r10,r10,4
   4a080:	0027883a 	mov	r19,zero
   4a084:	da802215 	stw	r10,136(sp)
   4a088:	003d5006 	br	495cc <__alt_data_end+0xfffd75cc>
   4a08c:	50800104 	addi	r2,r10,4
   4a090:	5480000b 	ldhu	r18,0(r10)
   4a094:	0027883a 	mov	r19,zero
   4a098:	483f7d0e 	bge	r9,zero,49e90 <__alt_data_end+0xfffd7e90>
   4a09c:	003ddc06 	br	49810 <__alt_data_end+0xfffd7810>
   4a0a0:	d8c02215 	stw	r3,136(sp)
   4a0a4:	0039883a 	mov	fp,zero
   4a0a8:	003ddb06 	br	49818 <__alt_data_end+0xfffd7818>
   4a0ac:	02800174 	movhi	r10,5
   4a0b0:	52857f04 	addi	r10,r10,5628
   4a0b4:	da802415 	stw	r10,144(sp)
   4a0b8:	003e8306 	br	49ac8 <__alt_data_end+0xfffd7ac8>
   4a0bc:	d8801c17 	ldw	r2,112(sp)
   4a0c0:	dd002117 	ldw	r20,132(sp)
   4a0c4:	103eb926 	beq	r2,zero,49bac <__alt_data_end+0xfffd7bac>
   4a0c8:	d9002017 	ldw	r4,128(sp)
   4a0cc:	d9801a04 	addi	r6,sp,104
   4a0d0:	a00b883a 	mov	r5,r20
   4a0d4:	0048d440 	call	48d44 <__sprint_r.part.0>
   4a0d8:	003eb406 	br	49bac <__alt_data_end+0xfffd7bac>
   4a0dc:	80c00043 	ldbu	r3,1(r16)
   4a0e0:	a5000814 	ori	r20,r20,32
   4a0e4:	84000044 	addi	r16,r16,1
   4a0e8:	18c03fcc 	andi	r3,r3,255
   4a0ec:	18c0201c 	xori	r3,r3,128
   4a0f0:	18ffe004 	addi	r3,r3,-128
   4a0f4:	003bb706 	br	48fd4 <__alt_data_end+0xfffd6fd4>
   4a0f8:	a809883a 	mov	r4,r21
   4a0fc:	d8c02a15 	stw	r3,168(sp)
   4a100:	da002b15 	stw	r8,172(sp)
   4a104:	00420500 	call	42050 <strlen>
   4a108:	d8c02a17 	ldw	r3,168(sp)
   4a10c:	1027883a 	mov	r19,r2
   4a110:	df001d83 	ldbu	fp,118(sp)
   4a114:	d8c02215 	stw	r3,136(sp)
   4a118:	0013883a 	mov	r9,zero
   4a11c:	da002b17 	ldw	r8,172(sp)
   4a120:	003c4d06 	br	49258 <__alt_data_end+0xfffd7258>
   4a124:	d9402117 	ldw	r5,132(sp)
   4a128:	d9002017 	ldw	r4,128(sp)
   4a12c:	d9801a04 	addi	r6,sp,104
   4a130:	da402c15 	stw	r9,176(sp)
   4a134:	0048d440 	call	48d44 <__sprint_r.part.0>
   4a138:	da402c17 	ldw	r9,176(sp)
   4a13c:	103e9a1e 	bne	r2,zero,49ba8 <__alt_data_end+0xfffd7ba8>
   4a140:	d9401b17 	ldw	r5,108(sp)
   4a144:	d8801c17 	ldw	r2,112(sp)
   4a148:	d811883a 	mov	r8,sp
   4a14c:	29000044 	addi	r4,r5,1
   4a150:	003e4206 	br	49a5c <__alt_data_end+0xfffd7a5c>
   4a154:	d9401b17 	ldw	r5,108(sp)
   4a158:	01000174 	movhi	r4,5
   4a15c:	21058304 	addi	r4,r4,5644
   4a160:	d9002415 	stw	r4,144(sp)
   4a164:	29400044 	addi	r5,r5,1
   4a168:	003c6d06 	br	49320 <__alt_data_end+0xfffd7320>
   4a16c:	0039883a 	mov	fp,zero
   4a170:	00800084 	movi	r2,2
   4a174:	10803fcc 	andi	r2,r2,255
   4a178:	01000044 	movi	r4,1
   4a17c:	11001e26 	beq	r2,r4,4a1f8 <___vfiprintf_internal_r+0x13a0>
   4a180:	01000084 	movi	r4,2
   4a184:	11001e1e 	bne	r2,r4,4a200 <___vfiprintf_internal_r+0x13a8>
   4a188:	1829883a 	mov	r20,r3
   4a18c:	003eea06 	br	49d38 <__alt_data_end+0xfffd7d38>
   4a190:	a007883a 	mov	r3,r20
   4a194:	00800044 	movi	r2,1
   4a198:	003ff606 	br	4a174 <__alt_data_end+0xfffd8174>
   4a19c:	00800184 	movi	r2,6
   4a1a0:	1240012e 	bgeu	r2,r9,4a1a8 <___vfiprintf_internal_r+0x1350>
   4a1a4:	1013883a 	mov	r9,r2
   4a1a8:	4827883a 	mov	r19,r9
   4a1ac:	4825883a 	mov	r18,r9
   4a1b0:	48001516 	blt	r9,zero,4a208 <___vfiprintf_internal_r+0x13b0>
   4a1b4:	05400174 	movhi	r21,5
   4a1b8:	d8c02215 	stw	r3,136(sp)
   4a1bc:	ad452404 	addi	r21,r21,5264
   4a1c0:	003d1406 	br	49614 <__alt_data_end+0xfffd7614>
   4a1c4:	02800174 	movhi	r10,5
   4a1c8:	52857f04 	addi	r10,r10,5628
   4a1cc:	da802415 	stw	r10,144(sp)
   4a1d0:	200d883a 	mov	r6,r4
   4a1d4:	003c9106 	br	4941c <__alt_data_end+0xfffd741c>
   4a1d8:	5021883a 	mov	r16,r10
   4a1dc:	0013883a 	mov	r9,zero
   4a1e0:	003b7d06 	br	48fd8 <__alt_data_end+0xfffd6fd8>
   4a1e4:	4827883a 	mov	r19,r9
   4a1e8:	df001d83 	ldbu	fp,118(sp)
   4a1ec:	d8c02215 	stw	r3,136(sp)
   4a1f0:	0013883a 	mov	r9,zero
   4a1f4:	003c1806 	br	49258 <__alt_data_end+0xfffd7258>
   4a1f8:	1829883a 	mov	r20,r3
   4a1fc:	003d1806 	br	49660 <__alt_data_end+0xfffd7660>
   4a200:	1829883a 	mov	r20,r3
   4a204:	003ccd06 	br	4953c <__alt_data_end+0xfffd753c>
   4a208:	0025883a 	mov	r18,zero
   4a20c:	003fe906 	br	4a1b4 <__alt_data_end+0xfffd81b4>
   4a210:	d8802217 	ldw	r2,136(sp)
   4a214:	80c00043 	ldbu	r3,1(r16)
   4a218:	5021883a 	mov	r16,r10
   4a21c:	12400017 	ldw	r9,0(r2)
   4a220:	10800104 	addi	r2,r2,4
   4a224:	d8802215 	stw	r2,136(sp)
   4a228:	483faf0e 	bge	r9,zero,4a0e8 <__alt_data_end+0xfffd80e8>
   4a22c:	18c03fcc 	andi	r3,r3,255
   4a230:	18c0201c 	xori	r3,r3,128
   4a234:	027fffc4 	movi	r9,-1
   4a238:	18ffe004 	addi	r3,r3,-128
   4a23c:	003b6506 	br	48fd4 <__alt_data_end+0xfffd6fd4>
   4a240:	d9c01d85 	stb	r7,118(sp)
   4a244:	003ca006 	br	494c8 <__alt_data_end+0xfffd74c8>
   4a248:	d9c01d85 	stb	r7,118(sp)
   4a24c:	003cad06 	br	49504 <__alt_data_end+0xfffd7504>
   4a250:	d9c01d85 	stb	r7,118(sp)
   4a254:	003d7d06 	br	4984c <__alt_data_end+0xfffd784c>
   4a258:	d9c01d85 	stb	r7,118(sp)
   4a25c:	003d5f06 	br	497dc <__alt_data_end+0xfffd77dc>
   4a260:	a080004c 	andi	r2,r20,1
   4a264:	0039883a 	mov	fp,zero
   4a268:	10000526 	beq	r2,zero,4a280 <___vfiprintf_internal_r+0x1428>
   4a26c:	00800c04 	movi	r2,48
   4a270:	d88019c5 	stb	r2,103(sp)
   4a274:	dcc02717 	ldw	r19,156(sp)
   4a278:	dd4019c4 	addi	r21,sp,103
   4a27c:	003bf606 	br	49258 <__alt_data_end+0xfffd7258>
   4a280:	0027883a 	mov	r19,zero
   4a284:	dd401a04 	addi	r21,sp,104
   4a288:	003bf306 	br	49258 <__alt_data_end+0xfffd7258>
   4a28c:	d9c01d85 	stb	r7,118(sp)
   4a290:	003dc806 	br	499b4 <__alt_data_end+0xfffd79b4>
   4a294:	d9c01d85 	stb	r7,118(sp)
   4a298:	003d3a06 	br	49784 <__alt_data_end+0xfffd7784>
   4a29c:	d9c01d85 	stb	r7,118(sp)
   4a2a0:	003d2a06 	br	4974c <__alt_data_end+0xfffd774c>
   4a2a4:	d9c01d85 	stb	r7,118(sp)
   4a2a8:	003cde06 	br	49624 <__alt_data_end+0xfffd7624>
   4a2ac:	d9c01d85 	stb	r7,118(sp)
   4a2b0:	003cbc06 	br	495a4 <__alt_data_end+0xfffd75a4>

0004a2b4 <__vfiprintf_internal>:
   4a2b4:	00800174 	movhi	r2,5
   4a2b8:	108d6b04 	addi	r2,r2,13740
   4a2bc:	300f883a 	mov	r7,r6
   4a2c0:	280d883a 	mov	r6,r5
   4a2c4:	200b883a 	mov	r5,r4
   4a2c8:	11000017 	ldw	r4,0(r2)
   4a2cc:	0048e581 	jmpi	48e58 <___vfiprintf_internal_r>

0004a2d0 <__sbprintf>:
   4a2d0:	2880030b 	ldhu	r2,12(r5)
   4a2d4:	2ac01917 	ldw	r11,100(r5)
   4a2d8:	2a80038b 	ldhu	r10,14(r5)
   4a2dc:	2a400717 	ldw	r9,28(r5)
   4a2e0:	2a000917 	ldw	r8,36(r5)
   4a2e4:	defee204 	addi	sp,sp,-1144
   4a2e8:	00c10004 	movi	r3,1024
   4a2ec:	dc011a15 	stw	r16,1128(sp)
   4a2f0:	10bfff4c 	andi	r2,r2,65533
   4a2f4:	2821883a 	mov	r16,r5
   4a2f8:	d8cb883a 	add	r5,sp,r3
   4a2fc:	dc811c15 	stw	r18,1136(sp)
   4a300:	dc411b15 	stw	r17,1132(sp)
   4a304:	dfc11d15 	stw	ra,1140(sp)
   4a308:	2025883a 	mov	r18,r4
   4a30c:	d881030d 	sth	r2,1036(sp)
   4a310:	dac11915 	stw	r11,1124(sp)
   4a314:	da81038d 	sth	r10,1038(sp)
   4a318:	da410715 	stw	r9,1052(sp)
   4a31c:	da010915 	stw	r8,1060(sp)
   4a320:	dec10015 	stw	sp,1024(sp)
   4a324:	dec10415 	stw	sp,1040(sp)
   4a328:	d8c10215 	stw	r3,1032(sp)
   4a32c:	d8c10515 	stw	r3,1044(sp)
   4a330:	d8010615 	stw	zero,1048(sp)
   4a334:	0048e580 	call	48e58 <___vfiprintf_internal_r>
   4a338:	1023883a 	mov	r17,r2
   4a33c:	10000416 	blt	r2,zero,4a350 <__sbprintf+0x80>
   4a340:	d9410004 	addi	r5,sp,1024
   4a344:	9009883a 	mov	r4,r18
   4a348:	00460640 	call	46064 <_fflush_r>
   4a34c:	10000d1e 	bne	r2,zero,4a384 <__sbprintf+0xb4>
   4a350:	d881030b 	ldhu	r2,1036(sp)
   4a354:	1080100c 	andi	r2,r2,64
   4a358:	10000326 	beq	r2,zero,4a368 <__sbprintf+0x98>
   4a35c:	8080030b 	ldhu	r2,12(r16)
   4a360:	10801014 	ori	r2,r2,64
   4a364:	8080030d 	sth	r2,12(r16)
   4a368:	8805883a 	mov	r2,r17
   4a36c:	dfc11d17 	ldw	ra,1140(sp)
   4a370:	dc811c17 	ldw	r18,1136(sp)
   4a374:	dc411b17 	ldw	r17,1132(sp)
   4a378:	dc011a17 	ldw	r16,1128(sp)
   4a37c:	dec11e04 	addi	sp,sp,1144
   4a380:	f800283a 	ret
   4a384:	047fffc4 	movi	r17,-1
   4a388:	003ff106 	br	4a350 <__alt_data_end+0xfffd8350>

0004a38c <__swbuf_r>:
   4a38c:	defffb04 	addi	sp,sp,-20
   4a390:	dcc00315 	stw	r19,12(sp)
   4a394:	dc800215 	stw	r18,8(sp)
   4a398:	dc000015 	stw	r16,0(sp)
   4a39c:	dfc00415 	stw	ra,16(sp)
   4a3a0:	dc400115 	stw	r17,4(sp)
   4a3a4:	2025883a 	mov	r18,r4
   4a3a8:	2827883a 	mov	r19,r5
   4a3ac:	3021883a 	mov	r16,r6
   4a3b0:	20000226 	beq	r4,zero,4a3bc <__swbuf_r+0x30>
   4a3b4:	20800e17 	ldw	r2,56(r4)
   4a3b8:	10004226 	beq	r2,zero,4a4c4 <__swbuf_r+0x138>
   4a3bc:	80800617 	ldw	r2,24(r16)
   4a3c0:	8100030b 	ldhu	r4,12(r16)
   4a3c4:	80800215 	stw	r2,8(r16)
   4a3c8:	2080020c 	andi	r2,r4,8
   4a3cc:	10003626 	beq	r2,zero,4a4a8 <__swbuf_r+0x11c>
   4a3d0:	80c00417 	ldw	r3,16(r16)
   4a3d4:	18003426 	beq	r3,zero,4a4a8 <__swbuf_r+0x11c>
   4a3d8:	2088000c 	andi	r2,r4,8192
   4a3dc:	9c403fcc 	andi	r17,r19,255
   4a3e0:	10001a26 	beq	r2,zero,4a44c <__swbuf_r+0xc0>
   4a3e4:	80800017 	ldw	r2,0(r16)
   4a3e8:	81000517 	ldw	r4,20(r16)
   4a3ec:	10c7c83a 	sub	r3,r2,r3
   4a3f0:	1900200e 	bge	r3,r4,4a474 <__swbuf_r+0xe8>
   4a3f4:	18c00044 	addi	r3,r3,1
   4a3f8:	81000217 	ldw	r4,8(r16)
   4a3fc:	11400044 	addi	r5,r2,1
   4a400:	81400015 	stw	r5,0(r16)
   4a404:	213fffc4 	addi	r4,r4,-1
   4a408:	81000215 	stw	r4,8(r16)
   4a40c:	14c00005 	stb	r19,0(r2)
   4a410:	80800517 	ldw	r2,20(r16)
   4a414:	10c01e26 	beq	r2,r3,4a490 <__swbuf_r+0x104>
   4a418:	8080030b 	ldhu	r2,12(r16)
   4a41c:	1080004c 	andi	r2,r2,1
   4a420:	10000226 	beq	r2,zero,4a42c <__swbuf_r+0xa0>
   4a424:	00800284 	movi	r2,10
   4a428:	88801926 	beq	r17,r2,4a490 <__swbuf_r+0x104>
   4a42c:	8805883a 	mov	r2,r17
   4a430:	dfc00417 	ldw	ra,16(sp)
   4a434:	dcc00317 	ldw	r19,12(sp)
   4a438:	dc800217 	ldw	r18,8(sp)
   4a43c:	dc400117 	ldw	r17,4(sp)
   4a440:	dc000017 	ldw	r16,0(sp)
   4a444:	dec00504 	addi	sp,sp,20
   4a448:	f800283a 	ret
   4a44c:	81401917 	ldw	r5,100(r16)
   4a450:	00b7ffc4 	movi	r2,-8193
   4a454:	21080014 	ori	r4,r4,8192
   4a458:	2884703a 	and	r2,r5,r2
   4a45c:	80801915 	stw	r2,100(r16)
   4a460:	80800017 	ldw	r2,0(r16)
   4a464:	8100030d 	sth	r4,12(r16)
   4a468:	81000517 	ldw	r4,20(r16)
   4a46c:	10c7c83a 	sub	r3,r2,r3
   4a470:	193fe016 	blt	r3,r4,4a3f4 <__alt_data_end+0xfffd83f4>
   4a474:	800b883a 	mov	r5,r16
   4a478:	9009883a 	mov	r4,r18
   4a47c:	00460640 	call	46064 <_fflush_r>
   4a480:	1000071e 	bne	r2,zero,4a4a0 <__swbuf_r+0x114>
   4a484:	80800017 	ldw	r2,0(r16)
   4a488:	00c00044 	movi	r3,1
   4a48c:	003fda06 	br	4a3f8 <__alt_data_end+0xfffd83f8>
   4a490:	800b883a 	mov	r5,r16
   4a494:	9009883a 	mov	r4,r18
   4a498:	00460640 	call	46064 <_fflush_r>
   4a49c:	103fe326 	beq	r2,zero,4a42c <__alt_data_end+0xfffd842c>
   4a4a0:	00bfffc4 	movi	r2,-1
   4a4a4:	003fe206 	br	4a430 <__alt_data_end+0xfffd8430>
   4a4a8:	800b883a 	mov	r5,r16
   4a4ac:	9009883a 	mov	r4,r18
   4a4b0:	00444180 	call	44418 <__swsetup_r>
   4a4b4:	103ffa1e 	bne	r2,zero,4a4a0 <__alt_data_end+0xfffd84a0>
   4a4b8:	8100030b 	ldhu	r4,12(r16)
   4a4bc:	80c00417 	ldw	r3,16(r16)
   4a4c0:	003fc506 	br	4a3d8 <__alt_data_end+0xfffd83d8>
   4a4c4:	00464400 	call	46440 <__sinit>
   4a4c8:	003fbc06 	br	4a3bc <__alt_data_end+0xfffd83bc>

0004a4cc <__swbuf>:
   4a4cc:	00800174 	movhi	r2,5
   4a4d0:	108d6b04 	addi	r2,r2,13740
   4a4d4:	280d883a 	mov	r6,r5
   4a4d8:	200b883a 	mov	r5,r4
   4a4dc:	11000017 	ldw	r4,0(r2)
   4a4e0:	004a38c1 	jmpi	4a38c <__swbuf_r>

0004a4e4 <_calloc_r>:
   4a4e4:	298b383a 	mul	r5,r5,r6
   4a4e8:	defffe04 	addi	sp,sp,-8
   4a4ec:	dfc00115 	stw	ra,4(sp)
   4a4f0:	dc000015 	stw	r16,0(sp)
   4a4f4:	00411dc0 	call	411dc <_malloc_r>
   4a4f8:	10002926 	beq	r2,zero,4a5a0 <_calloc_r+0xbc>
   4a4fc:	11bfff17 	ldw	r6,-4(r2)
   4a500:	1021883a 	mov	r16,r2
   4a504:	00bfff04 	movi	r2,-4
   4a508:	308c703a 	and	r6,r6,r2
   4a50c:	00c00904 	movi	r3,36
   4a510:	308d883a 	add	r6,r6,r2
   4a514:	19801636 	bltu	r3,r6,4a570 <_calloc_r+0x8c>
   4a518:	008004c4 	movi	r2,19
   4a51c:	11800b2e 	bgeu	r2,r6,4a54c <_calloc_r+0x68>
   4a520:	80000015 	stw	zero,0(r16)
   4a524:	80000115 	stw	zero,4(r16)
   4a528:	008006c4 	movi	r2,27
   4a52c:	11801a2e 	bgeu	r2,r6,4a598 <_calloc_r+0xb4>
   4a530:	80000215 	stw	zero,8(r16)
   4a534:	80000315 	stw	zero,12(r16)
   4a538:	30c0151e 	bne	r6,r3,4a590 <_calloc_r+0xac>
   4a53c:	80000415 	stw	zero,16(r16)
   4a540:	80800604 	addi	r2,r16,24
   4a544:	80000515 	stw	zero,20(r16)
   4a548:	00000106 	br	4a550 <_calloc_r+0x6c>
   4a54c:	8005883a 	mov	r2,r16
   4a550:	10000015 	stw	zero,0(r2)
   4a554:	10000115 	stw	zero,4(r2)
   4a558:	10000215 	stw	zero,8(r2)
   4a55c:	8005883a 	mov	r2,r16
   4a560:	dfc00117 	ldw	ra,4(sp)
   4a564:	dc000017 	ldw	r16,0(sp)
   4a568:	dec00204 	addi	sp,sp,8
   4a56c:	f800283a 	ret
   4a570:	000b883a 	mov	r5,zero
   4a574:	8009883a 	mov	r4,r16
   4a578:	00419e80 	call	419e8 <memset>
   4a57c:	8005883a 	mov	r2,r16
   4a580:	dfc00117 	ldw	ra,4(sp)
   4a584:	dc000017 	ldw	r16,0(sp)
   4a588:	dec00204 	addi	sp,sp,8
   4a58c:	f800283a 	ret
   4a590:	80800404 	addi	r2,r16,16
   4a594:	003fee06 	br	4a550 <__alt_data_end+0xfffd8550>
   4a598:	80800204 	addi	r2,r16,8
   4a59c:	003fec06 	br	4a550 <__alt_data_end+0xfffd8550>
   4a5a0:	0005883a 	mov	r2,zero
   4a5a4:	003fee06 	br	4a560 <__alt_data_end+0xfffd8560>

0004a5a8 <_fclose_r>:
   4a5a8:	28003926 	beq	r5,zero,4a690 <_fclose_r+0xe8>
   4a5ac:	defffc04 	addi	sp,sp,-16
   4a5b0:	dc400115 	stw	r17,4(sp)
   4a5b4:	dc000015 	stw	r16,0(sp)
   4a5b8:	dfc00315 	stw	ra,12(sp)
   4a5bc:	dc800215 	stw	r18,8(sp)
   4a5c0:	2023883a 	mov	r17,r4
   4a5c4:	2821883a 	mov	r16,r5
   4a5c8:	20000226 	beq	r4,zero,4a5d4 <_fclose_r+0x2c>
   4a5cc:	20800e17 	ldw	r2,56(r4)
   4a5d0:	10002726 	beq	r2,zero,4a670 <_fclose_r+0xc8>
   4a5d4:	8080030f 	ldh	r2,12(r16)
   4a5d8:	1000071e 	bne	r2,zero,4a5f8 <_fclose_r+0x50>
   4a5dc:	0005883a 	mov	r2,zero
   4a5e0:	dfc00317 	ldw	ra,12(sp)
   4a5e4:	dc800217 	ldw	r18,8(sp)
   4a5e8:	dc400117 	ldw	r17,4(sp)
   4a5ec:	dc000017 	ldw	r16,0(sp)
   4a5f0:	dec00404 	addi	sp,sp,16
   4a5f4:	f800283a 	ret
   4a5f8:	800b883a 	mov	r5,r16
   4a5fc:	8809883a 	mov	r4,r17
   4a600:	0045e480 	call	45e48 <__sflush_r>
   4a604:	1025883a 	mov	r18,r2
   4a608:	80800b17 	ldw	r2,44(r16)
   4a60c:	10000426 	beq	r2,zero,4a620 <_fclose_r+0x78>
   4a610:	81400717 	ldw	r5,28(r16)
   4a614:	8809883a 	mov	r4,r17
   4a618:	103ee83a 	callr	r2
   4a61c:	10001616 	blt	r2,zero,4a678 <_fclose_r+0xd0>
   4a620:	8080030b 	ldhu	r2,12(r16)
   4a624:	1080200c 	andi	r2,r2,128
   4a628:	1000151e 	bne	r2,zero,4a680 <_fclose_r+0xd8>
   4a62c:	81400c17 	ldw	r5,48(r16)
   4a630:	28000526 	beq	r5,zero,4a648 <_fclose_r+0xa0>
   4a634:	80801004 	addi	r2,r16,64
   4a638:	28800226 	beq	r5,r2,4a644 <_fclose_r+0x9c>
   4a63c:	8809883a 	mov	r4,r17
   4a640:	00466600 	call	46660 <_free_r>
   4a644:	80000c15 	stw	zero,48(r16)
   4a648:	81401117 	ldw	r5,68(r16)
   4a64c:	28000326 	beq	r5,zero,4a65c <_fclose_r+0xb4>
   4a650:	8809883a 	mov	r4,r17
   4a654:	00466600 	call	46660 <_free_r>
   4a658:	80001115 	stw	zero,68(r16)
   4a65c:	00464500 	call	46450 <__sfp_lock_acquire>
   4a660:	8000030d 	sth	zero,12(r16)
   4a664:	00464540 	call	46454 <__sfp_lock_release>
   4a668:	9005883a 	mov	r2,r18
   4a66c:	003fdc06 	br	4a5e0 <__alt_data_end+0xfffd85e0>
   4a670:	00464400 	call	46440 <__sinit>
   4a674:	003fd706 	br	4a5d4 <__alt_data_end+0xfffd85d4>
   4a678:	04bfffc4 	movi	r18,-1
   4a67c:	003fe806 	br	4a620 <__alt_data_end+0xfffd8620>
   4a680:	81400417 	ldw	r5,16(r16)
   4a684:	8809883a 	mov	r4,r17
   4a688:	00466600 	call	46660 <_free_r>
   4a68c:	003fe706 	br	4a62c <__alt_data_end+0xfffd862c>
   4a690:	0005883a 	mov	r2,zero
   4a694:	f800283a 	ret

0004a698 <fclose>:
   4a698:	00800174 	movhi	r2,5
   4a69c:	108d6b04 	addi	r2,r2,13740
   4a6a0:	200b883a 	mov	r5,r4
   4a6a4:	11000017 	ldw	r4,0(r2)
   4a6a8:	004a5a81 	jmpi	4a5a8 <_fclose_r>

0004a6ac <__fputwc>:
   4a6ac:	defff804 	addi	sp,sp,-32
   4a6b0:	dcc00415 	stw	r19,16(sp)
   4a6b4:	dc800315 	stw	r18,12(sp)
   4a6b8:	dc000115 	stw	r16,4(sp)
   4a6bc:	dfc00715 	stw	ra,28(sp)
   4a6c0:	dd400615 	stw	r21,24(sp)
   4a6c4:	dd000515 	stw	r20,20(sp)
   4a6c8:	dc400215 	stw	r17,8(sp)
   4a6cc:	2027883a 	mov	r19,r4
   4a6d0:	2825883a 	mov	r18,r5
   4a6d4:	3021883a 	mov	r16,r6
   4a6d8:	00470900 	call	47090 <__locale_mb_cur_max>
   4a6dc:	00c00044 	movi	r3,1
   4a6e0:	10c03e26 	beq	r2,r3,4a7dc <__fputwc+0x130>
   4a6e4:	81c01704 	addi	r7,r16,92
   4a6e8:	900d883a 	mov	r6,r18
   4a6ec:	d80b883a 	mov	r5,sp
   4a6f0:	9809883a 	mov	r4,r19
   4a6f4:	004a8b40 	call	4a8b4 <_wcrtomb_r>
   4a6f8:	1029883a 	mov	r20,r2
   4a6fc:	00bfffc4 	movi	r2,-1
   4a700:	a0802026 	beq	r20,r2,4a784 <__fputwc+0xd8>
   4a704:	d9400003 	ldbu	r5,0(sp)
   4a708:	a0001c26 	beq	r20,zero,4a77c <__fputwc+0xd0>
   4a70c:	0023883a 	mov	r17,zero
   4a710:	05400284 	movi	r21,10
   4a714:	00000906 	br	4a73c <__fputwc+0x90>
   4a718:	80800017 	ldw	r2,0(r16)
   4a71c:	11400005 	stb	r5,0(r2)
   4a720:	80c00017 	ldw	r3,0(r16)
   4a724:	18c00044 	addi	r3,r3,1
   4a728:	80c00015 	stw	r3,0(r16)
   4a72c:	8c400044 	addi	r17,r17,1
   4a730:	dc45883a 	add	r2,sp,r17
   4a734:	8d00112e 	bgeu	r17,r20,4a77c <__fputwc+0xd0>
   4a738:	11400003 	ldbu	r5,0(r2)
   4a73c:	80c00217 	ldw	r3,8(r16)
   4a740:	18ffffc4 	addi	r3,r3,-1
   4a744:	80c00215 	stw	r3,8(r16)
   4a748:	183ff30e 	bge	r3,zero,4a718 <__alt_data_end+0xfffd8718>
   4a74c:	80800617 	ldw	r2,24(r16)
   4a750:	18801916 	blt	r3,r2,4a7b8 <__fputwc+0x10c>
   4a754:	80800017 	ldw	r2,0(r16)
   4a758:	11400005 	stb	r5,0(r2)
   4a75c:	80800017 	ldw	r2,0(r16)
   4a760:	10c00003 	ldbu	r3,0(r2)
   4a764:	10800044 	addi	r2,r2,1
   4a768:	1d402326 	beq	r3,r21,4a7f8 <__fputwc+0x14c>
   4a76c:	80800015 	stw	r2,0(r16)
   4a770:	8c400044 	addi	r17,r17,1
   4a774:	dc45883a 	add	r2,sp,r17
   4a778:	8d3fef36 	bltu	r17,r20,4a738 <__alt_data_end+0xfffd8738>
   4a77c:	9005883a 	mov	r2,r18
   4a780:	00000406 	br	4a794 <__fputwc+0xe8>
   4a784:	80c0030b 	ldhu	r3,12(r16)
   4a788:	a005883a 	mov	r2,r20
   4a78c:	18c01014 	ori	r3,r3,64
   4a790:	80c0030d 	sth	r3,12(r16)
   4a794:	dfc00717 	ldw	ra,28(sp)
   4a798:	dd400617 	ldw	r21,24(sp)
   4a79c:	dd000517 	ldw	r20,20(sp)
   4a7a0:	dcc00417 	ldw	r19,16(sp)
   4a7a4:	dc800317 	ldw	r18,12(sp)
   4a7a8:	dc400217 	ldw	r17,8(sp)
   4a7ac:	dc000117 	ldw	r16,4(sp)
   4a7b0:	dec00804 	addi	sp,sp,32
   4a7b4:	f800283a 	ret
   4a7b8:	800d883a 	mov	r6,r16
   4a7bc:	29403fcc 	andi	r5,r5,255
   4a7c0:	9809883a 	mov	r4,r19
   4a7c4:	004a38c0 	call	4a38c <__swbuf_r>
   4a7c8:	10bfffe0 	cmpeqi	r2,r2,-1
   4a7cc:	10803fcc 	andi	r2,r2,255
   4a7d0:	103fd626 	beq	r2,zero,4a72c <__alt_data_end+0xfffd872c>
   4a7d4:	00bfffc4 	movi	r2,-1
   4a7d8:	003fee06 	br	4a794 <__alt_data_end+0xfffd8794>
   4a7dc:	90ffffc4 	addi	r3,r18,-1
   4a7e0:	01003f84 	movi	r4,254
   4a7e4:	20ffbf36 	bltu	r4,r3,4a6e4 <__alt_data_end+0xfffd86e4>
   4a7e8:	900b883a 	mov	r5,r18
   4a7ec:	dc800005 	stb	r18,0(sp)
   4a7f0:	1029883a 	mov	r20,r2
   4a7f4:	003fc506 	br	4a70c <__alt_data_end+0xfffd870c>
   4a7f8:	800d883a 	mov	r6,r16
   4a7fc:	a80b883a 	mov	r5,r21
   4a800:	9809883a 	mov	r4,r19
   4a804:	004a38c0 	call	4a38c <__swbuf_r>
   4a808:	10bfffe0 	cmpeqi	r2,r2,-1
   4a80c:	003fef06 	br	4a7cc <__alt_data_end+0xfffd87cc>

0004a810 <_fputwc_r>:
   4a810:	3080030b 	ldhu	r2,12(r6)
   4a814:	10c8000c 	andi	r3,r2,8192
   4a818:	1800051e 	bne	r3,zero,4a830 <_fputwc_r+0x20>
   4a81c:	30c01917 	ldw	r3,100(r6)
   4a820:	10880014 	ori	r2,r2,8192
   4a824:	3080030d 	sth	r2,12(r6)
   4a828:	18880014 	ori	r2,r3,8192
   4a82c:	30801915 	stw	r2,100(r6)
   4a830:	004a6ac1 	jmpi	4a6ac <__fputwc>

0004a834 <fputwc>:
   4a834:	00800174 	movhi	r2,5
   4a838:	defffc04 	addi	sp,sp,-16
   4a83c:	108d6b04 	addi	r2,r2,13740
   4a840:	dc000115 	stw	r16,4(sp)
   4a844:	14000017 	ldw	r16,0(r2)
   4a848:	dc400215 	stw	r17,8(sp)
   4a84c:	dfc00315 	stw	ra,12(sp)
   4a850:	2023883a 	mov	r17,r4
   4a854:	80000226 	beq	r16,zero,4a860 <fputwc+0x2c>
   4a858:	80800e17 	ldw	r2,56(r16)
   4a85c:	10001026 	beq	r2,zero,4a8a0 <fputwc+0x6c>
   4a860:	2880030b 	ldhu	r2,12(r5)
   4a864:	10c8000c 	andi	r3,r2,8192
   4a868:	1800051e 	bne	r3,zero,4a880 <fputwc+0x4c>
   4a86c:	28c01917 	ldw	r3,100(r5)
   4a870:	10880014 	ori	r2,r2,8192
   4a874:	2880030d 	sth	r2,12(r5)
   4a878:	18880014 	ori	r2,r3,8192
   4a87c:	28801915 	stw	r2,100(r5)
   4a880:	280d883a 	mov	r6,r5
   4a884:	8009883a 	mov	r4,r16
   4a888:	880b883a 	mov	r5,r17
   4a88c:	dfc00317 	ldw	ra,12(sp)
   4a890:	dc400217 	ldw	r17,8(sp)
   4a894:	dc000117 	ldw	r16,4(sp)
   4a898:	dec00404 	addi	sp,sp,16
   4a89c:	004a6ac1 	jmpi	4a6ac <__fputwc>
   4a8a0:	8009883a 	mov	r4,r16
   4a8a4:	d9400015 	stw	r5,0(sp)
   4a8a8:	00464400 	call	46440 <__sinit>
   4a8ac:	d9400017 	ldw	r5,0(sp)
   4a8b0:	003feb06 	br	4a860 <__alt_data_end+0xfffd8860>

0004a8b4 <_wcrtomb_r>:
   4a8b4:	defff604 	addi	sp,sp,-40
   4a8b8:	00800174 	movhi	r2,5
   4a8bc:	dc800815 	stw	r18,32(sp)
   4a8c0:	dc400715 	stw	r17,28(sp)
   4a8c4:	dc000615 	stw	r16,24(sp)
   4a8c8:	108d6f04 	addi	r2,r2,13756
   4a8cc:	dfc00915 	stw	ra,36(sp)
   4a8d0:	2021883a 	mov	r16,r4
   4a8d4:	3823883a 	mov	r17,r7
   4a8d8:	14800017 	ldw	r18,0(r2)
   4a8dc:	28001426 	beq	r5,zero,4a930 <_wcrtomb_r+0x7c>
   4a8e0:	d9400415 	stw	r5,16(sp)
   4a8e4:	d9800515 	stw	r6,20(sp)
   4a8e8:	00470840 	call	47084 <__locale_charset>
   4a8ec:	d9800517 	ldw	r6,20(sp)
   4a8f0:	d9400417 	ldw	r5,16(sp)
   4a8f4:	100f883a 	mov	r7,r2
   4a8f8:	dc400015 	stw	r17,0(sp)
   4a8fc:	8009883a 	mov	r4,r16
   4a900:	903ee83a 	callr	r18
   4a904:	00ffffc4 	movi	r3,-1
   4a908:	10c0031e 	bne	r2,r3,4a918 <_wcrtomb_r+0x64>
   4a90c:	88000015 	stw	zero,0(r17)
   4a910:	00c02284 	movi	r3,138
   4a914:	80c00015 	stw	r3,0(r16)
   4a918:	dfc00917 	ldw	ra,36(sp)
   4a91c:	dc800817 	ldw	r18,32(sp)
   4a920:	dc400717 	ldw	r17,28(sp)
   4a924:	dc000617 	ldw	r16,24(sp)
   4a928:	dec00a04 	addi	sp,sp,40
   4a92c:	f800283a 	ret
   4a930:	00470840 	call	47084 <__locale_charset>
   4a934:	100f883a 	mov	r7,r2
   4a938:	dc400015 	stw	r17,0(sp)
   4a93c:	000d883a 	mov	r6,zero
   4a940:	d9400104 	addi	r5,sp,4
   4a944:	8009883a 	mov	r4,r16
   4a948:	903ee83a 	callr	r18
   4a94c:	003fed06 	br	4a904 <__alt_data_end+0xfffd8904>

0004a950 <wcrtomb>:
   4a950:	defff604 	addi	sp,sp,-40
   4a954:	00800174 	movhi	r2,5
   4a958:	dc800615 	stw	r18,24(sp)
   4a95c:	dc400515 	stw	r17,20(sp)
   4a960:	108d6b04 	addi	r2,r2,13740
   4a964:	dfc00915 	stw	ra,36(sp)
   4a968:	dd000815 	stw	r20,32(sp)
   4a96c:	dcc00715 	stw	r19,28(sp)
   4a970:	dc000415 	stw	r16,16(sp)
   4a974:	3025883a 	mov	r18,r6
   4a978:	14400017 	ldw	r17,0(r2)
   4a97c:	20001926 	beq	r4,zero,4a9e4 <wcrtomb+0x94>
   4a980:	00800174 	movhi	r2,5
   4a984:	108d6f04 	addi	r2,r2,13756
   4a988:	15000017 	ldw	r20,0(r2)
   4a98c:	2021883a 	mov	r16,r4
   4a990:	2827883a 	mov	r19,r5
   4a994:	00470840 	call	47084 <__locale_charset>
   4a998:	100f883a 	mov	r7,r2
   4a99c:	dc800015 	stw	r18,0(sp)
   4a9a0:	980d883a 	mov	r6,r19
   4a9a4:	800b883a 	mov	r5,r16
   4a9a8:	8809883a 	mov	r4,r17
   4a9ac:	a03ee83a 	callr	r20
   4a9b0:	00ffffc4 	movi	r3,-1
   4a9b4:	10c0031e 	bne	r2,r3,4a9c4 <wcrtomb+0x74>
   4a9b8:	90000015 	stw	zero,0(r18)
   4a9bc:	00c02284 	movi	r3,138
   4a9c0:	88c00015 	stw	r3,0(r17)
   4a9c4:	dfc00917 	ldw	ra,36(sp)
   4a9c8:	dd000817 	ldw	r20,32(sp)
   4a9cc:	dcc00717 	ldw	r19,28(sp)
   4a9d0:	dc800617 	ldw	r18,24(sp)
   4a9d4:	dc400517 	ldw	r17,20(sp)
   4a9d8:	dc000417 	ldw	r16,16(sp)
   4a9dc:	dec00a04 	addi	sp,sp,40
   4a9e0:	f800283a 	ret
   4a9e4:	00800174 	movhi	r2,5
   4a9e8:	108d6f04 	addi	r2,r2,13756
   4a9ec:	14000017 	ldw	r16,0(r2)
   4a9f0:	00470840 	call	47084 <__locale_charset>
   4a9f4:	100f883a 	mov	r7,r2
   4a9f8:	dc800015 	stw	r18,0(sp)
   4a9fc:	000d883a 	mov	r6,zero
   4aa00:	d9400104 	addi	r5,sp,4
   4aa04:	8809883a 	mov	r4,r17
   4aa08:	803ee83a 	callr	r16
   4aa0c:	003fe806 	br	4a9b0 <__alt_data_end+0xfffd89b0>

0004aa10 <__ascii_wctomb>:
   4aa10:	28000526 	beq	r5,zero,4aa28 <__ascii_wctomb+0x18>
   4aa14:	00803fc4 	movi	r2,255
   4aa18:	11800536 	bltu	r2,r6,4aa30 <__ascii_wctomb+0x20>
   4aa1c:	29800005 	stb	r6,0(r5)
   4aa20:	00800044 	movi	r2,1
   4aa24:	f800283a 	ret
   4aa28:	0005883a 	mov	r2,zero
   4aa2c:	f800283a 	ret
   4aa30:	00802284 	movi	r2,138
   4aa34:	20800015 	stw	r2,0(r4)
   4aa38:	00bfffc4 	movi	r2,-1
   4aa3c:	f800283a 	ret

0004aa40 <_wctomb_r>:
   4aa40:	00800174 	movhi	r2,5
   4aa44:	defff904 	addi	sp,sp,-28
   4aa48:	108d6f04 	addi	r2,r2,13756
   4aa4c:	dfc00615 	stw	ra,24(sp)
   4aa50:	dc400515 	stw	r17,20(sp)
   4aa54:	dc000415 	stw	r16,16(sp)
   4aa58:	3823883a 	mov	r17,r7
   4aa5c:	14000017 	ldw	r16,0(r2)
   4aa60:	d9000115 	stw	r4,4(sp)
   4aa64:	d9400215 	stw	r5,8(sp)
   4aa68:	d9800315 	stw	r6,12(sp)
   4aa6c:	00470840 	call	47084 <__locale_charset>
   4aa70:	d9800317 	ldw	r6,12(sp)
   4aa74:	d9400217 	ldw	r5,8(sp)
   4aa78:	d9000117 	ldw	r4,4(sp)
   4aa7c:	100f883a 	mov	r7,r2
   4aa80:	dc400015 	stw	r17,0(sp)
   4aa84:	803ee83a 	callr	r16
   4aa88:	dfc00617 	ldw	ra,24(sp)
   4aa8c:	dc400517 	ldw	r17,20(sp)
   4aa90:	dc000417 	ldw	r16,16(sp)
   4aa94:	dec00704 	addi	sp,sp,28
   4aa98:	f800283a 	ret

0004aa9c <__udivdi3>:
   4aa9c:	defff504 	addi	sp,sp,-44
   4aaa0:	dcc00415 	stw	r19,16(sp)
   4aaa4:	dc000115 	stw	r16,4(sp)
   4aaa8:	dfc00a15 	stw	ra,40(sp)
   4aaac:	df000915 	stw	fp,36(sp)
   4aab0:	ddc00815 	stw	r23,32(sp)
   4aab4:	dd800715 	stw	r22,28(sp)
   4aab8:	dd400615 	stw	r21,24(sp)
   4aabc:	dd000515 	stw	r20,20(sp)
   4aac0:	dc800315 	stw	r18,12(sp)
   4aac4:	dc400215 	stw	r17,8(sp)
   4aac8:	2027883a 	mov	r19,r4
   4aacc:	2821883a 	mov	r16,r5
   4aad0:	3800411e 	bne	r7,zero,4abd8 <__udivdi3+0x13c>
   4aad4:	3023883a 	mov	r17,r6
   4aad8:	2025883a 	mov	r18,r4
   4aadc:	2980522e 	bgeu	r5,r6,4ac28 <__udivdi3+0x18c>
   4aae0:	00bfffd4 	movui	r2,65535
   4aae4:	282d883a 	mov	r22,r5
   4aae8:	1180a836 	bltu	r2,r6,4ad8c <__udivdi3+0x2f0>
   4aaec:	00803fc4 	movi	r2,255
   4aaf0:	1185803a 	cmpltu	r2,r2,r6
   4aaf4:	100490fa 	slli	r2,r2,3
   4aaf8:	3086d83a 	srl	r3,r6,r2
   4aafc:	01000174 	movhi	r4,5
   4ab00:	21058704 	addi	r4,r4,5660
   4ab04:	20c7883a 	add	r3,r4,r3
   4ab08:	18c00003 	ldbu	r3,0(r3)
   4ab0c:	1885883a 	add	r2,r3,r2
   4ab10:	00c00804 	movi	r3,32
   4ab14:	1887c83a 	sub	r3,r3,r2
   4ab18:	18000526 	beq	r3,zero,4ab30 <__udivdi3+0x94>
   4ab1c:	80e0983a 	sll	r16,r16,r3
   4ab20:	9884d83a 	srl	r2,r19,r2
   4ab24:	30e2983a 	sll	r17,r6,r3
   4ab28:	98e4983a 	sll	r18,r19,r3
   4ab2c:	142cb03a 	or	r22,r2,r16
   4ab30:	882ad43a 	srli	r21,r17,16
   4ab34:	b009883a 	mov	r4,r22
   4ab38:	8d3fffcc 	andi	r20,r17,65535
   4ab3c:	a80b883a 	mov	r5,r21
   4ab40:	00409940 	call	40994 <__umodsi3>
   4ab44:	b009883a 	mov	r4,r22
   4ab48:	a80b883a 	mov	r5,r21
   4ab4c:	1027883a 	mov	r19,r2
   4ab50:	00409300 	call	40930 <__udivsi3>
   4ab54:	102d883a 	mov	r22,r2
   4ab58:	9826943a 	slli	r19,r19,16
   4ab5c:	9004d43a 	srli	r2,r18,16
   4ab60:	a5a1383a 	mul	r16,r20,r22
   4ab64:	14c4b03a 	or	r2,r2,r19
   4ab68:	1400052e 	bgeu	r2,r16,4ab80 <__udivdi3+0xe4>
   4ab6c:	1445883a 	add	r2,r2,r17
   4ab70:	b0ffffc4 	addi	r3,r22,-1
   4ab74:	14400136 	bltu	r2,r17,4ab7c <__udivdi3+0xe0>
   4ab78:	14012336 	bltu	r2,r16,4b008 <__udivdi3+0x56c>
   4ab7c:	182d883a 	mov	r22,r3
   4ab80:	1421c83a 	sub	r16,r2,r16
   4ab84:	a80b883a 	mov	r5,r21
   4ab88:	8009883a 	mov	r4,r16
   4ab8c:	00409940 	call	40994 <__umodsi3>
   4ab90:	1027883a 	mov	r19,r2
   4ab94:	a80b883a 	mov	r5,r21
   4ab98:	8009883a 	mov	r4,r16
   4ab9c:	00409300 	call	40930 <__udivsi3>
   4aba0:	9826943a 	slli	r19,r19,16
   4aba4:	a0a9383a 	mul	r20,r20,r2
   4aba8:	94bfffcc 	andi	r18,r18,65535
   4abac:	94e4b03a 	or	r18,r18,r19
   4abb0:	9500052e 	bgeu	r18,r20,4abc8 <__udivdi3+0x12c>
   4abb4:	8ca5883a 	add	r18,r17,r18
   4abb8:	10ffffc4 	addi	r3,r2,-1
   4abbc:	9440f136 	bltu	r18,r17,4af84 <__udivdi3+0x4e8>
   4abc0:	9500f02e 	bgeu	r18,r20,4af84 <__udivdi3+0x4e8>
   4abc4:	10bfff84 	addi	r2,r2,-2
   4abc8:	b00c943a 	slli	r6,r22,16
   4abcc:	0007883a 	mov	r3,zero
   4abd0:	3084b03a 	or	r2,r6,r2
   4abd4:	00005906 	br	4ad3c <__udivdi3+0x2a0>
   4abd8:	29c05636 	bltu	r5,r7,4ad34 <__udivdi3+0x298>
   4abdc:	00bfffd4 	movui	r2,65535
   4abe0:	11c0622e 	bgeu	r2,r7,4ad6c <__udivdi3+0x2d0>
   4abe4:	00804034 	movhi	r2,256
   4abe8:	10bfffc4 	addi	r2,r2,-1
   4abec:	11c0ee36 	bltu	r2,r7,4afa8 <__udivdi3+0x50c>
   4abf0:	00800404 	movi	r2,16
   4abf4:	3886d83a 	srl	r3,r7,r2
   4abf8:	01000174 	movhi	r4,5
   4abfc:	21058704 	addi	r4,r4,5660
   4ac00:	20c7883a 	add	r3,r4,r3
   4ac04:	18c00003 	ldbu	r3,0(r3)
   4ac08:	05400804 	movi	r21,32
   4ac0c:	1885883a 	add	r2,r3,r2
   4ac10:	a8abc83a 	sub	r21,r21,r2
   4ac14:	a800621e 	bne	r21,zero,4ada0 <__udivdi3+0x304>
   4ac18:	3c00e936 	bltu	r7,r16,4afc0 <__udivdi3+0x524>
   4ac1c:	9985403a 	cmpgeu	r2,r19,r6
   4ac20:	0007883a 	mov	r3,zero
   4ac24:	00004506 	br	4ad3c <__udivdi3+0x2a0>
   4ac28:	3000041e 	bne	r6,zero,4ac3c <__udivdi3+0x1a0>
   4ac2c:	000b883a 	mov	r5,zero
   4ac30:	01000044 	movi	r4,1
   4ac34:	00409300 	call	40930 <__udivsi3>
   4ac38:	1023883a 	mov	r17,r2
   4ac3c:	00bfffd4 	movui	r2,65535
   4ac40:	14404e2e 	bgeu	r2,r17,4ad7c <__udivdi3+0x2e0>
   4ac44:	00804034 	movhi	r2,256
   4ac48:	10bfffc4 	addi	r2,r2,-1
   4ac4c:	1440d836 	bltu	r2,r17,4afb0 <__udivdi3+0x514>
   4ac50:	00800404 	movi	r2,16
   4ac54:	8886d83a 	srl	r3,r17,r2
   4ac58:	01000174 	movhi	r4,5
   4ac5c:	21058704 	addi	r4,r4,5660
   4ac60:	20c7883a 	add	r3,r4,r3
   4ac64:	18c00003 	ldbu	r3,0(r3)
   4ac68:	1885883a 	add	r2,r3,r2
   4ac6c:	00c00804 	movi	r3,32
   4ac70:	1887c83a 	sub	r3,r3,r2
   4ac74:	18008f1e 	bne	r3,zero,4aeb4 <__udivdi3+0x418>
   4ac78:	882ad43a 	srli	r21,r17,16
   4ac7c:	8461c83a 	sub	r16,r16,r17
   4ac80:	8d3fffcc 	andi	r20,r17,65535
   4ac84:	00c00044 	movi	r3,1
   4ac88:	8009883a 	mov	r4,r16
   4ac8c:	a80b883a 	mov	r5,r21
   4ac90:	d8c00015 	stw	r3,0(sp)
   4ac94:	00409940 	call	40994 <__umodsi3>
   4ac98:	8009883a 	mov	r4,r16
   4ac9c:	a80b883a 	mov	r5,r21
   4aca0:	1027883a 	mov	r19,r2
   4aca4:	00409300 	call	40930 <__udivsi3>
   4aca8:	9826943a 	slli	r19,r19,16
   4acac:	9008d43a 	srli	r4,r18,16
   4acb0:	1521383a 	mul	r16,r2,r20
   4acb4:	102d883a 	mov	r22,r2
   4acb8:	24c8b03a 	or	r4,r4,r19
   4acbc:	d8c00017 	ldw	r3,0(sp)
   4acc0:	2400052e 	bgeu	r4,r16,4acd8 <__udivdi3+0x23c>
   4acc4:	2449883a 	add	r4,r4,r17
   4acc8:	b0bfffc4 	addi	r2,r22,-1
   4accc:	24400136 	bltu	r4,r17,4acd4 <__udivdi3+0x238>
   4acd0:	2400ca36 	bltu	r4,r16,4affc <__udivdi3+0x560>
   4acd4:	102d883a 	mov	r22,r2
   4acd8:	2421c83a 	sub	r16,r4,r16
   4acdc:	a80b883a 	mov	r5,r21
   4ace0:	8009883a 	mov	r4,r16
   4ace4:	d8c00015 	stw	r3,0(sp)
   4ace8:	00409940 	call	40994 <__umodsi3>
   4acec:	1027883a 	mov	r19,r2
   4acf0:	a80b883a 	mov	r5,r21
   4acf4:	8009883a 	mov	r4,r16
   4acf8:	00409300 	call	40930 <__udivsi3>
   4acfc:	9826943a 	slli	r19,r19,16
   4ad00:	1529383a 	mul	r20,r2,r20
   4ad04:	94bfffcc 	andi	r18,r18,65535
   4ad08:	94e4b03a 	or	r18,r18,r19
   4ad0c:	d8c00017 	ldw	r3,0(sp)
   4ad10:	9500052e 	bgeu	r18,r20,4ad28 <__udivdi3+0x28c>
   4ad14:	8ca5883a 	add	r18,r17,r18
   4ad18:	113fffc4 	addi	r4,r2,-1
   4ad1c:	94409736 	bltu	r18,r17,4af7c <__udivdi3+0x4e0>
   4ad20:	9500962e 	bgeu	r18,r20,4af7c <__udivdi3+0x4e0>
   4ad24:	10bfff84 	addi	r2,r2,-2
   4ad28:	b00c943a 	slli	r6,r22,16
   4ad2c:	3084b03a 	or	r2,r6,r2
   4ad30:	00000206 	br	4ad3c <__udivdi3+0x2a0>
   4ad34:	0007883a 	mov	r3,zero
   4ad38:	0005883a 	mov	r2,zero
   4ad3c:	dfc00a17 	ldw	ra,40(sp)
   4ad40:	df000917 	ldw	fp,36(sp)
   4ad44:	ddc00817 	ldw	r23,32(sp)
   4ad48:	dd800717 	ldw	r22,28(sp)
   4ad4c:	dd400617 	ldw	r21,24(sp)
   4ad50:	dd000517 	ldw	r20,20(sp)
   4ad54:	dcc00417 	ldw	r19,16(sp)
   4ad58:	dc800317 	ldw	r18,12(sp)
   4ad5c:	dc400217 	ldw	r17,8(sp)
   4ad60:	dc000117 	ldw	r16,4(sp)
   4ad64:	dec00b04 	addi	sp,sp,44
   4ad68:	f800283a 	ret
   4ad6c:	00803fc4 	movi	r2,255
   4ad70:	11c5803a 	cmpltu	r2,r2,r7
   4ad74:	100490fa 	slli	r2,r2,3
   4ad78:	003f9e06 	br	4abf4 <__alt_data_end+0xfffd8bf4>
   4ad7c:	00803fc4 	movi	r2,255
   4ad80:	1445803a 	cmpltu	r2,r2,r17
   4ad84:	100490fa 	slli	r2,r2,3
   4ad88:	003fb206 	br	4ac54 <__alt_data_end+0xfffd8c54>
   4ad8c:	00804034 	movhi	r2,256
   4ad90:	10bfffc4 	addi	r2,r2,-1
   4ad94:	11808836 	bltu	r2,r6,4afb8 <__udivdi3+0x51c>
   4ad98:	00800404 	movi	r2,16
   4ad9c:	003f5606 	br	4aaf8 <__alt_data_end+0xfffd8af8>
   4ada0:	30aed83a 	srl	r23,r6,r2
   4ada4:	3d4e983a 	sll	r7,r7,r21
   4ada8:	80acd83a 	srl	r22,r16,r2
   4adac:	9884d83a 	srl	r2,r19,r2
   4adb0:	3deeb03a 	or	r23,r7,r23
   4adb4:	b824d43a 	srli	r18,r23,16
   4adb8:	8560983a 	sll	r16,r16,r21
   4adbc:	b009883a 	mov	r4,r22
   4adc0:	900b883a 	mov	r5,r18
   4adc4:	3568983a 	sll	r20,r6,r21
   4adc8:	1420b03a 	or	r16,r2,r16
   4adcc:	00409940 	call	40994 <__umodsi3>
   4add0:	b009883a 	mov	r4,r22
   4add4:	900b883a 	mov	r5,r18
   4add8:	1023883a 	mov	r17,r2
   4addc:	00409300 	call	40930 <__udivsi3>
   4ade0:	8808943a 	slli	r4,r17,16
   4ade4:	bf3fffcc 	andi	fp,r23,65535
   4ade8:	8006d43a 	srli	r3,r16,16
   4adec:	e0a3383a 	mul	r17,fp,r2
   4adf0:	100d883a 	mov	r6,r2
   4adf4:	1906b03a 	or	r3,r3,r4
   4adf8:	1c40042e 	bgeu	r3,r17,4ae0c <__udivdi3+0x370>
   4adfc:	1dc7883a 	add	r3,r3,r23
   4ae00:	10bfffc4 	addi	r2,r2,-1
   4ae04:	1dc0752e 	bgeu	r3,r23,4afdc <__udivdi3+0x540>
   4ae08:	100d883a 	mov	r6,r2
   4ae0c:	1c63c83a 	sub	r17,r3,r17
   4ae10:	900b883a 	mov	r5,r18
   4ae14:	8809883a 	mov	r4,r17
   4ae18:	d9800015 	stw	r6,0(sp)
   4ae1c:	00409940 	call	40994 <__umodsi3>
   4ae20:	102d883a 	mov	r22,r2
   4ae24:	8809883a 	mov	r4,r17
   4ae28:	900b883a 	mov	r5,r18
   4ae2c:	00409300 	call	40930 <__udivsi3>
   4ae30:	b02c943a 	slli	r22,r22,16
   4ae34:	e089383a 	mul	r4,fp,r2
   4ae38:	843fffcc 	andi	r16,r16,65535
   4ae3c:	85a0b03a 	or	r16,r16,r22
   4ae40:	d9800017 	ldw	r6,0(sp)
   4ae44:	8100042e 	bgeu	r16,r4,4ae58 <__udivdi3+0x3bc>
   4ae48:	85e1883a 	add	r16,r16,r23
   4ae4c:	10ffffc4 	addi	r3,r2,-1
   4ae50:	85c05e2e 	bgeu	r16,r23,4afcc <__udivdi3+0x530>
   4ae54:	1805883a 	mov	r2,r3
   4ae58:	300c943a 	slli	r6,r6,16
   4ae5c:	a17fffcc 	andi	r5,r20,65535
   4ae60:	a028d43a 	srli	r20,r20,16
   4ae64:	3084b03a 	or	r2,r6,r2
   4ae68:	10ffffcc 	andi	r3,r2,65535
   4ae6c:	100cd43a 	srli	r6,r2,16
   4ae70:	194f383a 	mul	r7,r3,r5
   4ae74:	1d07383a 	mul	r3,r3,r20
   4ae78:	314b383a 	mul	r5,r6,r5
   4ae7c:	3810d43a 	srli	r8,r7,16
   4ae80:	8121c83a 	sub	r16,r16,r4
   4ae84:	1947883a 	add	r3,r3,r5
   4ae88:	40c7883a 	add	r3,r8,r3
   4ae8c:	350d383a 	mul	r6,r6,r20
   4ae90:	1940022e 	bgeu	r3,r5,4ae9c <__udivdi3+0x400>
   4ae94:	01000074 	movhi	r4,1
   4ae98:	310d883a 	add	r6,r6,r4
   4ae9c:	1828d43a 	srli	r20,r3,16
   4aea0:	a18d883a 	add	r6,r20,r6
   4aea4:	81803e36 	bltu	r16,r6,4afa0 <__udivdi3+0x504>
   4aea8:	81803826 	beq	r16,r6,4af8c <__udivdi3+0x4f0>
   4aeac:	0007883a 	mov	r3,zero
   4aeb0:	003fa206 	br	4ad3c <__alt_data_end+0xfffd8d3c>
   4aeb4:	88e2983a 	sll	r17,r17,r3
   4aeb8:	80a8d83a 	srl	r20,r16,r2
   4aebc:	80e0983a 	sll	r16,r16,r3
   4aec0:	882ad43a 	srli	r21,r17,16
   4aec4:	9884d83a 	srl	r2,r19,r2
   4aec8:	a009883a 	mov	r4,r20
   4aecc:	a80b883a 	mov	r5,r21
   4aed0:	142eb03a 	or	r23,r2,r16
   4aed4:	98e4983a 	sll	r18,r19,r3
   4aed8:	00409940 	call	40994 <__umodsi3>
   4aedc:	a009883a 	mov	r4,r20
   4aee0:	a80b883a 	mov	r5,r21
   4aee4:	1021883a 	mov	r16,r2
   4aee8:	00409300 	call	40930 <__udivsi3>
   4aeec:	1039883a 	mov	fp,r2
   4aef0:	8d3fffcc 	andi	r20,r17,65535
   4aef4:	8020943a 	slli	r16,r16,16
   4aef8:	b804d43a 	srli	r2,r23,16
   4aefc:	a72d383a 	mul	r22,r20,fp
   4af00:	1404b03a 	or	r2,r2,r16
   4af04:	1580062e 	bgeu	r2,r22,4af20 <__udivdi3+0x484>
   4af08:	1445883a 	add	r2,r2,r17
   4af0c:	e0ffffc4 	addi	r3,fp,-1
   4af10:	14403836 	bltu	r2,r17,4aff4 <__udivdi3+0x558>
   4af14:	1580372e 	bgeu	r2,r22,4aff4 <__udivdi3+0x558>
   4af18:	e73fff84 	addi	fp,fp,-2
   4af1c:	1445883a 	add	r2,r2,r17
   4af20:	15adc83a 	sub	r22,r2,r22
   4af24:	a80b883a 	mov	r5,r21
   4af28:	b009883a 	mov	r4,r22
   4af2c:	00409940 	call	40994 <__umodsi3>
   4af30:	1027883a 	mov	r19,r2
   4af34:	b009883a 	mov	r4,r22
   4af38:	a80b883a 	mov	r5,r21
   4af3c:	00409300 	call	40930 <__udivsi3>
   4af40:	9826943a 	slli	r19,r19,16
   4af44:	a0a1383a 	mul	r16,r20,r2
   4af48:	b93fffcc 	andi	r4,r23,65535
   4af4c:	24c8b03a 	or	r4,r4,r19
   4af50:	2400062e 	bgeu	r4,r16,4af6c <__udivdi3+0x4d0>
   4af54:	2449883a 	add	r4,r4,r17
   4af58:	10ffffc4 	addi	r3,r2,-1
   4af5c:	24402336 	bltu	r4,r17,4afec <__udivdi3+0x550>
   4af60:	2400222e 	bgeu	r4,r16,4afec <__udivdi3+0x550>
   4af64:	10bfff84 	addi	r2,r2,-2
   4af68:	2449883a 	add	r4,r4,r17
   4af6c:	e038943a 	slli	fp,fp,16
   4af70:	2421c83a 	sub	r16,r4,r16
   4af74:	e086b03a 	or	r3,fp,r2
   4af78:	003f4306 	br	4ac88 <__alt_data_end+0xfffd8c88>
   4af7c:	2005883a 	mov	r2,r4
   4af80:	003f6906 	br	4ad28 <__alt_data_end+0xfffd8d28>
   4af84:	1805883a 	mov	r2,r3
   4af88:	003f0f06 	br	4abc8 <__alt_data_end+0xfffd8bc8>
   4af8c:	1806943a 	slli	r3,r3,16
   4af90:	9d66983a 	sll	r19,r19,r21
   4af94:	39ffffcc 	andi	r7,r7,65535
   4af98:	19c7883a 	add	r3,r3,r7
   4af9c:	98ffc32e 	bgeu	r19,r3,4aeac <__alt_data_end+0xfffd8eac>
   4afa0:	10bfffc4 	addi	r2,r2,-1
   4afa4:	003fc106 	br	4aeac <__alt_data_end+0xfffd8eac>
   4afa8:	00800604 	movi	r2,24
   4afac:	003f1106 	br	4abf4 <__alt_data_end+0xfffd8bf4>
   4afb0:	00800604 	movi	r2,24
   4afb4:	003f2706 	br	4ac54 <__alt_data_end+0xfffd8c54>
   4afb8:	00800604 	movi	r2,24
   4afbc:	003ece06 	br	4aaf8 <__alt_data_end+0xfffd8af8>
   4afc0:	0007883a 	mov	r3,zero
   4afc4:	00800044 	movi	r2,1
   4afc8:	003f5c06 	br	4ad3c <__alt_data_end+0xfffd8d3c>
   4afcc:	813fa12e 	bgeu	r16,r4,4ae54 <__alt_data_end+0xfffd8e54>
   4afd0:	10bfff84 	addi	r2,r2,-2
   4afd4:	85e1883a 	add	r16,r16,r23
   4afd8:	003f9f06 	br	4ae58 <__alt_data_end+0xfffd8e58>
   4afdc:	1c7f8a2e 	bgeu	r3,r17,4ae08 <__alt_data_end+0xfffd8e08>
   4afe0:	31bfff84 	addi	r6,r6,-2
   4afe4:	1dc7883a 	add	r3,r3,r23
   4afe8:	003f8806 	br	4ae0c <__alt_data_end+0xfffd8e0c>
   4afec:	1805883a 	mov	r2,r3
   4aff0:	003fde06 	br	4af6c <__alt_data_end+0xfffd8f6c>
   4aff4:	1839883a 	mov	fp,r3
   4aff8:	003fc906 	br	4af20 <__alt_data_end+0xfffd8f20>
   4affc:	b5bfff84 	addi	r22,r22,-2
   4b000:	2449883a 	add	r4,r4,r17
   4b004:	003f3406 	br	4acd8 <__alt_data_end+0xfffd8cd8>
   4b008:	b5bfff84 	addi	r22,r22,-2
   4b00c:	1445883a 	add	r2,r2,r17
   4b010:	003edb06 	br	4ab80 <__alt_data_end+0xfffd8b80>

0004b014 <__umoddi3>:
   4b014:	defff404 	addi	sp,sp,-48
   4b018:	df000a15 	stw	fp,40(sp)
   4b01c:	dc400315 	stw	r17,12(sp)
   4b020:	dc000215 	stw	r16,8(sp)
   4b024:	dfc00b15 	stw	ra,44(sp)
   4b028:	ddc00915 	stw	r23,36(sp)
   4b02c:	dd800815 	stw	r22,32(sp)
   4b030:	dd400715 	stw	r21,28(sp)
   4b034:	dd000615 	stw	r20,24(sp)
   4b038:	dcc00515 	stw	r19,20(sp)
   4b03c:	dc800415 	stw	r18,16(sp)
   4b040:	2021883a 	mov	r16,r4
   4b044:	2823883a 	mov	r17,r5
   4b048:	2839883a 	mov	fp,r5
   4b04c:	38003c1e 	bne	r7,zero,4b140 <__umoddi3+0x12c>
   4b050:	3027883a 	mov	r19,r6
   4b054:	2029883a 	mov	r20,r4
   4b058:	2980512e 	bgeu	r5,r6,4b1a0 <__umoddi3+0x18c>
   4b05c:	00bfffd4 	movui	r2,65535
   4b060:	11809a36 	bltu	r2,r6,4b2cc <__umoddi3+0x2b8>
   4b064:	01003fc4 	movi	r4,255
   4b068:	2189803a 	cmpltu	r4,r4,r6
   4b06c:	200890fa 	slli	r4,r4,3
   4b070:	3104d83a 	srl	r2,r6,r4
   4b074:	00c00174 	movhi	r3,5
   4b078:	18c58704 	addi	r3,r3,5660
   4b07c:	1885883a 	add	r2,r3,r2
   4b080:	10c00003 	ldbu	r3,0(r2)
   4b084:	00800804 	movi	r2,32
   4b088:	1909883a 	add	r4,r3,r4
   4b08c:	1125c83a 	sub	r18,r2,r4
   4b090:	90000526 	beq	r18,zero,4b0a8 <__umoddi3+0x94>
   4b094:	8ca2983a 	sll	r17,r17,r18
   4b098:	8108d83a 	srl	r4,r16,r4
   4b09c:	34a6983a 	sll	r19,r6,r18
   4b0a0:	84a8983a 	sll	r20,r16,r18
   4b0a4:	2478b03a 	or	fp,r4,r17
   4b0a8:	982ed43a 	srli	r23,r19,16
   4b0ac:	e009883a 	mov	r4,fp
   4b0b0:	9dbfffcc 	andi	r22,r19,65535
   4b0b4:	b80b883a 	mov	r5,r23
   4b0b8:	00409940 	call	40994 <__umodsi3>
   4b0bc:	e009883a 	mov	r4,fp
   4b0c0:	b80b883a 	mov	r5,r23
   4b0c4:	102b883a 	mov	r21,r2
   4b0c8:	00409300 	call	40930 <__udivsi3>
   4b0cc:	a806943a 	slli	r3,r21,16
   4b0d0:	a008d43a 	srli	r4,r20,16
   4b0d4:	b085383a 	mul	r2,r22,r2
   4b0d8:	20c8b03a 	or	r4,r4,r3
   4b0dc:	2080032e 	bgeu	r4,r2,4b0ec <__umoddi3+0xd8>
   4b0e0:	24c9883a 	add	r4,r4,r19
   4b0e4:	24c00136 	bltu	r4,r19,4b0ec <__umoddi3+0xd8>
   4b0e8:	20811036 	bltu	r4,r2,4b52c <__umoddi3+0x518>
   4b0ec:	20abc83a 	sub	r21,r4,r2
   4b0f0:	b80b883a 	mov	r5,r23
   4b0f4:	a809883a 	mov	r4,r21
   4b0f8:	00409940 	call	40994 <__umodsi3>
   4b0fc:	1023883a 	mov	r17,r2
   4b100:	b80b883a 	mov	r5,r23
   4b104:	a809883a 	mov	r4,r21
   4b108:	00409300 	call	40930 <__udivsi3>
   4b10c:	8822943a 	slli	r17,r17,16
   4b110:	b085383a 	mul	r2,r22,r2
   4b114:	a0ffffcc 	andi	r3,r20,65535
   4b118:	1c46b03a 	or	r3,r3,r17
   4b11c:	1880042e 	bgeu	r3,r2,4b130 <__umoddi3+0x11c>
   4b120:	1cc7883a 	add	r3,r3,r19
   4b124:	1cc00236 	bltu	r3,r19,4b130 <__umoddi3+0x11c>
   4b128:	1880012e 	bgeu	r3,r2,4b130 <__umoddi3+0x11c>
   4b12c:	1cc7883a 	add	r3,r3,r19
   4b130:	1885c83a 	sub	r2,r3,r2
   4b134:	1484d83a 	srl	r2,r2,r18
   4b138:	0007883a 	mov	r3,zero
   4b13c:	00004f06 	br	4b27c <__umoddi3+0x268>
   4b140:	29c04c36 	bltu	r5,r7,4b274 <__umoddi3+0x260>
   4b144:	00bfffd4 	movui	r2,65535
   4b148:	11c0582e 	bgeu	r2,r7,4b2ac <__umoddi3+0x298>
   4b14c:	00804034 	movhi	r2,256
   4b150:	10bfffc4 	addi	r2,r2,-1
   4b154:	11c0e736 	bltu	r2,r7,4b4f4 <__umoddi3+0x4e0>
   4b158:	01000404 	movi	r4,16
   4b15c:	3904d83a 	srl	r2,r7,r4
   4b160:	00c00174 	movhi	r3,5
   4b164:	18c58704 	addi	r3,r3,5660
   4b168:	1885883a 	add	r2,r3,r2
   4b16c:	14c00003 	ldbu	r19,0(r2)
   4b170:	00c00804 	movi	r3,32
   4b174:	9927883a 	add	r19,r19,r4
   4b178:	1ce9c83a 	sub	r20,r3,r19
   4b17c:	a000581e 	bne	r20,zero,4b2e0 <__umoddi3+0x2cc>
   4b180:	3c400136 	bltu	r7,r17,4b188 <__umoddi3+0x174>
   4b184:	8180eb36 	bltu	r16,r6,4b534 <__umoddi3+0x520>
   4b188:	8185c83a 	sub	r2,r16,r6
   4b18c:	89e3c83a 	sub	r17,r17,r7
   4b190:	8089803a 	cmpltu	r4,r16,r2
   4b194:	8939c83a 	sub	fp,r17,r4
   4b198:	e007883a 	mov	r3,fp
   4b19c:	00003706 	br	4b27c <__umoddi3+0x268>
   4b1a0:	3000041e 	bne	r6,zero,4b1b4 <__umoddi3+0x1a0>
   4b1a4:	000b883a 	mov	r5,zero
   4b1a8:	01000044 	movi	r4,1
   4b1ac:	00409300 	call	40930 <__udivsi3>
   4b1b0:	1027883a 	mov	r19,r2
   4b1b4:	00bfffd4 	movui	r2,65535
   4b1b8:	14c0402e 	bgeu	r2,r19,4b2bc <__umoddi3+0x2a8>
   4b1bc:	00804034 	movhi	r2,256
   4b1c0:	10bfffc4 	addi	r2,r2,-1
   4b1c4:	14c0cd36 	bltu	r2,r19,4b4fc <__umoddi3+0x4e8>
   4b1c8:	00800404 	movi	r2,16
   4b1cc:	9886d83a 	srl	r3,r19,r2
   4b1d0:	01000174 	movhi	r4,5
   4b1d4:	21058704 	addi	r4,r4,5660
   4b1d8:	20c7883a 	add	r3,r4,r3
   4b1dc:	18c00003 	ldbu	r3,0(r3)
   4b1e0:	1887883a 	add	r3,r3,r2
   4b1e4:	00800804 	movi	r2,32
   4b1e8:	10e5c83a 	sub	r18,r2,r3
   4b1ec:	9000901e 	bne	r18,zero,4b430 <__umoddi3+0x41c>
   4b1f0:	982cd43a 	srli	r22,r19,16
   4b1f4:	8ce3c83a 	sub	r17,r17,r19
   4b1f8:	9d7fffcc 	andi	r21,r19,65535
   4b1fc:	b00b883a 	mov	r5,r22
   4b200:	8809883a 	mov	r4,r17
   4b204:	00409940 	call	40994 <__umodsi3>
   4b208:	8809883a 	mov	r4,r17
   4b20c:	b00b883a 	mov	r5,r22
   4b210:	1021883a 	mov	r16,r2
   4b214:	00409300 	call	40930 <__udivsi3>
   4b218:	8006943a 	slli	r3,r16,16
   4b21c:	a008d43a 	srli	r4,r20,16
   4b220:	1545383a 	mul	r2,r2,r21
   4b224:	20c8b03a 	or	r4,r4,r3
   4b228:	2080042e 	bgeu	r4,r2,4b23c <__umoddi3+0x228>
   4b22c:	24c9883a 	add	r4,r4,r19
   4b230:	24c00236 	bltu	r4,r19,4b23c <__umoddi3+0x228>
   4b234:	2080012e 	bgeu	r4,r2,4b23c <__umoddi3+0x228>
   4b238:	24c9883a 	add	r4,r4,r19
   4b23c:	20a1c83a 	sub	r16,r4,r2
   4b240:	b00b883a 	mov	r5,r22
   4b244:	8009883a 	mov	r4,r16
   4b248:	00409940 	call	40994 <__umodsi3>
   4b24c:	1023883a 	mov	r17,r2
   4b250:	b00b883a 	mov	r5,r22
   4b254:	8009883a 	mov	r4,r16
   4b258:	00409300 	call	40930 <__udivsi3>
   4b25c:	8822943a 	slli	r17,r17,16
   4b260:	1545383a 	mul	r2,r2,r21
   4b264:	a53fffcc 	andi	r20,r20,65535
   4b268:	a446b03a 	or	r3,r20,r17
   4b26c:	18bfb02e 	bgeu	r3,r2,4b130 <__alt_data_end+0xfffd9130>
   4b270:	003fab06 	br	4b120 <__alt_data_end+0xfffd9120>
   4b274:	2005883a 	mov	r2,r4
   4b278:	2807883a 	mov	r3,r5
   4b27c:	dfc00b17 	ldw	ra,44(sp)
   4b280:	df000a17 	ldw	fp,40(sp)
   4b284:	ddc00917 	ldw	r23,36(sp)
   4b288:	dd800817 	ldw	r22,32(sp)
   4b28c:	dd400717 	ldw	r21,28(sp)
   4b290:	dd000617 	ldw	r20,24(sp)
   4b294:	dcc00517 	ldw	r19,20(sp)
   4b298:	dc800417 	ldw	r18,16(sp)
   4b29c:	dc400317 	ldw	r17,12(sp)
   4b2a0:	dc000217 	ldw	r16,8(sp)
   4b2a4:	dec00c04 	addi	sp,sp,48
   4b2a8:	f800283a 	ret
   4b2ac:	04c03fc4 	movi	r19,255
   4b2b0:	99c9803a 	cmpltu	r4,r19,r7
   4b2b4:	200890fa 	slli	r4,r4,3
   4b2b8:	003fa806 	br	4b15c <__alt_data_end+0xfffd915c>
   4b2bc:	00803fc4 	movi	r2,255
   4b2c0:	14c5803a 	cmpltu	r2,r2,r19
   4b2c4:	100490fa 	slli	r2,r2,3
   4b2c8:	003fc006 	br	4b1cc <__alt_data_end+0xfffd91cc>
   4b2cc:	00804034 	movhi	r2,256
   4b2d0:	10bfffc4 	addi	r2,r2,-1
   4b2d4:	11808b36 	bltu	r2,r6,4b504 <__umoddi3+0x4f0>
   4b2d8:	01000404 	movi	r4,16
   4b2dc:	003f6406 	br	4b070 <__alt_data_end+0xfffd9070>
   4b2e0:	34c4d83a 	srl	r2,r6,r19
   4b2e4:	3d0e983a 	sll	r7,r7,r20
   4b2e8:	8cf8d83a 	srl	fp,r17,r19
   4b2ec:	8d10983a 	sll	r8,r17,r20
   4b2f0:	38aab03a 	or	r21,r7,r2
   4b2f4:	a82cd43a 	srli	r22,r21,16
   4b2f8:	84e2d83a 	srl	r17,r16,r19
   4b2fc:	e009883a 	mov	r4,fp
   4b300:	b00b883a 	mov	r5,r22
   4b304:	8a22b03a 	or	r17,r17,r8
   4b308:	3524983a 	sll	r18,r6,r20
   4b30c:	00409940 	call	40994 <__umodsi3>
   4b310:	e009883a 	mov	r4,fp
   4b314:	b00b883a 	mov	r5,r22
   4b318:	102f883a 	mov	r23,r2
   4b31c:	00409300 	call	40930 <__udivsi3>
   4b320:	100d883a 	mov	r6,r2
   4b324:	b808943a 	slli	r4,r23,16
   4b328:	aa3fffcc 	andi	r8,r21,65535
   4b32c:	8804d43a 	srli	r2,r17,16
   4b330:	41af383a 	mul	r23,r8,r6
   4b334:	8520983a 	sll	r16,r16,r20
   4b338:	1104b03a 	or	r2,r2,r4
   4b33c:	15c0042e 	bgeu	r2,r23,4b350 <__umoddi3+0x33c>
   4b340:	1545883a 	add	r2,r2,r21
   4b344:	30ffffc4 	addi	r3,r6,-1
   4b348:	1540742e 	bgeu	r2,r21,4b51c <__umoddi3+0x508>
   4b34c:	180d883a 	mov	r6,r3
   4b350:	15efc83a 	sub	r23,r2,r23
   4b354:	b00b883a 	mov	r5,r22
   4b358:	b809883a 	mov	r4,r23
   4b35c:	d9800115 	stw	r6,4(sp)
   4b360:	da000015 	stw	r8,0(sp)
   4b364:	00409940 	call	40994 <__umodsi3>
   4b368:	b00b883a 	mov	r5,r22
   4b36c:	b809883a 	mov	r4,r23
   4b370:	1039883a 	mov	fp,r2
   4b374:	00409300 	call	40930 <__udivsi3>
   4b378:	da000017 	ldw	r8,0(sp)
   4b37c:	e038943a 	slli	fp,fp,16
   4b380:	100b883a 	mov	r5,r2
   4b384:	4089383a 	mul	r4,r8,r2
   4b388:	8a3fffcc 	andi	r8,r17,65535
   4b38c:	4710b03a 	or	r8,r8,fp
   4b390:	d9800117 	ldw	r6,4(sp)
   4b394:	4100042e 	bgeu	r8,r4,4b3a8 <__umoddi3+0x394>
   4b398:	4551883a 	add	r8,r8,r21
   4b39c:	10bfffc4 	addi	r2,r2,-1
   4b3a0:	45405a2e 	bgeu	r8,r21,4b50c <__umoddi3+0x4f8>
   4b3a4:	100b883a 	mov	r5,r2
   4b3a8:	300c943a 	slli	r6,r6,16
   4b3ac:	91ffffcc 	andi	r7,r18,65535
   4b3b0:	9004d43a 	srli	r2,r18,16
   4b3b4:	314cb03a 	or	r6,r6,r5
   4b3b8:	317fffcc 	andi	r5,r6,65535
   4b3bc:	300cd43a 	srli	r6,r6,16
   4b3c0:	29d3383a 	mul	r9,r5,r7
   4b3c4:	288b383a 	mul	r5,r5,r2
   4b3c8:	31cf383a 	mul	r7,r6,r7
   4b3cc:	4806d43a 	srli	r3,r9,16
   4b3d0:	4111c83a 	sub	r8,r8,r4
   4b3d4:	29cb883a 	add	r5,r5,r7
   4b3d8:	194b883a 	add	r5,r3,r5
   4b3dc:	3085383a 	mul	r2,r6,r2
   4b3e0:	29c0022e 	bgeu	r5,r7,4b3ec <__umoddi3+0x3d8>
   4b3e4:	00c00074 	movhi	r3,1
   4b3e8:	10c5883a 	add	r2,r2,r3
   4b3ec:	2808d43a 	srli	r4,r5,16
   4b3f0:	280a943a 	slli	r5,r5,16
   4b3f4:	4a7fffcc 	andi	r9,r9,65535
   4b3f8:	2085883a 	add	r2,r4,r2
   4b3fc:	2a4b883a 	add	r5,r5,r9
   4b400:	40803636 	bltu	r8,r2,4b4dc <__umoddi3+0x4c8>
   4b404:	40804d26 	beq	r8,r2,4b53c <__umoddi3+0x528>
   4b408:	4089c83a 	sub	r4,r8,r2
   4b40c:	280f883a 	mov	r7,r5
   4b410:	81cfc83a 	sub	r7,r16,r7
   4b414:	81c7803a 	cmpltu	r3,r16,r7
   4b418:	20c7c83a 	sub	r3,r4,r3
   4b41c:	1cc4983a 	sll	r2,r3,r19
   4b420:	3d0ed83a 	srl	r7,r7,r20
   4b424:	1d06d83a 	srl	r3,r3,r20
   4b428:	11c4b03a 	or	r2,r2,r7
   4b42c:	003f9306 	br	4b27c <__alt_data_end+0xfffd927c>
   4b430:	9ca6983a 	sll	r19,r19,r18
   4b434:	88e8d83a 	srl	r20,r17,r3
   4b438:	80c4d83a 	srl	r2,r16,r3
   4b43c:	982cd43a 	srli	r22,r19,16
   4b440:	8ca2983a 	sll	r17,r17,r18
   4b444:	a009883a 	mov	r4,r20
   4b448:	b00b883a 	mov	r5,r22
   4b44c:	1478b03a 	or	fp,r2,r17
   4b450:	00409940 	call	40994 <__umodsi3>
   4b454:	a009883a 	mov	r4,r20
   4b458:	b00b883a 	mov	r5,r22
   4b45c:	1023883a 	mov	r17,r2
   4b460:	00409300 	call	40930 <__udivsi3>
   4b464:	9d7fffcc 	andi	r21,r19,65535
   4b468:	880a943a 	slli	r5,r17,16
   4b46c:	e008d43a 	srli	r4,fp,16
   4b470:	a885383a 	mul	r2,r21,r2
   4b474:	84a8983a 	sll	r20,r16,r18
   4b478:	2148b03a 	or	r4,r4,r5
   4b47c:	2080042e 	bgeu	r4,r2,4b490 <__umoddi3+0x47c>
   4b480:	24c9883a 	add	r4,r4,r19
   4b484:	24c00236 	bltu	r4,r19,4b490 <__umoddi3+0x47c>
   4b488:	2080012e 	bgeu	r4,r2,4b490 <__umoddi3+0x47c>
   4b48c:	24c9883a 	add	r4,r4,r19
   4b490:	20a3c83a 	sub	r17,r4,r2
   4b494:	b00b883a 	mov	r5,r22
   4b498:	8809883a 	mov	r4,r17
   4b49c:	00409940 	call	40994 <__umodsi3>
   4b4a0:	102f883a 	mov	r23,r2
   4b4a4:	8809883a 	mov	r4,r17
   4b4a8:	b00b883a 	mov	r5,r22
   4b4ac:	00409300 	call	40930 <__udivsi3>
   4b4b0:	b82e943a 	slli	r23,r23,16
   4b4b4:	a885383a 	mul	r2,r21,r2
   4b4b8:	e13fffcc 	andi	r4,fp,65535
   4b4bc:	25c8b03a 	or	r4,r4,r23
   4b4c0:	2080042e 	bgeu	r4,r2,4b4d4 <__umoddi3+0x4c0>
   4b4c4:	24c9883a 	add	r4,r4,r19
   4b4c8:	24c00236 	bltu	r4,r19,4b4d4 <__umoddi3+0x4c0>
   4b4cc:	2080012e 	bgeu	r4,r2,4b4d4 <__umoddi3+0x4c0>
   4b4d0:	24c9883a 	add	r4,r4,r19
   4b4d4:	20a3c83a 	sub	r17,r4,r2
   4b4d8:	003f4806 	br	4b1fc <__alt_data_end+0xfffd91fc>
   4b4dc:	2c8fc83a 	sub	r7,r5,r18
   4b4e0:	1545c83a 	sub	r2,r2,r21
   4b4e4:	29cb803a 	cmpltu	r5,r5,r7
   4b4e8:	1145c83a 	sub	r2,r2,r5
   4b4ec:	4089c83a 	sub	r4,r8,r2
   4b4f0:	003fc706 	br	4b410 <__alt_data_end+0xfffd9410>
   4b4f4:	01000604 	movi	r4,24
   4b4f8:	003f1806 	br	4b15c <__alt_data_end+0xfffd915c>
   4b4fc:	00800604 	movi	r2,24
   4b500:	003f3206 	br	4b1cc <__alt_data_end+0xfffd91cc>
   4b504:	01000604 	movi	r4,24
   4b508:	003ed906 	br	4b070 <__alt_data_end+0xfffd9070>
   4b50c:	413fa52e 	bgeu	r8,r4,4b3a4 <__alt_data_end+0xfffd93a4>
   4b510:	297fff84 	addi	r5,r5,-2
   4b514:	4551883a 	add	r8,r8,r21
   4b518:	003fa306 	br	4b3a8 <__alt_data_end+0xfffd93a8>
   4b51c:	15ff8b2e 	bgeu	r2,r23,4b34c <__alt_data_end+0xfffd934c>
   4b520:	31bfff84 	addi	r6,r6,-2
   4b524:	1545883a 	add	r2,r2,r21
   4b528:	003f8906 	br	4b350 <__alt_data_end+0xfffd9350>
   4b52c:	24c9883a 	add	r4,r4,r19
   4b530:	003eee06 	br	4b0ec <__alt_data_end+0xfffd90ec>
   4b534:	8005883a 	mov	r2,r16
   4b538:	003f1706 	br	4b198 <__alt_data_end+0xfffd9198>
   4b53c:	817fe736 	bltu	r16,r5,4b4dc <__alt_data_end+0xfffd94dc>
   4b540:	280f883a 	mov	r7,r5
   4b544:	0009883a 	mov	r4,zero
   4b548:	003fb106 	br	4b410 <__alt_data_end+0xfffd9410>

0004b54c <__adddf3>:
   4b54c:	02c00434 	movhi	r11,16
   4b550:	5affffc4 	addi	r11,r11,-1
   4b554:	2806d7fa 	srli	r3,r5,31
   4b558:	2ad4703a 	and	r10,r5,r11
   4b55c:	3ad2703a 	and	r9,r7,r11
   4b560:	3804d53a 	srli	r2,r7,20
   4b564:	3018d77a 	srli	r12,r6,29
   4b568:	280ad53a 	srli	r5,r5,20
   4b56c:	501490fa 	slli	r10,r10,3
   4b570:	2010d77a 	srli	r8,r4,29
   4b574:	481290fa 	slli	r9,r9,3
   4b578:	380ed7fa 	srli	r7,r7,31
   4b57c:	defffb04 	addi	sp,sp,-20
   4b580:	dc800215 	stw	r18,8(sp)
   4b584:	dc400115 	stw	r17,4(sp)
   4b588:	dc000015 	stw	r16,0(sp)
   4b58c:	dfc00415 	stw	ra,16(sp)
   4b590:	dcc00315 	stw	r19,12(sp)
   4b594:	1c803fcc 	andi	r18,r3,255
   4b598:	2c01ffcc 	andi	r16,r5,2047
   4b59c:	5210b03a 	or	r8,r10,r8
   4b5a0:	202290fa 	slli	r17,r4,3
   4b5a4:	1081ffcc 	andi	r2,r2,2047
   4b5a8:	4b12b03a 	or	r9,r9,r12
   4b5ac:	300c90fa 	slli	r6,r6,3
   4b5b0:	91c07526 	beq	r18,r7,4b788 <__adddf3+0x23c>
   4b5b4:	8087c83a 	sub	r3,r16,r2
   4b5b8:	00c0ab0e 	bge	zero,r3,4b868 <__adddf3+0x31c>
   4b5bc:	10002a1e 	bne	r2,zero,4b668 <__adddf3+0x11c>
   4b5c0:	4984b03a 	or	r2,r9,r6
   4b5c4:	1000961e 	bne	r2,zero,4b820 <__adddf3+0x2d4>
   4b5c8:	888001cc 	andi	r2,r17,7
   4b5cc:	10000726 	beq	r2,zero,4b5ec <__adddf3+0xa0>
   4b5d0:	888003cc 	andi	r2,r17,15
   4b5d4:	00c00104 	movi	r3,4
   4b5d8:	10c00426 	beq	r2,r3,4b5ec <__adddf3+0xa0>
   4b5dc:	88c7883a 	add	r3,r17,r3
   4b5e0:	1c63803a 	cmpltu	r17,r3,r17
   4b5e4:	4451883a 	add	r8,r8,r17
   4b5e8:	1823883a 	mov	r17,r3
   4b5ec:	4080202c 	andhi	r2,r8,128
   4b5f0:	10005926 	beq	r2,zero,4b758 <__adddf3+0x20c>
   4b5f4:	84000044 	addi	r16,r16,1
   4b5f8:	0081ffc4 	movi	r2,2047
   4b5fc:	8080ba26 	beq	r16,r2,4b8e8 <__adddf3+0x39c>
   4b600:	00bfe034 	movhi	r2,65408
   4b604:	10bfffc4 	addi	r2,r2,-1
   4b608:	4090703a 	and	r8,r8,r2
   4b60c:	4004977a 	slli	r2,r8,29
   4b610:	4010927a 	slli	r8,r8,9
   4b614:	8822d0fa 	srli	r17,r17,3
   4b618:	8401ffcc 	andi	r16,r16,2047
   4b61c:	4010d33a 	srli	r8,r8,12
   4b620:	9007883a 	mov	r3,r18
   4b624:	1444b03a 	or	r2,r2,r17
   4b628:	8401ffcc 	andi	r16,r16,2047
   4b62c:	8020953a 	slli	r16,r16,20
   4b630:	18c03fcc 	andi	r3,r3,255
   4b634:	01000434 	movhi	r4,16
   4b638:	213fffc4 	addi	r4,r4,-1
   4b63c:	180697fa 	slli	r3,r3,31
   4b640:	4110703a 	and	r8,r8,r4
   4b644:	4410b03a 	or	r8,r8,r16
   4b648:	40c6b03a 	or	r3,r8,r3
   4b64c:	dfc00417 	ldw	ra,16(sp)
   4b650:	dcc00317 	ldw	r19,12(sp)
   4b654:	dc800217 	ldw	r18,8(sp)
   4b658:	dc400117 	ldw	r17,4(sp)
   4b65c:	dc000017 	ldw	r16,0(sp)
   4b660:	dec00504 	addi	sp,sp,20
   4b664:	f800283a 	ret
   4b668:	0081ffc4 	movi	r2,2047
   4b66c:	80bfd626 	beq	r16,r2,4b5c8 <__alt_data_end+0xfffd95c8>
   4b670:	4a402034 	orhi	r9,r9,128
   4b674:	00800e04 	movi	r2,56
   4b678:	10c09f16 	blt	r2,r3,4b8f8 <__adddf3+0x3ac>
   4b67c:	008007c4 	movi	r2,31
   4b680:	10c0c216 	blt	r2,r3,4b98c <__adddf3+0x440>
   4b684:	00800804 	movi	r2,32
   4b688:	10c5c83a 	sub	r2,r2,r3
   4b68c:	488a983a 	sll	r5,r9,r2
   4b690:	30c8d83a 	srl	r4,r6,r3
   4b694:	3084983a 	sll	r2,r6,r2
   4b698:	48c6d83a 	srl	r3,r9,r3
   4b69c:	290cb03a 	or	r6,r5,r4
   4b6a0:	1004c03a 	cmpne	r2,r2,zero
   4b6a4:	308cb03a 	or	r6,r6,r2
   4b6a8:	898dc83a 	sub	r6,r17,r6
   4b6ac:	89a3803a 	cmpltu	r17,r17,r6
   4b6b0:	40d1c83a 	sub	r8,r8,r3
   4b6b4:	4451c83a 	sub	r8,r8,r17
   4b6b8:	3023883a 	mov	r17,r6
   4b6bc:	4080202c 	andhi	r2,r8,128
   4b6c0:	10002326 	beq	r2,zero,4b750 <__adddf3+0x204>
   4b6c4:	04c02034 	movhi	r19,128
   4b6c8:	9cffffc4 	addi	r19,r19,-1
   4b6cc:	44e6703a 	and	r19,r8,r19
   4b6d0:	98007626 	beq	r19,zero,4b8ac <__adddf3+0x360>
   4b6d4:	9809883a 	mov	r4,r19
   4b6d8:	004db500 	call	4db50 <__clzsi2>
   4b6dc:	10fffe04 	addi	r3,r2,-8
   4b6e0:	010007c4 	movi	r4,31
   4b6e4:	20c07716 	blt	r4,r3,4b8c4 <__adddf3+0x378>
   4b6e8:	00800804 	movi	r2,32
   4b6ec:	10c5c83a 	sub	r2,r2,r3
   4b6f0:	8884d83a 	srl	r2,r17,r2
   4b6f4:	98d0983a 	sll	r8,r19,r3
   4b6f8:	88e2983a 	sll	r17,r17,r3
   4b6fc:	1204b03a 	or	r2,r2,r8
   4b700:	1c007416 	blt	r3,r16,4b8d4 <__adddf3+0x388>
   4b704:	1c21c83a 	sub	r16,r3,r16
   4b708:	82000044 	addi	r8,r16,1
   4b70c:	00c007c4 	movi	r3,31
   4b710:	1a009116 	blt	r3,r8,4b958 <__adddf3+0x40c>
   4b714:	00c00804 	movi	r3,32
   4b718:	1a07c83a 	sub	r3,r3,r8
   4b71c:	8a08d83a 	srl	r4,r17,r8
   4b720:	88e2983a 	sll	r17,r17,r3
   4b724:	10c6983a 	sll	r3,r2,r3
   4b728:	1210d83a 	srl	r8,r2,r8
   4b72c:	8804c03a 	cmpne	r2,r17,zero
   4b730:	1906b03a 	or	r3,r3,r4
   4b734:	18a2b03a 	or	r17,r3,r2
   4b738:	0021883a 	mov	r16,zero
   4b73c:	003fa206 	br	4b5c8 <__alt_data_end+0xfffd95c8>
   4b740:	1890b03a 	or	r8,r3,r2
   4b744:	40017d26 	beq	r8,zero,4bd3c <__adddf3+0x7f0>
   4b748:	1011883a 	mov	r8,r2
   4b74c:	1823883a 	mov	r17,r3
   4b750:	888001cc 	andi	r2,r17,7
   4b754:	103f9e1e 	bne	r2,zero,4b5d0 <__alt_data_end+0xfffd95d0>
   4b758:	4004977a 	slli	r2,r8,29
   4b75c:	8822d0fa 	srli	r17,r17,3
   4b760:	4010d0fa 	srli	r8,r8,3
   4b764:	9007883a 	mov	r3,r18
   4b768:	1444b03a 	or	r2,r2,r17
   4b76c:	0101ffc4 	movi	r4,2047
   4b770:	81002426 	beq	r16,r4,4b804 <__adddf3+0x2b8>
   4b774:	8120703a 	and	r16,r16,r4
   4b778:	01000434 	movhi	r4,16
   4b77c:	213fffc4 	addi	r4,r4,-1
   4b780:	4110703a 	and	r8,r8,r4
   4b784:	003fa806 	br	4b628 <__alt_data_end+0xfffd9628>
   4b788:	8089c83a 	sub	r4,r16,r2
   4b78c:	01005e0e 	bge	zero,r4,4b908 <__adddf3+0x3bc>
   4b790:	10002b26 	beq	r2,zero,4b840 <__adddf3+0x2f4>
   4b794:	0081ffc4 	movi	r2,2047
   4b798:	80bf8b26 	beq	r16,r2,4b5c8 <__alt_data_end+0xfffd95c8>
   4b79c:	4a402034 	orhi	r9,r9,128
   4b7a0:	00800e04 	movi	r2,56
   4b7a4:	1100a40e 	bge	r2,r4,4ba38 <__adddf3+0x4ec>
   4b7a8:	498cb03a 	or	r6,r9,r6
   4b7ac:	300ac03a 	cmpne	r5,r6,zero
   4b7b0:	0013883a 	mov	r9,zero
   4b7b4:	2c4b883a 	add	r5,r5,r17
   4b7b8:	2c63803a 	cmpltu	r17,r5,r17
   4b7bc:	4a11883a 	add	r8,r9,r8
   4b7c0:	8a11883a 	add	r8,r17,r8
   4b7c4:	2823883a 	mov	r17,r5
   4b7c8:	4080202c 	andhi	r2,r8,128
   4b7cc:	103fe026 	beq	r2,zero,4b750 <__alt_data_end+0xfffd9750>
   4b7d0:	84000044 	addi	r16,r16,1
   4b7d4:	0081ffc4 	movi	r2,2047
   4b7d8:	8080d226 	beq	r16,r2,4bb24 <__adddf3+0x5d8>
   4b7dc:	00bfe034 	movhi	r2,65408
   4b7e0:	10bfffc4 	addi	r2,r2,-1
   4b7e4:	4090703a 	and	r8,r8,r2
   4b7e8:	880ad07a 	srli	r5,r17,1
   4b7ec:	400897fa 	slli	r4,r8,31
   4b7f0:	88c0004c 	andi	r3,r17,1
   4b7f4:	28e2b03a 	or	r17,r5,r3
   4b7f8:	4010d07a 	srli	r8,r8,1
   4b7fc:	2462b03a 	or	r17,r4,r17
   4b800:	003f7106 	br	4b5c8 <__alt_data_end+0xfffd95c8>
   4b804:	4088b03a 	or	r4,r8,r2
   4b808:	20014526 	beq	r4,zero,4bd20 <__adddf3+0x7d4>
   4b80c:	01000434 	movhi	r4,16
   4b810:	42000234 	orhi	r8,r8,8
   4b814:	213fffc4 	addi	r4,r4,-1
   4b818:	4110703a 	and	r8,r8,r4
   4b81c:	003f8206 	br	4b628 <__alt_data_end+0xfffd9628>
   4b820:	18ffffc4 	addi	r3,r3,-1
   4b824:	1800491e 	bne	r3,zero,4b94c <__adddf3+0x400>
   4b828:	898bc83a 	sub	r5,r17,r6
   4b82c:	8963803a 	cmpltu	r17,r17,r5
   4b830:	4251c83a 	sub	r8,r8,r9
   4b834:	4451c83a 	sub	r8,r8,r17
   4b838:	2823883a 	mov	r17,r5
   4b83c:	003f9f06 	br	4b6bc <__alt_data_end+0xfffd96bc>
   4b840:	4984b03a 	or	r2,r9,r6
   4b844:	103f6026 	beq	r2,zero,4b5c8 <__alt_data_end+0xfffd95c8>
   4b848:	213fffc4 	addi	r4,r4,-1
   4b84c:	2000931e 	bne	r4,zero,4ba9c <__adddf3+0x550>
   4b850:	898d883a 	add	r6,r17,r6
   4b854:	3463803a 	cmpltu	r17,r6,r17
   4b858:	4251883a 	add	r8,r8,r9
   4b85c:	8a11883a 	add	r8,r17,r8
   4b860:	3023883a 	mov	r17,r6
   4b864:	003fd806 	br	4b7c8 <__alt_data_end+0xfffd97c8>
   4b868:	1800541e 	bne	r3,zero,4b9bc <__adddf3+0x470>
   4b86c:	80800044 	addi	r2,r16,1
   4b870:	1081ffcc 	andi	r2,r2,2047
   4b874:	00c00044 	movi	r3,1
   4b878:	1880a00e 	bge	r3,r2,4bafc <__adddf3+0x5b0>
   4b87c:	8989c83a 	sub	r4,r17,r6
   4b880:	8905803a 	cmpltu	r2,r17,r4
   4b884:	4267c83a 	sub	r19,r8,r9
   4b888:	98a7c83a 	sub	r19,r19,r2
   4b88c:	9880202c 	andhi	r2,r19,128
   4b890:	10006326 	beq	r2,zero,4ba20 <__adddf3+0x4d4>
   4b894:	3463c83a 	sub	r17,r6,r17
   4b898:	4a07c83a 	sub	r3,r9,r8
   4b89c:	344d803a 	cmpltu	r6,r6,r17
   4b8a0:	19a7c83a 	sub	r19,r3,r6
   4b8a4:	3825883a 	mov	r18,r7
   4b8a8:	983f8a1e 	bne	r19,zero,4b6d4 <__alt_data_end+0xfffd96d4>
   4b8ac:	8809883a 	mov	r4,r17
   4b8b0:	004db500 	call	4db50 <__clzsi2>
   4b8b4:	10800804 	addi	r2,r2,32
   4b8b8:	10fffe04 	addi	r3,r2,-8
   4b8bc:	010007c4 	movi	r4,31
   4b8c0:	20ff890e 	bge	r4,r3,4b6e8 <__alt_data_end+0xfffd96e8>
   4b8c4:	10bff604 	addi	r2,r2,-40
   4b8c8:	8884983a 	sll	r2,r17,r2
   4b8cc:	0023883a 	mov	r17,zero
   4b8d0:	1c3f8c0e 	bge	r3,r16,4b704 <__alt_data_end+0xfffd9704>
   4b8d4:	023fe034 	movhi	r8,65408
   4b8d8:	423fffc4 	addi	r8,r8,-1
   4b8dc:	80e1c83a 	sub	r16,r16,r3
   4b8e0:	1210703a 	and	r8,r2,r8
   4b8e4:	003f3806 	br	4b5c8 <__alt_data_end+0xfffd95c8>
   4b8e8:	9007883a 	mov	r3,r18
   4b8ec:	0011883a 	mov	r8,zero
   4b8f0:	0005883a 	mov	r2,zero
   4b8f4:	003f4c06 	br	4b628 <__alt_data_end+0xfffd9628>
   4b8f8:	498cb03a 	or	r6,r9,r6
   4b8fc:	300cc03a 	cmpne	r6,r6,zero
   4b900:	0007883a 	mov	r3,zero
   4b904:	003f6806 	br	4b6a8 <__alt_data_end+0xfffd96a8>
   4b908:	20009c1e 	bne	r4,zero,4bb7c <__adddf3+0x630>
   4b90c:	80800044 	addi	r2,r16,1
   4b910:	1141ffcc 	andi	r5,r2,2047
   4b914:	01000044 	movi	r4,1
   4b918:	2140670e 	bge	r4,r5,4bab8 <__adddf3+0x56c>
   4b91c:	0101ffc4 	movi	r4,2047
   4b920:	11007f26 	beq	r2,r4,4bb20 <__adddf3+0x5d4>
   4b924:	898d883a 	add	r6,r17,r6
   4b928:	4247883a 	add	r3,r8,r9
   4b92c:	3451803a 	cmpltu	r8,r6,r17
   4b930:	40d1883a 	add	r8,r8,r3
   4b934:	402297fa 	slli	r17,r8,31
   4b938:	300cd07a 	srli	r6,r6,1
   4b93c:	4010d07a 	srli	r8,r8,1
   4b940:	1021883a 	mov	r16,r2
   4b944:	89a2b03a 	or	r17,r17,r6
   4b948:	003f1f06 	br	4b5c8 <__alt_data_end+0xfffd95c8>
   4b94c:	0081ffc4 	movi	r2,2047
   4b950:	80bf481e 	bne	r16,r2,4b674 <__alt_data_end+0xfffd9674>
   4b954:	003f1c06 	br	4b5c8 <__alt_data_end+0xfffd95c8>
   4b958:	843ff844 	addi	r16,r16,-31
   4b95c:	01000804 	movi	r4,32
   4b960:	1406d83a 	srl	r3,r2,r16
   4b964:	41005026 	beq	r8,r4,4baa8 <__adddf3+0x55c>
   4b968:	01001004 	movi	r4,64
   4b96c:	2211c83a 	sub	r8,r4,r8
   4b970:	1204983a 	sll	r2,r2,r8
   4b974:	88a2b03a 	or	r17,r17,r2
   4b978:	8822c03a 	cmpne	r17,r17,zero
   4b97c:	1c62b03a 	or	r17,r3,r17
   4b980:	0011883a 	mov	r8,zero
   4b984:	0021883a 	mov	r16,zero
   4b988:	003f7106 	br	4b750 <__alt_data_end+0xfffd9750>
   4b98c:	193ff804 	addi	r4,r3,-32
   4b990:	00800804 	movi	r2,32
   4b994:	4908d83a 	srl	r4,r9,r4
   4b998:	18804526 	beq	r3,r2,4bab0 <__adddf3+0x564>
   4b99c:	00801004 	movi	r2,64
   4b9a0:	10c5c83a 	sub	r2,r2,r3
   4b9a4:	4886983a 	sll	r3,r9,r2
   4b9a8:	198cb03a 	or	r6,r3,r6
   4b9ac:	300cc03a 	cmpne	r6,r6,zero
   4b9b0:	218cb03a 	or	r6,r4,r6
   4b9b4:	0007883a 	mov	r3,zero
   4b9b8:	003f3b06 	br	4b6a8 <__alt_data_end+0xfffd96a8>
   4b9bc:	80002a26 	beq	r16,zero,4ba68 <__adddf3+0x51c>
   4b9c0:	0101ffc4 	movi	r4,2047
   4b9c4:	11006826 	beq	r2,r4,4bb68 <__adddf3+0x61c>
   4b9c8:	00c7c83a 	sub	r3,zero,r3
   4b9cc:	42002034 	orhi	r8,r8,128
   4b9d0:	01000e04 	movi	r4,56
   4b9d4:	20c07c16 	blt	r4,r3,4bbc8 <__adddf3+0x67c>
   4b9d8:	010007c4 	movi	r4,31
   4b9dc:	20c0da16 	blt	r4,r3,4bd48 <__adddf3+0x7fc>
   4b9e0:	01000804 	movi	r4,32
   4b9e4:	20c9c83a 	sub	r4,r4,r3
   4b9e8:	4114983a 	sll	r10,r8,r4
   4b9ec:	88cad83a 	srl	r5,r17,r3
   4b9f0:	8908983a 	sll	r4,r17,r4
   4b9f4:	40c6d83a 	srl	r3,r8,r3
   4b9f8:	5162b03a 	or	r17,r10,r5
   4b9fc:	2008c03a 	cmpne	r4,r4,zero
   4ba00:	8922b03a 	or	r17,r17,r4
   4ba04:	3463c83a 	sub	r17,r6,r17
   4ba08:	48c7c83a 	sub	r3,r9,r3
   4ba0c:	344d803a 	cmpltu	r6,r6,r17
   4ba10:	1991c83a 	sub	r8,r3,r6
   4ba14:	1021883a 	mov	r16,r2
   4ba18:	3825883a 	mov	r18,r7
   4ba1c:	003f2706 	br	4b6bc <__alt_data_end+0xfffd96bc>
   4ba20:	24d0b03a 	or	r8,r4,r19
   4ba24:	40001b1e 	bne	r8,zero,4ba94 <__adddf3+0x548>
   4ba28:	0005883a 	mov	r2,zero
   4ba2c:	0007883a 	mov	r3,zero
   4ba30:	0021883a 	mov	r16,zero
   4ba34:	003f4d06 	br	4b76c <__alt_data_end+0xfffd976c>
   4ba38:	008007c4 	movi	r2,31
   4ba3c:	11003c16 	blt	r2,r4,4bb30 <__adddf3+0x5e4>
   4ba40:	00800804 	movi	r2,32
   4ba44:	1105c83a 	sub	r2,r2,r4
   4ba48:	488e983a 	sll	r7,r9,r2
   4ba4c:	310ad83a 	srl	r5,r6,r4
   4ba50:	3084983a 	sll	r2,r6,r2
   4ba54:	4912d83a 	srl	r9,r9,r4
   4ba58:	394ab03a 	or	r5,r7,r5
   4ba5c:	1004c03a 	cmpne	r2,r2,zero
   4ba60:	288ab03a 	or	r5,r5,r2
   4ba64:	003f5306 	br	4b7b4 <__alt_data_end+0xfffd97b4>
   4ba68:	4448b03a 	or	r4,r8,r17
   4ba6c:	20003e26 	beq	r4,zero,4bb68 <__adddf3+0x61c>
   4ba70:	00c6303a 	nor	r3,zero,r3
   4ba74:	18003a1e 	bne	r3,zero,4bb60 <__adddf3+0x614>
   4ba78:	3463c83a 	sub	r17,r6,r17
   4ba7c:	4a07c83a 	sub	r3,r9,r8
   4ba80:	344d803a 	cmpltu	r6,r6,r17
   4ba84:	1991c83a 	sub	r8,r3,r6
   4ba88:	1021883a 	mov	r16,r2
   4ba8c:	3825883a 	mov	r18,r7
   4ba90:	003f0a06 	br	4b6bc <__alt_data_end+0xfffd96bc>
   4ba94:	2023883a 	mov	r17,r4
   4ba98:	003f0d06 	br	4b6d0 <__alt_data_end+0xfffd96d0>
   4ba9c:	0081ffc4 	movi	r2,2047
   4baa0:	80bf3f1e 	bne	r16,r2,4b7a0 <__alt_data_end+0xfffd97a0>
   4baa4:	003ec806 	br	4b5c8 <__alt_data_end+0xfffd95c8>
   4baa8:	0005883a 	mov	r2,zero
   4baac:	003fb106 	br	4b974 <__alt_data_end+0xfffd9974>
   4bab0:	0007883a 	mov	r3,zero
   4bab4:	003fbc06 	br	4b9a8 <__alt_data_end+0xfffd99a8>
   4bab8:	4444b03a 	or	r2,r8,r17
   4babc:	8000871e 	bne	r16,zero,4bcdc <__adddf3+0x790>
   4bac0:	1000ba26 	beq	r2,zero,4bdac <__adddf3+0x860>
   4bac4:	4984b03a 	or	r2,r9,r6
   4bac8:	103ebf26 	beq	r2,zero,4b5c8 <__alt_data_end+0xfffd95c8>
   4bacc:	8985883a 	add	r2,r17,r6
   4bad0:	4247883a 	add	r3,r8,r9
   4bad4:	1451803a 	cmpltu	r8,r2,r17
   4bad8:	40d1883a 	add	r8,r8,r3
   4badc:	40c0202c 	andhi	r3,r8,128
   4bae0:	1023883a 	mov	r17,r2
   4bae4:	183f1a26 	beq	r3,zero,4b750 <__alt_data_end+0xfffd9750>
   4bae8:	00bfe034 	movhi	r2,65408
   4baec:	10bfffc4 	addi	r2,r2,-1
   4baf0:	2021883a 	mov	r16,r4
   4baf4:	4090703a 	and	r8,r8,r2
   4baf8:	003eb306 	br	4b5c8 <__alt_data_end+0xfffd95c8>
   4bafc:	4444b03a 	or	r2,r8,r17
   4bb00:	8000291e 	bne	r16,zero,4bba8 <__adddf3+0x65c>
   4bb04:	10004b1e 	bne	r2,zero,4bc34 <__adddf3+0x6e8>
   4bb08:	4990b03a 	or	r8,r9,r6
   4bb0c:	40008b26 	beq	r8,zero,4bd3c <__adddf3+0x7f0>
   4bb10:	4811883a 	mov	r8,r9
   4bb14:	3023883a 	mov	r17,r6
   4bb18:	3825883a 	mov	r18,r7
   4bb1c:	003eaa06 	br	4b5c8 <__alt_data_end+0xfffd95c8>
   4bb20:	1021883a 	mov	r16,r2
   4bb24:	0011883a 	mov	r8,zero
   4bb28:	0005883a 	mov	r2,zero
   4bb2c:	003f0f06 	br	4b76c <__alt_data_end+0xfffd976c>
   4bb30:	217ff804 	addi	r5,r4,-32
   4bb34:	00800804 	movi	r2,32
   4bb38:	494ad83a 	srl	r5,r9,r5
   4bb3c:	20807d26 	beq	r4,r2,4bd34 <__adddf3+0x7e8>
   4bb40:	00801004 	movi	r2,64
   4bb44:	1109c83a 	sub	r4,r2,r4
   4bb48:	4912983a 	sll	r9,r9,r4
   4bb4c:	498cb03a 	or	r6,r9,r6
   4bb50:	300cc03a 	cmpne	r6,r6,zero
   4bb54:	298ab03a 	or	r5,r5,r6
   4bb58:	0013883a 	mov	r9,zero
   4bb5c:	003f1506 	br	4b7b4 <__alt_data_end+0xfffd97b4>
   4bb60:	0101ffc4 	movi	r4,2047
   4bb64:	113f9a1e 	bne	r2,r4,4b9d0 <__alt_data_end+0xfffd99d0>
   4bb68:	4811883a 	mov	r8,r9
   4bb6c:	3023883a 	mov	r17,r6
   4bb70:	1021883a 	mov	r16,r2
   4bb74:	3825883a 	mov	r18,r7
   4bb78:	003e9306 	br	4b5c8 <__alt_data_end+0xfffd95c8>
   4bb7c:	8000161e 	bne	r16,zero,4bbd8 <__adddf3+0x68c>
   4bb80:	444ab03a 	or	r5,r8,r17
   4bb84:	28005126 	beq	r5,zero,4bccc <__adddf3+0x780>
   4bb88:	0108303a 	nor	r4,zero,r4
   4bb8c:	20004d1e 	bne	r4,zero,4bcc4 <__adddf3+0x778>
   4bb90:	89a3883a 	add	r17,r17,r6
   4bb94:	4253883a 	add	r9,r8,r9
   4bb98:	898d803a 	cmpltu	r6,r17,r6
   4bb9c:	3251883a 	add	r8,r6,r9
   4bba0:	1021883a 	mov	r16,r2
   4bba4:	003f0806 	br	4b7c8 <__alt_data_end+0xfffd97c8>
   4bba8:	1000301e 	bne	r2,zero,4bc6c <__adddf3+0x720>
   4bbac:	4984b03a 	or	r2,r9,r6
   4bbb0:	10007126 	beq	r2,zero,4bd78 <__adddf3+0x82c>
   4bbb4:	4811883a 	mov	r8,r9
   4bbb8:	3023883a 	mov	r17,r6
   4bbbc:	3825883a 	mov	r18,r7
   4bbc0:	0401ffc4 	movi	r16,2047
   4bbc4:	003e8006 	br	4b5c8 <__alt_data_end+0xfffd95c8>
   4bbc8:	4462b03a 	or	r17,r8,r17
   4bbcc:	8822c03a 	cmpne	r17,r17,zero
   4bbd0:	0007883a 	mov	r3,zero
   4bbd4:	003f8b06 	br	4ba04 <__alt_data_end+0xfffd9a04>
   4bbd8:	0141ffc4 	movi	r5,2047
   4bbdc:	11403b26 	beq	r2,r5,4bccc <__adddf3+0x780>
   4bbe0:	0109c83a 	sub	r4,zero,r4
   4bbe4:	42002034 	orhi	r8,r8,128
   4bbe8:	01400e04 	movi	r5,56
   4bbec:	29006716 	blt	r5,r4,4bd8c <__adddf3+0x840>
   4bbf0:	014007c4 	movi	r5,31
   4bbf4:	29007016 	blt	r5,r4,4bdb8 <__adddf3+0x86c>
   4bbf8:	01400804 	movi	r5,32
   4bbfc:	290bc83a 	sub	r5,r5,r4
   4bc00:	4154983a 	sll	r10,r8,r5
   4bc04:	890ed83a 	srl	r7,r17,r4
   4bc08:	894a983a 	sll	r5,r17,r5
   4bc0c:	4108d83a 	srl	r4,r8,r4
   4bc10:	51e2b03a 	or	r17,r10,r7
   4bc14:	280ac03a 	cmpne	r5,r5,zero
   4bc18:	8962b03a 	or	r17,r17,r5
   4bc1c:	89a3883a 	add	r17,r17,r6
   4bc20:	2253883a 	add	r9,r4,r9
   4bc24:	898d803a 	cmpltu	r6,r17,r6
   4bc28:	3251883a 	add	r8,r6,r9
   4bc2c:	1021883a 	mov	r16,r2
   4bc30:	003ee506 	br	4b7c8 <__alt_data_end+0xfffd97c8>
   4bc34:	4984b03a 	or	r2,r9,r6
   4bc38:	103e6326 	beq	r2,zero,4b5c8 <__alt_data_end+0xfffd95c8>
   4bc3c:	8987c83a 	sub	r3,r17,r6
   4bc40:	88c9803a 	cmpltu	r4,r17,r3
   4bc44:	4245c83a 	sub	r2,r8,r9
   4bc48:	1105c83a 	sub	r2,r2,r4
   4bc4c:	1100202c 	andhi	r4,r2,128
   4bc50:	203ebb26 	beq	r4,zero,4b740 <__alt_data_end+0xfffd9740>
   4bc54:	3463c83a 	sub	r17,r6,r17
   4bc58:	4a07c83a 	sub	r3,r9,r8
   4bc5c:	344d803a 	cmpltu	r6,r6,r17
   4bc60:	1991c83a 	sub	r8,r3,r6
   4bc64:	3825883a 	mov	r18,r7
   4bc68:	003e5706 	br	4b5c8 <__alt_data_end+0xfffd95c8>
   4bc6c:	4984b03a 	or	r2,r9,r6
   4bc70:	10002e26 	beq	r2,zero,4bd2c <__adddf3+0x7e0>
   4bc74:	4004d0fa 	srli	r2,r8,3
   4bc78:	8822d0fa 	srli	r17,r17,3
   4bc7c:	4010977a 	slli	r8,r8,29
   4bc80:	10c0022c 	andhi	r3,r2,8
   4bc84:	4462b03a 	or	r17,r8,r17
   4bc88:	18000826 	beq	r3,zero,4bcac <__adddf3+0x760>
   4bc8c:	4808d0fa 	srli	r4,r9,3
   4bc90:	20c0022c 	andhi	r3,r4,8
   4bc94:	1800051e 	bne	r3,zero,4bcac <__adddf3+0x760>
   4bc98:	300cd0fa 	srli	r6,r6,3
   4bc9c:	4806977a 	slli	r3,r9,29
   4bca0:	2005883a 	mov	r2,r4
   4bca4:	3825883a 	mov	r18,r7
   4bca8:	19a2b03a 	or	r17,r3,r6
   4bcac:	8810d77a 	srli	r8,r17,29
   4bcb0:	100490fa 	slli	r2,r2,3
   4bcb4:	882290fa 	slli	r17,r17,3
   4bcb8:	0401ffc4 	movi	r16,2047
   4bcbc:	4090b03a 	or	r8,r8,r2
   4bcc0:	003e4106 	br	4b5c8 <__alt_data_end+0xfffd95c8>
   4bcc4:	0141ffc4 	movi	r5,2047
   4bcc8:	117fc71e 	bne	r2,r5,4bbe8 <__alt_data_end+0xfffd9be8>
   4bccc:	4811883a 	mov	r8,r9
   4bcd0:	3023883a 	mov	r17,r6
   4bcd4:	1021883a 	mov	r16,r2
   4bcd8:	003e3b06 	br	4b5c8 <__alt_data_end+0xfffd95c8>
   4bcdc:	10002f26 	beq	r2,zero,4bd9c <__adddf3+0x850>
   4bce0:	4984b03a 	or	r2,r9,r6
   4bce4:	10001126 	beq	r2,zero,4bd2c <__adddf3+0x7e0>
   4bce8:	4004d0fa 	srli	r2,r8,3
   4bcec:	8822d0fa 	srli	r17,r17,3
   4bcf0:	4010977a 	slli	r8,r8,29
   4bcf4:	10c0022c 	andhi	r3,r2,8
   4bcf8:	4462b03a 	or	r17,r8,r17
   4bcfc:	183feb26 	beq	r3,zero,4bcac <__alt_data_end+0xfffd9cac>
   4bd00:	4808d0fa 	srli	r4,r9,3
   4bd04:	20c0022c 	andhi	r3,r4,8
   4bd08:	183fe81e 	bne	r3,zero,4bcac <__alt_data_end+0xfffd9cac>
   4bd0c:	300cd0fa 	srli	r6,r6,3
   4bd10:	4806977a 	slli	r3,r9,29
   4bd14:	2005883a 	mov	r2,r4
   4bd18:	19a2b03a 	or	r17,r3,r6
   4bd1c:	003fe306 	br	4bcac <__alt_data_end+0xfffd9cac>
   4bd20:	0011883a 	mov	r8,zero
   4bd24:	0005883a 	mov	r2,zero
   4bd28:	003e3f06 	br	4b628 <__alt_data_end+0xfffd9628>
   4bd2c:	0401ffc4 	movi	r16,2047
   4bd30:	003e2506 	br	4b5c8 <__alt_data_end+0xfffd95c8>
   4bd34:	0013883a 	mov	r9,zero
   4bd38:	003f8406 	br	4bb4c <__alt_data_end+0xfffd9b4c>
   4bd3c:	0005883a 	mov	r2,zero
   4bd40:	0007883a 	mov	r3,zero
   4bd44:	003e8906 	br	4b76c <__alt_data_end+0xfffd976c>
   4bd48:	197ff804 	addi	r5,r3,-32
   4bd4c:	01000804 	movi	r4,32
   4bd50:	414ad83a 	srl	r5,r8,r5
   4bd54:	19002426 	beq	r3,r4,4bde8 <__adddf3+0x89c>
   4bd58:	01001004 	movi	r4,64
   4bd5c:	20c7c83a 	sub	r3,r4,r3
   4bd60:	40c6983a 	sll	r3,r8,r3
   4bd64:	1c46b03a 	or	r3,r3,r17
   4bd68:	1806c03a 	cmpne	r3,r3,zero
   4bd6c:	28e2b03a 	or	r17,r5,r3
   4bd70:	0007883a 	mov	r3,zero
   4bd74:	003f2306 	br	4ba04 <__alt_data_end+0xfffd9a04>
   4bd78:	0007883a 	mov	r3,zero
   4bd7c:	5811883a 	mov	r8,r11
   4bd80:	00bfffc4 	movi	r2,-1
   4bd84:	0401ffc4 	movi	r16,2047
   4bd88:	003e7806 	br	4b76c <__alt_data_end+0xfffd976c>
   4bd8c:	4462b03a 	or	r17,r8,r17
   4bd90:	8822c03a 	cmpne	r17,r17,zero
   4bd94:	0009883a 	mov	r4,zero
   4bd98:	003fa006 	br	4bc1c <__alt_data_end+0xfffd9c1c>
   4bd9c:	4811883a 	mov	r8,r9
   4bda0:	3023883a 	mov	r17,r6
   4bda4:	0401ffc4 	movi	r16,2047
   4bda8:	003e0706 	br	4b5c8 <__alt_data_end+0xfffd95c8>
   4bdac:	4811883a 	mov	r8,r9
   4bdb0:	3023883a 	mov	r17,r6
   4bdb4:	003e0406 	br	4b5c8 <__alt_data_end+0xfffd95c8>
   4bdb8:	21fff804 	addi	r7,r4,-32
   4bdbc:	01400804 	movi	r5,32
   4bdc0:	41ced83a 	srl	r7,r8,r7
   4bdc4:	21400a26 	beq	r4,r5,4bdf0 <__adddf3+0x8a4>
   4bdc8:	01401004 	movi	r5,64
   4bdcc:	2909c83a 	sub	r4,r5,r4
   4bdd0:	4108983a 	sll	r4,r8,r4
   4bdd4:	2448b03a 	or	r4,r4,r17
   4bdd8:	2008c03a 	cmpne	r4,r4,zero
   4bddc:	3922b03a 	or	r17,r7,r4
   4bde0:	0009883a 	mov	r4,zero
   4bde4:	003f8d06 	br	4bc1c <__alt_data_end+0xfffd9c1c>
   4bde8:	0007883a 	mov	r3,zero
   4bdec:	003fdd06 	br	4bd64 <__alt_data_end+0xfffd9d64>
   4bdf0:	0009883a 	mov	r4,zero
   4bdf4:	003ff706 	br	4bdd4 <__alt_data_end+0xfffd9dd4>

0004bdf8 <__divdf3>:
   4bdf8:	defff204 	addi	sp,sp,-56
   4bdfc:	dd400915 	stw	r21,36(sp)
   4be00:	282ad53a 	srli	r21,r5,20
   4be04:	dd000815 	stw	r20,32(sp)
   4be08:	2828d7fa 	srli	r20,r5,31
   4be0c:	dc000415 	stw	r16,16(sp)
   4be10:	04000434 	movhi	r16,16
   4be14:	df000c15 	stw	fp,48(sp)
   4be18:	843fffc4 	addi	r16,r16,-1
   4be1c:	dfc00d15 	stw	ra,52(sp)
   4be20:	ddc00b15 	stw	r23,44(sp)
   4be24:	dd800a15 	stw	r22,40(sp)
   4be28:	dcc00715 	stw	r19,28(sp)
   4be2c:	dc800615 	stw	r18,24(sp)
   4be30:	dc400515 	stw	r17,20(sp)
   4be34:	ad41ffcc 	andi	r21,r21,2047
   4be38:	2c20703a 	and	r16,r5,r16
   4be3c:	a7003fcc 	andi	fp,r20,255
   4be40:	a8006126 	beq	r21,zero,4bfc8 <__divdf3+0x1d0>
   4be44:	0081ffc4 	movi	r2,2047
   4be48:	2025883a 	mov	r18,r4
   4be4c:	a8803726 	beq	r21,r2,4bf2c <__divdf3+0x134>
   4be50:	80800434 	orhi	r2,r16,16
   4be54:	100490fa 	slli	r2,r2,3
   4be58:	2020d77a 	srli	r16,r4,29
   4be5c:	202490fa 	slli	r18,r4,3
   4be60:	ad7f0044 	addi	r21,r21,-1023
   4be64:	80a0b03a 	or	r16,r16,r2
   4be68:	0027883a 	mov	r19,zero
   4be6c:	0013883a 	mov	r9,zero
   4be70:	3804d53a 	srli	r2,r7,20
   4be74:	382cd7fa 	srli	r22,r7,31
   4be78:	04400434 	movhi	r17,16
   4be7c:	8c7fffc4 	addi	r17,r17,-1
   4be80:	1081ffcc 	andi	r2,r2,2047
   4be84:	3011883a 	mov	r8,r6
   4be88:	3c62703a 	and	r17,r7,r17
   4be8c:	b5c03fcc 	andi	r23,r22,255
   4be90:	10006c26 	beq	r2,zero,4c044 <__divdf3+0x24c>
   4be94:	00c1ffc4 	movi	r3,2047
   4be98:	10c06426 	beq	r2,r3,4c02c <__divdf3+0x234>
   4be9c:	88c00434 	orhi	r3,r17,16
   4bea0:	180690fa 	slli	r3,r3,3
   4bea4:	3022d77a 	srli	r17,r6,29
   4bea8:	301090fa 	slli	r8,r6,3
   4beac:	10bf0044 	addi	r2,r2,-1023
   4beb0:	88e2b03a 	or	r17,r17,r3
   4beb4:	000f883a 	mov	r7,zero
   4beb8:	a58cf03a 	xor	r6,r20,r22
   4bebc:	3cc8b03a 	or	r4,r7,r19
   4bec0:	a8abc83a 	sub	r21,r21,r2
   4bec4:	008003c4 	movi	r2,15
   4bec8:	3007883a 	mov	r3,r6
   4becc:	34c03fcc 	andi	r19,r6,255
   4bed0:	11009036 	bltu	r2,r4,4c114 <__divdf3+0x31c>
   4bed4:	200890ba 	slli	r4,r4,2
   4bed8:	00800174 	movhi	r2,5
   4bedc:	10afbb04 	addi	r2,r2,-16660
   4bee0:	2089883a 	add	r4,r4,r2
   4bee4:	20800017 	ldw	r2,0(r4)
   4bee8:	1000683a 	jmp	r2
   4beec:	0004c114 	movui	zero,4868
   4bef0:	0004bf64 	muli	zero,zero,4861
   4bef4:	0004c104 	movi	zero,4868
   4bef8:	0004bf58 	cmpnei	zero,zero,4861
   4befc:	0004c104 	movi	zero,4868
   4bf00:	0004c0d8 	cmpnei	zero,zero,4867
   4bf04:	0004c104 	movi	zero,4868
   4bf08:	0004bf58 	cmpnei	zero,zero,4861
   4bf0c:	0004bf64 	muli	zero,zero,4861
   4bf10:	0004bf64 	muli	zero,zero,4861
   4bf14:	0004c0d8 	cmpnei	zero,zero,4867
   4bf18:	0004bf58 	cmpnei	zero,zero,4861
   4bf1c:	0004bf48 	cmpgei	zero,zero,4861
   4bf20:	0004bf48 	cmpgei	zero,zero,4861
   4bf24:	0004bf48 	cmpgei	zero,zero,4861
   4bf28:	0004c3f8 	rdprs	zero,zero,4879
   4bf2c:	2404b03a 	or	r2,r4,r16
   4bf30:	1000661e 	bne	r2,zero,4c0cc <__divdf3+0x2d4>
   4bf34:	04c00204 	movi	r19,8
   4bf38:	0021883a 	mov	r16,zero
   4bf3c:	0025883a 	mov	r18,zero
   4bf40:	02400084 	movi	r9,2
   4bf44:	003fca06 	br	4be70 <__alt_data_end+0xfffd9e70>
   4bf48:	8023883a 	mov	r17,r16
   4bf4c:	9011883a 	mov	r8,r18
   4bf50:	e02f883a 	mov	r23,fp
   4bf54:	480f883a 	mov	r7,r9
   4bf58:	00800084 	movi	r2,2
   4bf5c:	3881311e 	bne	r7,r2,4c424 <__divdf3+0x62c>
   4bf60:	b827883a 	mov	r19,r23
   4bf64:	98c0004c 	andi	r3,r19,1
   4bf68:	0081ffc4 	movi	r2,2047
   4bf6c:	000b883a 	mov	r5,zero
   4bf70:	0025883a 	mov	r18,zero
   4bf74:	1004953a 	slli	r2,r2,20
   4bf78:	18c03fcc 	andi	r3,r3,255
   4bf7c:	04400434 	movhi	r17,16
   4bf80:	8c7fffc4 	addi	r17,r17,-1
   4bf84:	180697fa 	slli	r3,r3,31
   4bf88:	2c4a703a 	and	r5,r5,r17
   4bf8c:	288ab03a 	or	r5,r5,r2
   4bf90:	28c6b03a 	or	r3,r5,r3
   4bf94:	9005883a 	mov	r2,r18
   4bf98:	dfc00d17 	ldw	ra,52(sp)
   4bf9c:	df000c17 	ldw	fp,48(sp)
   4bfa0:	ddc00b17 	ldw	r23,44(sp)
   4bfa4:	dd800a17 	ldw	r22,40(sp)
   4bfa8:	dd400917 	ldw	r21,36(sp)
   4bfac:	dd000817 	ldw	r20,32(sp)
   4bfb0:	dcc00717 	ldw	r19,28(sp)
   4bfb4:	dc800617 	ldw	r18,24(sp)
   4bfb8:	dc400517 	ldw	r17,20(sp)
   4bfbc:	dc000417 	ldw	r16,16(sp)
   4bfc0:	dec00e04 	addi	sp,sp,56
   4bfc4:	f800283a 	ret
   4bfc8:	2404b03a 	or	r2,r4,r16
   4bfcc:	2027883a 	mov	r19,r4
   4bfd0:	10003926 	beq	r2,zero,4c0b8 <__divdf3+0x2c0>
   4bfd4:	80012e26 	beq	r16,zero,4c490 <__divdf3+0x698>
   4bfd8:	8009883a 	mov	r4,r16
   4bfdc:	d9800315 	stw	r6,12(sp)
   4bfe0:	d9c00215 	stw	r7,8(sp)
   4bfe4:	004db500 	call	4db50 <__clzsi2>
   4bfe8:	d9800317 	ldw	r6,12(sp)
   4bfec:	d9c00217 	ldw	r7,8(sp)
   4bff0:	113ffd44 	addi	r4,r2,-11
   4bff4:	00c00704 	movi	r3,28
   4bff8:	19012116 	blt	r3,r4,4c480 <__divdf3+0x688>
   4bffc:	00c00744 	movi	r3,29
   4c000:	147ffe04 	addi	r17,r2,-8
   4c004:	1907c83a 	sub	r3,r3,r4
   4c008:	8460983a 	sll	r16,r16,r17
   4c00c:	98c6d83a 	srl	r3,r19,r3
   4c010:	9c64983a 	sll	r18,r19,r17
   4c014:	1c20b03a 	or	r16,r3,r16
   4c018:	1080fcc4 	addi	r2,r2,1011
   4c01c:	00abc83a 	sub	r21,zero,r2
   4c020:	0027883a 	mov	r19,zero
   4c024:	0013883a 	mov	r9,zero
   4c028:	003f9106 	br	4be70 <__alt_data_end+0xfffd9e70>
   4c02c:	3446b03a 	or	r3,r6,r17
   4c030:	18001f1e 	bne	r3,zero,4c0b0 <__divdf3+0x2b8>
   4c034:	0023883a 	mov	r17,zero
   4c038:	0011883a 	mov	r8,zero
   4c03c:	01c00084 	movi	r7,2
   4c040:	003f9d06 	br	4beb8 <__alt_data_end+0xfffd9eb8>
   4c044:	3446b03a 	or	r3,r6,r17
   4c048:	18001526 	beq	r3,zero,4c0a0 <__divdf3+0x2a8>
   4c04c:	88011b26 	beq	r17,zero,4c4bc <__divdf3+0x6c4>
   4c050:	8809883a 	mov	r4,r17
   4c054:	d9800315 	stw	r6,12(sp)
   4c058:	da400115 	stw	r9,4(sp)
   4c05c:	004db500 	call	4db50 <__clzsi2>
   4c060:	d9800317 	ldw	r6,12(sp)
   4c064:	da400117 	ldw	r9,4(sp)
   4c068:	113ffd44 	addi	r4,r2,-11
   4c06c:	00c00704 	movi	r3,28
   4c070:	19010e16 	blt	r3,r4,4c4ac <__divdf3+0x6b4>
   4c074:	00c00744 	movi	r3,29
   4c078:	123ffe04 	addi	r8,r2,-8
   4c07c:	1907c83a 	sub	r3,r3,r4
   4c080:	8a22983a 	sll	r17,r17,r8
   4c084:	30c6d83a 	srl	r3,r6,r3
   4c088:	3210983a 	sll	r8,r6,r8
   4c08c:	1c62b03a 	or	r17,r3,r17
   4c090:	1080fcc4 	addi	r2,r2,1011
   4c094:	0085c83a 	sub	r2,zero,r2
   4c098:	000f883a 	mov	r7,zero
   4c09c:	003f8606 	br	4beb8 <__alt_data_end+0xfffd9eb8>
   4c0a0:	0023883a 	mov	r17,zero
   4c0a4:	0011883a 	mov	r8,zero
   4c0a8:	01c00044 	movi	r7,1
   4c0ac:	003f8206 	br	4beb8 <__alt_data_end+0xfffd9eb8>
   4c0b0:	01c000c4 	movi	r7,3
   4c0b4:	003f8006 	br	4beb8 <__alt_data_end+0xfffd9eb8>
   4c0b8:	04c00104 	movi	r19,4
   4c0bc:	0021883a 	mov	r16,zero
   4c0c0:	0025883a 	mov	r18,zero
   4c0c4:	02400044 	movi	r9,1
   4c0c8:	003f6906 	br	4be70 <__alt_data_end+0xfffd9e70>
   4c0cc:	04c00304 	movi	r19,12
   4c0d0:	024000c4 	movi	r9,3
   4c0d4:	003f6606 	br	4be70 <__alt_data_end+0xfffd9e70>
   4c0d8:	01400434 	movhi	r5,16
   4c0dc:	0007883a 	mov	r3,zero
   4c0e0:	297fffc4 	addi	r5,r5,-1
   4c0e4:	04bfffc4 	movi	r18,-1
   4c0e8:	0081ffc4 	movi	r2,2047
   4c0ec:	003fa106 	br	4bf74 <__alt_data_end+0xfffd9f74>
   4c0f0:	00c00044 	movi	r3,1
   4c0f4:	1887c83a 	sub	r3,r3,r2
   4c0f8:	01000e04 	movi	r4,56
   4c0fc:	20c1210e 	bge	r4,r3,4c584 <__divdf3+0x78c>
   4c100:	98c0004c 	andi	r3,r19,1
   4c104:	0005883a 	mov	r2,zero
   4c108:	000b883a 	mov	r5,zero
   4c10c:	0025883a 	mov	r18,zero
   4c110:	003f9806 	br	4bf74 <__alt_data_end+0xfffd9f74>
   4c114:	8c00fd36 	bltu	r17,r16,4c50c <__divdf3+0x714>
   4c118:	8440fb26 	beq	r16,r17,4c508 <__divdf3+0x710>
   4c11c:	8007883a 	mov	r3,r16
   4c120:	ad7fffc4 	addi	r21,r21,-1
   4c124:	0021883a 	mov	r16,zero
   4c128:	4004d63a 	srli	r2,r8,24
   4c12c:	8822923a 	slli	r17,r17,8
   4c130:	1809883a 	mov	r4,r3
   4c134:	402c923a 	slli	r22,r8,8
   4c138:	88b8b03a 	or	fp,r17,r2
   4c13c:	e028d43a 	srli	r20,fp,16
   4c140:	d8c00015 	stw	r3,0(sp)
   4c144:	e5ffffcc 	andi	r23,fp,65535
   4c148:	a00b883a 	mov	r5,r20
   4c14c:	00409300 	call	40930 <__udivsi3>
   4c150:	d8c00017 	ldw	r3,0(sp)
   4c154:	a00b883a 	mov	r5,r20
   4c158:	d8800315 	stw	r2,12(sp)
   4c15c:	1809883a 	mov	r4,r3
   4c160:	00409940 	call	40994 <__umodsi3>
   4c164:	d9800317 	ldw	r6,12(sp)
   4c168:	1006943a 	slli	r3,r2,16
   4c16c:	9004d43a 	srli	r2,r18,16
   4c170:	b9a3383a 	mul	r17,r23,r6
   4c174:	10c4b03a 	or	r2,r2,r3
   4c178:	1440062e 	bgeu	r2,r17,4c194 <__divdf3+0x39c>
   4c17c:	1705883a 	add	r2,r2,fp
   4c180:	30ffffc4 	addi	r3,r6,-1
   4c184:	1700ee36 	bltu	r2,fp,4c540 <__divdf3+0x748>
   4c188:	1440ed2e 	bgeu	r2,r17,4c540 <__divdf3+0x748>
   4c18c:	31bfff84 	addi	r6,r6,-2
   4c190:	1705883a 	add	r2,r2,fp
   4c194:	1463c83a 	sub	r17,r2,r17
   4c198:	a00b883a 	mov	r5,r20
   4c19c:	8809883a 	mov	r4,r17
   4c1a0:	d9800315 	stw	r6,12(sp)
   4c1a4:	00409300 	call	40930 <__udivsi3>
   4c1a8:	a00b883a 	mov	r5,r20
   4c1ac:	8809883a 	mov	r4,r17
   4c1b0:	d8800215 	stw	r2,8(sp)
   4c1b4:	00409940 	call	40994 <__umodsi3>
   4c1b8:	d9c00217 	ldw	r7,8(sp)
   4c1bc:	1004943a 	slli	r2,r2,16
   4c1c0:	94bfffcc 	andi	r18,r18,65535
   4c1c4:	b9d1383a 	mul	r8,r23,r7
   4c1c8:	90a4b03a 	or	r18,r18,r2
   4c1cc:	d9800317 	ldw	r6,12(sp)
   4c1d0:	9200062e 	bgeu	r18,r8,4c1ec <__divdf3+0x3f4>
   4c1d4:	9725883a 	add	r18,r18,fp
   4c1d8:	38bfffc4 	addi	r2,r7,-1
   4c1dc:	9700d636 	bltu	r18,fp,4c538 <__divdf3+0x740>
   4c1e0:	9200d52e 	bgeu	r18,r8,4c538 <__divdf3+0x740>
   4c1e4:	39ffff84 	addi	r7,r7,-2
   4c1e8:	9725883a 	add	r18,r18,fp
   4c1ec:	3004943a 	slli	r2,r6,16
   4c1f0:	b012d43a 	srli	r9,r22,16
   4c1f4:	b1bfffcc 	andi	r6,r22,65535
   4c1f8:	11e2b03a 	or	r17,r2,r7
   4c1fc:	8806d43a 	srli	r3,r17,16
   4c200:	893fffcc 	andi	r4,r17,65535
   4c204:	218b383a 	mul	r5,r4,r6
   4c208:	30c5383a 	mul	r2,r6,r3
   4c20c:	2249383a 	mul	r4,r4,r9
   4c210:	280ed43a 	srli	r7,r5,16
   4c214:	9225c83a 	sub	r18,r18,r8
   4c218:	2089883a 	add	r4,r4,r2
   4c21c:	3909883a 	add	r4,r7,r4
   4c220:	1a47383a 	mul	r3,r3,r9
   4c224:	2080022e 	bgeu	r4,r2,4c230 <__divdf3+0x438>
   4c228:	00800074 	movhi	r2,1
   4c22c:	1887883a 	add	r3,r3,r2
   4c230:	2004d43a 	srli	r2,r4,16
   4c234:	2008943a 	slli	r4,r4,16
   4c238:	297fffcc 	andi	r5,r5,65535
   4c23c:	10c7883a 	add	r3,r2,r3
   4c240:	2149883a 	add	r4,r4,r5
   4c244:	90c0a536 	bltu	r18,r3,4c4dc <__divdf3+0x6e4>
   4c248:	90c0bf26 	beq	r18,r3,4c548 <__divdf3+0x750>
   4c24c:	90c7c83a 	sub	r3,r18,r3
   4c250:	810fc83a 	sub	r7,r16,r4
   4c254:	81e5803a 	cmpltu	r18,r16,r7
   4c258:	1ca5c83a 	sub	r18,r3,r18
   4c25c:	e480c126 	beq	fp,r18,4c564 <__divdf3+0x76c>
   4c260:	a00b883a 	mov	r5,r20
   4c264:	9009883a 	mov	r4,r18
   4c268:	d9800315 	stw	r6,12(sp)
   4c26c:	d9c00215 	stw	r7,8(sp)
   4c270:	da400115 	stw	r9,4(sp)
   4c274:	00409300 	call	40930 <__udivsi3>
   4c278:	a00b883a 	mov	r5,r20
   4c27c:	9009883a 	mov	r4,r18
   4c280:	d8800015 	stw	r2,0(sp)
   4c284:	00409940 	call	40994 <__umodsi3>
   4c288:	d9c00217 	ldw	r7,8(sp)
   4c28c:	da000017 	ldw	r8,0(sp)
   4c290:	1006943a 	slli	r3,r2,16
   4c294:	3804d43a 	srli	r2,r7,16
   4c298:	ba21383a 	mul	r16,r23,r8
   4c29c:	d9800317 	ldw	r6,12(sp)
   4c2a0:	10c4b03a 	or	r2,r2,r3
   4c2a4:	da400117 	ldw	r9,4(sp)
   4c2a8:	1400062e 	bgeu	r2,r16,4c2c4 <__divdf3+0x4cc>
   4c2ac:	1705883a 	add	r2,r2,fp
   4c2b0:	40ffffc4 	addi	r3,r8,-1
   4c2b4:	1700ad36 	bltu	r2,fp,4c56c <__divdf3+0x774>
   4c2b8:	1400ac2e 	bgeu	r2,r16,4c56c <__divdf3+0x774>
   4c2bc:	423fff84 	addi	r8,r8,-2
   4c2c0:	1705883a 	add	r2,r2,fp
   4c2c4:	1421c83a 	sub	r16,r2,r16
   4c2c8:	a00b883a 	mov	r5,r20
   4c2cc:	8009883a 	mov	r4,r16
   4c2d0:	d9800315 	stw	r6,12(sp)
   4c2d4:	d9c00215 	stw	r7,8(sp)
   4c2d8:	da000015 	stw	r8,0(sp)
   4c2dc:	da400115 	stw	r9,4(sp)
   4c2e0:	00409300 	call	40930 <__udivsi3>
   4c2e4:	8009883a 	mov	r4,r16
   4c2e8:	a00b883a 	mov	r5,r20
   4c2ec:	1025883a 	mov	r18,r2
   4c2f0:	00409940 	call	40994 <__umodsi3>
   4c2f4:	d9c00217 	ldw	r7,8(sp)
   4c2f8:	1004943a 	slli	r2,r2,16
   4c2fc:	bcaf383a 	mul	r23,r23,r18
   4c300:	393fffcc 	andi	r4,r7,65535
   4c304:	2088b03a 	or	r4,r4,r2
   4c308:	d9800317 	ldw	r6,12(sp)
   4c30c:	da000017 	ldw	r8,0(sp)
   4c310:	da400117 	ldw	r9,4(sp)
   4c314:	25c0062e 	bgeu	r4,r23,4c330 <__divdf3+0x538>
   4c318:	2709883a 	add	r4,r4,fp
   4c31c:	90bfffc4 	addi	r2,r18,-1
   4c320:	27009436 	bltu	r4,fp,4c574 <__divdf3+0x77c>
   4c324:	25c0932e 	bgeu	r4,r23,4c574 <__divdf3+0x77c>
   4c328:	94bfff84 	addi	r18,r18,-2
   4c32c:	2709883a 	add	r4,r4,fp
   4c330:	4004943a 	slli	r2,r8,16
   4c334:	25efc83a 	sub	r23,r4,r23
   4c338:	1490b03a 	or	r8,r2,r18
   4c33c:	4008d43a 	srli	r4,r8,16
   4c340:	40ffffcc 	andi	r3,r8,65535
   4c344:	30c5383a 	mul	r2,r6,r3
   4c348:	1a47383a 	mul	r3,r3,r9
   4c34c:	310d383a 	mul	r6,r6,r4
   4c350:	100ad43a 	srli	r5,r2,16
   4c354:	4913383a 	mul	r9,r9,r4
   4c358:	1987883a 	add	r3,r3,r6
   4c35c:	28c7883a 	add	r3,r5,r3
   4c360:	1980022e 	bgeu	r3,r6,4c36c <__divdf3+0x574>
   4c364:	01000074 	movhi	r4,1
   4c368:	4913883a 	add	r9,r9,r4
   4c36c:	1808d43a 	srli	r4,r3,16
   4c370:	1806943a 	slli	r3,r3,16
   4c374:	10bfffcc 	andi	r2,r2,65535
   4c378:	2253883a 	add	r9,r4,r9
   4c37c:	1887883a 	add	r3,r3,r2
   4c380:	ba403836 	bltu	r23,r9,4c464 <__divdf3+0x66c>
   4c384:	ba403626 	beq	r23,r9,4c460 <__divdf3+0x668>
   4c388:	42000054 	ori	r8,r8,1
   4c38c:	a880ffc4 	addi	r2,r21,1023
   4c390:	00bf570e 	bge	zero,r2,4c0f0 <__alt_data_end+0xfffda0f0>
   4c394:	40c001cc 	andi	r3,r8,7
   4c398:	18000726 	beq	r3,zero,4c3b8 <__divdf3+0x5c0>
   4c39c:	40c003cc 	andi	r3,r8,15
   4c3a0:	01000104 	movi	r4,4
   4c3a4:	19000426 	beq	r3,r4,4c3b8 <__divdf3+0x5c0>
   4c3a8:	4107883a 	add	r3,r8,r4
   4c3ac:	1a11803a 	cmpltu	r8,r3,r8
   4c3b0:	8a23883a 	add	r17,r17,r8
   4c3b4:	1811883a 	mov	r8,r3
   4c3b8:	88c0402c 	andhi	r3,r17,256
   4c3bc:	18000426 	beq	r3,zero,4c3d0 <__divdf3+0x5d8>
   4c3c0:	00ffc034 	movhi	r3,65280
   4c3c4:	18ffffc4 	addi	r3,r3,-1
   4c3c8:	a8810004 	addi	r2,r21,1024
   4c3cc:	88e2703a 	and	r17,r17,r3
   4c3d0:	00c1ff84 	movi	r3,2046
   4c3d4:	18bee316 	blt	r3,r2,4bf64 <__alt_data_end+0xfffd9f64>
   4c3d8:	8824977a 	slli	r18,r17,29
   4c3dc:	4010d0fa 	srli	r8,r8,3
   4c3e0:	8822927a 	slli	r17,r17,9
   4c3e4:	1081ffcc 	andi	r2,r2,2047
   4c3e8:	9224b03a 	or	r18,r18,r8
   4c3ec:	880ad33a 	srli	r5,r17,12
   4c3f0:	98c0004c 	andi	r3,r19,1
   4c3f4:	003edf06 	br	4bf74 <__alt_data_end+0xfffd9f74>
   4c3f8:	8080022c 	andhi	r2,r16,8
   4c3fc:	10001226 	beq	r2,zero,4c448 <__divdf3+0x650>
   4c400:	8880022c 	andhi	r2,r17,8
   4c404:	1000101e 	bne	r2,zero,4c448 <__divdf3+0x650>
   4c408:	00800434 	movhi	r2,16
   4c40c:	89400234 	orhi	r5,r17,8
   4c410:	10bfffc4 	addi	r2,r2,-1
   4c414:	b007883a 	mov	r3,r22
   4c418:	288a703a 	and	r5,r5,r2
   4c41c:	4025883a 	mov	r18,r8
   4c420:	003f3106 	br	4c0e8 <__alt_data_end+0xfffda0e8>
   4c424:	008000c4 	movi	r2,3
   4c428:	3880a626 	beq	r7,r2,4c6c4 <__divdf3+0x8cc>
   4c42c:	00800044 	movi	r2,1
   4c430:	3880521e 	bne	r7,r2,4c57c <__divdf3+0x784>
   4c434:	b807883a 	mov	r3,r23
   4c438:	0005883a 	mov	r2,zero
   4c43c:	000b883a 	mov	r5,zero
   4c440:	0025883a 	mov	r18,zero
   4c444:	003ecb06 	br	4bf74 <__alt_data_end+0xfffd9f74>
   4c448:	00800434 	movhi	r2,16
   4c44c:	81400234 	orhi	r5,r16,8
   4c450:	10bfffc4 	addi	r2,r2,-1
   4c454:	a007883a 	mov	r3,r20
   4c458:	288a703a 	and	r5,r5,r2
   4c45c:	003f2206 	br	4c0e8 <__alt_data_end+0xfffda0e8>
   4c460:	183fca26 	beq	r3,zero,4c38c <__alt_data_end+0xfffda38c>
   4c464:	e5ef883a 	add	r23,fp,r23
   4c468:	40bfffc4 	addi	r2,r8,-1
   4c46c:	bf00392e 	bgeu	r23,fp,4c554 <__divdf3+0x75c>
   4c470:	1011883a 	mov	r8,r2
   4c474:	ba7fc41e 	bne	r23,r9,4c388 <__alt_data_end+0xfffda388>
   4c478:	b0ffc31e 	bne	r22,r3,4c388 <__alt_data_end+0xfffda388>
   4c47c:	003fc306 	br	4c38c <__alt_data_end+0xfffda38c>
   4c480:	143ff604 	addi	r16,r2,-40
   4c484:	9c20983a 	sll	r16,r19,r16
   4c488:	0025883a 	mov	r18,zero
   4c48c:	003ee206 	br	4c018 <__alt_data_end+0xfffda018>
   4c490:	d9800315 	stw	r6,12(sp)
   4c494:	d9c00215 	stw	r7,8(sp)
   4c498:	004db500 	call	4db50 <__clzsi2>
   4c49c:	10800804 	addi	r2,r2,32
   4c4a0:	d9c00217 	ldw	r7,8(sp)
   4c4a4:	d9800317 	ldw	r6,12(sp)
   4c4a8:	003ed106 	br	4bff0 <__alt_data_end+0xfffd9ff0>
   4c4ac:	147ff604 	addi	r17,r2,-40
   4c4b0:	3462983a 	sll	r17,r6,r17
   4c4b4:	0011883a 	mov	r8,zero
   4c4b8:	003ef506 	br	4c090 <__alt_data_end+0xfffda090>
   4c4bc:	3009883a 	mov	r4,r6
   4c4c0:	d9800315 	stw	r6,12(sp)
   4c4c4:	da400115 	stw	r9,4(sp)
   4c4c8:	004db500 	call	4db50 <__clzsi2>
   4c4cc:	10800804 	addi	r2,r2,32
   4c4d0:	da400117 	ldw	r9,4(sp)
   4c4d4:	d9800317 	ldw	r6,12(sp)
   4c4d8:	003ee306 	br	4c068 <__alt_data_end+0xfffda068>
   4c4dc:	85a1883a 	add	r16,r16,r22
   4c4e0:	8585803a 	cmpltu	r2,r16,r22
   4c4e4:	1705883a 	add	r2,r2,fp
   4c4e8:	14a5883a 	add	r18,r2,r18
   4c4ec:	88bfffc4 	addi	r2,r17,-1
   4c4f0:	e4800c2e 	bgeu	fp,r18,4c524 <__divdf3+0x72c>
   4c4f4:	90c03e36 	bltu	r18,r3,4c5f0 <__divdf3+0x7f8>
   4c4f8:	1c806926 	beq	r3,r18,4c6a0 <__divdf3+0x8a8>
   4c4fc:	90c7c83a 	sub	r3,r18,r3
   4c500:	1023883a 	mov	r17,r2
   4c504:	003f5206 	br	4c250 <__alt_data_end+0xfffda250>
   4c508:	923f0436 	bltu	r18,r8,4c11c <__alt_data_end+0xfffda11c>
   4c50c:	800897fa 	slli	r4,r16,31
   4c510:	9004d07a 	srli	r2,r18,1
   4c514:	8006d07a 	srli	r3,r16,1
   4c518:	902097fa 	slli	r16,r18,31
   4c51c:	20a4b03a 	or	r18,r4,r2
   4c520:	003f0106 	br	4c128 <__alt_data_end+0xfffda128>
   4c524:	e4bff51e 	bne	fp,r18,4c4fc <__alt_data_end+0xfffda4fc>
   4c528:	85bff22e 	bgeu	r16,r22,4c4f4 <__alt_data_end+0xfffda4f4>
   4c52c:	e0c7c83a 	sub	r3,fp,r3
   4c530:	1023883a 	mov	r17,r2
   4c534:	003f4606 	br	4c250 <__alt_data_end+0xfffda250>
   4c538:	100f883a 	mov	r7,r2
   4c53c:	003f2b06 	br	4c1ec <__alt_data_end+0xfffda1ec>
   4c540:	180d883a 	mov	r6,r3
   4c544:	003f1306 	br	4c194 <__alt_data_end+0xfffda194>
   4c548:	813fe436 	bltu	r16,r4,4c4dc <__alt_data_end+0xfffda4dc>
   4c54c:	0007883a 	mov	r3,zero
   4c550:	003f3f06 	br	4c250 <__alt_data_end+0xfffda250>
   4c554:	ba402c36 	bltu	r23,r9,4c608 <__divdf3+0x810>
   4c558:	4dc05426 	beq	r9,r23,4c6ac <__divdf3+0x8b4>
   4c55c:	1011883a 	mov	r8,r2
   4c560:	003f8906 	br	4c388 <__alt_data_end+0xfffda388>
   4c564:	023fffc4 	movi	r8,-1
   4c568:	003f8806 	br	4c38c <__alt_data_end+0xfffda38c>
   4c56c:	1811883a 	mov	r8,r3
   4c570:	003f5406 	br	4c2c4 <__alt_data_end+0xfffda2c4>
   4c574:	1025883a 	mov	r18,r2
   4c578:	003f6d06 	br	4c330 <__alt_data_end+0xfffda330>
   4c57c:	b827883a 	mov	r19,r23
   4c580:	003f8206 	br	4c38c <__alt_data_end+0xfffda38c>
   4c584:	010007c4 	movi	r4,31
   4c588:	20c02616 	blt	r4,r3,4c624 <__divdf3+0x82c>
   4c58c:	00800804 	movi	r2,32
   4c590:	10c5c83a 	sub	r2,r2,r3
   4c594:	888a983a 	sll	r5,r17,r2
   4c598:	40c8d83a 	srl	r4,r8,r3
   4c59c:	4084983a 	sll	r2,r8,r2
   4c5a0:	88e2d83a 	srl	r17,r17,r3
   4c5a4:	2906b03a 	or	r3,r5,r4
   4c5a8:	1004c03a 	cmpne	r2,r2,zero
   4c5ac:	1886b03a 	or	r3,r3,r2
   4c5b0:	188001cc 	andi	r2,r3,7
   4c5b4:	10000726 	beq	r2,zero,4c5d4 <__divdf3+0x7dc>
   4c5b8:	188003cc 	andi	r2,r3,15
   4c5bc:	01000104 	movi	r4,4
   4c5c0:	11000426 	beq	r2,r4,4c5d4 <__divdf3+0x7dc>
   4c5c4:	1805883a 	mov	r2,r3
   4c5c8:	10c00104 	addi	r3,r2,4
   4c5cc:	1885803a 	cmpltu	r2,r3,r2
   4c5d0:	88a3883a 	add	r17,r17,r2
   4c5d4:	8880202c 	andhi	r2,r17,128
   4c5d8:	10002726 	beq	r2,zero,4c678 <__divdf3+0x880>
   4c5dc:	98c0004c 	andi	r3,r19,1
   4c5e0:	00800044 	movi	r2,1
   4c5e4:	000b883a 	mov	r5,zero
   4c5e8:	0025883a 	mov	r18,zero
   4c5ec:	003e6106 	br	4bf74 <__alt_data_end+0xfffd9f74>
   4c5f0:	85a1883a 	add	r16,r16,r22
   4c5f4:	8585803a 	cmpltu	r2,r16,r22
   4c5f8:	1705883a 	add	r2,r2,fp
   4c5fc:	14a5883a 	add	r18,r2,r18
   4c600:	8c7fff84 	addi	r17,r17,-2
   4c604:	003f1106 	br	4c24c <__alt_data_end+0xfffda24c>
   4c608:	b589883a 	add	r4,r22,r22
   4c60c:	25ad803a 	cmpltu	r22,r4,r22
   4c610:	b739883a 	add	fp,r22,fp
   4c614:	40bfff84 	addi	r2,r8,-2
   4c618:	bf2f883a 	add	r23,r23,fp
   4c61c:	202d883a 	mov	r22,r4
   4c620:	003f9306 	br	4c470 <__alt_data_end+0xfffda470>
   4c624:	013ff844 	movi	r4,-31
   4c628:	2085c83a 	sub	r2,r4,r2
   4c62c:	8888d83a 	srl	r4,r17,r2
   4c630:	00800804 	movi	r2,32
   4c634:	18802126 	beq	r3,r2,4c6bc <__divdf3+0x8c4>
   4c638:	00801004 	movi	r2,64
   4c63c:	10c5c83a 	sub	r2,r2,r3
   4c640:	8884983a 	sll	r2,r17,r2
   4c644:	1204b03a 	or	r2,r2,r8
   4c648:	1004c03a 	cmpne	r2,r2,zero
   4c64c:	2084b03a 	or	r2,r4,r2
   4c650:	144001cc 	andi	r17,r2,7
   4c654:	88000d1e 	bne	r17,zero,4c68c <__divdf3+0x894>
   4c658:	000b883a 	mov	r5,zero
   4c65c:	1024d0fa 	srli	r18,r2,3
   4c660:	98c0004c 	andi	r3,r19,1
   4c664:	0005883a 	mov	r2,zero
   4c668:	9464b03a 	or	r18,r18,r17
   4c66c:	003e4106 	br	4bf74 <__alt_data_end+0xfffd9f74>
   4c670:	1007883a 	mov	r3,r2
   4c674:	0023883a 	mov	r17,zero
   4c678:	880a927a 	slli	r5,r17,9
   4c67c:	1805883a 	mov	r2,r3
   4c680:	8822977a 	slli	r17,r17,29
   4c684:	280ad33a 	srli	r5,r5,12
   4c688:	003ff406 	br	4c65c <__alt_data_end+0xfffda65c>
   4c68c:	10c003cc 	andi	r3,r2,15
   4c690:	01000104 	movi	r4,4
   4c694:	193ff626 	beq	r3,r4,4c670 <__alt_data_end+0xfffda670>
   4c698:	0023883a 	mov	r17,zero
   4c69c:	003fca06 	br	4c5c8 <__alt_data_end+0xfffda5c8>
   4c6a0:	813fd336 	bltu	r16,r4,4c5f0 <__alt_data_end+0xfffda5f0>
   4c6a4:	1023883a 	mov	r17,r2
   4c6a8:	003fa806 	br	4c54c <__alt_data_end+0xfffda54c>
   4c6ac:	b0ffd636 	bltu	r22,r3,4c608 <__alt_data_end+0xfffda608>
   4c6b0:	1011883a 	mov	r8,r2
   4c6b4:	b0ff341e 	bne	r22,r3,4c388 <__alt_data_end+0xfffda388>
   4c6b8:	003f3406 	br	4c38c <__alt_data_end+0xfffda38c>
   4c6bc:	0005883a 	mov	r2,zero
   4c6c0:	003fe006 	br	4c644 <__alt_data_end+0xfffda644>
   4c6c4:	00800434 	movhi	r2,16
   4c6c8:	89400234 	orhi	r5,r17,8
   4c6cc:	10bfffc4 	addi	r2,r2,-1
   4c6d0:	b807883a 	mov	r3,r23
   4c6d4:	288a703a 	and	r5,r5,r2
   4c6d8:	4025883a 	mov	r18,r8
   4c6dc:	003e8206 	br	4c0e8 <__alt_data_end+0xfffda0e8>

0004c6e0 <__eqdf2>:
   4c6e0:	2804d53a 	srli	r2,r5,20
   4c6e4:	3806d53a 	srli	r3,r7,20
   4c6e8:	02000434 	movhi	r8,16
   4c6ec:	423fffc4 	addi	r8,r8,-1
   4c6f0:	1081ffcc 	andi	r2,r2,2047
   4c6f4:	0281ffc4 	movi	r10,2047
   4c6f8:	2a12703a 	and	r9,r5,r8
   4c6fc:	18c1ffcc 	andi	r3,r3,2047
   4c700:	3a10703a 	and	r8,r7,r8
   4c704:	280ad7fa 	srli	r5,r5,31
   4c708:	380ed7fa 	srli	r7,r7,31
   4c70c:	12801026 	beq	r2,r10,4c750 <__eqdf2+0x70>
   4c710:	0281ffc4 	movi	r10,2047
   4c714:	1a800a26 	beq	r3,r10,4c740 <__eqdf2+0x60>
   4c718:	10c00226 	beq	r2,r3,4c724 <__eqdf2+0x44>
   4c71c:	00800044 	movi	r2,1
   4c720:	f800283a 	ret
   4c724:	4a3ffd1e 	bne	r9,r8,4c71c <__alt_data_end+0xfffda71c>
   4c728:	21bffc1e 	bne	r4,r6,4c71c <__alt_data_end+0xfffda71c>
   4c72c:	29c00c26 	beq	r5,r7,4c760 <__eqdf2+0x80>
   4c730:	103ffa1e 	bne	r2,zero,4c71c <__alt_data_end+0xfffda71c>
   4c734:	2244b03a 	or	r2,r4,r9
   4c738:	1004c03a 	cmpne	r2,r2,zero
   4c73c:	f800283a 	ret
   4c740:	3214b03a 	or	r10,r6,r8
   4c744:	503ff426 	beq	r10,zero,4c718 <__alt_data_end+0xfffda718>
   4c748:	00800044 	movi	r2,1
   4c74c:	f800283a 	ret
   4c750:	2254b03a 	or	r10,r4,r9
   4c754:	503fee26 	beq	r10,zero,4c710 <__alt_data_end+0xfffda710>
   4c758:	00800044 	movi	r2,1
   4c75c:	f800283a 	ret
   4c760:	0005883a 	mov	r2,zero
   4c764:	f800283a 	ret

0004c768 <__gedf2>:
   4c768:	2804d53a 	srli	r2,r5,20
   4c76c:	3806d53a 	srli	r3,r7,20
   4c770:	02000434 	movhi	r8,16
   4c774:	423fffc4 	addi	r8,r8,-1
   4c778:	1081ffcc 	andi	r2,r2,2047
   4c77c:	0241ffc4 	movi	r9,2047
   4c780:	2a14703a 	and	r10,r5,r8
   4c784:	18c1ffcc 	andi	r3,r3,2047
   4c788:	3a10703a 	and	r8,r7,r8
   4c78c:	280ad7fa 	srli	r5,r5,31
   4c790:	380ed7fa 	srli	r7,r7,31
   4c794:	12401d26 	beq	r2,r9,4c80c <__gedf2+0xa4>
   4c798:	0241ffc4 	movi	r9,2047
   4c79c:	1a401226 	beq	r3,r9,4c7e8 <__gedf2+0x80>
   4c7a0:	1000081e 	bne	r2,zero,4c7c4 <__gedf2+0x5c>
   4c7a4:	2296b03a 	or	r11,r4,r10
   4c7a8:	5813003a 	cmpeq	r9,r11,zero
   4c7ac:	1800091e 	bne	r3,zero,4c7d4 <__gedf2+0x6c>
   4c7b0:	3218b03a 	or	r12,r6,r8
   4c7b4:	6000071e 	bne	r12,zero,4c7d4 <__gedf2+0x6c>
   4c7b8:	0005883a 	mov	r2,zero
   4c7bc:	5800101e 	bne	r11,zero,4c800 <__gedf2+0x98>
   4c7c0:	f800283a 	ret
   4c7c4:	18000c1e 	bne	r3,zero,4c7f8 <__gedf2+0x90>
   4c7c8:	3212b03a 	or	r9,r6,r8
   4c7cc:	48000c26 	beq	r9,zero,4c800 <__gedf2+0x98>
   4c7d0:	0013883a 	mov	r9,zero
   4c7d4:	39c03fcc 	andi	r7,r7,255
   4c7d8:	48000826 	beq	r9,zero,4c7fc <__gedf2+0x94>
   4c7dc:	38000926 	beq	r7,zero,4c804 <__gedf2+0x9c>
   4c7e0:	00800044 	movi	r2,1
   4c7e4:	f800283a 	ret
   4c7e8:	3212b03a 	or	r9,r6,r8
   4c7ec:	483fec26 	beq	r9,zero,4c7a0 <__alt_data_end+0xfffda7a0>
   4c7f0:	00bfff84 	movi	r2,-2
   4c7f4:	f800283a 	ret
   4c7f8:	39c03fcc 	andi	r7,r7,255
   4c7fc:	29c00626 	beq	r5,r7,4c818 <__gedf2+0xb0>
   4c800:	283ff726 	beq	r5,zero,4c7e0 <__alt_data_end+0xfffda7e0>
   4c804:	00bfffc4 	movi	r2,-1
   4c808:	f800283a 	ret
   4c80c:	2292b03a 	or	r9,r4,r10
   4c810:	483fe126 	beq	r9,zero,4c798 <__alt_data_end+0xfffda798>
   4c814:	003ff606 	br	4c7f0 <__alt_data_end+0xfffda7f0>
   4c818:	18bff916 	blt	r3,r2,4c800 <__alt_data_end+0xfffda800>
   4c81c:	10c00316 	blt	r2,r3,4c82c <__gedf2+0xc4>
   4c820:	42bff736 	bltu	r8,r10,4c800 <__alt_data_end+0xfffda800>
   4c824:	52000326 	beq	r10,r8,4c834 <__gedf2+0xcc>
   4c828:	5200042e 	bgeu	r10,r8,4c83c <__gedf2+0xd4>
   4c82c:	283fec1e 	bne	r5,zero,4c7e0 <__alt_data_end+0xfffda7e0>
   4c830:	003ff406 	br	4c804 <__alt_data_end+0xfffda804>
   4c834:	313ff236 	bltu	r6,r4,4c800 <__alt_data_end+0xfffda800>
   4c838:	21bffc36 	bltu	r4,r6,4c82c <__alt_data_end+0xfffda82c>
   4c83c:	0005883a 	mov	r2,zero
   4c840:	f800283a 	ret

0004c844 <__ledf2>:
   4c844:	2804d53a 	srli	r2,r5,20
   4c848:	3810d53a 	srli	r8,r7,20
   4c84c:	00c00434 	movhi	r3,16
   4c850:	18ffffc4 	addi	r3,r3,-1
   4c854:	1081ffcc 	andi	r2,r2,2047
   4c858:	0241ffc4 	movi	r9,2047
   4c85c:	28d4703a 	and	r10,r5,r3
   4c860:	4201ffcc 	andi	r8,r8,2047
   4c864:	38c6703a 	and	r3,r7,r3
   4c868:	280ad7fa 	srli	r5,r5,31
   4c86c:	380ed7fa 	srli	r7,r7,31
   4c870:	12401f26 	beq	r2,r9,4c8f0 <__ledf2+0xac>
   4c874:	0241ffc4 	movi	r9,2047
   4c878:	42401426 	beq	r8,r9,4c8cc <__ledf2+0x88>
   4c87c:	1000091e 	bne	r2,zero,4c8a4 <__ledf2+0x60>
   4c880:	2296b03a 	or	r11,r4,r10
   4c884:	5813003a 	cmpeq	r9,r11,zero
   4c888:	29403fcc 	andi	r5,r5,255
   4c88c:	40000a1e 	bne	r8,zero,4c8b8 <__ledf2+0x74>
   4c890:	30d8b03a 	or	r12,r6,r3
   4c894:	6000081e 	bne	r12,zero,4c8b8 <__ledf2+0x74>
   4c898:	0005883a 	mov	r2,zero
   4c89c:	5800111e 	bne	r11,zero,4c8e4 <__ledf2+0xa0>
   4c8a0:	f800283a 	ret
   4c8a4:	29403fcc 	andi	r5,r5,255
   4c8a8:	40000c1e 	bne	r8,zero,4c8dc <__ledf2+0x98>
   4c8ac:	30d2b03a 	or	r9,r6,r3
   4c8b0:	48000c26 	beq	r9,zero,4c8e4 <__ledf2+0xa0>
   4c8b4:	0013883a 	mov	r9,zero
   4c8b8:	39c03fcc 	andi	r7,r7,255
   4c8bc:	48000826 	beq	r9,zero,4c8e0 <__ledf2+0x9c>
   4c8c0:	38001126 	beq	r7,zero,4c908 <__ledf2+0xc4>
   4c8c4:	00800044 	movi	r2,1
   4c8c8:	f800283a 	ret
   4c8cc:	30d2b03a 	or	r9,r6,r3
   4c8d0:	483fea26 	beq	r9,zero,4c87c <__alt_data_end+0xfffda87c>
   4c8d4:	00800084 	movi	r2,2
   4c8d8:	f800283a 	ret
   4c8dc:	39c03fcc 	andi	r7,r7,255
   4c8e0:	39400726 	beq	r7,r5,4c900 <__ledf2+0xbc>
   4c8e4:	2800081e 	bne	r5,zero,4c908 <__ledf2+0xc4>
   4c8e8:	00800044 	movi	r2,1
   4c8ec:	f800283a 	ret
   4c8f0:	2292b03a 	or	r9,r4,r10
   4c8f4:	483fdf26 	beq	r9,zero,4c874 <__alt_data_end+0xfffda874>
   4c8f8:	00800084 	movi	r2,2
   4c8fc:	f800283a 	ret
   4c900:	4080030e 	bge	r8,r2,4c910 <__ledf2+0xcc>
   4c904:	383fef26 	beq	r7,zero,4c8c4 <__alt_data_end+0xfffda8c4>
   4c908:	00bfffc4 	movi	r2,-1
   4c90c:	f800283a 	ret
   4c910:	123feb16 	blt	r2,r8,4c8c0 <__alt_data_end+0xfffda8c0>
   4c914:	1abff336 	bltu	r3,r10,4c8e4 <__alt_data_end+0xfffda8e4>
   4c918:	50c00326 	beq	r10,r3,4c928 <__ledf2+0xe4>
   4c91c:	50c0042e 	bgeu	r10,r3,4c930 <__ledf2+0xec>
   4c920:	283fe81e 	bne	r5,zero,4c8c4 <__alt_data_end+0xfffda8c4>
   4c924:	003ff806 	br	4c908 <__alt_data_end+0xfffda908>
   4c928:	313fee36 	bltu	r6,r4,4c8e4 <__alt_data_end+0xfffda8e4>
   4c92c:	21bffc36 	bltu	r4,r6,4c920 <__alt_data_end+0xfffda920>
   4c930:	0005883a 	mov	r2,zero
   4c934:	f800283a 	ret

0004c938 <__muldf3>:
   4c938:	defff304 	addi	sp,sp,-52
   4c93c:	2804d53a 	srli	r2,r5,20
   4c940:	dd800915 	stw	r22,36(sp)
   4c944:	282cd7fa 	srli	r22,r5,31
   4c948:	dc000315 	stw	r16,12(sp)
   4c94c:	04000434 	movhi	r16,16
   4c950:	dd400815 	stw	r21,32(sp)
   4c954:	dc800515 	stw	r18,20(sp)
   4c958:	843fffc4 	addi	r16,r16,-1
   4c95c:	dfc00c15 	stw	ra,48(sp)
   4c960:	df000b15 	stw	fp,44(sp)
   4c964:	ddc00a15 	stw	r23,40(sp)
   4c968:	dd000715 	stw	r20,28(sp)
   4c96c:	dcc00615 	stw	r19,24(sp)
   4c970:	dc400415 	stw	r17,16(sp)
   4c974:	1481ffcc 	andi	r18,r2,2047
   4c978:	2c20703a 	and	r16,r5,r16
   4c97c:	b02b883a 	mov	r21,r22
   4c980:	b2403fcc 	andi	r9,r22,255
   4c984:	90006026 	beq	r18,zero,4cb08 <__muldf3+0x1d0>
   4c988:	0081ffc4 	movi	r2,2047
   4c98c:	2029883a 	mov	r20,r4
   4c990:	90803626 	beq	r18,r2,4ca6c <__muldf3+0x134>
   4c994:	80800434 	orhi	r2,r16,16
   4c998:	100490fa 	slli	r2,r2,3
   4c99c:	2020d77a 	srli	r16,r4,29
   4c9a0:	202890fa 	slli	r20,r4,3
   4c9a4:	94bf0044 	addi	r18,r18,-1023
   4c9a8:	80a0b03a 	or	r16,r16,r2
   4c9ac:	0027883a 	mov	r19,zero
   4c9b0:	0039883a 	mov	fp,zero
   4c9b4:	3804d53a 	srli	r2,r7,20
   4c9b8:	382ed7fa 	srli	r23,r7,31
   4c9bc:	04400434 	movhi	r17,16
   4c9c0:	8c7fffc4 	addi	r17,r17,-1
   4c9c4:	1081ffcc 	andi	r2,r2,2047
   4c9c8:	3011883a 	mov	r8,r6
   4c9cc:	3c62703a 	and	r17,r7,r17
   4c9d0:	ba803fcc 	andi	r10,r23,255
   4c9d4:	10006d26 	beq	r2,zero,4cb8c <__muldf3+0x254>
   4c9d8:	00c1ffc4 	movi	r3,2047
   4c9dc:	10c06526 	beq	r2,r3,4cb74 <__muldf3+0x23c>
   4c9e0:	88c00434 	orhi	r3,r17,16
   4c9e4:	180690fa 	slli	r3,r3,3
   4c9e8:	3022d77a 	srli	r17,r6,29
   4c9ec:	301090fa 	slli	r8,r6,3
   4c9f0:	10bf0044 	addi	r2,r2,-1023
   4c9f4:	88e2b03a 	or	r17,r17,r3
   4c9f8:	000b883a 	mov	r5,zero
   4c9fc:	9085883a 	add	r2,r18,r2
   4ca00:	2cc8b03a 	or	r4,r5,r19
   4ca04:	00c003c4 	movi	r3,15
   4ca08:	bdacf03a 	xor	r22,r23,r22
   4ca0c:	12c00044 	addi	r11,r2,1
   4ca10:	19009936 	bltu	r3,r4,4cc78 <__muldf3+0x340>
   4ca14:	200890ba 	slli	r4,r4,2
   4ca18:	00c00174 	movhi	r3,5
   4ca1c:	18f28b04 	addi	r3,r3,-13780
   4ca20:	20c9883a 	add	r4,r4,r3
   4ca24:	20c00017 	ldw	r3,0(r4)
   4ca28:	1800683a 	jmp	r3
   4ca2c:	0004cc78 	rdprs	zero,zero,4913
   4ca30:	0004ca8c 	andi	zero,zero,4906
   4ca34:	0004ca8c 	andi	zero,zero,4906
   4ca38:	0004ca88 	cmpgei	zero,zero,4906
   4ca3c:	0004cc54 	movui	zero,4913
   4ca40:	0004cc54 	movui	zero,4913
   4ca44:	0004cc3c 	xorhi	zero,zero,4912
   4ca48:	0004ca88 	cmpgei	zero,zero,4906
   4ca4c:	0004cc54 	movui	zero,4913
   4ca50:	0004cc3c 	xorhi	zero,zero,4912
   4ca54:	0004cc54 	movui	zero,4913
   4ca58:	0004ca88 	cmpgei	zero,zero,4906
   4ca5c:	0004cc64 	muli	zero,zero,4913
   4ca60:	0004cc64 	muli	zero,zero,4913
   4ca64:	0004cc64 	muli	zero,zero,4913
   4ca68:	0004ce80 	call	4ce8 <__reset-0x3b318>
   4ca6c:	2404b03a 	or	r2,r4,r16
   4ca70:	10006f1e 	bne	r2,zero,4cc30 <__muldf3+0x2f8>
   4ca74:	04c00204 	movi	r19,8
   4ca78:	0021883a 	mov	r16,zero
   4ca7c:	0029883a 	mov	r20,zero
   4ca80:	07000084 	movi	fp,2
   4ca84:	003fcb06 	br	4c9b4 <__alt_data_end+0xfffda9b4>
   4ca88:	502d883a 	mov	r22,r10
   4ca8c:	00800084 	movi	r2,2
   4ca90:	28805726 	beq	r5,r2,4cbf0 <__muldf3+0x2b8>
   4ca94:	008000c4 	movi	r2,3
   4ca98:	28816626 	beq	r5,r2,4d034 <__muldf3+0x6fc>
   4ca9c:	00800044 	movi	r2,1
   4caa0:	2881411e 	bne	r5,r2,4cfa8 <__muldf3+0x670>
   4caa4:	b02b883a 	mov	r21,r22
   4caa8:	0005883a 	mov	r2,zero
   4caac:	000b883a 	mov	r5,zero
   4cab0:	0029883a 	mov	r20,zero
   4cab4:	1004953a 	slli	r2,r2,20
   4cab8:	a8c03fcc 	andi	r3,r21,255
   4cabc:	04400434 	movhi	r17,16
   4cac0:	8c7fffc4 	addi	r17,r17,-1
   4cac4:	180697fa 	slli	r3,r3,31
   4cac8:	2c4a703a 	and	r5,r5,r17
   4cacc:	288ab03a 	or	r5,r5,r2
   4cad0:	28c6b03a 	or	r3,r5,r3
   4cad4:	a005883a 	mov	r2,r20
   4cad8:	dfc00c17 	ldw	ra,48(sp)
   4cadc:	df000b17 	ldw	fp,44(sp)
   4cae0:	ddc00a17 	ldw	r23,40(sp)
   4cae4:	dd800917 	ldw	r22,36(sp)
   4cae8:	dd400817 	ldw	r21,32(sp)
   4caec:	dd000717 	ldw	r20,28(sp)
   4caf0:	dcc00617 	ldw	r19,24(sp)
   4caf4:	dc800517 	ldw	r18,20(sp)
   4caf8:	dc400417 	ldw	r17,16(sp)
   4cafc:	dc000317 	ldw	r16,12(sp)
   4cb00:	dec00d04 	addi	sp,sp,52
   4cb04:	f800283a 	ret
   4cb08:	2404b03a 	or	r2,r4,r16
   4cb0c:	2027883a 	mov	r19,r4
   4cb10:	10004226 	beq	r2,zero,4cc1c <__muldf3+0x2e4>
   4cb14:	8000fc26 	beq	r16,zero,4cf08 <__muldf3+0x5d0>
   4cb18:	8009883a 	mov	r4,r16
   4cb1c:	d9800215 	stw	r6,8(sp)
   4cb20:	d9c00015 	stw	r7,0(sp)
   4cb24:	da400115 	stw	r9,4(sp)
   4cb28:	004db500 	call	4db50 <__clzsi2>
   4cb2c:	d9800217 	ldw	r6,8(sp)
   4cb30:	d9c00017 	ldw	r7,0(sp)
   4cb34:	da400117 	ldw	r9,4(sp)
   4cb38:	113ffd44 	addi	r4,r2,-11
   4cb3c:	00c00704 	movi	r3,28
   4cb40:	1900ed16 	blt	r3,r4,4cef8 <__muldf3+0x5c0>
   4cb44:	00c00744 	movi	r3,29
   4cb48:	147ffe04 	addi	r17,r2,-8
   4cb4c:	1907c83a 	sub	r3,r3,r4
   4cb50:	8460983a 	sll	r16,r16,r17
   4cb54:	98c6d83a 	srl	r3,r19,r3
   4cb58:	9c68983a 	sll	r20,r19,r17
   4cb5c:	1c20b03a 	or	r16,r3,r16
   4cb60:	1080fcc4 	addi	r2,r2,1011
   4cb64:	00a5c83a 	sub	r18,zero,r2
   4cb68:	0027883a 	mov	r19,zero
   4cb6c:	0039883a 	mov	fp,zero
   4cb70:	003f9006 	br	4c9b4 <__alt_data_end+0xfffda9b4>
   4cb74:	3446b03a 	or	r3,r6,r17
   4cb78:	1800261e 	bne	r3,zero,4cc14 <__muldf3+0x2dc>
   4cb7c:	0023883a 	mov	r17,zero
   4cb80:	0011883a 	mov	r8,zero
   4cb84:	01400084 	movi	r5,2
   4cb88:	003f9c06 	br	4c9fc <__alt_data_end+0xfffda9fc>
   4cb8c:	3446b03a 	or	r3,r6,r17
   4cb90:	18001c26 	beq	r3,zero,4cc04 <__muldf3+0x2cc>
   4cb94:	8800ce26 	beq	r17,zero,4ced0 <__muldf3+0x598>
   4cb98:	8809883a 	mov	r4,r17
   4cb9c:	d9800215 	stw	r6,8(sp)
   4cba0:	da400115 	stw	r9,4(sp)
   4cba4:	da800015 	stw	r10,0(sp)
   4cba8:	004db500 	call	4db50 <__clzsi2>
   4cbac:	d9800217 	ldw	r6,8(sp)
   4cbb0:	da400117 	ldw	r9,4(sp)
   4cbb4:	da800017 	ldw	r10,0(sp)
   4cbb8:	113ffd44 	addi	r4,r2,-11
   4cbbc:	00c00704 	movi	r3,28
   4cbc0:	1900bf16 	blt	r3,r4,4cec0 <__muldf3+0x588>
   4cbc4:	00c00744 	movi	r3,29
   4cbc8:	123ffe04 	addi	r8,r2,-8
   4cbcc:	1907c83a 	sub	r3,r3,r4
   4cbd0:	8a22983a 	sll	r17,r17,r8
   4cbd4:	30c6d83a 	srl	r3,r6,r3
   4cbd8:	3210983a 	sll	r8,r6,r8
   4cbdc:	1c62b03a 	or	r17,r3,r17
   4cbe0:	1080fcc4 	addi	r2,r2,1011
   4cbe4:	0085c83a 	sub	r2,zero,r2
   4cbe8:	000b883a 	mov	r5,zero
   4cbec:	003f8306 	br	4c9fc <__alt_data_end+0xfffda9fc>
   4cbf0:	b02b883a 	mov	r21,r22
   4cbf4:	0081ffc4 	movi	r2,2047
   4cbf8:	000b883a 	mov	r5,zero
   4cbfc:	0029883a 	mov	r20,zero
   4cc00:	003fac06 	br	4cab4 <__alt_data_end+0xfffdaab4>
   4cc04:	0023883a 	mov	r17,zero
   4cc08:	0011883a 	mov	r8,zero
   4cc0c:	01400044 	movi	r5,1
   4cc10:	003f7a06 	br	4c9fc <__alt_data_end+0xfffda9fc>
   4cc14:	014000c4 	movi	r5,3
   4cc18:	003f7806 	br	4c9fc <__alt_data_end+0xfffda9fc>
   4cc1c:	04c00104 	movi	r19,4
   4cc20:	0021883a 	mov	r16,zero
   4cc24:	0029883a 	mov	r20,zero
   4cc28:	07000044 	movi	fp,1
   4cc2c:	003f6106 	br	4c9b4 <__alt_data_end+0xfffda9b4>
   4cc30:	04c00304 	movi	r19,12
   4cc34:	070000c4 	movi	fp,3
   4cc38:	003f5e06 	br	4c9b4 <__alt_data_end+0xfffda9b4>
   4cc3c:	01400434 	movhi	r5,16
   4cc40:	002b883a 	mov	r21,zero
   4cc44:	297fffc4 	addi	r5,r5,-1
   4cc48:	053fffc4 	movi	r20,-1
   4cc4c:	0081ffc4 	movi	r2,2047
   4cc50:	003f9806 	br	4cab4 <__alt_data_end+0xfffdaab4>
   4cc54:	8023883a 	mov	r17,r16
   4cc58:	a011883a 	mov	r8,r20
   4cc5c:	e00b883a 	mov	r5,fp
   4cc60:	003f8a06 	br	4ca8c <__alt_data_end+0xfffdaa8c>
   4cc64:	8023883a 	mov	r17,r16
   4cc68:	a011883a 	mov	r8,r20
   4cc6c:	482d883a 	mov	r22,r9
   4cc70:	e00b883a 	mov	r5,fp
   4cc74:	003f8506 	br	4ca8c <__alt_data_end+0xfffdaa8c>
   4cc78:	a00ad43a 	srli	r5,r20,16
   4cc7c:	401ad43a 	srli	r13,r8,16
   4cc80:	a53fffcc 	andi	r20,r20,65535
   4cc84:	423fffcc 	andi	r8,r8,65535
   4cc88:	4519383a 	mul	r12,r8,r20
   4cc8c:	4147383a 	mul	r3,r8,r5
   4cc90:	6d09383a 	mul	r4,r13,r20
   4cc94:	600cd43a 	srli	r6,r12,16
   4cc98:	2b5d383a 	mul	r14,r5,r13
   4cc9c:	20c9883a 	add	r4,r4,r3
   4cca0:	310d883a 	add	r6,r6,r4
   4cca4:	30c0022e 	bgeu	r6,r3,4ccb0 <__muldf3+0x378>
   4cca8:	00c00074 	movhi	r3,1
   4ccac:	70dd883a 	add	r14,r14,r3
   4ccb0:	8826d43a 	srli	r19,r17,16
   4ccb4:	8bffffcc 	andi	r15,r17,65535
   4ccb8:	7d23383a 	mul	r17,r15,r20
   4ccbc:	7949383a 	mul	r4,r15,r5
   4ccc0:	9d29383a 	mul	r20,r19,r20
   4ccc4:	8814d43a 	srli	r10,r17,16
   4ccc8:	3012943a 	slli	r9,r6,16
   4cccc:	a129883a 	add	r20,r20,r4
   4ccd0:	633fffcc 	andi	r12,r12,65535
   4ccd4:	5515883a 	add	r10,r10,r20
   4ccd8:	3006d43a 	srli	r3,r6,16
   4ccdc:	4b13883a 	add	r9,r9,r12
   4cce0:	2ccb383a 	mul	r5,r5,r19
   4cce4:	5100022e 	bgeu	r10,r4,4ccf0 <__muldf3+0x3b8>
   4cce8:	01000074 	movhi	r4,1
   4ccec:	290b883a 	add	r5,r5,r4
   4ccf0:	802ad43a 	srli	r21,r16,16
   4ccf4:	843fffcc 	andi	r16,r16,65535
   4ccf8:	440d383a 	mul	r6,r8,r16
   4ccfc:	4565383a 	mul	r18,r8,r21
   4cd00:	8349383a 	mul	r4,r16,r13
   4cd04:	500e943a 	slli	r7,r10,16
   4cd08:	3010d43a 	srli	r8,r6,16
   4cd0c:	5028d43a 	srli	r20,r10,16
   4cd10:	2489883a 	add	r4,r4,r18
   4cd14:	8abfffcc 	andi	r10,r17,65535
   4cd18:	3a95883a 	add	r10,r7,r10
   4cd1c:	4119883a 	add	r12,r8,r4
   4cd20:	a169883a 	add	r20,r20,r5
   4cd24:	1a87883a 	add	r3,r3,r10
   4cd28:	6d5b383a 	mul	r13,r13,r21
   4cd2c:	6480022e 	bgeu	r12,r18,4cd38 <__muldf3+0x400>
   4cd30:	01000074 	movhi	r4,1
   4cd34:	691b883a 	add	r13,r13,r4
   4cd38:	7c25383a 	mul	r18,r15,r16
   4cd3c:	7d4b383a 	mul	r5,r15,r21
   4cd40:	84cf383a 	mul	r7,r16,r19
   4cd44:	901ed43a 	srli	r15,r18,16
   4cd48:	6008d43a 	srli	r4,r12,16
   4cd4c:	6010943a 	slli	r8,r12,16
   4cd50:	394f883a 	add	r7,r7,r5
   4cd54:	333fffcc 	andi	r12,r6,65535
   4cd58:	79df883a 	add	r15,r15,r7
   4cd5c:	235b883a 	add	r13,r4,r13
   4cd60:	9d63383a 	mul	r17,r19,r21
   4cd64:	4309883a 	add	r4,r8,r12
   4cd68:	7940022e 	bgeu	r15,r5,4cd74 <__muldf3+0x43c>
   4cd6c:	01400074 	movhi	r5,1
   4cd70:	8963883a 	add	r17,r17,r5
   4cd74:	780a943a 	slli	r5,r15,16
   4cd78:	91bfffcc 	andi	r6,r18,65535
   4cd7c:	70c7883a 	add	r3,r14,r3
   4cd80:	298d883a 	add	r6,r5,r6
   4cd84:	1a8f803a 	cmpltu	r7,r3,r10
   4cd88:	350b883a 	add	r5,r6,r20
   4cd8c:	20c7883a 	add	r3,r4,r3
   4cd90:	3955883a 	add	r10,r7,r5
   4cd94:	1909803a 	cmpltu	r4,r3,r4
   4cd98:	6a91883a 	add	r8,r13,r10
   4cd9c:	780cd43a 	srli	r6,r15,16
   4cda0:	2219883a 	add	r12,r4,r8
   4cda4:	2d0b803a 	cmpltu	r5,r5,r20
   4cda8:	51cf803a 	cmpltu	r7,r10,r7
   4cdac:	29ceb03a 	or	r7,r5,r7
   4cdb0:	4351803a 	cmpltu	r8,r8,r13
   4cdb4:	610b803a 	cmpltu	r5,r12,r4
   4cdb8:	4148b03a 	or	r4,r8,r5
   4cdbc:	398f883a 	add	r7,r7,r6
   4cdc0:	3909883a 	add	r4,r7,r4
   4cdc4:	1810927a 	slli	r8,r3,9
   4cdc8:	2449883a 	add	r4,r4,r17
   4cdcc:	2008927a 	slli	r4,r4,9
   4cdd0:	6022d5fa 	srli	r17,r12,23
   4cdd4:	1806d5fa 	srli	r3,r3,23
   4cdd8:	4252b03a 	or	r9,r8,r9
   4cddc:	600a927a 	slli	r5,r12,9
   4cde0:	4810c03a 	cmpne	r8,r9,zero
   4cde4:	2462b03a 	or	r17,r4,r17
   4cde8:	40c6b03a 	or	r3,r8,r3
   4cdec:	8900402c 	andhi	r4,r17,256
   4cdf0:	1950b03a 	or	r8,r3,r5
   4cdf4:	20000726 	beq	r4,zero,4ce14 <__muldf3+0x4dc>
   4cdf8:	4006d07a 	srli	r3,r8,1
   4cdfc:	880497fa 	slli	r2,r17,31
   4ce00:	4200004c 	andi	r8,r8,1
   4ce04:	8822d07a 	srli	r17,r17,1
   4ce08:	1a10b03a 	or	r8,r3,r8
   4ce0c:	1210b03a 	or	r8,r2,r8
   4ce10:	5805883a 	mov	r2,r11
   4ce14:	1140ffc4 	addi	r5,r2,1023
   4ce18:	0140440e 	bge	zero,r5,4cf2c <__muldf3+0x5f4>
   4ce1c:	40c001cc 	andi	r3,r8,7
   4ce20:	18000726 	beq	r3,zero,4ce40 <__muldf3+0x508>
   4ce24:	40c003cc 	andi	r3,r8,15
   4ce28:	01000104 	movi	r4,4
   4ce2c:	19000426 	beq	r3,r4,4ce40 <__muldf3+0x508>
   4ce30:	4107883a 	add	r3,r8,r4
   4ce34:	1a11803a 	cmpltu	r8,r3,r8
   4ce38:	8a23883a 	add	r17,r17,r8
   4ce3c:	1811883a 	mov	r8,r3
   4ce40:	88c0402c 	andhi	r3,r17,256
   4ce44:	18000426 	beq	r3,zero,4ce58 <__muldf3+0x520>
   4ce48:	11410004 	addi	r5,r2,1024
   4ce4c:	00bfc034 	movhi	r2,65280
   4ce50:	10bfffc4 	addi	r2,r2,-1
   4ce54:	88a2703a 	and	r17,r17,r2
   4ce58:	0081ff84 	movi	r2,2046
   4ce5c:	117f6416 	blt	r2,r5,4cbf0 <__alt_data_end+0xfffdabf0>
   4ce60:	8828977a 	slli	r20,r17,29
   4ce64:	4010d0fa 	srli	r8,r8,3
   4ce68:	8822927a 	slli	r17,r17,9
   4ce6c:	2881ffcc 	andi	r2,r5,2047
   4ce70:	a228b03a 	or	r20,r20,r8
   4ce74:	880ad33a 	srli	r5,r17,12
   4ce78:	b02b883a 	mov	r21,r22
   4ce7c:	003f0d06 	br	4cab4 <__alt_data_end+0xfffdaab4>
   4ce80:	8080022c 	andhi	r2,r16,8
   4ce84:	10000926 	beq	r2,zero,4ceac <__muldf3+0x574>
   4ce88:	8880022c 	andhi	r2,r17,8
   4ce8c:	1000071e 	bne	r2,zero,4ceac <__muldf3+0x574>
   4ce90:	00800434 	movhi	r2,16
   4ce94:	89400234 	orhi	r5,r17,8
   4ce98:	10bfffc4 	addi	r2,r2,-1
   4ce9c:	b82b883a 	mov	r21,r23
   4cea0:	288a703a 	and	r5,r5,r2
   4cea4:	4029883a 	mov	r20,r8
   4cea8:	003f6806 	br	4cc4c <__alt_data_end+0xfffdac4c>
   4ceac:	00800434 	movhi	r2,16
   4ceb0:	81400234 	orhi	r5,r16,8
   4ceb4:	10bfffc4 	addi	r2,r2,-1
   4ceb8:	288a703a 	and	r5,r5,r2
   4cebc:	003f6306 	br	4cc4c <__alt_data_end+0xfffdac4c>
   4cec0:	147ff604 	addi	r17,r2,-40
   4cec4:	3462983a 	sll	r17,r6,r17
   4cec8:	0011883a 	mov	r8,zero
   4cecc:	003f4406 	br	4cbe0 <__alt_data_end+0xfffdabe0>
   4ced0:	3009883a 	mov	r4,r6
   4ced4:	d9800215 	stw	r6,8(sp)
   4ced8:	da400115 	stw	r9,4(sp)
   4cedc:	da800015 	stw	r10,0(sp)
   4cee0:	004db500 	call	4db50 <__clzsi2>
   4cee4:	10800804 	addi	r2,r2,32
   4cee8:	da800017 	ldw	r10,0(sp)
   4ceec:	da400117 	ldw	r9,4(sp)
   4cef0:	d9800217 	ldw	r6,8(sp)
   4cef4:	003f3006 	br	4cbb8 <__alt_data_end+0xfffdabb8>
   4cef8:	143ff604 	addi	r16,r2,-40
   4cefc:	9c20983a 	sll	r16,r19,r16
   4cf00:	0029883a 	mov	r20,zero
   4cf04:	003f1606 	br	4cb60 <__alt_data_end+0xfffdab60>
   4cf08:	d9800215 	stw	r6,8(sp)
   4cf0c:	d9c00015 	stw	r7,0(sp)
   4cf10:	da400115 	stw	r9,4(sp)
   4cf14:	004db500 	call	4db50 <__clzsi2>
   4cf18:	10800804 	addi	r2,r2,32
   4cf1c:	da400117 	ldw	r9,4(sp)
   4cf20:	d9c00017 	ldw	r7,0(sp)
   4cf24:	d9800217 	ldw	r6,8(sp)
   4cf28:	003f0306 	br	4cb38 <__alt_data_end+0xfffdab38>
   4cf2c:	00c00044 	movi	r3,1
   4cf30:	1947c83a 	sub	r3,r3,r5
   4cf34:	00800e04 	movi	r2,56
   4cf38:	10feda16 	blt	r2,r3,4caa4 <__alt_data_end+0xfffdaaa4>
   4cf3c:	008007c4 	movi	r2,31
   4cf40:	10c01b16 	blt	r2,r3,4cfb0 <__muldf3+0x678>
   4cf44:	00800804 	movi	r2,32
   4cf48:	10c5c83a 	sub	r2,r2,r3
   4cf4c:	888a983a 	sll	r5,r17,r2
   4cf50:	40c8d83a 	srl	r4,r8,r3
   4cf54:	4084983a 	sll	r2,r8,r2
   4cf58:	88e2d83a 	srl	r17,r17,r3
   4cf5c:	2906b03a 	or	r3,r5,r4
   4cf60:	1004c03a 	cmpne	r2,r2,zero
   4cf64:	1886b03a 	or	r3,r3,r2
   4cf68:	188001cc 	andi	r2,r3,7
   4cf6c:	10000726 	beq	r2,zero,4cf8c <__muldf3+0x654>
   4cf70:	188003cc 	andi	r2,r3,15
   4cf74:	01000104 	movi	r4,4
   4cf78:	11000426 	beq	r2,r4,4cf8c <__muldf3+0x654>
   4cf7c:	1805883a 	mov	r2,r3
   4cf80:	10c00104 	addi	r3,r2,4
   4cf84:	1885803a 	cmpltu	r2,r3,r2
   4cf88:	88a3883a 	add	r17,r17,r2
   4cf8c:	8880202c 	andhi	r2,r17,128
   4cf90:	10001c26 	beq	r2,zero,4d004 <__muldf3+0x6cc>
   4cf94:	b02b883a 	mov	r21,r22
   4cf98:	00800044 	movi	r2,1
   4cf9c:	000b883a 	mov	r5,zero
   4cfa0:	0029883a 	mov	r20,zero
   4cfa4:	003ec306 	br	4cab4 <__alt_data_end+0xfffdaab4>
   4cfa8:	5805883a 	mov	r2,r11
   4cfac:	003f9906 	br	4ce14 <__alt_data_end+0xfffdae14>
   4cfb0:	00bff844 	movi	r2,-31
   4cfb4:	1145c83a 	sub	r2,r2,r5
   4cfb8:	8888d83a 	srl	r4,r17,r2
   4cfbc:	00800804 	movi	r2,32
   4cfc0:	18801a26 	beq	r3,r2,4d02c <__muldf3+0x6f4>
   4cfc4:	00801004 	movi	r2,64
   4cfc8:	10c5c83a 	sub	r2,r2,r3
   4cfcc:	8884983a 	sll	r2,r17,r2
   4cfd0:	1204b03a 	or	r2,r2,r8
   4cfd4:	1004c03a 	cmpne	r2,r2,zero
   4cfd8:	2084b03a 	or	r2,r4,r2
   4cfdc:	144001cc 	andi	r17,r2,7
   4cfe0:	88000d1e 	bne	r17,zero,4d018 <__muldf3+0x6e0>
   4cfe4:	000b883a 	mov	r5,zero
   4cfe8:	1028d0fa 	srli	r20,r2,3
   4cfec:	b02b883a 	mov	r21,r22
   4cff0:	0005883a 	mov	r2,zero
   4cff4:	a468b03a 	or	r20,r20,r17
   4cff8:	003eae06 	br	4cab4 <__alt_data_end+0xfffdaab4>
   4cffc:	1007883a 	mov	r3,r2
   4d000:	0023883a 	mov	r17,zero
   4d004:	880a927a 	slli	r5,r17,9
   4d008:	1805883a 	mov	r2,r3
   4d00c:	8822977a 	slli	r17,r17,29
   4d010:	280ad33a 	srli	r5,r5,12
   4d014:	003ff406 	br	4cfe8 <__alt_data_end+0xfffdafe8>
   4d018:	10c003cc 	andi	r3,r2,15
   4d01c:	01000104 	movi	r4,4
   4d020:	193ff626 	beq	r3,r4,4cffc <__alt_data_end+0xfffdaffc>
   4d024:	0023883a 	mov	r17,zero
   4d028:	003fd506 	br	4cf80 <__alt_data_end+0xfffdaf80>
   4d02c:	0005883a 	mov	r2,zero
   4d030:	003fe706 	br	4cfd0 <__alt_data_end+0xfffdafd0>
   4d034:	00800434 	movhi	r2,16
   4d038:	89400234 	orhi	r5,r17,8
   4d03c:	10bfffc4 	addi	r2,r2,-1
   4d040:	b02b883a 	mov	r21,r22
   4d044:	288a703a 	and	r5,r5,r2
   4d048:	4029883a 	mov	r20,r8
   4d04c:	003eff06 	br	4cc4c <__alt_data_end+0xfffdac4c>

0004d050 <__subdf3>:
   4d050:	02000434 	movhi	r8,16
   4d054:	423fffc4 	addi	r8,r8,-1
   4d058:	defffb04 	addi	sp,sp,-20
   4d05c:	2a14703a 	and	r10,r5,r8
   4d060:	3812d53a 	srli	r9,r7,20
   4d064:	3a10703a 	and	r8,r7,r8
   4d068:	2006d77a 	srli	r3,r4,29
   4d06c:	3004d77a 	srli	r2,r6,29
   4d070:	dc000015 	stw	r16,0(sp)
   4d074:	501490fa 	slli	r10,r10,3
   4d078:	2820d53a 	srli	r16,r5,20
   4d07c:	401090fa 	slli	r8,r8,3
   4d080:	dc800215 	stw	r18,8(sp)
   4d084:	dc400115 	stw	r17,4(sp)
   4d088:	dfc00415 	stw	ra,16(sp)
   4d08c:	202290fa 	slli	r17,r4,3
   4d090:	dcc00315 	stw	r19,12(sp)
   4d094:	4a41ffcc 	andi	r9,r9,2047
   4d098:	0101ffc4 	movi	r4,2047
   4d09c:	2824d7fa 	srli	r18,r5,31
   4d0a0:	8401ffcc 	andi	r16,r16,2047
   4d0a4:	50c6b03a 	or	r3,r10,r3
   4d0a8:	380ed7fa 	srli	r7,r7,31
   4d0ac:	408ab03a 	or	r5,r8,r2
   4d0b0:	300c90fa 	slli	r6,r6,3
   4d0b4:	49009626 	beq	r9,r4,4d310 <__subdf3+0x2c0>
   4d0b8:	39c0005c 	xori	r7,r7,1
   4d0bc:	8245c83a 	sub	r2,r16,r9
   4d0c0:	3c807426 	beq	r7,r18,4d294 <__subdf3+0x244>
   4d0c4:	0080af0e 	bge	zero,r2,4d384 <__subdf3+0x334>
   4d0c8:	48002a1e 	bne	r9,zero,4d174 <__subdf3+0x124>
   4d0cc:	2988b03a 	or	r4,r5,r6
   4d0d0:	20009a1e 	bne	r4,zero,4d33c <__subdf3+0x2ec>
   4d0d4:	888001cc 	andi	r2,r17,7
   4d0d8:	10000726 	beq	r2,zero,4d0f8 <__subdf3+0xa8>
   4d0dc:	888003cc 	andi	r2,r17,15
   4d0e0:	01000104 	movi	r4,4
   4d0e4:	11000426 	beq	r2,r4,4d0f8 <__subdf3+0xa8>
   4d0e8:	890b883a 	add	r5,r17,r4
   4d0ec:	2c63803a 	cmpltu	r17,r5,r17
   4d0f0:	1c47883a 	add	r3,r3,r17
   4d0f4:	2823883a 	mov	r17,r5
   4d0f8:	1880202c 	andhi	r2,r3,128
   4d0fc:	10005926 	beq	r2,zero,4d264 <__subdf3+0x214>
   4d100:	84000044 	addi	r16,r16,1
   4d104:	0081ffc4 	movi	r2,2047
   4d108:	8080be26 	beq	r16,r2,4d404 <__subdf3+0x3b4>
   4d10c:	017fe034 	movhi	r5,65408
   4d110:	297fffc4 	addi	r5,r5,-1
   4d114:	1946703a 	and	r3,r3,r5
   4d118:	1804977a 	slli	r2,r3,29
   4d11c:	1806927a 	slli	r3,r3,9
   4d120:	8822d0fa 	srli	r17,r17,3
   4d124:	8401ffcc 	andi	r16,r16,2047
   4d128:	180ad33a 	srli	r5,r3,12
   4d12c:	9100004c 	andi	r4,r18,1
   4d130:	1444b03a 	or	r2,r2,r17
   4d134:	80c1ffcc 	andi	r3,r16,2047
   4d138:	1820953a 	slli	r16,r3,20
   4d13c:	20c03fcc 	andi	r3,r4,255
   4d140:	180897fa 	slli	r4,r3,31
   4d144:	00c00434 	movhi	r3,16
   4d148:	18ffffc4 	addi	r3,r3,-1
   4d14c:	28c6703a 	and	r3,r5,r3
   4d150:	1c06b03a 	or	r3,r3,r16
   4d154:	1906b03a 	or	r3,r3,r4
   4d158:	dfc00417 	ldw	ra,16(sp)
   4d15c:	dcc00317 	ldw	r19,12(sp)
   4d160:	dc800217 	ldw	r18,8(sp)
   4d164:	dc400117 	ldw	r17,4(sp)
   4d168:	dc000017 	ldw	r16,0(sp)
   4d16c:	dec00504 	addi	sp,sp,20
   4d170:	f800283a 	ret
   4d174:	0101ffc4 	movi	r4,2047
   4d178:	813fd626 	beq	r16,r4,4d0d4 <__alt_data_end+0xfffdb0d4>
   4d17c:	29402034 	orhi	r5,r5,128
   4d180:	01000e04 	movi	r4,56
   4d184:	2080a316 	blt	r4,r2,4d414 <__subdf3+0x3c4>
   4d188:	010007c4 	movi	r4,31
   4d18c:	2080c616 	blt	r4,r2,4d4a8 <__subdf3+0x458>
   4d190:	01000804 	movi	r4,32
   4d194:	2089c83a 	sub	r4,r4,r2
   4d198:	2910983a 	sll	r8,r5,r4
   4d19c:	308ed83a 	srl	r7,r6,r2
   4d1a0:	3108983a 	sll	r4,r6,r4
   4d1a4:	2884d83a 	srl	r2,r5,r2
   4d1a8:	41ccb03a 	or	r6,r8,r7
   4d1ac:	2008c03a 	cmpne	r4,r4,zero
   4d1b0:	310cb03a 	or	r6,r6,r4
   4d1b4:	898dc83a 	sub	r6,r17,r6
   4d1b8:	89a3803a 	cmpltu	r17,r17,r6
   4d1bc:	1887c83a 	sub	r3,r3,r2
   4d1c0:	1c47c83a 	sub	r3,r3,r17
   4d1c4:	3023883a 	mov	r17,r6
   4d1c8:	1880202c 	andhi	r2,r3,128
   4d1cc:	10002326 	beq	r2,zero,4d25c <__subdf3+0x20c>
   4d1d0:	04c02034 	movhi	r19,128
   4d1d4:	9cffffc4 	addi	r19,r19,-1
   4d1d8:	1ce6703a 	and	r19,r3,r19
   4d1dc:	98007a26 	beq	r19,zero,4d3c8 <__subdf3+0x378>
   4d1e0:	9809883a 	mov	r4,r19
   4d1e4:	004db500 	call	4db50 <__clzsi2>
   4d1e8:	113ffe04 	addi	r4,r2,-8
   4d1ec:	00c007c4 	movi	r3,31
   4d1f0:	19007b16 	blt	r3,r4,4d3e0 <__subdf3+0x390>
   4d1f4:	00800804 	movi	r2,32
   4d1f8:	1105c83a 	sub	r2,r2,r4
   4d1fc:	8884d83a 	srl	r2,r17,r2
   4d200:	9906983a 	sll	r3,r19,r4
   4d204:	8922983a 	sll	r17,r17,r4
   4d208:	10c4b03a 	or	r2,r2,r3
   4d20c:	24007816 	blt	r4,r16,4d3f0 <__subdf3+0x3a0>
   4d210:	2421c83a 	sub	r16,r4,r16
   4d214:	80c00044 	addi	r3,r16,1
   4d218:	010007c4 	movi	r4,31
   4d21c:	20c09516 	blt	r4,r3,4d474 <__subdf3+0x424>
   4d220:	01400804 	movi	r5,32
   4d224:	28cbc83a 	sub	r5,r5,r3
   4d228:	88c8d83a 	srl	r4,r17,r3
   4d22c:	8962983a 	sll	r17,r17,r5
   4d230:	114a983a 	sll	r5,r2,r5
   4d234:	10c6d83a 	srl	r3,r2,r3
   4d238:	8804c03a 	cmpne	r2,r17,zero
   4d23c:	290ab03a 	or	r5,r5,r4
   4d240:	28a2b03a 	or	r17,r5,r2
   4d244:	0021883a 	mov	r16,zero
   4d248:	003fa206 	br	4d0d4 <__alt_data_end+0xfffdb0d4>
   4d24c:	2090b03a 	or	r8,r4,r2
   4d250:	40018e26 	beq	r8,zero,4d88c <__subdf3+0x83c>
   4d254:	1007883a 	mov	r3,r2
   4d258:	2023883a 	mov	r17,r4
   4d25c:	888001cc 	andi	r2,r17,7
   4d260:	103f9e1e 	bne	r2,zero,4d0dc <__alt_data_end+0xfffdb0dc>
   4d264:	1804977a 	slli	r2,r3,29
   4d268:	8822d0fa 	srli	r17,r17,3
   4d26c:	1810d0fa 	srli	r8,r3,3
   4d270:	9100004c 	andi	r4,r18,1
   4d274:	1444b03a 	or	r2,r2,r17
   4d278:	00c1ffc4 	movi	r3,2047
   4d27c:	80c02826 	beq	r16,r3,4d320 <__subdf3+0x2d0>
   4d280:	01400434 	movhi	r5,16
   4d284:	297fffc4 	addi	r5,r5,-1
   4d288:	80e0703a 	and	r16,r16,r3
   4d28c:	414a703a 	and	r5,r8,r5
   4d290:	003fa806 	br	4d134 <__alt_data_end+0xfffdb134>
   4d294:	0080630e 	bge	zero,r2,4d424 <__subdf3+0x3d4>
   4d298:	48003026 	beq	r9,zero,4d35c <__subdf3+0x30c>
   4d29c:	0101ffc4 	movi	r4,2047
   4d2a0:	813f8c26 	beq	r16,r4,4d0d4 <__alt_data_end+0xfffdb0d4>
   4d2a4:	29402034 	orhi	r5,r5,128
   4d2a8:	01000e04 	movi	r4,56
   4d2ac:	2080a90e 	bge	r4,r2,4d554 <__subdf3+0x504>
   4d2b0:	298cb03a 	or	r6,r5,r6
   4d2b4:	3012c03a 	cmpne	r9,r6,zero
   4d2b8:	0005883a 	mov	r2,zero
   4d2bc:	4c53883a 	add	r9,r9,r17
   4d2c0:	4c63803a 	cmpltu	r17,r9,r17
   4d2c4:	10c7883a 	add	r3,r2,r3
   4d2c8:	88c7883a 	add	r3,r17,r3
   4d2cc:	4823883a 	mov	r17,r9
   4d2d0:	1880202c 	andhi	r2,r3,128
   4d2d4:	1000d026 	beq	r2,zero,4d618 <__subdf3+0x5c8>
   4d2d8:	84000044 	addi	r16,r16,1
   4d2dc:	0081ffc4 	movi	r2,2047
   4d2e0:	8080fe26 	beq	r16,r2,4d6dc <__subdf3+0x68c>
   4d2e4:	00bfe034 	movhi	r2,65408
   4d2e8:	10bfffc4 	addi	r2,r2,-1
   4d2ec:	1886703a 	and	r3,r3,r2
   4d2f0:	880ad07a 	srli	r5,r17,1
   4d2f4:	180497fa 	slli	r2,r3,31
   4d2f8:	8900004c 	andi	r4,r17,1
   4d2fc:	2922b03a 	or	r17,r5,r4
   4d300:	1806d07a 	srli	r3,r3,1
   4d304:	1462b03a 	or	r17,r2,r17
   4d308:	3825883a 	mov	r18,r7
   4d30c:	003f7106 	br	4d0d4 <__alt_data_end+0xfffdb0d4>
   4d310:	2984b03a 	or	r2,r5,r6
   4d314:	103f6826 	beq	r2,zero,4d0b8 <__alt_data_end+0xfffdb0b8>
   4d318:	39c03fcc 	andi	r7,r7,255
   4d31c:	003f6706 	br	4d0bc <__alt_data_end+0xfffdb0bc>
   4d320:	4086b03a 	or	r3,r8,r2
   4d324:	18015226 	beq	r3,zero,4d870 <__subdf3+0x820>
   4d328:	00c00434 	movhi	r3,16
   4d32c:	41400234 	orhi	r5,r8,8
   4d330:	18ffffc4 	addi	r3,r3,-1
   4d334:	28ca703a 	and	r5,r5,r3
   4d338:	003f7e06 	br	4d134 <__alt_data_end+0xfffdb134>
   4d33c:	10bfffc4 	addi	r2,r2,-1
   4d340:	1000491e 	bne	r2,zero,4d468 <__subdf3+0x418>
   4d344:	898fc83a 	sub	r7,r17,r6
   4d348:	89e3803a 	cmpltu	r17,r17,r7
   4d34c:	1947c83a 	sub	r3,r3,r5
   4d350:	1c47c83a 	sub	r3,r3,r17
   4d354:	3823883a 	mov	r17,r7
   4d358:	003f9b06 	br	4d1c8 <__alt_data_end+0xfffdb1c8>
   4d35c:	2988b03a 	or	r4,r5,r6
   4d360:	203f5c26 	beq	r4,zero,4d0d4 <__alt_data_end+0xfffdb0d4>
   4d364:	10bfffc4 	addi	r2,r2,-1
   4d368:	1000931e 	bne	r2,zero,4d5b8 <__subdf3+0x568>
   4d36c:	898d883a 	add	r6,r17,r6
   4d370:	3463803a 	cmpltu	r17,r6,r17
   4d374:	1947883a 	add	r3,r3,r5
   4d378:	88c7883a 	add	r3,r17,r3
   4d37c:	3023883a 	mov	r17,r6
   4d380:	003fd306 	br	4d2d0 <__alt_data_end+0xfffdb2d0>
   4d384:	1000541e 	bne	r2,zero,4d4d8 <__subdf3+0x488>
   4d388:	80800044 	addi	r2,r16,1
   4d38c:	1081ffcc 	andi	r2,r2,2047
   4d390:	01000044 	movi	r4,1
   4d394:	2080a20e 	bge	r4,r2,4d620 <__subdf3+0x5d0>
   4d398:	8989c83a 	sub	r4,r17,r6
   4d39c:	8905803a 	cmpltu	r2,r17,r4
   4d3a0:	1967c83a 	sub	r19,r3,r5
   4d3a4:	98a7c83a 	sub	r19,r19,r2
   4d3a8:	9880202c 	andhi	r2,r19,128
   4d3ac:	10006326 	beq	r2,zero,4d53c <__subdf3+0x4ec>
   4d3b0:	3463c83a 	sub	r17,r6,r17
   4d3b4:	28c7c83a 	sub	r3,r5,r3
   4d3b8:	344d803a 	cmpltu	r6,r6,r17
   4d3bc:	19a7c83a 	sub	r19,r3,r6
   4d3c0:	3825883a 	mov	r18,r7
   4d3c4:	983f861e 	bne	r19,zero,4d1e0 <__alt_data_end+0xfffdb1e0>
   4d3c8:	8809883a 	mov	r4,r17
   4d3cc:	004db500 	call	4db50 <__clzsi2>
   4d3d0:	10800804 	addi	r2,r2,32
   4d3d4:	113ffe04 	addi	r4,r2,-8
   4d3d8:	00c007c4 	movi	r3,31
   4d3dc:	193f850e 	bge	r3,r4,4d1f4 <__alt_data_end+0xfffdb1f4>
   4d3e0:	10bff604 	addi	r2,r2,-40
   4d3e4:	8884983a 	sll	r2,r17,r2
   4d3e8:	0023883a 	mov	r17,zero
   4d3ec:	243f880e 	bge	r4,r16,4d210 <__alt_data_end+0xfffdb210>
   4d3f0:	00ffe034 	movhi	r3,65408
   4d3f4:	18ffffc4 	addi	r3,r3,-1
   4d3f8:	8121c83a 	sub	r16,r16,r4
   4d3fc:	10c6703a 	and	r3,r2,r3
   4d400:	003f3406 	br	4d0d4 <__alt_data_end+0xfffdb0d4>
   4d404:	9100004c 	andi	r4,r18,1
   4d408:	000b883a 	mov	r5,zero
   4d40c:	0005883a 	mov	r2,zero
   4d410:	003f4806 	br	4d134 <__alt_data_end+0xfffdb134>
   4d414:	298cb03a 	or	r6,r5,r6
   4d418:	300cc03a 	cmpne	r6,r6,zero
   4d41c:	0005883a 	mov	r2,zero
   4d420:	003f6406 	br	4d1b4 <__alt_data_end+0xfffdb1b4>
   4d424:	10009a1e 	bne	r2,zero,4d690 <__subdf3+0x640>
   4d428:	82400044 	addi	r9,r16,1
   4d42c:	4881ffcc 	andi	r2,r9,2047
   4d430:	02800044 	movi	r10,1
   4d434:	5080670e 	bge	r10,r2,4d5d4 <__subdf3+0x584>
   4d438:	0081ffc4 	movi	r2,2047
   4d43c:	4880af26 	beq	r9,r2,4d6fc <__subdf3+0x6ac>
   4d440:	898d883a 	add	r6,r17,r6
   4d444:	1945883a 	add	r2,r3,r5
   4d448:	3447803a 	cmpltu	r3,r6,r17
   4d44c:	1887883a 	add	r3,r3,r2
   4d450:	182297fa 	slli	r17,r3,31
   4d454:	300cd07a 	srli	r6,r6,1
   4d458:	1806d07a 	srli	r3,r3,1
   4d45c:	4821883a 	mov	r16,r9
   4d460:	89a2b03a 	or	r17,r17,r6
   4d464:	003f1b06 	br	4d0d4 <__alt_data_end+0xfffdb0d4>
   4d468:	0101ffc4 	movi	r4,2047
   4d46c:	813f441e 	bne	r16,r4,4d180 <__alt_data_end+0xfffdb180>
   4d470:	003f1806 	br	4d0d4 <__alt_data_end+0xfffdb0d4>
   4d474:	843ff844 	addi	r16,r16,-31
   4d478:	01400804 	movi	r5,32
   4d47c:	1408d83a 	srl	r4,r2,r16
   4d480:	19405026 	beq	r3,r5,4d5c4 <__subdf3+0x574>
   4d484:	01401004 	movi	r5,64
   4d488:	28c7c83a 	sub	r3,r5,r3
   4d48c:	10c4983a 	sll	r2,r2,r3
   4d490:	88a2b03a 	or	r17,r17,r2
   4d494:	8822c03a 	cmpne	r17,r17,zero
   4d498:	2462b03a 	or	r17,r4,r17
   4d49c:	0007883a 	mov	r3,zero
   4d4a0:	0021883a 	mov	r16,zero
   4d4a4:	003f6d06 	br	4d25c <__alt_data_end+0xfffdb25c>
   4d4a8:	11fff804 	addi	r7,r2,-32
   4d4ac:	01000804 	movi	r4,32
   4d4b0:	29ced83a 	srl	r7,r5,r7
   4d4b4:	11004526 	beq	r2,r4,4d5cc <__subdf3+0x57c>
   4d4b8:	01001004 	movi	r4,64
   4d4bc:	2089c83a 	sub	r4,r4,r2
   4d4c0:	2904983a 	sll	r2,r5,r4
   4d4c4:	118cb03a 	or	r6,r2,r6
   4d4c8:	300cc03a 	cmpne	r6,r6,zero
   4d4cc:	398cb03a 	or	r6,r7,r6
   4d4d0:	0005883a 	mov	r2,zero
   4d4d4:	003f3706 	br	4d1b4 <__alt_data_end+0xfffdb1b4>
   4d4d8:	80002a26 	beq	r16,zero,4d584 <__subdf3+0x534>
   4d4dc:	0101ffc4 	movi	r4,2047
   4d4e0:	49006626 	beq	r9,r4,4d67c <__subdf3+0x62c>
   4d4e4:	0085c83a 	sub	r2,zero,r2
   4d4e8:	18c02034 	orhi	r3,r3,128
   4d4ec:	01000e04 	movi	r4,56
   4d4f0:	20807e16 	blt	r4,r2,4d6ec <__subdf3+0x69c>
   4d4f4:	010007c4 	movi	r4,31
   4d4f8:	2080e716 	blt	r4,r2,4d898 <__subdf3+0x848>
   4d4fc:	01000804 	movi	r4,32
   4d500:	2089c83a 	sub	r4,r4,r2
   4d504:	1914983a 	sll	r10,r3,r4
   4d508:	8890d83a 	srl	r8,r17,r2
   4d50c:	8908983a 	sll	r4,r17,r4
   4d510:	1884d83a 	srl	r2,r3,r2
   4d514:	5222b03a 	or	r17,r10,r8
   4d518:	2006c03a 	cmpne	r3,r4,zero
   4d51c:	88e2b03a 	or	r17,r17,r3
   4d520:	3463c83a 	sub	r17,r6,r17
   4d524:	2885c83a 	sub	r2,r5,r2
   4d528:	344d803a 	cmpltu	r6,r6,r17
   4d52c:	1187c83a 	sub	r3,r2,r6
   4d530:	4821883a 	mov	r16,r9
   4d534:	3825883a 	mov	r18,r7
   4d538:	003f2306 	br	4d1c8 <__alt_data_end+0xfffdb1c8>
   4d53c:	24d0b03a 	or	r8,r4,r19
   4d540:	40001b1e 	bne	r8,zero,4d5b0 <__subdf3+0x560>
   4d544:	0005883a 	mov	r2,zero
   4d548:	0009883a 	mov	r4,zero
   4d54c:	0021883a 	mov	r16,zero
   4d550:	003f4906 	br	4d278 <__alt_data_end+0xfffdb278>
   4d554:	010007c4 	movi	r4,31
   4d558:	20803a16 	blt	r4,r2,4d644 <__subdf3+0x5f4>
   4d55c:	01000804 	movi	r4,32
   4d560:	2089c83a 	sub	r4,r4,r2
   4d564:	2912983a 	sll	r9,r5,r4
   4d568:	3090d83a 	srl	r8,r6,r2
   4d56c:	3108983a 	sll	r4,r6,r4
   4d570:	2884d83a 	srl	r2,r5,r2
   4d574:	4a12b03a 	or	r9,r9,r8
   4d578:	2008c03a 	cmpne	r4,r4,zero
   4d57c:	4912b03a 	or	r9,r9,r4
   4d580:	003f4e06 	br	4d2bc <__alt_data_end+0xfffdb2bc>
   4d584:	1c48b03a 	or	r4,r3,r17
   4d588:	20003c26 	beq	r4,zero,4d67c <__subdf3+0x62c>
   4d58c:	0084303a 	nor	r2,zero,r2
   4d590:	1000381e 	bne	r2,zero,4d674 <__subdf3+0x624>
   4d594:	3463c83a 	sub	r17,r6,r17
   4d598:	28c5c83a 	sub	r2,r5,r3
   4d59c:	344d803a 	cmpltu	r6,r6,r17
   4d5a0:	1187c83a 	sub	r3,r2,r6
   4d5a4:	4821883a 	mov	r16,r9
   4d5a8:	3825883a 	mov	r18,r7
   4d5ac:	003f0606 	br	4d1c8 <__alt_data_end+0xfffdb1c8>
   4d5b0:	2023883a 	mov	r17,r4
   4d5b4:	003f0906 	br	4d1dc <__alt_data_end+0xfffdb1dc>
   4d5b8:	0101ffc4 	movi	r4,2047
   4d5bc:	813f3a1e 	bne	r16,r4,4d2a8 <__alt_data_end+0xfffdb2a8>
   4d5c0:	003ec406 	br	4d0d4 <__alt_data_end+0xfffdb0d4>
   4d5c4:	0005883a 	mov	r2,zero
   4d5c8:	003fb106 	br	4d490 <__alt_data_end+0xfffdb490>
   4d5cc:	0005883a 	mov	r2,zero
   4d5d0:	003fbc06 	br	4d4c4 <__alt_data_end+0xfffdb4c4>
   4d5d4:	1c44b03a 	or	r2,r3,r17
   4d5d8:	80008e1e 	bne	r16,zero,4d814 <__subdf3+0x7c4>
   4d5dc:	1000c826 	beq	r2,zero,4d900 <__subdf3+0x8b0>
   4d5e0:	2984b03a 	or	r2,r5,r6
   4d5e4:	103ebb26 	beq	r2,zero,4d0d4 <__alt_data_end+0xfffdb0d4>
   4d5e8:	8989883a 	add	r4,r17,r6
   4d5ec:	1945883a 	add	r2,r3,r5
   4d5f0:	2447803a 	cmpltu	r3,r4,r17
   4d5f4:	1887883a 	add	r3,r3,r2
   4d5f8:	1880202c 	andhi	r2,r3,128
   4d5fc:	2023883a 	mov	r17,r4
   4d600:	103f1626 	beq	r2,zero,4d25c <__alt_data_end+0xfffdb25c>
   4d604:	00bfe034 	movhi	r2,65408
   4d608:	10bfffc4 	addi	r2,r2,-1
   4d60c:	5021883a 	mov	r16,r10
   4d610:	1886703a 	and	r3,r3,r2
   4d614:	003eaf06 	br	4d0d4 <__alt_data_end+0xfffdb0d4>
   4d618:	3825883a 	mov	r18,r7
   4d61c:	003f0f06 	br	4d25c <__alt_data_end+0xfffdb25c>
   4d620:	1c44b03a 	or	r2,r3,r17
   4d624:	8000251e 	bne	r16,zero,4d6bc <__subdf3+0x66c>
   4d628:	1000661e 	bne	r2,zero,4d7c4 <__subdf3+0x774>
   4d62c:	2990b03a 	or	r8,r5,r6
   4d630:	40009626 	beq	r8,zero,4d88c <__subdf3+0x83c>
   4d634:	2807883a 	mov	r3,r5
   4d638:	3023883a 	mov	r17,r6
   4d63c:	3825883a 	mov	r18,r7
   4d640:	003ea406 	br	4d0d4 <__alt_data_end+0xfffdb0d4>
   4d644:	127ff804 	addi	r9,r2,-32
   4d648:	01000804 	movi	r4,32
   4d64c:	2a52d83a 	srl	r9,r5,r9
   4d650:	11008c26 	beq	r2,r4,4d884 <__subdf3+0x834>
   4d654:	01001004 	movi	r4,64
   4d658:	2085c83a 	sub	r2,r4,r2
   4d65c:	2884983a 	sll	r2,r5,r2
   4d660:	118cb03a 	or	r6,r2,r6
   4d664:	300cc03a 	cmpne	r6,r6,zero
   4d668:	4992b03a 	or	r9,r9,r6
   4d66c:	0005883a 	mov	r2,zero
   4d670:	003f1206 	br	4d2bc <__alt_data_end+0xfffdb2bc>
   4d674:	0101ffc4 	movi	r4,2047
   4d678:	493f9c1e 	bne	r9,r4,4d4ec <__alt_data_end+0xfffdb4ec>
   4d67c:	2807883a 	mov	r3,r5
   4d680:	3023883a 	mov	r17,r6
   4d684:	4821883a 	mov	r16,r9
   4d688:	3825883a 	mov	r18,r7
   4d68c:	003e9106 	br	4d0d4 <__alt_data_end+0xfffdb0d4>
   4d690:	80001f1e 	bne	r16,zero,4d710 <__subdf3+0x6c0>
   4d694:	1c48b03a 	or	r4,r3,r17
   4d698:	20005a26 	beq	r4,zero,4d804 <__subdf3+0x7b4>
   4d69c:	0084303a 	nor	r2,zero,r2
   4d6a0:	1000561e 	bne	r2,zero,4d7fc <__subdf3+0x7ac>
   4d6a4:	89a3883a 	add	r17,r17,r6
   4d6a8:	1945883a 	add	r2,r3,r5
   4d6ac:	898d803a 	cmpltu	r6,r17,r6
   4d6b0:	3087883a 	add	r3,r6,r2
   4d6b4:	4821883a 	mov	r16,r9
   4d6b8:	003f0506 	br	4d2d0 <__alt_data_end+0xfffdb2d0>
   4d6bc:	10002b1e 	bne	r2,zero,4d76c <__subdf3+0x71c>
   4d6c0:	2984b03a 	or	r2,r5,r6
   4d6c4:	10008026 	beq	r2,zero,4d8c8 <__subdf3+0x878>
   4d6c8:	2807883a 	mov	r3,r5
   4d6cc:	3023883a 	mov	r17,r6
   4d6d0:	3825883a 	mov	r18,r7
   4d6d4:	0401ffc4 	movi	r16,2047
   4d6d8:	003e7e06 	br	4d0d4 <__alt_data_end+0xfffdb0d4>
   4d6dc:	3809883a 	mov	r4,r7
   4d6e0:	0011883a 	mov	r8,zero
   4d6e4:	0005883a 	mov	r2,zero
   4d6e8:	003ee306 	br	4d278 <__alt_data_end+0xfffdb278>
   4d6ec:	1c62b03a 	or	r17,r3,r17
   4d6f0:	8822c03a 	cmpne	r17,r17,zero
   4d6f4:	0005883a 	mov	r2,zero
   4d6f8:	003f8906 	br	4d520 <__alt_data_end+0xfffdb520>
   4d6fc:	3809883a 	mov	r4,r7
   4d700:	4821883a 	mov	r16,r9
   4d704:	0011883a 	mov	r8,zero
   4d708:	0005883a 	mov	r2,zero
   4d70c:	003eda06 	br	4d278 <__alt_data_end+0xfffdb278>
   4d710:	0101ffc4 	movi	r4,2047
   4d714:	49003b26 	beq	r9,r4,4d804 <__subdf3+0x7b4>
   4d718:	0085c83a 	sub	r2,zero,r2
   4d71c:	18c02034 	orhi	r3,r3,128
   4d720:	01000e04 	movi	r4,56
   4d724:	20806e16 	blt	r4,r2,4d8e0 <__subdf3+0x890>
   4d728:	010007c4 	movi	r4,31
   4d72c:	20807716 	blt	r4,r2,4d90c <__subdf3+0x8bc>
   4d730:	01000804 	movi	r4,32
   4d734:	2089c83a 	sub	r4,r4,r2
   4d738:	1914983a 	sll	r10,r3,r4
   4d73c:	8890d83a 	srl	r8,r17,r2
   4d740:	8908983a 	sll	r4,r17,r4
   4d744:	1884d83a 	srl	r2,r3,r2
   4d748:	5222b03a 	or	r17,r10,r8
   4d74c:	2006c03a 	cmpne	r3,r4,zero
   4d750:	88e2b03a 	or	r17,r17,r3
   4d754:	89a3883a 	add	r17,r17,r6
   4d758:	1145883a 	add	r2,r2,r5
   4d75c:	898d803a 	cmpltu	r6,r17,r6
   4d760:	3087883a 	add	r3,r6,r2
   4d764:	4821883a 	mov	r16,r9
   4d768:	003ed906 	br	4d2d0 <__alt_data_end+0xfffdb2d0>
   4d76c:	2984b03a 	or	r2,r5,r6
   4d770:	10004226 	beq	r2,zero,4d87c <__subdf3+0x82c>
   4d774:	1808d0fa 	srli	r4,r3,3
   4d778:	8822d0fa 	srli	r17,r17,3
   4d77c:	1806977a 	slli	r3,r3,29
   4d780:	2080022c 	andhi	r2,r4,8
   4d784:	1c62b03a 	or	r17,r3,r17
   4d788:	10000826 	beq	r2,zero,4d7ac <__subdf3+0x75c>
   4d78c:	2812d0fa 	srli	r9,r5,3
   4d790:	4880022c 	andhi	r2,r9,8
   4d794:	1000051e 	bne	r2,zero,4d7ac <__subdf3+0x75c>
   4d798:	300cd0fa 	srli	r6,r6,3
   4d79c:	2804977a 	slli	r2,r5,29
   4d7a0:	4809883a 	mov	r4,r9
   4d7a4:	3825883a 	mov	r18,r7
   4d7a8:	11a2b03a 	or	r17,r2,r6
   4d7ac:	8806d77a 	srli	r3,r17,29
   4d7b0:	200890fa 	slli	r4,r4,3
   4d7b4:	882290fa 	slli	r17,r17,3
   4d7b8:	0401ffc4 	movi	r16,2047
   4d7bc:	1906b03a 	or	r3,r3,r4
   4d7c0:	003e4406 	br	4d0d4 <__alt_data_end+0xfffdb0d4>
   4d7c4:	2984b03a 	or	r2,r5,r6
   4d7c8:	103e4226 	beq	r2,zero,4d0d4 <__alt_data_end+0xfffdb0d4>
   4d7cc:	8989c83a 	sub	r4,r17,r6
   4d7d0:	8911803a 	cmpltu	r8,r17,r4
   4d7d4:	1945c83a 	sub	r2,r3,r5
   4d7d8:	1205c83a 	sub	r2,r2,r8
   4d7dc:	1200202c 	andhi	r8,r2,128
   4d7e0:	403e9a26 	beq	r8,zero,4d24c <__alt_data_end+0xfffdb24c>
   4d7e4:	3463c83a 	sub	r17,r6,r17
   4d7e8:	28c5c83a 	sub	r2,r5,r3
   4d7ec:	344d803a 	cmpltu	r6,r6,r17
   4d7f0:	1187c83a 	sub	r3,r2,r6
   4d7f4:	3825883a 	mov	r18,r7
   4d7f8:	003e3606 	br	4d0d4 <__alt_data_end+0xfffdb0d4>
   4d7fc:	0101ffc4 	movi	r4,2047
   4d800:	493fc71e 	bne	r9,r4,4d720 <__alt_data_end+0xfffdb720>
   4d804:	2807883a 	mov	r3,r5
   4d808:	3023883a 	mov	r17,r6
   4d80c:	4821883a 	mov	r16,r9
   4d810:	003e3006 	br	4d0d4 <__alt_data_end+0xfffdb0d4>
   4d814:	10003626 	beq	r2,zero,4d8f0 <__subdf3+0x8a0>
   4d818:	2984b03a 	or	r2,r5,r6
   4d81c:	10001726 	beq	r2,zero,4d87c <__subdf3+0x82c>
   4d820:	1808d0fa 	srli	r4,r3,3
   4d824:	8822d0fa 	srli	r17,r17,3
   4d828:	1806977a 	slli	r3,r3,29
   4d82c:	2080022c 	andhi	r2,r4,8
   4d830:	1c62b03a 	or	r17,r3,r17
   4d834:	10000726 	beq	r2,zero,4d854 <__subdf3+0x804>
   4d838:	2812d0fa 	srli	r9,r5,3
   4d83c:	4880022c 	andhi	r2,r9,8
   4d840:	1000041e 	bne	r2,zero,4d854 <__subdf3+0x804>
   4d844:	300cd0fa 	srli	r6,r6,3
   4d848:	2804977a 	slli	r2,r5,29
   4d84c:	4809883a 	mov	r4,r9
   4d850:	11a2b03a 	or	r17,r2,r6
   4d854:	8806d77a 	srli	r3,r17,29
   4d858:	200890fa 	slli	r4,r4,3
   4d85c:	882290fa 	slli	r17,r17,3
   4d860:	3825883a 	mov	r18,r7
   4d864:	1906b03a 	or	r3,r3,r4
   4d868:	0401ffc4 	movi	r16,2047
   4d86c:	003e1906 	br	4d0d4 <__alt_data_end+0xfffdb0d4>
   4d870:	000b883a 	mov	r5,zero
   4d874:	0005883a 	mov	r2,zero
   4d878:	003e2e06 	br	4d134 <__alt_data_end+0xfffdb134>
   4d87c:	0401ffc4 	movi	r16,2047
   4d880:	003e1406 	br	4d0d4 <__alt_data_end+0xfffdb0d4>
   4d884:	0005883a 	mov	r2,zero
   4d888:	003f7506 	br	4d660 <__alt_data_end+0xfffdb660>
   4d88c:	0005883a 	mov	r2,zero
   4d890:	0009883a 	mov	r4,zero
   4d894:	003e7806 	br	4d278 <__alt_data_end+0xfffdb278>
   4d898:	123ff804 	addi	r8,r2,-32
   4d89c:	01000804 	movi	r4,32
   4d8a0:	1a10d83a 	srl	r8,r3,r8
   4d8a4:	11002526 	beq	r2,r4,4d93c <__subdf3+0x8ec>
   4d8a8:	01001004 	movi	r4,64
   4d8ac:	2085c83a 	sub	r2,r4,r2
   4d8b0:	1884983a 	sll	r2,r3,r2
   4d8b4:	1444b03a 	or	r2,r2,r17
   4d8b8:	1004c03a 	cmpne	r2,r2,zero
   4d8bc:	40a2b03a 	or	r17,r8,r2
   4d8c0:	0005883a 	mov	r2,zero
   4d8c4:	003f1606 	br	4d520 <__alt_data_end+0xfffdb520>
   4d8c8:	02000434 	movhi	r8,16
   4d8cc:	0009883a 	mov	r4,zero
   4d8d0:	423fffc4 	addi	r8,r8,-1
   4d8d4:	00bfffc4 	movi	r2,-1
   4d8d8:	0401ffc4 	movi	r16,2047
   4d8dc:	003e6606 	br	4d278 <__alt_data_end+0xfffdb278>
   4d8e0:	1c62b03a 	or	r17,r3,r17
   4d8e4:	8822c03a 	cmpne	r17,r17,zero
   4d8e8:	0005883a 	mov	r2,zero
   4d8ec:	003f9906 	br	4d754 <__alt_data_end+0xfffdb754>
   4d8f0:	2807883a 	mov	r3,r5
   4d8f4:	3023883a 	mov	r17,r6
   4d8f8:	0401ffc4 	movi	r16,2047
   4d8fc:	003df506 	br	4d0d4 <__alt_data_end+0xfffdb0d4>
   4d900:	2807883a 	mov	r3,r5
   4d904:	3023883a 	mov	r17,r6
   4d908:	003df206 	br	4d0d4 <__alt_data_end+0xfffdb0d4>
   4d90c:	123ff804 	addi	r8,r2,-32
   4d910:	01000804 	movi	r4,32
   4d914:	1a10d83a 	srl	r8,r3,r8
   4d918:	11000a26 	beq	r2,r4,4d944 <__subdf3+0x8f4>
   4d91c:	01001004 	movi	r4,64
   4d920:	2085c83a 	sub	r2,r4,r2
   4d924:	1884983a 	sll	r2,r3,r2
   4d928:	1444b03a 	or	r2,r2,r17
   4d92c:	1004c03a 	cmpne	r2,r2,zero
   4d930:	40a2b03a 	or	r17,r8,r2
   4d934:	0005883a 	mov	r2,zero
   4d938:	003f8606 	br	4d754 <__alt_data_end+0xfffdb754>
   4d93c:	0005883a 	mov	r2,zero
   4d940:	003fdc06 	br	4d8b4 <__alt_data_end+0xfffdb8b4>
   4d944:	0005883a 	mov	r2,zero
   4d948:	003ff706 	br	4d928 <__alt_data_end+0xfffdb928>

0004d94c <__fixdfsi>:
   4d94c:	280cd53a 	srli	r6,r5,20
   4d950:	00c00434 	movhi	r3,16
   4d954:	18ffffc4 	addi	r3,r3,-1
   4d958:	3181ffcc 	andi	r6,r6,2047
   4d95c:	01c0ff84 	movi	r7,1022
   4d960:	28c6703a 	and	r3,r5,r3
   4d964:	280ad7fa 	srli	r5,r5,31
   4d968:	3980120e 	bge	r7,r6,4d9b4 <__fixdfsi+0x68>
   4d96c:	00810744 	movi	r2,1053
   4d970:	11800c16 	blt	r2,r6,4d9a4 <__fixdfsi+0x58>
   4d974:	00810cc4 	movi	r2,1075
   4d978:	1185c83a 	sub	r2,r2,r6
   4d97c:	01c007c4 	movi	r7,31
   4d980:	18c00434 	orhi	r3,r3,16
   4d984:	38800d16 	blt	r7,r2,4d9bc <__fixdfsi+0x70>
   4d988:	31befb44 	addi	r6,r6,-1043
   4d98c:	2084d83a 	srl	r2,r4,r2
   4d990:	1986983a 	sll	r3,r3,r6
   4d994:	1884b03a 	or	r2,r3,r2
   4d998:	28000726 	beq	r5,zero,4d9b8 <__fixdfsi+0x6c>
   4d99c:	0085c83a 	sub	r2,zero,r2
   4d9a0:	f800283a 	ret
   4d9a4:	00a00034 	movhi	r2,32768
   4d9a8:	10bfffc4 	addi	r2,r2,-1
   4d9ac:	2885883a 	add	r2,r5,r2
   4d9b0:	f800283a 	ret
   4d9b4:	0005883a 	mov	r2,zero
   4d9b8:	f800283a 	ret
   4d9bc:	008104c4 	movi	r2,1043
   4d9c0:	1185c83a 	sub	r2,r2,r6
   4d9c4:	1884d83a 	srl	r2,r3,r2
   4d9c8:	003ff306 	br	4d998 <__alt_data_end+0xfffdb998>

0004d9cc <__floatsidf>:
   4d9cc:	defffd04 	addi	sp,sp,-12
   4d9d0:	dfc00215 	stw	ra,8(sp)
   4d9d4:	dc400115 	stw	r17,4(sp)
   4d9d8:	dc000015 	stw	r16,0(sp)
   4d9dc:	20002b26 	beq	r4,zero,4da8c <__floatsidf+0xc0>
   4d9e0:	2023883a 	mov	r17,r4
   4d9e4:	2020d7fa 	srli	r16,r4,31
   4d9e8:	20002d16 	blt	r4,zero,4daa0 <__floatsidf+0xd4>
   4d9ec:	8809883a 	mov	r4,r17
   4d9f0:	004db500 	call	4db50 <__clzsi2>
   4d9f4:	01410784 	movi	r5,1054
   4d9f8:	288bc83a 	sub	r5,r5,r2
   4d9fc:	01010cc4 	movi	r4,1075
   4da00:	2149c83a 	sub	r4,r4,r5
   4da04:	00c007c4 	movi	r3,31
   4da08:	1900160e 	bge	r3,r4,4da64 <__floatsidf+0x98>
   4da0c:	00c104c4 	movi	r3,1043
   4da10:	1947c83a 	sub	r3,r3,r5
   4da14:	88c6983a 	sll	r3,r17,r3
   4da18:	00800434 	movhi	r2,16
   4da1c:	10bfffc4 	addi	r2,r2,-1
   4da20:	1886703a 	and	r3,r3,r2
   4da24:	2941ffcc 	andi	r5,r5,2047
   4da28:	800d883a 	mov	r6,r16
   4da2c:	0005883a 	mov	r2,zero
   4da30:	280a953a 	slli	r5,r5,20
   4da34:	31803fcc 	andi	r6,r6,255
   4da38:	01000434 	movhi	r4,16
   4da3c:	300c97fa 	slli	r6,r6,31
   4da40:	213fffc4 	addi	r4,r4,-1
   4da44:	1906703a 	and	r3,r3,r4
   4da48:	1946b03a 	or	r3,r3,r5
   4da4c:	1986b03a 	or	r3,r3,r6
   4da50:	dfc00217 	ldw	ra,8(sp)
   4da54:	dc400117 	ldw	r17,4(sp)
   4da58:	dc000017 	ldw	r16,0(sp)
   4da5c:	dec00304 	addi	sp,sp,12
   4da60:	f800283a 	ret
   4da64:	00c002c4 	movi	r3,11
   4da68:	1887c83a 	sub	r3,r3,r2
   4da6c:	88c6d83a 	srl	r3,r17,r3
   4da70:	8904983a 	sll	r2,r17,r4
   4da74:	01000434 	movhi	r4,16
   4da78:	213fffc4 	addi	r4,r4,-1
   4da7c:	2941ffcc 	andi	r5,r5,2047
   4da80:	1906703a 	and	r3,r3,r4
   4da84:	800d883a 	mov	r6,r16
   4da88:	003fe906 	br	4da30 <__alt_data_end+0xfffdba30>
   4da8c:	000d883a 	mov	r6,zero
   4da90:	000b883a 	mov	r5,zero
   4da94:	0007883a 	mov	r3,zero
   4da98:	0005883a 	mov	r2,zero
   4da9c:	003fe406 	br	4da30 <__alt_data_end+0xfffdba30>
   4daa0:	0123c83a 	sub	r17,zero,r4
   4daa4:	003fd106 	br	4d9ec <__alt_data_end+0xfffdb9ec>

0004daa8 <__floatunsidf>:
   4daa8:	defffe04 	addi	sp,sp,-8
   4daac:	dc000015 	stw	r16,0(sp)
   4dab0:	dfc00115 	stw	ra,4(sp)
   4dab4:	2021883a 	mov	r16,r4
   4dab8:	20002226 	beq	r4,zero,4db44 <__floatunsidf+0x9c>
   4dabc:	004db500 	call	4db50 <__clzsi2>
   4dac0:	01010784 	movi	r4,1054
   4dac4:	2089c83a 	sub	r4,r4,r2
   4dac8:	01810cc4 	movi	r6,1075
   4dacc:	310dc83a 	sub	r6,r6,r4
   4dad0:	00c007c4 	movi	r3,31
   4dad4:	1980120e 	bge	r3,r6,4db20 <__floatunsidf+0x78>
   4dad8:	00c104c4 	movi	r3,1043
   4dadc:	1907c83a 	sub	r3,r3,r4
   4dae0:	80ca983a 	sll	r5,r16,r3
   4dae4:	00800434 	movhi	r2,16
   4dae8:	10bfffc4 	addi	r2,r2,-1
   4daec:	2101ffcc 	andi	r4,r4,2047
   4daf0:	0021883a 	mov	r16,zero
   4daf4:	288a703a 	and	r5,r5,r2
   4daf8:	2008953a 	slli	r4,r4,20
   4dafc:	00c00434 	movhi	r3,16
   4db00:	18ffffc4 	addi	r3,r3,-1
   4db04:	28c6703a 	and	r3,r5,r3
   4db08:	8005883a 	mov	r2,r16
   4db0c:	1906b03a 	or	r3,r3,r4
   4db10:	dfc00117 	ldw	ra,4(sp)
   4db14:	dc000017 	ldw	r16,0(sp)
   4db18:	dec00204 	addi	sp,sp,8
   4db1c:	f800283a 	ret
   4db20:	00c002c4 	movi	r3,11
   4db24:	188bc83a 	sub	r5,r3,r2
   4db28:	814ad83a 	srl	r5,r16,r5
   4db2c:	00c00434 	movhi	r3,16
   4db30:	18ffffc4 	addi	r3,r3,-1
   4db34:	81a0983a 	sll	r16,r16,r6
   4db38:	2101ffcc 	andi	r4,r4,2047
   4db3c:	28ca703a 	and	r5,r5,r3
   4db40:	003fed06 	br	4daf8 <__alt_data_end+0xfffdbaf8>
   4db44:	0009883a 	mov	r4,zero
   4db48:	000b883a 	mov	r5,zero
   4db4c:	003fea06 	br	4daf8 <__alt_data_end+0xfffdbaf8>

0004db50 <__clzsi2>:
   4db50:	00bfffd4 	movui	r2,65535
   4db54:	11000536 	bltu	r2,r4,4db6c <__clzsi2+0x1c>
   4db58:	00803fc4 	movi	r2,255
   4db5c:	11000f36 	bltu	r2,r4,4db9c <__clzsi2+0x4c>
   4db60:	00800804 	movi	r2,32
   4db64:	0007883a 	mov	r3,zero
   4db68:	00000506 	br	4db80 <__clzsi2+0x30>
   4db6c:	00804034 	movhi	r2,256
   4db70:	10bfffc4 	addi	r2,r2,-1
   4db74:	11000c2e 	bgeu	r2,r4,4dba8 <__clzsi2+0x58>
   4db78:	00800204 	movi	r2,8
   4db7c:	00c00604 	movi	r3,24
   4db80:	20c8d83a 	srl	r4,r4,r3
   4db84:	00c00174 	movhi	r3,5
   4db88:	18c58704 	addi	r3,r3,5660
   4db8c:	1909883a 	add	r4,r3,r4
   4db90:	20c00003 	ldbu	r3,0(r4)
   4db94:	10c5c83a 	sub	r2,r2,r3
   4db98:	f800283a 	ret
   4db9c:	00800604 	movi	r2,24
   4dba0:	00c00204 	movi	r3,8
   4dba4:	003ff606 	br	4db80 <__alt_data_end+0xfffdbb80>
   4dba8:	00800404 	movi	r2,16
   4dbac:	1007883a 	mov	r3,r2
   4dbb0:	003ff306 	br	4db80 <__alt_data_end+0xfffdbb80>

0004dbb4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4dbb4:	defffe04 	addi	sp,sp,-8
   4dbb8:	dfc00115 	stw	ra,4(sp)
   4dbbc:	df000015 	stw	fp,0(sp)
   4dbc0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4dbc4:	d0a00b17 	ldw	r2,-32724(gp)
   4dbc8:	10000326 	beq	r2,zero,4dbd8 <alt_get_errno+0x24>
   4dbcc:	d0a00b17 	ldw	r2,-32724(gp)
   4dbd0:	103ee83a 	callr	r2
   4dbd4:	00000106 	br	4dbdc <alt_get_errno+0x28>
   4dbd8:	d0a71904 	addi	r2,gp,-25500
}
   4dbdc:	e037883a 	mov	sp,fp
   4dbe0:	dfc00117 	ldw	ra,4(sp)
   4dbe4:	df000017 	ldw	fp,0(sp)
   4dbe8:	dec00204 	addi	sp,sp,8
   4dbec:	f800283a 	ret

0004dbf0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   4dbf0:	defffb04 	addi	sp,sp,-20
   4dbf4:	dfc00415 	stw	ra,16(sp)
   4dbf8:	df000315 	stw	fp,12(sp)
   4dbfc:	df000304 	addi	fp,sp,12
   4dc00:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   4dc04:	e0bfff17 	ldw	r2,-4(fp)
   4dc08:	10000616 	blt	r2,zero,4dc24 <close+0x34>
   4dc0c:	e0bfff17 	ldw	r2,-4(fp)
   4dc10:	10c00324 	muli	r3,r2,12
   4dc14:	00800174 	movhi	r2,5
   4dc18:	1088aa04 	addi	r2,r2,8872
   4dc1c:	1885883a 	add	r2,r3,r2
   4dc20:	00000106 	br	4dc28 <close+0x38>
   4dc24:	0005883a 	mov	r2,zero
   4dc28:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   4dc2c:	e0bffd17 	ldw	r2,-12(fp)
   4dc30:	10001926 	beq	r2,zero,4dc98 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   4dc34:	e0bffd17 	ldw	r2,-12(fp)
   4dc38:	10800017 	ldw	r2,0(r2)
   4dc3c:	10800417 	ldw	r2,16(r2)
   4dc40:	10000626 	beq	r2,zero,4dc5c <close+0x6c>
   4dc44:	e0bffd17 	ldw	r2,-12(fp)
   4dc48:	10800017 	ldw	r2,0(r2)
   4dc4c:	10800417 	ldw	r2,16(r2)
   4dc50:	e13ffd17 	ldw	r4,-12(fp)
   4dc54:	103ee83a 	callr	r2
   4dc58:	00000106 	br	4dc60 <close+0x70>
   4dc5c:	0005883a 	mov	r2,zero
   4dc60:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   4dc64:	e13fff17 	ldw	r4,-4(fp)
   4dc68:	004e7a40 	call	4e7a4 <alt_release_fd>
    if (rval < 0)
   4dc6c:	e0bffe17 	ldw	r2,-8(fp)
   4dc70:	1000070e 	bge	r2,zero,4dc90 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   4dc74:	004dbb40 	call	4dbb4 <alt_get_errno>
   4dc78:	1007883a 	mov	r3,r2
   4dc7c:	e0bffe17 	ldw	r2,-8(fp)
   4dc80:	0085c83a 	sub	r2,zero,r2
   4dc84:	18800015 	stw	r2,0(r3)
      return -1;
   4dc88:	00bfffc4 	movi	r2,-1
   4dc8c:	00000706 	br	4dcac <close+0xbc>
    }
    return 0;
   4dc90:	0005883a 	mov	r2,zero
   4dc94:	00000506 	br	4dcac <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   4dc98:	004dbb40 	call	4dbb4 <alt_get_errno>
   4dc9c:	1007883a 	mov	r3,r2
   4dca0:	00801444 	movi	r2,81
   4dca4:	18800015 	stw	r2,0(r3)
    return -1;
   4dca8:	00bfffc4 	movi	r2,-1
  }
}
   4dcac:	e037883a 	mov	sp,fp
   4dcb0:	dfc00117 	ldw	ra,4(sp)
   4dcb4:	df000017 	ldw	fp,0(sp)
   4dcb8:	dec00204 	addi	sp,sp,8
   4dcbc:	f800283a 	ret

0004dcc0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   4dcc0:	defffc04 	addi	sp,sp,-16
   4dcc4:	df000315 	stw	fp,12(sp)
   4dcc8:	df000304 	addi	fp,sp,12
   4dccc:	e13ffd15 	stw	r4,-12(fp)
   4dcd0:	e17ffe15 	stw	r5,-8(fp)
   4dcd4:	e1bfff15 	stw	r6,-4(fp)
  return len;
   4dcd8:	e0bfff17 	ldw	r2,-4(fp)
}
   4dcdc:	e037883a 	mov	sp,fp
   4dce0:	df000017 	ldw	fp,0(sp)
   4dce4:	dec00104 	addi	sp,sp,4
   4dce8:	f800283a 	ret

0004dcec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4dcec:	defffe04 	addi	sp,sp,-8
   4dcf0:	dfc00115 	stw	ra,4(sp)
   4dcf4:	df000015 	stw	fp,0(sp)
   4dcf8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4dcfc:	d0a00b17 	ldw	r2,-32724(gp)
   4dd00:	10000326 	beq	r2,zero,4dd10 <alt_get_errno+0x24>
   4dd04:	d0a00b17 	ldw	r2,-32724(gp)
   4dd08:	103ee83a 	callr	r2
   4dd0c:	00000106 	br	4dd14 <alt_get_errno+0x28>
   4dd10:	d0a71904 	addi	r2,gp,-25500
}
   4dd14:	e037883a 	mov	sp,fp
   4dd18:	dfc00117 	ldw	ra,4(sp)
   4dd1c:	df000017 	ldw	fp,0(sp)
   4dd20:	dec00204 	addi	sp,sp,8
   4dd24:	f800283a 	ret

0004dd28 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   4dd28:	defffb04 	addi	sp,sp,-20
   4dd2c:	dfc00415 	stw	ra,16(sp)
   4dd30:	df000315 	stw	fp,12(sp)
   4dd34:	df000304 	addi	fp,sp,12
   4dd38:	e13ffe15 	stw	r4,-8(fp)
   4dd3c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4dd40:	e0bffe17 	ldw	r2,-8(fp)
   4dd44:	10000616 	blt	r2,zero,4dd60 <fstat+0x38>
   4dd48:	e0bffe17 	ldw	r2,-8(fp)
   4dd4c:	10c00324 	muli	r3,r2,12
   4dd50:	00800174 	movhi	r2,5
   4dd54:	1088aa04 	addi	r2,r2,8872
   4dd58:	1885883a 	add	r2,r3,r2
   4dd5c:	00000106 	br	4dd64 <fstat+0x3c>
   4dd60:	0005883a 	mov	r2,zero
   4dd64:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   4dd68:	e0bffd17 	ldw	r2,-12(fp)
   4dd6c:	10001026 	beq	r2,zero,4ddb0 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   4dd70:	e0bffd17 	ldw	r2,-12(fp)
   4dd74:	10800017 	ldw	r2,0(r2)
   4dd78:	10800817 	ldw	r2,32(r2)
   4dd7c:	10000726 	beq	r2,zero,4dd9c <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
   4dd80:	e0bffd17 	ldw	r2,-12(fp)
   4dd84:	10800017 	ldw	r2,0(r2)
   4dd88:	10800817 	ldw	r2,32(r2)
   4dd8c:	e17fff17 	ldw	r5,-4(fp)
   4dd90:	e13ffd17 	ldw	r4,-12(fp)
   4dd94:	103ee83a 	callr	r2
   4dd98:	00000a06 	br	4ddc4 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   4dd9c:	e0bfff17 	ldw	r2,-4(fp)
   4dda0:	00c80004 	movi	r3,8192
   4dda4:	10c00115 	stw	r3,4(r2)
      return 0;
   4dda8:	0005883a 	mov	r2,zero
   4ddac:	00000506 	br	4ddc4 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   4ddb0:	004dcec0 	call	4dcec <alt_get_errno>
   4ddb4:	1007883a 	mov	r3,r2
   4ddb8:	00801444 	movi	r2,81
   4ddbc:	18800015 	stw	r2,0(r3)
    return -1;
   4ddc0:	00bfffc4 	movi	r2,-1
  }
}
   4ddc4:	e037883a 	mov	sp,fp
   4ddc8:	dfc00117 	ldw	ra,4(sp)
   4ddcc:	df000017 	ldw	fp,0(sp)
   4ddd0:	dec00204 	addi	sp,sp,8
   4ddd4:	f800283a 	ret

0004ddd8 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   4ddd8:	defff904 	addi	sp,sp,-28
   4dddc:	dfc00615 	stw	ra,24(sp)
   4dde0:	df000515 	stw	fp,20(sp)
   4dde4:	df000504 	addi	fp,sp,20
   4dde8:	e13ffc15 	stw	r4,-16(fp)
   4ddec:	e17ffd15 	stw	r5,-12(fp)
   4ddf0:	e1bffe15 	stw	r6,-8(fp)
   4ddf4:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   4ddf8:	e0800217 	ldw	r2,8(fp)
   4ddfc:	d8800015 	stw	r2,0(sp)
   4de00:	e1ffff17 	ldw	r7,-4(fp)
   4de04:	e1bffe17 	ldw	r6,-8(fp)
   4de08:	e17ffd17 	ldw	r5,-12(fp)
   4de0c:	e13ffc17 	ldw	r4,-16(fp)
   4de10:	004df880 	call	4df88 <alt_iic_isr_register>
}  
   4de14:	e037883a 	mov	sp,fp
   4de18:	dfc00117 	ldw	ra,4(sp)
   4de1c:	df000017 	ldw	fp,0(sp)
   4de20:	dec00204 	addi	sp,sp,8
   4de24:	f800283a 	ret

0004de28 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   4de28:	defff904 	addi	sp,sp,-28
   4de2c:	df000615 	stw	fp,24(sp)
   4de30:	df000604 	addi	fp,sp,24
   4de34:	e13ffe15 	stw	r4,-8(fp)
   4de38:	e17fff15 	stw	r5,-4(fp)
   4de3c:	e0bfff17 	ldw	r2,-4(fp)
   4de40:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4de44:	0005303a 	rdctl	r2,status
   4de48:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4de4c:	e0fffb17 	ldw	r3,-20(fp)
   4de50:	00bfff84 	movi	r2,-2
   4de54:	1884703a 	and	r2,r3,r2
   4de58:	1001703a 	wrctl	status,r2
  
  return context;
   4de5c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   4de60:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   4de64:	00c00044 	movi	r3,1
   4de68:	e0bffa17 	ldw	r2,-24(fp)
   4de6c:	1884983a 	sll	r2,r3,r2
   4de70:	1007883a 	mov	r3,r2
   4de74:	d0a72017 	ldw	r2,-25472(gp)
   4de78:	1884b03a 	or	r2,r3,r2
   4de7c:	d0a72015 	stw	r2,-25472(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   4de80:	d0a72017 	ldw	r2,-25472(gp)
   4de84:	100170fa 	wrctl	ienable,r2
   4de88:	e0bffc17 	ldw	r2,-16(fp)
   4de8c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4de90:	e0bffd17 	ldw	r2,-12(fp)
   4de94:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   4de98:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   4de9c:	0001883a 	nop
}
   4dea0:	e037883a 	mov	sp,fp
   4dea4:	df000017 	ldw	fp,0(sp)
   4dea8:	dec00104 	addi	sp,sp,4
   4deac:	f800283a 	ret

0004deb0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   4deb0:	defff904 	addi	sp,sp,-28
   4deb4:	df000615 	stw	fp,24(sp)
   4deb8:	df000604 	addi	fp,sp,24
   4debc:	e13ffe15 	stw	r4,-8(fp)
   4dec0:	e17fff15 	stw	r5,-4(fp)
   4dec4:	e0bfff17 	ldw	r2,-4(fp)
   4dec8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4decc:	0005303a 	rdctl	r2,status
   4ded0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4ded4:	e0fffb17 	ldw	r3,-20(fp)
   4ded8:	00bfff84 	movi	r2,-2
   4dedc:	1884703a 	and	r2,r3,r2
   4dee0:	1001703a 	wrctl	status,r2
  
  return context;
   4dee4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   4dee8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   4deec:	00c00044 	movi	r3,1
   4def0:	e0bffa17 	ldw	r2,-24(fp)
   4def4:	1884983a 	sll	r2,r3,r2
   4def8:	0084303a 	nor	r2,zero,r2
   4defc:	1007883a 	mov	r3,r2
   4df00:	d0a72017 	ldw	r2,-25472(gp)
   4df04:	1884703a 	and	r2,r3,r2
   4df08:	d0a72015 	stw	r2,-25472(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   4df0c:	d0a72017 	ldw	r2,-25472(gp)
   4df10:	100170fa 	wrctl	ienable,r2
   4df14:	e0bffc17 	ldw	r2,-16(fp)
   4df18:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4df1c:	e0bffd17 	ldw	r2,-12(fp)
   4df20:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   4df24:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   4df28:	0001883a 	nop
}
   4df2c:	e037883a 	mov	sp,fp
   4df30:	df000017 	ldw	fp,0(sp)
   4df34:	dec00104 	addi	sp,sp,4
   4df38:	f800283a 	ret

0004df3c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   4df3c:	defffc04 	addi	sp,sp,-16
   4df40:	df000315 	stw	fp,12(sp)
   4df44:	df000304 	addi	fp,sp,12
   4df48:	e13ffe15 	stw	r4,-8(fp)
   4df4c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   4df50:	000530fa 	rdctl	r2,ienable
   4df54:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   4df58:	00c00044 	movi	r3,1
   4df5c:	e0bfff17 	ldw	r2,-4(fp)
   4df60:	1884983a 	sll	r2,r3,r2
   4df64:	1007883a 	mov	r3,r2
   4df68:	e0bffd17 	ldw	r2,-12(fp)
   4df6c:	1884703a 	and	r2,r3,r2
   4df70:	1004c03a 	cmpne	r2,r2,zero
   4df74:	10803fcc 	andi	r2,r2,255
}
   4df78:	e037883a 	mov	sp,fp
   4df7c:	df000017 	ldw	fp,0(sp)
   4df80:	dec00104 	addi	sp,sp,4
   4df84:	f800283a 	ret

0004df88 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   4df88:	defff504 	addi	sp,sp,-44
   4df8c:	dfc00a15 	stw	ra,40(sp)
   4df90:	df000915 	stw	fp,36(sp)
   4df94:	df000904 	addi	fp,sp,36
   4df98:	e13ffc15 	stw	r4,-16(fp)
   4df9c:	e17ffd15 	stw	r5,-12(fp)
   4dfa0:	e1bffe15 	stw	r6,-8(fp)
   4dfa4:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   4dfa8:	00bffa84 	movi	r2,-22
   4dfac:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   4dfb0:	e0bffd17 	ldw	r2,-12(fp)
   4dfb4:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   4dfb8:	e0bff817 	ldw	r2,-32(fp)
   4dfbc:	10800808 	cmpgei	r2,r2,32
   4dfc0:	1000271e 	bne	r2,zero,4e060 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4dfc4:	0005303a 	rdctl	r2,status
   4dfc8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4dfcc:	e0fffb17 	ldw	r3,-20(fp)
   4dfd0:	00bfff84 	movi	r2,-2
   4dfd4:	1884703a 	and	r2,r3,r2
   4dfd8:	1001703a 	wrctl	status,r2
  
  return context;
   4dfdc:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   4dfe0:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   4dfe4:	00800174 	movhi	r2,5
   4dfe8:	10949b04 	addi	r2,r2,21100
   4dfec:	e0fff817 	ldw	r3,-32(fp)
   4dff0:	180690fa 	slli	r3,r3,3
   4dff4:	10c5883a 	add	r2,r2,r3
   4dff8:	e0fffe17 	ldw	r3,-8(fp)
   4dffc:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   4e000:	00800174 	movhi	r2,5
   4e004:	10949b04 	addi	r2,r2,21100
   4e008:	e0fff817 	ldw	r3,-32(fp)
   4e00c:	180690fa 	slli	r3,r3,3
   4e010:	10c5883a 	add	r2,r2,r3
   4e014:	10800104 	addi	r2,r2,4
   4e018:	e0ffff17 	ldw	r3,-4(fp)
   4e01c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   4e020:	e0bffe17 	ldw	r2,-8(fp)
   4e024:	10000526 	beq	r2,zero,4e03c <alt_iic_isr_register+0xb4>
   4e028:	e0bff817 	ldw	r2,-32(fp)
   4e02c:	100b883a 	mov	r5,r2
   4e030:	e13ffc17 	ldw	r4,-16(fp)
   4e034:	004de280 	call	4de28 <alt_ic_irq_enable>
   4e038:	00000406 	br	4e04c <alt_iic_isr_register+0xc4>
   4e03c:	e0bff817 	ldw	r2,-32(fp)
   4e040:	100b883a 	mov	r5,r2
   4e044:	e13ffc17 	ldw	r4,-16(fp)
   4e048:	004deb00 	call	4deb0 <alt_ic_irq_disable>
   4e04c:	e0bff715 	stw	r2,-36(fp)
   4e050:	e0bffa17 	ldw	r2,-24(fp)
   4e054:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4e058:	e0bff917 	ldw	r2,-28(fp)
   4e05c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   4e060:	e0bff717 	ldw	r2,-36(fp)
}
   4e064:	e037883a 	mov	sp,fp
   4e068:	dfc00117 	ldw	ra,4(sp)
   4e06c:	df000017 	ldw	fp,0(sp)
   4e070:	dec00204 	addi	sp,sp,8
   4e074:	f800283a 	ret

0004e078 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4e078:	defffe04 	addi	sp,sp,-8
   4e07c:	dfc00115 	stw	ra,4(sp)
   4e080:	df000015 	stw	fp,0(sp)
   4e084:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4e088:	d0a00b17 	ldw	r2,-32724(gp)
   4e08c:	10000326 	beq	r2,zero,4e09c <alt_get_errno+0x24>
   4e090:	d0a00b17 	ldw	r2,-32724(gp)
   4e094:	103ee83a 	callr	r2
   4e098:	00000106 	br	4e0a0 <alt_get_errno+0x28>
   4e09c:	d0a71904 	addi	r2,gp,-25500
}
   4e0a0:	e037883a 	mov	sp,fp
   4e0a4:	dfc00117 	ldw	ra,4(sp)
   4e0a8:	df000017 	ldw	fp,0(sp)
   4e0ac:	dec00204 	addi	sp,sp,8
   4e0b0:	f800283a 	ret

0004e0b4 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   4e0b4:	deffed04 	addi	sp,sp,-76
   4e0b8:	dfc01215 	stw	ra,72(sp)
   4e0bc:	df001115 	stw	fp,68(sp)
   4e0c0:	df001104 	addi	fp,sp,68
   4e0c4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4e0c8:	e0bfff17 	ldw	r2,-4(fp)
   4e0cc:	10000616 	blt	r2,zero,4e0e8 <isatty+0x34>
   4e0d0:	e0bfff17 	ldw	r2,-4(fp)
   4e0d4:	10c00324 	muli	r3,r2,12
   4e0d8:	00800174 	movhi	r2,5
   4e0dc:	1088aa04 	addi	r2,r2,8872
   4e0e0:	1885883a 	add	r2,r3,r2
   4e0e4:	00000106 	br	4e0ec <isatty+0x38>
   4e0e8:	0005883a 	mov	r2,zero
   4e0ec:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   4e0f0:	e0bfef17 	ldw	r2,-68(fp)
   4e0f4:	10000e26 	beq	r2,zero,4e130 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   4e0f8:	e0bfef17 	ldw	r2,-68(fp)
   4e0fc:	10800017 	ldw	r2,0(r2)
   4e100:	10800817 	ldw	r2,32(r2)
   4e104:	1000021e 	bne	r2,zero,4e110 <isatty+0x5c>
    {
      return 1;
   4e108:	00800044 	movi	r2,1
   4e10c:	00000d06 	br	4e144 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   4e110:	e0bff004 	addi	r2,fp,-64
   4e114:	100b883a 	mov	r5,r2
   4e118:	e13fff17 	ldw	r4,-4(fp)
   4e11c:	004dd280 	call	4dd28 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   4e120:	e0bff117 	ldw	r2,-60(fp)
   4e124:	10880020 	cmpeqi	r2,r2,8192
   4e128:	10803fcc 	andi	r2,r2,255
   4e12c:	00000506 	br	4e144 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   4e130:	004e0780 	call	4e078 <alt_get_errno>
   4e134:	1007883a 	mov	r3,r2
   4e138:	00801444 	movi	r2,81
   4e13c:	18800015 	stw	r2,0(r3)
    return 0;
   4e140:	0005883a 	mov	r2,zero
  }
}
   4e144:	e037883a 	mov	sp,fp
   4e148:	dfc00117 	ldw	ra,4(sp)
   4e14c:	df000017 	ldw	fp,0(sp)
   4e150:	dec00204 	addi	sp,sp,8
   4e154:	f800283a 	ret

0004e158 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   4e158:	defffc04 	addi	sp,sp,-16
   4e15c:	df000315 	stw	fp,12(sp)
   4e160:	df000304 	addi	fp,sp,12
   4e164:	e13ffd15 	stw	r4,-12(fp)
   4e168:	e17ffe15 	stw	r5,-8(fp)
   4e16c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   4e170:	e0fffe17 	ldw	r3,-8(fp)
   4e174:	e0bffd17 	ldw	r2,-12(fp)
   4e178:	18800c26 	beq	r3,r2,4e1ac <alt_load_section+0x54>
  {
    while( to != end )
   4e17c:	00000806 	br	4e1a0 <alt_load_section+0x48>
    {
      *to++ = *from++;
   4e180:	e0bffe17 	ldw	r2,-8(fp)
   4e184:	10c00104 	addi	r3,r2,4
   4e188:	e0fffe15 	stw	r3,-8(fp)
   4e18c:	e0fffd17 	ldw	r3,-12(fp)
   4e190:	19000104 	addi	r4,r3,4
   4e194:	e13ffd15 	stw	r4,-12(fp)
   4e198:	18c00017 	ldw	r3,0(r3)
   4e19c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   4e1a0:	e0fffe17 	ldw	r3,-8(fp)
   4e1a4:	e0bfff17 	ldw	r2,-4(fp)
   4e1a8:	18bff51e 	bne	r3,r2,4e180 <__alt_data_end+0xfffdc180>
    {
      *to++ = *from++;
    }
  }
}
   4e1ac:	0001883a 	nop
   4e1b0:	e037883a 	mov	sp,fp
   4e1b4:	df000017 	ldw	fp,0(sp)
   4e1b8:	dec00104 	addi	sp,sp,4
   4e1bc:	f800283a 	ret

0004e1c0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   4e1c0:	defffe04 	addi	sp,sp,-8
   4e1c4:	dfc00115 	stw	ra,4(sp)
   4e1c8:	df000015 	stw	fp,0(sp)
   4e1cc:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   4e1d0:	01800174 	movhi	r6,5
   4e1d4:	318d7c04 	addi	r6,r6,13808
   4e1d8:	01400174 	movhi	r5,5
   4e1dc:	29467704 	addi	r5,r5,6620
   4e1e0:	01000174 	movhi	r4,5
   4e1e4:	210d7c04 	addi	r4,r4,13808
   4e1e8:	004e1580 	call	4e158 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   4e1ec:	01800134 	movhi	r6,4
   4e1f0:	31809104 	addi	r6,r6,580
   4e1f4:	01400134 	movhi	r5,4
   4e1f8:	29400804 	addi	r5,r5,32
   4e1fc:	01000134 	movhi	r4,4
   4e200:	21000804 	addi	r4,r4,32
   4e204:	004e1580 	call	4e158 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   4e208:	01800174 	movhi	r6,5
   4e20c:	31867704 	addi	r6,r6,6620
   4e210:	01400174 	movhi	r5,5
   4e214:	2944b404 	addi	r5,r5,4816
   4e218:	01000174 	movhi	r4,5
   4e21c:	2104b404 	addi	r4,r4,4816
   4e220:	004e1580 	call	4e158 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   4e224:	00506b00 	call	506b0 <alt_dcache_flush_all>
  alt_icache_flush_all();
   4e228:	0050ad40 	call	50ad4 <alt_icache_flush_all>
}
   4e22c:	0001883a 	nop
   4e230:	e037883a 	mov	sp,fp
   4e234:	dfc00117 	ldw	ra,4(sp)
   4e238:	df000017 	ldw	fp,0(sp)
   4e23c:	dec00204 	addi	sp,sp,8
   4e240:	f800283a 	ret

0004e244 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4e244:	defffe04 	addi	sp,sp,-8
   4e248:	dfc00115 	stw	ra,4(sp)
   4e24c:	df000015 	stw	fp,0(sp)
   4e250:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4e254:	d0a00b17 	ldw	r2,-32724(gp)
   4e258:	10000326 	beq	r2,zero,4e268 <alt_get_errno+0x24>
   4e25c:	d0a00b17 	ldw	r2,-32724(gp)
   4e260:	103ee83a 	callr	r2
   4e264:	00000106 	br	4e26c <alt_get_errno+0x28>
   4e268:	d0a71904 	addi	r2,gp,-25500
}
   4e26c:	e037883a 	mov	sp,fp
   4e270:	dfc00117 	ldw	ra,4(sp)
   4e274:	df000017 	ldw	fp,0(sp)
   4e278:	dec00204 	addi	sp,sp,8
   4e27c:	f800283a 	ret

0004e280 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   4e280:	defff904 	addi	sp,sp,-28
   4e284:	dfc00615 	stw	ra,24(sp)
   4e288:	df000515 	stw	fp,20(sp)
   4e28c:	df000504 	addi	fp,sp,20
   4e290:	e13ffd15 	stw	r4,-12(fp)
   4e294:	e17ffe15 	stw	r5,-8(fp)
   4e298:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   4e29c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4e2a0:	e0bffd17 	ldw	r2,-12(fp)
   4e2a4:	10000616 	blt	r2,zero,4e2c0 <lseek+0x40>
   4e2a8:	e0bffd17 	ldw	r2,-12(fp)
   4e2ac:	10c00324 	muli	r3,r2,12
   4e2b0:	00800174 	movhi	r2,5
   4e2b4:	1088aa04 	addi	r2,r2,8872
   4e2b8:	1885883a 	add	r2,r3,r2
   4e2bc:	00000106 	br	4e2c4 <lseek+0x44>
   4e2c0:	0005883a 	mov	r2,zero
   4e2c4:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   4e2c8:	e0bffc17 	ldw	r2,-16(fp)
   4e2cc:	10001026 	beq	r2,zero,4e310 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   4e2d0:	e0bffc17 	ldw	r2,-16(fp)
   4e2d4:	10800017 	ldw	r2,0(r2)
   4e2d8:	10800717 	ldw	r2,28(r2)
   4e2dc:	10000926 	beq	r2,zero,4e304 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   4e2e0:	e0bffc17 	ldw	r2,-16(fp)
   4e2e4:	10800017 	ldw	r2,0(r2)
   4e2e8:	10800717 	ldw	r2,28(r2)
   4e2ec:	e1bfff17 	ldw	r6,-4(fp)
   4e2f0:	e17ffe17 	ldw	r5,-8(fp)
   4e2f4:	e13ffc17 	ldw	r4,-16(fp)
   4e2f8:	103ee83a 	callr	r2
   4e2fc:	e0bffb15 	stw	r2,-20(fp)
   4e300:	00000506 	br	4e318 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   4e304:	00bfde84 	movi	r2,-134
   4e308:	e0bffb15 	stw	r2,-20(fp)
   4e30c:	00000206 	br	4e318 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
   4e310:	00bfebc4 	movi	r2,-81
   4e314:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   4e318:	e0bffb17 	ldw	r2,-20(fp)
   4e31c:	1000070e 	bge	r2,zero,4e33c <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   4e320:	004e2440 	call	4e244 <alt_get_errno>
   4e324:	1007883a 	mov	r3,r2
   4e328:	e0bffb17 	ldw	r2,-20(fp)
   4e32c:	0085c83a 	sub	r2,zero,r2
   4e330:	18800015 	stw	r2,0(r3)
    rc = -1;
   4e334:	00bfffc4 	movi	r2,-1
   4e338:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   4e33c:	e0bffb17 	ldw	r2,-20(fp)
}
   4e340:	e037883a 	mov	sp,fp
   4e344:	dfc00117 	ldw	ra,4(sp)
   4e348:	df000017 	ldw	fp,0(sp)
   4e34c:	dec00204 	addi	sp,sp,8
   4e350:	f800283a 	ret

0004e354 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   4e354:	defffd04 	addi	sp,sp,-12
   4e358:	dfc00215 	stw	ra,8(sp)
   4e35c:	df000115 	stw	fp,4(sp)
   4e360:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   4e364:	0009883a 	mov	r4,zero
   4e368:	004ea500 	call	4ea50 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   4e36c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   4e370:	004ea880 	call	4ea88 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   4e374:	01800174 	movhi	r6,5
   4e378:	3185ca04 	addi	r6,r6,5928
   4e37c:	01400174 	movhi	r5,5
   4e380:	2945ca04 	addi	r5,r5,5928
   4e384:	01000174 	movhi	r4,5
   4e388:	2105ca04 	addi	r4,r4,5928
   4e38c:	0050c680 	call	50c68 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   4e390:	00507d80 	call	507d8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   4e394:	01000174 	movhi	r4,5
   4e398:	21020e04 	addi	r4,r4,2104
   4e39c:	0050f3c0 	call	50f3c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   4e3a0:	d0a72117 	ldw	r2,-25468(gp)
   4e3a4:	d0e72217 	ldw	r3,-25464(gp)
   4e3a8:	d1272317 	ldw	r4,-25460(gp)
   4e3ac:	200d883a 	mov	r6,r4
   4e3b0:	180b883a 	mov	r5,r3
   4e3b4:	1009883a 	mov	r4,r2
   4e3b8:	00406840 	call	40684 <main>
   4e3bc:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   4e3c0:	01000044 	movi	r4,1
   4e3c4:	004dbf00 	call	4dbf0 <close>
  exit (result);
   4e3c8:	e13fff17 	ldw	r4,-4(fp)
   4e3cc:	0050f500 	call	50f50 <exit>

0004e3d0 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   4e3d0:	defffe04 	addi	sp,sp,-8
   4e3d4:	df000115 	stw	fp,4(sp)
   4e3d8:	df000104 	addi	fp,sp,4
   4e3dc:	e13fff15 	stw	r4,-4(fp)
}
   4e3e0:	0001883a 	nop
   4e3e4:	e037883a 	mov	sp,fp
   4e3e8:	df000017 	ldw	fp,0(sp)
   4e3ec:	dec00104 	addi	sp,sp,4
   4e3f0:	f800283a 	ret

0004e3f4 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   4e3f4:	defffe04 	addi	sp,sp,-8
   4e3f8:	df000115 	stw	fp,4(sp)
   4e3fc:	df000104 	addi	fp,sp,4
   4e400:	e13fff15 	stw	r4,-4(fp)
}
   4e404:	0001883a 	nop
   4e408:	e037883a 	mov	sp,fp
   4e40c:	df000017 	ldw	fp,0(sp)
   4e410:	dec00104 	addi	sp,sp,4
   4e414:	f800283a 	ret

0004e418 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4e418:	defffe04 	addi	sp,sp,-8
   4e41c:	dfc00115 	stw	ra,4(sp)
   4e420:	df000015 	stw	fp,0(sp)
   4e424:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4e428:	d0a00b17 	ldw	r2,-32724(gp)
   4e42c:	10000326 	beq	r2,zero,4e43c <alt_get_errno+0x24>
   4e430:	d0a00b17 	ldw	r2,-32724(gp)
   4e434:	103ee83a 	callr	r2
   4e438:	00000106 	br	4e440 <alt_get_errno+0x28>
   4e43c:	d0a71904 	addi	r2,gp,-25500
}
   4e440:	e037883a 	mov	sp,fp
   4e444:	dfc00117 	ldw	ra,4(sp)
   4e448:	df000017 	ldw	fp,0(sp)
   4e44c:	dec00204 	addi	sp,sp,8
   4e450:	f800283a 	ret

0004e454 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   4e454:	defffd04 	addi	sp,sp,-12
   4e458:	df000215 	stw	fp,8(sp)
   4e45c:	df000204 	addi	fp,sp,8
   4e460:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   4e464:	e0bfff17 	ldw	r2,-4(fp)
   4e468:	10800217 	ldw	r2,8(r2)
   4e46c:	10d00034 	orhi	r3,r2,16384
   4e470:	e0bfff17 	ldw	r2,-4(fp)
   4e474:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   4e478:	e03ffe15 	stw	zero,-8(fp)
   4e47c:	00001d06 	br	4e4f4 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   4e480:	00800174 	movhi	r2,5
   4e484:	1088aa04 	addi	r2,r2,8872
   4e488:	e0fffe17 	ldw	r3,-8(fp)
   4e48c:	18c00324 	muli	r3,r3,12
   4e490:	10c5883a 	add	r2,r2,r3
   4e494:	10c00017 	ldw	r3,0(r2)
   4e498:	e0bfff17 	ldw	r2,-4(fp)
   4e49c:	10800017 	ldw	r2,0(r2)
   4e4a0:	1880111e 	bne	r3,r2,4e4e8 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   4e4a4:	00800174 	movhi	r2,5
   4e4a8:	1088aa04 	addi	r2,r2,8872
   4e4ac:	e0fffe17 	ldw	r3,-8(fp)
   4e4b0:	18c00324 	muli	r3,r3,12
   4e4b4:	10c5883a 	add	r2,r2,r3
   4e4b8:	10800204 	addi	r2,r2,8
   4e4bc:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   4e4c0:	1000090e 	bge	r2,zero,4e4e8 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   4e4c4:	e0bffe17 	ldw	r2,-8(fp)
   4e4c8:	10c00324 	muli	r3,r2,12
   4e4cc:	00800174 	movhi	r2,5
   4e4d0:	1088aa04 	addi	r2,r2,8872
   4e4d4:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   4e4d8:	e0bfff17 	ldw	r2,-4(fp)
   4e4dc:	18800226 	beq	r3,r2,4e4e8 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   4e4e0:	00bffcc4 	movi	r2,-13
   4e4e4:	00000806 	br	4e508 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   4e4e8:	e0bffe17 	ldw	r2,-8(fp)
   4e4ec:	10800044 	addi	r2,r2,1
   4e4f0:	e0bffe15 	stw	r2,-8(fp)
   4e4f4:	d0a00a17 	ldw	r2,-32728(gp)
   4e4f8:	1007883a 	mov	r3,r2
   4e4fc:	e0bffe17 	ldw	r2,-8(fp)
   4e500:	18bfdf2e 	bgeu	r3,r2,4e480 <__alt_data_end+0xfffdc480>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   4e504:	0005883a 	mov	r2,zero
}
   4e508:	e037883a 	mov	sp,fp
   4e50c:	df000017 	ldw	fp,0(sp)
   4e510:	dec00104 	addi	sp,sp,4
   4e514:	f800283a 	ret

0004e518 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   4e518:	defff604 	addi	sp,sp,-40
   4e51c:	dfc00915 	stw	ra,36(sp)
   4e520:	df000815 	stw	fp,32(sp)
   4e524:	df000804 	addi	fp,sp,32
   4e528:	e13ffd15 	stw	r4,-12(fp)
   4e52c:	e17ffe15 	stw	r5,-8(fp)
   4e530:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   4e534:	00bfffc4 	movi	r2,-1
   4e538:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   4e53c:	00bffb44 	movi	r2,-19
   4e540:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   4e544:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   4e548:	d1600804 	addi	r5,gp,-32736
   4e54c:	e13ffd17 	ldw	r4,-12(fp)
   4e550:	00508980 	call	50898 <alt_find_dev>
   4e554:	e0bff815 	stw	r2,-32(fp)
   4e558:	e0bff817 	ldw	r2,-32(fp)
   4e55c:	1000051e 	bne	r2,zero,4e574 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   4e560:	e13ffd17 	ldw	r4,-12(fp)
   4e564:	00509280 	call	50928 <alt_find_file>
   4e568:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   4e56c:	00800044 	movi	r2,1
   4e570:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   4e574:	e0bff817 	ldw	r2,-32(fp)
   4e578:	10002926 	beq	r2,zero,4e620 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   4e57c:	e13ff817 	ldw	r4,-32(fp)
   4e580:	0050a300 	call	50a30 <alt_get_fd>
   4e584:	e0bff915 	stw	r2,-28(fp)
   4e588:	e0bff917 	ldw	r2,-28(fp)
   4e58c:	1000030e 	bge	r2,zero,4e59c <open+0x84>
    {
      status = index;
   4e590:	e0bff917 	ldw	r2,-28(fp)
   4e594:	e0bffa15 	stw	r2,-24(fp)
   4e598:	00002306 	br	4e628 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   4e59c:	e0bff917 	ldw	r2,-28(fp)
   4e5a0:	10c00324 	muli	r3,r2,12
   4e5a4:	00800174 	movhi	r2,5
   4e5a8:	1088aa04 	addi	r2,r2,8872
   4e5ac:	1885883a 	add	r2,r3,r2
   4e5b0:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   4e5b4:	e0fffe17 	ldw	r3,-8(fp)
   4e5b8:	00900034 	movhi	r2,16384
   4e5bc:	10bfffc4 	addi	r2,r2,-1
   4e5c0:	1886703a 	and	r3,r3,r2
   4e5c4:	e0bffc17 	ldw	r2,-16(fp)
   4e5c8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   4e5cc:	e0bffb17 	ldw	r2,-20(fp)
   4e5d0:	1000051e 	bne	r2,zero,4e5e8 <open+0xd0>
   4e5d4:	e13ffc17 	ldw	r4,-16(fp)
   4e5d8:	004e4540 	call	4e454 <alt_file_locked>
   4e5dc:	e0bffa15 	stw	r2,-24(fp)
   4e5e0:	e0bffa17 	ldw	r2,-24(fp)
   4e5e4:	10001016 	blt	r2,zero,4e628 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   4e5e8:	e0bff817 	ldw	r2,-32(fp)
   4e5ec:	10800317 	ldw	r2,12(r2)
   4e5f0:	10000826 	beq	r2,zero,4e614 <open+0xfc>
   4e5f4:	e0bff817 	ldw	r2,-32(fp)
   4e5f8:	10800317 	ldw	r2,12(r2)
   4e5fc:	e1ffff17 	ldw	r7,-4(fp)
   4e600:	e1bffe17 	ldw	r6,-8(fp)
   4e604:	e17ffd17 	ldw	r5,-12(fp)
   4e608:	e13ffc17 	ldw	r4,-16(fp)
   4e60c:	103ee83a 	callr	r2
   4e610:	00000106 	br	4e618 <open+0x100>
   4e614:	0005883a 	mov	r2,zero
   4e618:	e0bffa15 	stw	r2,-24(fp)
   4e61c:	00000206 	br	4e628 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   4e620:	00bffb44 	movi	r2,-19
   4e624:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   4e628:	e0bffa17 	ldw	r2,-24(fp)
   4e62c:	1000090e 	bge	r2,zero,4e654 <open+0x13c>
  {
    alt_release_fd (index);  
   4e630:	e13ff917 	ldw	r4,-28(fp)
   4e634:	004e7a40 	call	4e7a4 <alt_release_fd>
    ALT_ERRNO = -status;
   4e638:	004e4180 	call	4e418 <alt_get_errno>
   4e63c:	1007883a 	mov	r3,r2
   4e640:	e0bffa17 	ldw	r2,-24(fp)
   4e644:	0085c83a 	sub	r2,zero,r2
   4e648:	18800015 	stw	r2,0(r3)
    return -1;
   4e64c:	00bfffc4 	movi	r2,-1
   4e650:	00000106 	br	4e658 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   4e654:	e0bff917 	ldw	r2,-28(fp)
}
   4e658:	e037883a 	mov	sp,fp
   4e65c:	dfc00117 	ldw	ra,4(sp)
   4e660:	df000017 	ldw	fp,0(sp)
   4e664:	dec00204 	addi	sp,sp,8
   4e668:	f800283a 	ret

0004e66c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4e66c:	defffe04 	addi	sp,sp,-8
   4e670:	dfc00115 	stw	ra,4(sp)
   4e674:	df000015 	stw	fp,0(sp)
   4e678:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4e67c:	d0a00b17 	ldw	r2,-32724(gp)
   4e680:	10000326 	beq	r2,zero,4e690 <alt_get_errno+0x24>
   4e684:	d0a00b17 	ldw	r2,-32724(gp)
   4e688:	103ee83a 	callr	r2
   4e68c:	00000106 	br	4e694 <alt_get_errno+0x28>
   4e690:	d0a71904 	addi	r2,gp,-25500
}
   4e694:	e037883a 	mov	sp,fp
   4e698:	dfc00117 	ldw	ra,4(sp)
   4e69c:	df000017 	ldw	fp,0(sp)
   4e6a0:	dec00204 	addi	sp,sp,8
   4e6a4:	f800283a 	ret

0004e6a8 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   4e6a8:	defff904 	addi	sp,sp,-28
   4e6ac:	dfc00615 	stw	ra,24(sp)
   4e6b0:	df000515 	stw	fp,20(sp)
   4e6b4:	df000504 	addi	fp,sp,20
   4e6b8:	e13ffd15 	stw	r4,-12(fp)
   4e6bc:	e17ffe15 	stw	r5,-8(fp)
   4e6c0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4e6c4:	e0bffd17 	ldw	r2,-12(fp)
   4e6c8:	10000616 	blt	r2,zero,4e6e4 <read+0x3c>
   4e6cc:	e0bffd17 	ldw	r2,-12(fp)
   4e6d0:	10c00324 	muli	r3,r2,12
   4e6d4:	00800174 	movhi	r2,5
   4e6d8:	1088aa04 	addi	r2,r2,8872
   4e6dc:	1885883a 	add	r2,r3,r2
   4e6e0:	00000106 	br	4e6e8 <read+0x40>
   4e6e4:	0005883a 	mov	r2,zero
   4e6e8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   4e6ec:	e0bffb17 	ldw	r2,-20(fp)
   4e6f0:	10002226 	beq	r2,zero,4e77c <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   4e6f4:	e0bffb17 	ldw	r2,-20(fp)
   4e6f8:	10800217 	ldw	r2,8(r2)
   4e6fc:	108000cc 	andi	r2,r2,3
   4e700:	10800060 	cmpeqi	r2,r2,1
   4e704:	1000181e 	bne	r2,zero,4e768 <read+0xc0>
        (fd->dev->read))
   4e708:	e0bffb17 	ldw	r2,-20(fp)
   4e70c:	10800017 	ldw	r2,0(r2)
   4e710:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   4e714:	10001426 	beq	r2,zero,4e768 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   4e718:	e0bffb17 	ldw	r2,-20(fp)
   4e71c:	10800017 	ldw	r2,0(r2)
   4e720:	10800517 	ldw	r2,20(r2)
   4e724:	e0ffff17 	ldw	r3,-4(fp)
   4e728:	180d883a 	mov	r6,r3
   4e72c:	e17ffe17 	ldw	r5,-8(fp)
   4e730:	e13ffb17 	ldw	r4,-20(fp)
   4e734:	103ee83a 	callr	r2
   4e738:	e0bffc15 	stw	r2,-16(fp)
   4e73c:	e0bffc17 	ldw	r2,-16(fp)
   4e740:	1000070e 	bge	r2,zero,4e760 <read+0xb8>
        {
          ALT_ERRNO = -rval;
   4e744:	004e66c0 	call	4e66c <alt_get_errno>
   4e748:	1007883a 	mov	r3,r2
   4e74c:	e0bffc17 	ldw	r2,-16(fp)
   4e750:	0085c83a 	sub	r2,zero,r2
   4e754:	18800015 	stw	r2,0(r3)
          return -1;
   4e758:	00bfffc4 	movi	r2,-1
   4e75c:	00000c06 	br	4e790 <read+0xe8>
        }
        return rval;
   4e760:	e0bffc17 	ldw	r2,-16(fp)
   4e764:	00000a06 	br	4e790 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
   4e768:	004e66c0 	call	4e66c <alt_get_errno>
   4e76c:	1007883a 	mov	r3,r2
   4e770:	00800344 	movi	r2,13
   4e774:	18800015 	stw	r2,0(r3)
   4e778:	00000406 	br	4e78c <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   4e77c:	004e66c0 	call	4e66c <alt_get_errno>
   4e780:	1007883a 	mov	r3,r2
   4e784:	00801444 	movi	r2,81
   4e788:	18800015 	stw	r2,0(r3)
  }
  return -1;
   4e78c:	00bfffc4 	movi	r2,-1
}
   4e790:	e037883a 	mov	sp,fp
   4e794:	dfc00117 	ldw	ra,4(sp)
   4e798:	df000017 	ldw	fp,0(sp)
   4e79c:	dec00204 	addi	sp,sp,8
   4e7a0:	f800283a 	ret

0004e7a4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   4e7a4:	defffe04 	addi	sp,sp,-8
   4e7a8:	df000115 	stw	fp,4(sp)
   4e7ac:	df000104 	addi	fp,sp,4
   4e7b0:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   4e7b4:	e0bfff17 	ldw	r2,-4(fp)
   4e7b8:	108000d0 	cmplti	r2,r2,3
   4e7bc:	10000d1e 	bne	r2,zero,4e7f4 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   4e7c0:	00800174 	movhi	r2,5
   4e7c4:	1088aa04 	addi	r2,r2,8872
   4e7c8:	e0ffff17 	ldw	r3,-4(fp)
   4e7cc:	18c00324 	muli	r3,r3,12
   4e7d0:	10c5883a 	add	r2,r2,r3
   4e7d4:	10800204 	addi	r2,r2,8
   4e7d8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   4e7dc:	00800174 	movhi	r2,5
   4e7e0:	1088aa04 	addi	r2,r2,8872
   4e7e4:	e0ffff17 	ldw	r3,-4(fp)
   4e7e8:	18c00324 	muli	r3,r3,12
   4e7ec:	10c5883a 	add	r2,r2,r3
   4e7f0:	10000015 	stw	zero,0(r2)
  }
}
   4e7f4:	0001883a 	nop
   4e7f8:	e037883a 	mov	sp,fp
   4e7fc:	df000017 	ldw	fp,0(sp)
   4e800:	dec00104 	addi	sp,sp,4
   4e804:	f800283a 	ret

0004e808 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   4e808:	defff904 	addi	sp,sp,-28
   4e80c:	df000615 	stw	fp,24(sp)
   4e810:	df000604 	addi	fp,sp,24
   4e814:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4e818:	0005303a 	rdctl	r2,status
   4e81c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4e820:	e0fffe17 	ldw	r3,-8(fp)
   4e824:	00bfff84 	movi	r2,-2
   4e828:	1884703a 	and	r2,r3,r2
   4e82c:	1001703a 	wrctl	status,r2
  
  return context;
   4e830:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   4e834:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   4e838:	d0a00d17 	ldw	r2,-32716(gp)
   4e83c:	10c000c4 	addi	r3,r2,3
   4e840:	00bfff04 	movi	r2,-4
   4e844:	1884703a 	and	r2,r3,r2
   4e848:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   4e84c:	d0e00d17 	ldw	r3,-32716(gp)
   4e850:	e0bfff17 	ldw	r2,-4(fp)
   4e854:	1887883a 	add	r3,r3,r2
   4e858:	008001f4 	movhi	r2,7
   4e85c:	10880004 	addi	r2,r2,8192
   4e860:	10c0062e 	bgeu	r2,r3,4e87c <sbrk+0x74>
   4e864:	e0bffb17 	ldw	r2,-20(fp)
   4e868:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4e86c:	e0bffa17 	ldw	r2,-24(fp)
   4e870:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   4e874:	00bfffc4 	movi	r2,-1
   4e878:	00000b06 	br	4e8a8 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   4e87c:	d0a00d17 	ldw	r2,-32716(gp)
   4e880:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   4e884:	d0e00d17 	ldw	r3,-32716(gp)
   4e888:	e0bfff17 	ldw	r2,-4(fp)
   4e88c:	1885883a 	add	r2,r3,r2
   4e890:	d0a00d15 	stw	r2,-32716(gp)
   4e894:	e0bffb17 	ldw	r2,-20(fp)
   4e898:	e0bffc15 	stw	r2,-16(fp)
   4e89c:	e0bffc17 	ldw	r2,-16(fp)
   4e8a0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   4e8a4:	e0bffd17 	ldw	r2,-12(fp)
} 
   4e8a8:	e037883a 	mov	sp,fp
   4e8ac:	df000017 	ldw	fp,0(sp)
   4e8b0:	dec00104 	addi	sp,sp,4
   4e8b4:	f800283a 	ret

0004e8b8 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   4e8b8:	defffd04 	addi	sp,sp,-12
   4e8bc:	dfc00215 	stw	ra,8(sp)
   4e8c0:	df000115 	stw	fp,4(sp)
   4e8c4:	df000104 	addi	fp,sp,4
   4e8c8:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   4e8cc:	e13fff17 	ldw	r4,-4(fp)
   4e8d0:	00505580 	call	50558 <alt_busy_sleep>
}
   4e8d4:	e037883a 	mov	sp,fp
   4e8d8:	dfc00117 	ldw	ra,4(sp)
   4e8dc:	df000017 	ldw	fp,0(sp)
   4e8e0:	dec00204 	addi	sp,sp,8
   4e8e4:	f800283a 	ret

0004e8e8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4e8e8:	defffe04 	addi	sp,sp,-8
   4e8ec:	dfc00115 	stw	ra,4(sp)
   4e8f0:	df000015 	stw	fp,0(sp)
   4e8f4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4e8f8:	d0a00b17 	ldw	r2,-32724(gp)
   4e8fc:	10000326 	beq	r2,zero,4e90c <alt_get_errno+0x24>
   4e900:	d0a00b17 	ldw	r2,-32724(gp)
   4e904:	103ee83a 	callr	r2
   4e908:	00000106 	br	4e910 <alt_get_errno+0x28>
   4e90c:	d0a71904 	addi	r2,gp,-25500
}
   4e910:	e037883a 	mov	sp,fp
   4e914:	dfc00117 	ldw	ra,4(sp)
   4e918:	df000017 	ldw	fp,0(sp)
   4e91c:	dec00204 	addi	sp,sp,8
   4e920:	f800283a 	ret

0004e924 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   4e924:	defff904 	addi	sp,sp,-28
   4e928:	dfc00615 	stw	ra,24(sp)
   4e92c:	df000515 	stw	fp,20(sp)
   4e930:	df000504 	addi	fp,sp,20
   4e934:	e13ffd15 	stw	r4,-12(fp)
   4e938:	e17ffe15 	stw	r5,-8(fp)
   4e93c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4e940:	e0bffd17 	ldw	r2,-12(fp)
   4e944:	10000616 	blt	r2,zero,4e960 <write+0x3c>
   4e948:	e0bffd17 	ldw	r2,-12(fp)
   4e94c:	10c00324 	muli	r3,r2,12
   4e950:	00800174 	movhi	r2,5
   4e954:	1088aa04 	addi	r2,r2,8872
   4e958:	1885883a 	add	r2,r3,r2
   4e95c:	00000106 	br	4e964 <write+0x40>
   4e960:	0005883a 	mov	r2,zero
   4e964:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   4e968:	e0bffb17 	ldw	r2,-20(fp)
   4e96c:	10002126 	beq	r2,zero,4e9f4 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   4e970:	e0bffb17 	ldw	r2,-20(fp)
   4e974:	10800217 	ldw	r2,8(r2)
   4e978:	108000cc 	andi	r2,r2,3
   4e97c:	10001826 	beq	r2,zero,4e9e0 <write+0xbc>
   4e980:	e0bffb17 	ldw	r2,-20(fp)
   4e984:	10800017 	ldw	r2,0(r2)
   4e988:	10800617 	ldw	r2,24(r2)
   4e98c:	10001426 	beq	r2,zero,4e9e0 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   4e990:	e0bffb17 	ldw	r2,-20(fp)
   4e994:	10800017 	ldw	r2,0(r2)
   4e998:	10800617 	ldw	r2,24(r2)
   4e99c:	e0ffff17 	ldw	r3,-4(fp)
   4e9a0:	180d883a 	mov	r6,r3
   4e9a4:	e17ffe17 	ldw	r5,-8(fp)
   4e9a8:	e13ffb17 	ldw	r4,-20(fp)
   4e9ac:	103ee83a 	callr	r2
   4e9b0:	e0bffc15 	stw	r2,-16(fp)
   4e9b4:	e0bffc17 	ldw	r2,-16(fp)
   4e9b8:	1000070e 	bge	r2,zero,4e9d8 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   4e9bc:	004e8e80 	call	4e8e8 <alt_get_errno>
   4e9c0:	1007883a 	mov	r3,r2
   4e9c4:	e0bffc17 	ldw	r2,-16(fp)
   4e9c8:	0085c83a 	sub	r2,zero,r2
   4e9cc:	18800015 	stw	r2,0(r3)
        return -1;
   4e9d0:	00bfffc4 	movi	r2,-1
   4e9d4:	00000c06 	br	4ea08 <write+0xe4>
      }
      return rval;
   4e9d8:	e0bffc17 	ldw	r2,-16(fp)
   4e9dc:	00000a06 	br	4ea08 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   4e9e0:	004e8e80 	call	4e8e8 <alt_get_errno>
   4e9e4:	1007883a 	mov	r3,r2
   4e9e8:	00800344 	movi	r2,13
   4e9ec:	18800015 	stw	r2,0(r3)
   4e9f0:	00000406 	br	4ea04 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   4e9f4:	004e8e80 	call	4e8e8 <alt_get_errno>
   4e9f8:	1007883a 	mov	r3,r2
   4e9fc:	00801444 	movi	r2,81
   4ea00:	18800015 	stw	r2,0(r3)
  }
  return -1;
   4ea04:	00bfffc4 	movi	r2,-1
}
   4ea08:	e037883a 	mov	sp,fp
   4ea0c:	dfc00117 	ldw	ra,4(sp)
   4ea10:	df000017 	ldw	fp,0(sp)
   4ea14:	dec00204 	addi	sp,sp,8
   4ea18:	f800283a 	ret

0004ea1c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   4ea1c:	defffd04 	addi	sp,sp,-12
   4ea20:	dfc00215 	stw	ra,8(sp)
   4ea24:	df000115 	stw	fp,4(sp)
   4ea28:	df000104 	addi	fp,sp,4
   4ea2c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   4ea30:	d1600804 	addi	r5,gp,-32736
   4ea34:	e13fff17 	ldw	r4,-4(fp)
   4ea38:	00507340 	call	50734 <alt_dev_llist_insert>
}
   4ea3c:	e037883a 	mov	sp,fp
   4ea40:	dfc00117 	ldw	ra,4(sp)
   4ea44:	df000017 	ldw	fp,0(sp)
   4ea48:	dec00204 	addi	sp,sp,8
   4ea4c:	f800283a 	ret

0004ea50 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   4ea50:	defffd04 	addi	sp,sp,-12
   4ea54:	dfc00215 	stw	ra,8(sp)
   4ea58:	df000115 	stw	fp,4(sp)
   4ea5c:	df000104 	addi	fp,sp,4
   4ea60:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU_LAB5, cpu_lab5);
   4ea64:	0050e880 	call	50e88 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   4ea68:	00800044 	movi	r2,1
   4ea6c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   4ea70:	0001883a 	nop
   4ea74:	e037883a 	mov	sp,fp
   4ea78:	dfc00117 	ldw	ra,4(sp)
   4ea7c:	df000017 	ldw	fp,0(sp)
   4ea80:	dec00204 	addi	sp,sp,8
   4ea84:	f800283a 	ret

0004ea88 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   4ea88:	defffe04 	addi	sp,sp,-8
   4ea8c:	dfc00115 	stw	ra,4(sp)
   4ea90:	df000015 	stw	fp,0(sp)
   4ea94:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   4ea98:	000d883a 	mov	r6,zero
   4ea9c:	000b883a 	mov	r5,zero
   4eaa0:	01000174 	movhi	r4,5
   4eaa4:	21091404 	addi	r4,r4,9296
   4eaa8:	004ec4c0 	call	4ec4c <altera_avalon_jtag_uart_init>
   4eaac:	01000174 	movhi	r4,5
   4eab0:	21090a04 	addi	r4,r4,9256
   4eab4:	004ea1c0 	call	4ea1c <alt_dev_reg>
    ALTERA_AVALON_LCD_16207_INIT ( LCD_DISPLAY, lcd_display);
   4eab8:	01000174 	movhi	r4,5
   4eabc:	210d2c04 	addi	r4,r4,13488
   4eac0:	00502980 	call	50298 <altera_avalon_lcd_16207_init>
   4eac4:	01000174 	movhi	r4,5
   4eac8:	210d2204 	addi	r4,r4,13448
   4eacc:	004ea1c0 	call	4ea1c <alt_dev_reg>
}
   4ead0:	0001883a 	nop
   4ead4:	e037883a 	mov	sp,fp
   4ead8:	dfc00117 	ldw	ra,4(sp)
   4eadc:	df000017 	ldw	fp,0(sp)
   4eae0:	dec00204 	addi	sp,sp,8
   4eae4:	f800283a 	ret

0004eae8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   4eae8:	defffa04 	addi	sp,sp,-24
   4eaec:	dfc00515 	stw	ra,20(sp)
   4eaf0:	df000415 	stw	fp,16(sp)
   4eaf4:	df000404 	addi	fp,sp,16
   4eaf8:	e13ffd15 	stw	r4,-12(fp)
   4eafc:	e17ffe15 	stw	r5,-8(fp)
   4eb00:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   4eb04:	e0bffd17 	ldw	r2,-12(fp)
   4eb08:	10800017 	ldw	r2,0(r2)
   4eb0c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   4eb10:	e0bffc17 	ldw	r2,-16(fp)
   4eb14:	10c00a04 	addi	r3,r2,40
   4eb18:	e0bffd17 	ldw	r2,-12(fp)
   4eb1c:	10800217 	ldw	r2,8(r2)
   4eb20:	100f883a 	mov	r7,r2
   4eb24:	e1bfff17 	ldw	r6,-4(fp)
   4eb28:	e17ffe17 	ldw	r5,-8(fp)
   4eb2c:	1809883a 	mov	r4,r3
   4eb30:	004f1100 	call	4f110 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   4eb34:	e037883a 	mov	sp,fp
   4eb38:	dfc00117 	ldw	ra,4(sp)
   4eb3c:	df000017 	ldw	fp,0(sp)
   4eb40:	dec00204 	addi	sp,sp,8
   4eb44:	f800283a 	ret

0004eb48 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   4eb48:	defffa04 	addi	sp,sp,-24
   4eb4c:	dfc00515 	stw	ra,20(sp)
   4eb50:	df000415 	stw	fp,16(sp)
   4eb54:	df000404 	addi	fp,sp,16
   4eb58:	e13ffd15 	stw	r4,-12(fp)
   4eb5c:	e17ffe15 	stw	r5,-8(fp)
   4eb60:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   4eb64:	e0bffd17 	ldw	r2,-12(fp)
   4eb68:	10800017 	ldw	r2,0(r2)
   4eb6c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   4eb70:	e0bffc17 	ldw	r2,-16(fp)
   4eb74:	10c00a04 	addi	r3,r2,40
   4eb78:	e0bffd17 	ldw	r2,-12(fp)
   4eb7c:	10800217 	ldw	r2,8(r2)
   4eb80:	100f883a 	mov	r7,r2
   4eb84:	e1bfff17 	ldw	r6,-4(fp)
   4eb88:	e17ffe17 	ldw	r5,-8(fp)
   4eb8c:	1809883a 	mov	r4,r3
   4eb90:	004f32c0 	call	4f32c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   4eb94:	e037883a 	mov	sp,fp
   4eb98:	dfc00117 	ldw	ra,4(sp)
   4eb9c:	df000017 	ldw	fp,0(sp)
   4eba0:	dec00204 	addi	sp,sp,8
   4eba4:	f800283a 	ret

0004eba8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   4eba8:	defffc04 	addi	sp,sp,-16
   4ebac:	dfc00315 	stw	ra,12(sp)
   4ebb0:	df000215 	stw	fp,8(sp)
   4ebb4:	df000204 	addi	fp,sp,8
   4ebb8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   4ebbc:	e0bfff17 	ldw	r2,-4(fp)
   4ebc0:	10800017 	ldw	r2,0(r2)
   4ebc4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   4ebc8:	e0bffe17 	ldw	r2,-8(fp)
   4ebcc:	10c00a04 	addi	r3,r2,40
   4ebd0:	e0bfff17 	ldw	r2,-4(fp)
   4ebd4:	10800217 	ldw	r2,8(r2)
   4ebd8:	100b883a 	mov	r5,r2
   4ebdc:	1809883a 	mov	r4,r3
   4ebe0:	004efb80 	call	4efb8 <altera_avalon_jtag_uart_close>
}
   4ebe4:	e037883a 	mov	sp,fp
   4ebe8:	dfc00117 	ldw	ra,4(sp)
   4ebec:	df000017 	ldw	fp,0(sp)
   4ebf0:	dec00204 	addi	sp,sp,8
   4ebf4:	f800283a 	ret

0004ebf8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   4ebf8:	defffa04 	addi	sp,sp,-24
   4ebfc:	dfc00515 	stw	ra,20(sp)
   4ec00:	df000415 	stw	fp,16(sp)
   4ec04:	df000404 	addi	fp,sp,16
   4ec08:	e13ffd15 	stw	r4,-12(fp)
   4ec0c:	e17ffe15 	stw	r5,-8(fp)
   4ec10:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   4ec14:	e0bffd17 	ldw	r2,-12(fp)
   4ec18:	10800017 	ldw	r2,0(r2)
   4ec1c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   4ec20:	e0bffc17 	ldw	r2,-16(fp)
   4ec24:	10800a04 	addi	r2,r2,40
   4ec28:	e1bfff17 	ldw	r6,-4(fp)
   4ec2c:	e17ffe17 	ldw	r5,-8(fp)
   4ec30:	1009883a 	mov	r4,r2
   4ec34:	004f0200 	call	4f020 <altera_avalon_jtag_uart_ioctl>
}
   4ec38:	e037883a 	mov	sp,fp
   4ec3c:	dfc00117 	ldw	ra,4(sp)
   4ec40:	df000017 	ldw	fp,0(sp)
   4ec44:	dec00204 	addi	sp,sp,8
   4ec48:	f800283a 	ret

0004ec4c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   4ec4c:	defffa04 	addi	sp,sp,-24
   4ec50:	dfc00515 	stw	ra,20(sp)
   4ec54:	df000415 	stw	fp,16(sp)
   4ec58:	df000404 	addi	fp,sp,16
   4ec5c:	e13ffd15 	stw	r4,-12(fp)
   4ec60:	e17ffe15 	stw	r5,-8(fp)
   4ec64:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   4ec68:	e0bffd17 	ldw	r2,-12(fp)
   4ec6c:	00c00044 	movi	r3,1
   4ec70:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   4ec74:	e0bffd17 	ldw	r2,-12(fp)
   4ec78:	10800017 	ldw	r2,0(r2)
   4ec7c:	10800104 	addi	r2,r2,4
   4ec80:	1007883a 	mov	r3,r2
   4ec84:	e0bffd17 	ldw	r2,-12(fp)
   4ec88:	10800817 	ldw	r2,32(r2)
   4ec8c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   4ec90:	e0bffe17 	ldw	r2,-8(fp)
   4ec94:	e0ffff17 	ldw	r3,-4(fp)
   4ec98:	d8000015 	stw	zero,0(sp)
   4ec9c:	e1fffd17 	ldw	r7,-12(fp)
   4eca0:	01800174 	movhi	r6,5
   4eca4:	31bb4304 	addi	r6,r6,-4852
   4eca8:	180b883a 	mov	r5,r3
   4ecac:	1009883a 	mov	r4,r2
   4ecb0:	004ddd80 	call	4ddd8 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   4ecb4:	e0bffd17 	ldw	r2,-12(fp)
   4ecb8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   4ecbc:	e0bffd17 	ldw	r2,-12(fp)
   4ecc0:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   4ecc4:	d0e72517 	ldw	r3,-25452(gp)
   4ecc8:	e1fffd17 	ldw	r7,-12(fp)
   4eccc:	01800174 	movhi	r6,5
   4ecd0:	31bbc604 	addi	r6,r6,-4328
   4ecd4:	180b883a 	mov	r5,r3
   4ecd8:	1009883a 	mov	r4,r2
   4ecdc:	005042c0 	call	5042c <alt_alarm_start>
   4ece0:	1000040e 	bge	r2,zero,4ecf4 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   4ece4:	e0fffd17 	ldw	r3,-12(fp)
   4ece8:	00a00034 	movhi	r2,32768
   4ecec:	10bfffc4 	addi	r2,r2,-1
   4ecf0:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   4ecf4:	0001883a 	nop
   4ecf8:	e037883a 	mov	sp,fp
   4ecfc:	dfc00117 	ldw	ra,4(sp)
   4ed00:	df000017 	ldw	fp,0(sp)
   4ed04:	dec00204 	addi	sp,sp,8
   4ed08:	f800283a 	ret

0004ed0c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   4ed0c:	defff804 	addi	sp,sp,-32
   4ed10:	df000715 	stw	fp,28(sp)
   4ed14:	df000704 	addi	fp,sp,28
   4ed18:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   4ed1c:	e0bfff17 	ldw	r2,-4(fp)
   4ed20:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   4ed24:	e0bffb17 	ldw	r2,-20(fp)
   4ed28:	10800017 	ldw	r2,0(r2)
   4ed2c:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   4ed30:	e0bffc17 	ldw	r2,-16(fp)
   4ed34:	10800104 	addi	r2,r2,4
   4ed38:	10800037 	ldwio	r2,0(r2)
   4ed3c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   4ed40:	e0bffd17 	ldw	r2,-12(fp)
   4ed44:	1080c00c 	andi	r2,r2,768
   4ed48:	10006d26 	beq	r2,zero,4ef00 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   4ed4c:	e0bffd17 	ldw	r2,-12(fp)
   4ed50:	1080400c 	andi	r2,r2,256
   4ed54:	10003526 	beq	r2,zero,4ee2c <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   4ed58:	00800074 	movhi	r2,1
   4ed5c:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4ed60:	e0bffb17 	ldw	r2,-20(fp)
   4ed64:	10800a17 	ldw	r2,40(r2)
   4ed68:	10800044 	addi	r2,r2,1
   4ed6c:	1081ffcc 	andi	r2,r2,2047
   4ed70:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   4ed74:	e0bffb17 	ldw	r2,-20(fp)
   4ed78:	10c00b17 	ldw	r3,44(r2)
   4ed7c:	e0bffe17 	ldw	r2,-8(fp)
   4ed80:	18801526 	beq	r3,r2,4edd8 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   4ed84:	e0bffc17 	ldw	r2,-16(fp)
   4ed88:	10800037 	ldwio	r2,0(r2)
   4ed8c:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   4ed90:	e0bff917 	ldw	r2,-28(fp)
   4ed94:	10a0000c 	andi	r2,r2,32768
   4ed98:	10001126 	beq	r2,zero,4ede0 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   4ed9c:	e0bffb17 	ldw	r2,-20(fp)
   4eda0:	10800a17 	ldw	r2,40(r2)
   4eda4:	e0fff917 	ldw	r3,-28(fp)
   4eda8:	1809883a 	mov	r4,r3
   4edac:	e0fffb17 	ldw	r3,-20(fp)
   4edb0:	1885883a 	add	r2,r3,r2
   4edb4:	10800e04 	addi	r2,r2,56
   4edb8:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4edbc:	e0bffb17 	ldw	r2,-20(fp)
   4edc0:	10800a17 	ldw	r2,40(r2)
   4edc4:	10800044 	addi	r2,r2,1
   4edc8:	10c1ffcc 	andi	r3,r2,2047
   4edcc:	e0bffb17 	ldw	r2,-20(fp)
   4edd0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   4edd4:	003fe206 	br	4ed60 <__alt_data_end+0xfffdcd60>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   4edd8:	0001883a 	nop
   4eddc:	00000106 	br	4ede4 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   4ede0:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   4ede4:	e0bff917 	ldw	r2,-28(fp)
   4ede8:	10bfffec 	andhi	r2,r2,65535
   4edec:	10000f26 	beq	r2,zero,4ee2c <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   4edf0:	e0bffb17 	ldw	r2,-20(fp)
   4edf4:	10c00817 	ldw	r3,32(r2)
   4edf8:	00bfff84 	movi	r2,-2
   4edfc:	1886703a 	and	r3,r3,r2
   4ee00:	e0bffb17 	ldw	r2,-20(fp)
   4ee04:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   4ee08:	e0bffc17 	ldw	r2,-16(fp)
   4ee0c:	10800104 	addi	r2,r2,4
   4ee10:	1007883a 	mov	r3,r2
   4ee14:	e0bffb17 	ldw	r2,-20(fp)
   4ee18:	10800817 	ldw	r2,32(r2)
   4ee1c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   4ee20:	e0bffc17 	ldw	r2,-16(fp)
   4ee24:	10800104 	addi	r2,r2,4
   4ee28:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   4ee2c:	e0bffd17 	ldw	r2,-12(fp)
   4ee30:	1080800c 	andi	r2,r2,512
   4ee34:	103fbe26 	beq	r2,zero,4ed30 <__alt_data_end+0xfffdcd30>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   4ee38:	e0bffd17 	ldw	r2,-12(fp)
   4ee3c:	1004d43a 	srli	r2,r2,16
   4ee40:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   4ee44:	00001406 	br	4ee98 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   4ee48:	e0bffc17 	ldw	r2,-16(fp)
   4ee4c:	e0fffb17 	ldw	r3,-20(fp)
   4ee50:	18c00d17 	ldw	r3,52(r3)
   4ee54:	e13ffb17 	ldw	r4,-20(fp)
   4ee58:	20c7883a 	add	r3,r4,r3
   4ee5c:	18c20e04 	addi	r3,r3,2104
   4ee60:	18c00003 	ldbu	r3,0(r3)
   4ee64:	18c03fcc 	andi	r3,r3,255
   4ee68:	18c0201c 	xori	r3,r3,128
   4ee6c:	18ffe004 	addi	r3,r3,-128
   4ee70:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4ee74:	e0bffb17 	ldw	r2,-20(fp)
   4ee78:	10800d17 	ldw	r2,52(r2)
   4ee7c:	10800044 	addi	r2,r2,1
   4ee80:	10c1ffcc 	andi	r3,r2,2047
   4ee84:	e0bffb17 	ldw	r2,-20(fp)
   4ee88:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   4ee8c:	e0bffa17 	ldw	r2,-24(fp)
   4ee90:	10bfffc4 	addi	r2,r2,-1
   4ee94:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   4ee98:	e0bffa17 	ldw	r2,-24(fp)
   4ee9c:	10000526 	beq	r2,zero,4eeb4 <altera_avalon_jtag_uart_irq+0x1a8>
   4eea0:	e0bffb17 	ldw	r2,-20(fp)
   4eea4:	10c00d17 	ldw	r3,52(r2)
   4eea8:	e0bffb17 	ldw	r2,-20(fp)
   4eeac:	10800c17 	ldw	r2,48(r2)
   4eeb0:	18bfe51e 	bne	r3,r2,4ee48 <__alt_data_end+0xfffdce48>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   4eeb4:	e0bffa17 	ldw	r2,-24(fp)
   4eeb8:	103f9d26 	beq	r2,zero,4ed30 <__alt_data_end+0xfffdcd30>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   4eebc:	e0bffb17 	ldw	r2,-20(fp)
   4eec0:	10c00817 	ldw	r3,32(r2)
   4eec4:	00bfff44 	movi	r2,-3
   4eec8:	1886703a 	and	r3,r3,r2
   4eecc:	e0bffb17 	ldw	r2,-20(fp)
   4eed0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   4eed4:	e0bffb17 	ldw	r2,-20(fp)
   4eed8:	10800017 	ldw	r2,0(r2)
   4eedc:	10800104 	addi	r2,r2,4
   4eee0:	1007883a 	mov	r3,r2
   4eee4:	e0bffb17 	ldw	r2,-20(fp)
   4eee8:	10800817 	ldw	r2,32(r2)
   4eeec:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   4eef0:	e0bffc17 	ldw	r2,-16(fp)
   4eef4:	10800104 	addi	r2,r2,4
   4eef8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   4eefc:	003f8c06 	br	4ed30 <__alt_data_end+0xfffdcd30>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   4ef00:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   4ef04:	0001883a 	nop
   4ef08:	e037883a 	mov	sp,fp
   4ef0c:	df000017 	ldw	fp,0(sp)
   4ef10:	dec00104 	addi	sp,sp,4
   4ef14:	f800283a 	ret

0004ef18 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   4ef18:	defff804 	addi	sp,sp,-32
   4ef1c:	df000715 	stw	fp,28(sp)
   4ef20:	df000704 	addi	fp,sp,28
   4ef24:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   4ef28:	e0bffb17 	ldw	r2,-20(fp)
   4ef2c:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   4ef30:	e0bff917 	ldw	r2,-28(fp)
   4ef34:	10800017 	ldw	r2,0(r2)
   4ef38:	10800104 	addi	r2,r2,4
   4ef3c:	10800037 	ldwio	r2,0(r2)
   4ef40:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   4ef44:	e0bffa17 	ldw	r2,-24(fp)
   4ef48:	1081000c 	andi	r2,r2,1024
   4ef4c:	10000b26 	beq	r2,zero,4ef7c <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   4ef50:	e0bff917 	ldw	r2,-28(fp)
   4ef54:	10800017 	ldw	r2,0(r2)
   4ef58:	10800104 	addi	r2,r2,4
   4ef5c:	1007883a 	mov	r3,r2
   4ef60:	e0bff917 	ldw	r2,-28(fp)
   4ef64:	10800817 	ldw	r2,32(r2)
   4ef68:	10810014 	ori	r2,r2,1024
   4ef6c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   4ef70:	e0bff917 	ldw	r2,-28(fp)
   4ef74:	10000915 	stw	zero,36(r2)
   4ef78:	00000a06 	br	4efa4 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   4ef7c:	e0bff917 	ldw	r2,-28(fp)
   4ef80:	10c00917 	ldw	r3,36(r2)
   4ef84:	00a00034 	movhi	r2,32768
   4ef88:	10bfff04 	addi	r2,r2,-4
   4ef8c:	10c00536 	bltu	r2,r3,4efa4 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   4ef90:	e0bff917 	ldw	r2,-28(fp)
   4ef94:	10800917 	ldw	r2,36(r2)
   4ef98:	10c00044 	addi	r3,r2,1
   4ef9c:	e0bff917 	ldw	r2,-28(fp)
   4efa0:	10c00915 	stw	r3,36(r2)
   4efa4:	d0a72517 	ldw	r2,-25452(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   4efa8:	e037883a 	mov	sp,fp
   4efac:	df000017 	ldw	fp,0(sp)
   4efb0:	dec00104 	addi	sp,sp,4
   4efb4:	f800283a 	ret

0004efb8 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   4efb8:	defffd04 	addi	sp,sp,-12
   4efbc:	df000215 	stw	fp,8(sp)
   4efc0:	df000204 	addi	fp,sp,8
   4efc4:	e13ffe15 	stw	r4,-8(fp)
   4efc8:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   4efcc:	00000506 	br	4efe4 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   4efd0:	e0bfff17 	ldw	r2,-4(fp)
   4efd4:	1090000c 	andi	r2,r2,16384
   4efd8:	10000226 	beq	r2,zero,4efe4 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   4efdc:	00bffd44 	movi	r2,-11
   4efe0:	00000b06 	br	4f010 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   4efe4:	e0bffe17 	ldw	r2,-8(fp)
   4efe8:	10c00d17 	ldw	r3,52(r2)
   4efec:	e0bffe17 	ldw	r2,-8(fp)
   4eff0:	10800c17 	ldw	r2,48(r2)
   4eff4:	18800526 	beq	r3,r2,4f00c <altera_avalon_jtag_uart_close+0x54>
   4eff8:	e0bffe17 	ldw	r2,-8(fp)
   4effc:	10c00917 	ldw	r3,36(r2)
   4f000:	e0bffe17 	ldw	r2,-8(fp)
   4f004:	10800117 	ldw	r2,4(r2)
   4f008:	18bff136 	bltu	r3,r2,4efd0 <__alt_data_end+0xfffdcfd0>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   4f00c:	0005883a 	mov	r2,zero
}
   4f010:	e037883a 	mov	sp,fp
   4f014:	df000017 	ldw	fp,0(sp)
   4f018:	dec00104 	addi	sp,sp,4
   4f01c:	f800283a 	ret

0004f020 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   4f020:	defffa04 	addi	sp,sp,-24
   4f024:	df000515 	stw	fp,20(sp)
   4f028:	df000504 	addi	fp,sp,20
   4f02c:	e13ffd15 	stw	r4,-12(fp)
   4f030:	e17ffe15 	stw	r5,-8(fp)
   4f034:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   4f038:	00bff9c4 	movi	r2,-25
   4f03c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   4f040:	e0bffe17 	ldw	r2,-8(fp)
   4f044:	10da8060 	cmpeqi	r3,r2,27137
   4f048:	1800031e 	bne	r3,zero,4f058 <altera_avalon_jtag_uart_ioctl+0x38>
   4f04c:	109a80a0 	cmpeqi	r2,r2,27138
   4f050:	1000181e 	bne	r2,zero,4f0b4 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   4f054:	00002906 	br	4f0fc <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   4f058:	e0bffd17 	ldw	r2,-12(fp)
   4f05c:	10c00117 	ldw	r3,4(r2)
   4f060:	00a00034 	movhi	r2,32768
   4f064:	10bfffc4 	addi	r2,r2,-1
   4f068:	18802126 	beq	r3,r2,4f0f0 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   4f06c:	e0bfff17 	ldw	r2,-4(fp)
   4f070:	10800017 	ldw	r2,0(r2)
   4f074:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   4f078:	e0bffc17 	ldw	r2,-16(fp)
   4f07c:	10800090 	cmplti	r2,r2,2
   4f080:	1000061e 	bne	r2,zero,4f09c <altera_avalon_jtag_uart_ioctl+0x7c>
   4f084:	e0fffc17 	ldw	r3,-16(fp)
   4f088:	00a00034 	movhi	r2,32768
   4f08c:	10bfffc4 	addi	r2,r2,-1
   4f090:	18800226 	beq	r3,r2,4f09c <altera_avalon_jtag_uart_ioctl+0x7c>
   4f094:	e0bffc17 	ldw	r2,-16(fp)
   4f098:	00000206 	br	4f0a4 <altera_avalon_jtag_uart_ioctl+0x84>
   4f09c:	00a00034 	movhi	r2,32768
   4f0a0:	10bfff84 	addi	r2,r2,-2
   4f0a4:	e0fffd17 	ldw	r3,-12(fp)
   4f0a8:	18800115 	stw	r2,4(r3)
      rc = 0;
   4f0ac:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   4f0b0:	00000f06 	br	4f0f0 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   4f0b4:	e0bffd17 	ldw	r2,-12(fp)
   4f0b8:	10c00117 	ldw	r3,4(r2)
   4f0bc:	00a00034 	movhi	r2,32768
   4f0c0:	10bfffc4 	addi	r2,r2,-1
   4f0c4:	18800c26 	beq	r3,r2,4f0f8 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   4f0c8:	e0bffd17 	ldw	r2,-12(fp)
   4f0cc:	10c00917 	ldw	r3,36(r2)
   4f0d0:	e0bffd17 	ldw	r2,-12(fp)
   4f0d4:	10800117 	ldw	r2,4(r2)
   4f0d8:	1885803a 	cmpltu	r2,r3,r2
   4f0dc:	10c03fcc 	andi	r3,r2,255
   4f0e0:	e0bfff17 	ldw	r2,-4(fp)
   4f0e4:	10c00015 	stw	r3,0(r2)
      rc = 0;
   4f0e8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   4f0ec:	00000206 	br	4f0f8 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   4f0f0:	0001883a 	nop
   4f0f4:	00000106 	br	4f0fc <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   4f0f8:	0001883a 	nop

  default:
    break;
  }

  return rc;
   4f0fc:	e0bffb17 	ldw	r2,-20(fp)
}
   4f100:	e037883a 	mov	sp,fp
   4f104:	df000017 	ldw	fp,0(sp)
   4f108:	dec00104 	addi	sp,sp,4
   4f10c:	f800283a 	ret

0004f110 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   4f110:	defff304 	addi	sp,sp,-52
   4f114:	dfc00c15 	stw	ra,48(sp)
   4f118:	df000b15 	stw	fp,44(sp)
   4f11c:	df000b04 	addi	fp,sp,44
   4f120:	e13ffc15 	stw	r4,-16(fp)
   4f124:	e17ffd15 	stw	r5,-12(fp)
   4f128:	e1bffe15 	stw	r6,-8(fp)
   4f12c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   4f130:	e0bffd17 	ldw	r2,-12(fp)
   4f134:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   4f138:	00004706 	br	4f258 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   4f13c:	e0bffc17 	ldw	r2,-16(fp)
   4f140:	10800a17 	ldw	r2,40(r2)
   4f144:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   4f148:	e0bffc17 	ldw	r2,-16(fp)
   4f14c:	10800b17 	ldw	r2,44(r2)
   4f150:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   4f154:	e0fff717 	ldw	r3,-36(fp)
   4f158:	e0bff817 	ldw	r2,-32(fp)
   4f15c:	18800536 	bltu	r3,r2,4f174 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   4f160:	e0fff717 	ldw	r3,-36(fp)
   4f164:	e0bff817 	ldw	r2,-32(fp)
   4f168:	1885c83a 	sub	r2,r3,r2
   4f16c:	e0bff615 	stw	r2,-40(fp)
   4f170:	00000406 	br	4f184 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   4f174:	00c20004 	movi	r3,2048
   4f178:	e0bff817 	ldw	r2,-32(fp)
   4f17c:	1885c83a 	sub	r2,r3,r2
   4f180:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   4f184:	e0bff617 	ldw	r2,-40(fp)
   4f188:	10001e26 	beq	r2,zero,4f204 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   4f18c:	e0fffe17 	ldw	r3,-8(fp)
   4f190:	e0bff617 	ldw	r2,-40(fp)
   4f194:	1880022e 	bgeu	r3,r2,4f1a0 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   4f198:	e0bffe17 	ldw	r2,-8(fp)
   4f19c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   4f1a0:	e0bffc17 	ldw	r2,-16(fp)
   4f1a4:	10c00e04 	addi	r3,r2,56
   4f1a8:	e0bff817 	ldw	r2,-32(fp)
   4f1ac:	1885883a 	add	r2,r3,r2
   4f1b0:	e1bff617 	ldw	r6,-40(fp)
   4f1b4:	100b883a 	mov	r5,r2
   4f1b8:	e13ff517 	ldw	r4,-44(fp)
   4f1bc:	00472280 	call	47228 <memcpy>
      ptr   += n;
   4f1c0:	e0fff517 	ldw	r3,-44(fp)
   4f1c4:	e0bff617 	ldw	r2,-40(fp)
   4f1c8:	1885883a 	add	r2,r3,r2
   4f1cc:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   4f1d0:	e0fffe17 	ldw	r3,-8(fp)
   4f1d4:	e0bff617 	ldw	r2,-40(fp)
   4f1d8:	1885c83a 	sub	r2,r3,r2
   4f1dc:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4f1e0:	e0fff817 	ldw	r3,-32(fp)
   4f1e4:	e0bff617 	ldw	r2,-40(fp)
   4f1e8:	1885883a 	add	r2,r3,r2
   4f1ec:	10c1ffcc 	andi	r3,r2,2047
   4f1f0:	e0bffc17 	ldw	r2,-16(fp)
   4f1f4:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   4f1f8:	e0bffe17 	ldw	r2,-8(fp)
   4f1fc:	00bfcf16 	blt	zero,r2,4f13c <__alt_data_end+0xfffdd13c>
   4f200:	00000106 	br	4f208 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   4f204:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   4f208:	e0fff517 	ldw	r3,-44(fp)
   4f20c:	e0bffd17 	ldw	r2,-12(fp)
   4f210:	1880141e 	bne	r3,r2,4f264 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   4f214:	e0bfff17 	ldw	r2,-4(fp)
   4f218:	1090000c 	andi	r2,r2,16384
   4f21c:	1000131e 	bne	r2,zero,4f26c <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   4f220:	0001883a 	nop
   4f224:	e0bffc17 	ldw	r2,-16(fp)
   4f228:	10c00a17 	ldw	r3,40(r2)
   4f22c:	e0bff717 	ldw	r2,-36(fp)
   4f230:	1880051e 	bne	r3,r2,4f248 <altera_avalon_jtag_uart_read+0x138>
   4f234:	e0bffc17 	ldw	r2,-16(fp)
   4f238:	10c00917 	ldw	r3,36(r2)
   4f23c:	e0bffc17 	ldw	r2,-16(fp)
   4f240:	10800117 	ldw	r2,4(r2)
   4f244:	18bff736 	bltu	r3,r2,4f224 <__alt_data_end+0xfffdd224>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   4f248:	e0bffc17 	ldw	r2,-16(fp)
   4f24c:	10c00a17 	ldw	r3,40(r2)
   4f250:	e0bff717 	ldw	r2,-36(fp)
   4f254:	18800726 	beq	r3,r2,4f274 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   4f258:	e0bffe17 	ldw	r2,-8(fp)
   4f25c:	00bfb716 	blt	zero,r2,4f13c <__alt_data_end+0xfffdd13c>
   4f260:	00000506 	br	4f278 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   4f264:	0001883a 	nop
   4f268:	00000306 	br	4f278 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   4f26c:	0001883a 	nop
   4f270:	00000106 	br	4f278 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   4f274:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   4f278:	e0fff517 	ldw	r3,-44(fp)
   4f27c:	e0bffd17 	ldw	r2,-12(fp)
   4f280:	18801826 	beq	r3,r2,4f2e4 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4f284:	0005303a 	rdctl	r2,status
   4f288:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4f28c:	e0fffb17 	ldw	r3,-20(fp)
   4f290:	00bfff84 	movi	r2,-2
   4f294:	1884703a 	and	r2,r3,r2
   4f298:	1001703a 	wrctl	status,r2
  
  return context;
   4f29c:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   4f2a0:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   4f2a4:	e0bffc17 	ldw	r2,-16(fp)
   4f2a8:	10800817 	ldw	r2,32(r2)
   4f2ac:	10c00054 	ori	r3,r2,1
   4f2b0:	e0bffc17 	ldw	r2,-16(fp)
   4f2b4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   4f2b8:	e0bffc17 	ldw	r2,-16(fp)
   4f2bc:	10800017 	ldw	r2,0(r2)
   4f2c0:	10800104 	addi	r2,r2,4
   4f2c4:	1007883a 	mov	r3,r2
   4f2c8:	e0bffc17 	ldw	r2,-16(fp)
   4f2cc:	10800817 	ldw	r2,32(r2)
   4f2d0:	18800035 	stwio	r2,0(r3)
   4f2d4:	e0bffa17 	ldw	r2,-24(fp)
   4f2d8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4f2dc:	e0bff917 	ldw	r2,-28(fp)
   4f2e0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   4f2e4:	e0fff517 	ldw	r3,-44(fp)
   4f2e8:	e0bffd17 	ldw	r2,-12(fp)
   4f2ec:	18800426 	beq	r3,r2,4f300 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   4f2f0:	e0fff517 	ldw	r3,-44(fp)
   4f2f4:	e0bffd17 	ldw	r2,-12(fp)
   4f2f8:	1885c83a 	sub	r2,r3,r2
   4f2fc:	00000606 	br	4f318 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   4f300:	e0bfff17 	ldw	r2,-4(fp)
   4f304:	1090000c 	andi	r2,r2,16384
   4f308:	10000226 	beq	r2,zero,4f314 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   4f30c:	00bffd44 	movi	r2,-11
   4f310:	00000106 	br	4f318 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   4f314:	00bffec4 	movi	r2,-5
}
   4f318:	e037883a 	mov	sp,fp
   4f31c:	dfc00117 	ldw	ra,4(sp)
   4f320:	df000017 	ldw	fp,0(sp)
   4f324:	dec00204 	addi	sp,sp,8
   4f328:	f800283a 	ret

0004f32c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   4f32c:	defff304 	addi	sp,sp,-52
   4f330:	dfc00c15 	stw	ra,48(sp)
   4f334:	df000b15 	stw	fp,44(sp)
   4f338:	df000b04 	addi	fp,sp,44
   4f33c:	e13ffc15 	stw	r4,-16(fp)
   4f340:	e17ffd15 	stw	r5,-12(fp)
   4f344:	e1bffe15 	stw	r6,-8(fp)
   4f348:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   4f34c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   4f350:	e0bffd17 	ldw	r2,-12(fp)
   4f354:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   4f358:	00003706 	br	4f438 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   4f35c:	e0bffc17 	ldw	r2,-16(fp)
   4f360:	10800c17 	ldw	r2,48(r2)
   4f364:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   4f368:	e0bffc17 	ldw	r2,-16(fp)
   4f36c:	10800d17 	ldw	r2,52(r2)
   4f370:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   4f374:	e0fff917 	ldw	r3,-28(fp)
   4f378:	e0bff517 	ldw	r2,-44(fp)
   4f37c:	1880062e 	bgeu	r3,r2,4f398 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   4f380:	e0fff517 	ldw	r3,-44(fp)
   4f384:	e0bff917 	ldw	r2,-28(fp)
   4f388:	1885c83a 	sub	r2,r3,r2
   4f38c:	10bfffc4 	addi	r2,r2,-1
   4f390:	e0bff615 	stw	r2,-40(fp)
   4f394:	00000b06 	br	4f3c4 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   4f398:	e0bff517 	ldw	r2,-44(fp)
   4f39c:	10000526 	beq	r2,zero,4f3b4 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   4f3a0:	00c20004 	movi	r3,2048
   4f3a4:	e0bff917 	ldw	r2,-28(fp)
   4f3a8:	1885c83a 	sub	r2,r3,r2
   4f3ac:	e0bff615 	stw	r2,-40(fp)
   4f3b0:	00000406 	br	4f3c4 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   4f3b4:	00c1ffc4 	movi	r3,2047
   4f3b8:	e0bff917 	ldw	r2,-28(fp)
   4f3bc:	1885c83a 	sub	r2,r3,r2
   4f3c0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   4f3c4:	e0bff617 	ldw	r2,-40(fp)
   4f3c8:	10001e26 	beq	r2,zero,4f444 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   4f3cc:	e0fffe17 	ldw	r3,-8(fp)
   4f3d0:	e0bff617 	ldw	r2,-40(fp)
   4f3d4:	1880022e 	bgeu	r3,r2,4f3e0 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   4f3d8:	e0bffe17 	ldw	r2,-8(fp)
   4f3dc:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   4f3e0:	e0bffc17 	ldw	r2,-16(fp)
   4f3e4:	10c20e04 	addi	r3,r2,2104
   4f3e8:	e0bff917 	ldw	r2,-28(fp)
   4f3ec:	1885883a 	add	r2,r3,r2
   4f3f0:	e1bff617 	ldw	r6,-40(fp)
   4f3f4:	e17ffd17 	ldw	r5,-12(fp)
   4f3f8:	1009883a 	mov	r4,r2
   4f3fc:	00472280 	call	47228 <memcpy>
      ptr   += n;
   4f400:	e0fffd17 	ldw	r3,-12(fp)
   4f404:	e0bff617 	ldw	r2,-40(fp)
   4f408:	1885883a 	add	r2,r3,r2
   4f40c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   4f410:	e0fffe17 	ldw	r3,-8(fp)
   4f414:	e0bff617 	ldw	r2,-40(fp)
   4f418:	1885c83a 	sub	r2,r3,r2
   4f41c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4f420:	e0fff917 	ldw	r3,-28(fp)
   4f424:	e0bff617 	ldw	r2,-40(fp)
   4f428:	1885883a 	add	r2,r3,r2
   4f42c:	10c1ffcc 	andi	r3,r2,2047
   4f430:	e0bffc17 	ldw	r2,-16(fp)
   4f434:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   4f438:	e0bffe17 	ldw	r2,-8(fp)
   4f43c:	00bfc716 	blt	zero,r2,4f35c <__alt_data_end+0xfffdd35c>
   4f440:	00000106 	br	4f448 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   4f444:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4f448:	0005303a 	rdctl	r2,status
   4f44c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4f450:	e0fffb17 	ldw	r3,-20(fp)
   4f454:	00bfff84 	movi	r2,-2
   4f458:	1884703a 	and	r2,r3,r2
   4f45c:	1001703a 	wrctl	status,r2
  
  return context;
   4f460:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   4f464:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   4f468:	e0bffc17 	ldw	r2,-16(fp)
   4f46c:	10800817 	ldw	r2,32(r2)
   4f470:	10c00094 	ori	r3,r2,2
   4f474:	e0bffc17 	ldw	r2,-16(fp)
   4f478:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   4f47c:	e0bffc17 	ldw	r2,-16(fp)
   4f480:	10800017 	ldw	r2,0(r2)
   4f484:	10800104 	addi	r2,r2,4
   4f488:	1007883a 	mov	r3,r2
   4f48c:	e0bffc17 	ldw	r2,-16(fp)
   4f490:	10800817 	ldw	r2,32(r2)
   4f494:	18800035 	stwio	r2,0(r3)
   4f498:	e0bffa17 	ldw	r2,-24(fp)
   4f49c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4f4a0:	e0bff817 	ldw	r2,-32(fp)
   4f4a4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   4f4a8:	e0bffe17 	ldw	r2,-8(fp)
   4f4ac:	0080100e 	bge	zero,r2,4f4f0 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   4f4b0:	e0bfff17 	ldw	r2,-4(fp)
   4f4b4:	1090000c 	andi	r2,r2,16384
   4f4b8:	1000101e 	bne	r2,zero,4f4fc <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   4f4bc:	0001883a 	nop
   4f4c0:	e0bffc17 	ldw	r2,-16(fp)
   4f4c4:	10c00d17 	ldw	r3,52(r2)
   4f4c8:	e0bff517 	ldw	r2,-44(fp)
   4f4cc:	1880051e 	bne	r3,r2,4f4e4 <altera_avalon_jtag_uart_write+0x1b8>
   4f4d0:	e0bffc17 	ldw	r2,-16(fp)
   4f4d4:	10c00917 	ldw	r3,36(r2)
   4f4d8:	e0bffc17 	ldw	r2,-16(fp)
   4f4dc:	10800117 	ldw	r2,4(r2)
   4f4e0:	18bff736 	bltu	r3,r2,4f4c0 <__alt_data_end+0xfffdd4c0>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   4f4e4:	e0bffc17 	ldw	r2,-16(fp)
   4f4e8:	10800917 	ldw	r2,36(r2)
   4f4ec:	1000051e 	bne	r2,zero,4f504 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   4f4f0:	e0bffe17 	ldw	r2,-8(fp)
   4f4f4:	00bfd016 	blt	zero,r2,4f438 <__alt_data_end+0xfffdd438>
   4f4f8:	00000306 	br	4f508 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   4f4fc:	0001883a 	nop
   4f500:	00000106 	br	4f508 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   4f504:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   4f508:	e0fffd17 	ldw	r3,-12(fp)
   4f50c:	e0bff717 	ldw	r2,-36(fp)
   4f510:	18800426 	beq	r3,r2,4f524 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   4f514:	e0fffd17 	ldw	r3,-12(fp)
   4f518:	e0bff717 	ldw	r2,-36(fp)
   4f51c:	1885c83a 	sub	r2,r3,r2
   4f520:	00000606 	br	4f53c <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   4f524:	e0bfff17 	ldw	r2,-4(fp)
   4f528:	1090000c 	andi	r2,r2,16384
   4f52c:	10000226 	beq	r2,zero,4f538 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   4f530:	00bffd44 	movi	r2,-11
   4f534:	00000106 	br	4f53c <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   4f538:	00bffec4 	movi	r2,-5
}
   4f53c:	e037883a 	mov	sp,fp
   4f540:	dfc00117 	ldw	ra,4(sp)
   4f544:	df000017 	ldw	fp,0(sp)
   4f548:	dec00204 	addi	sp,sp,8
   4f54c:	f800283a 	ret

0004f550 <lcd_write_command>:

/* --------------------------------------------------------------------- */

static void lcd_write_command(altera_avalon_lcd_16207_state* sp, 
  unsigned char command)
{
   4f550:	defffa04 	addi	sp,sp,-24
   4f554:	dfc00515 	stw	ra,20(sp)
   4f558:	df000415 	stw	fp,16(sp)
   4f55c:	df000404 	addi	fp,sp,16
   4f560:	e13ffe15 	stw	r4,-8(fp)
   4f564:	2805883a 	mov	r2,r5
   4f568:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
   4f56c:	e0bffe17 	ldw	r2,-8(fp)
   4f570:	10800017 	ldw	r2,0(r2)
   4f574:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
   4f578:	008003f4 	movhi	r2,15
   4f57c:	10909004 	addi	r2,r2,16960
   4f580:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
   4f584:	e0bffe17 	ldw	r2,-8(fp)
   4f588:	10800803 	ldbu	r2,32(r2)
   4f58c:	10803fcc 	andi	r2,r2,255
   4f590:	1080201c 	xori	r2,r2,128
   4f594:	10bfe004 	addi	r2,r2,-128
   4f598:	1000151e 	bne	r2,zero,4f5f0 <lcd_write_command+0xa0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
   4f59c:	00000906 	br	4f5c4 <lcd_write_command+0x74>
    if (--i == 0)
   4f5a0:	e0bffc17 	ldw	r2,-16(fp)
   4f5a4:	10bfffc4 	addi	r2,r2,-1
   4f5a8:	e0bffc15 	stw	r2,-16(fp)
   4f5ac:	e0bffc17 	ldw	r2,-16(fp)
   4f5b0:	1000041e 	bne	r2,zero,4f5c4 <lcd_write_command+0x74>
    {
      sp->broken = 1;
   4f5b4:	e0bffe17 	ldw	r2,-8(fp)
   4f5b8:	00c00044 	movi	r3,1
   4f5bc:	10c00805 	stb	r3,32(r2)
      return;
   4f5c0:	00000c06 	br	4f5f4 <lcd_write_command+0xa4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
   4f5c4:	e0bffd17 	ldw	r2,-12(fp)
   4f5c8:	10800104 	addi	r2,r2,4
   4f5cc:	10800037 	ldwio	r2,0(r2)
   4f5d0:	1080200c 	andi	r2,r2,128
   4f5d4:	103ff21e 	bne	r2,zero,4f5a0 <__alt_data_end+0xfffdd5a0>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
   4f5d8:	01001904 	movi	r4,100
   4f5dc:	004e8b80 	call	4e8b8 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
   4f5e0:	e0bffd17 	ldw	r2,-12(fp)
   4f5e4:	e0ffff03 	ldbu	r3,-4(fp)
   4f5e8:	10c00035 	stwio	r3,0(r2)
   4f5ec:	00000106 	br	4f5f4 <lcd_write_command+0xa4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
   4f5f0:	0001883a 	nop
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
}
   4f5f4:	e037883a 	mov	sp,fp
   4f5f8:	dfc00117 	ldw	ra,4(sp)
   4f5fc:	df000017 	ldw	fp,0(sp)
   4f600:	dec00204 	addi	sp,sp,8
   4f604:	f800283a 	ret

0004f608 <lcd_write_data>:

/* --------------------------------------------------------------------- */

static void lcd_write_data(altera_avalon_lcd_16207_state* sp, 
  unsigned char data)
{
   4f608:	defffa04 	addi	sp,sp,-24
   4f60c:	dfc00515 	stw	ra,20(sp)
   4f610:	df000415 	stw	fp,16(sp)
   4f614:	df000404 	addi	fp,sp,16
   4f618:	e13ffe15 	stw	r4,-8(fp)
   4f61c:	2805883a 	mov	r2,r5
   4f620:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
   4f624:	e0bffe17 	ldw	r2,-8(fp)
   4f628:	10800017 	ldw	r2,0(r2)
   4f62c:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
   4f630:	008003f4 	movhi	r2,15
   4f634:	10909004 	addi	r2,r2,16960
   4f638:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
   4f63c:	e0bffe17 	ldw	r2,-8(fp)
   4f640:	10800803 	ldbu	r2,32(r2)
   4f644:	10803fcc 	andi	r2,r2,255
   4f648:	1080201c 	xori	r2,r2,128
   4f64c:	10bfe004 	addi	r2,r2,-128
   4f650:	10001d1e 	bne	r2,zero,4f6c8 <lcd_write_data+0xc0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
   4f654:	00000906 	br	4f67c <lcd_write_data+0x74>
    if (--i == 0)
   4f658:	e0bffc17 	ldw	r2,-16(fp)
   4f65c:	10bfffc4 	addi	r2,r2,-1
   4f660:	e0bffc15 	stw	r2,-16(fp)
   4f664:	e0bffc17 	ldw	r2,-16(fp)
   4f668:	1000041e 	bne	r2,zero,4f67c <lcd_write_data+0x74>
    {
      sp->broken = 1;
   4f66c:	e0bffe17 	ldw	r2,-8(fp)
   4f670:	00c00044 	movi	r3,1
   4f674:	10c00805 	stb	r3,32(r2)
      return;
   4f678:	00001406 	br	4f6cc <lcd_write_data+0xc4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
   4f67c:	e0bffd17 	ldw	r2,-12(fp)
   4f680:	10800104 	addi	r2,r2,4
   4f684:	10800037 	ldwio	r2,0(r2)
   4f688:	1080200c 	andi	r2,r2,128
   4f68c:	103ff21e 	bne	r2,zero,4f658 <__alt_data_end+0xfffdd658>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
   4f690:	01001904 	movi	r4,100
   4f694:	004e8b80 	call	4e8b8 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);
   4f698:	e0bffd17 	ldw	r2,-12(fp)
   4f69c:	10800204 	addi	r2,r2,8
   4f6a0:	1007883a 	mov	r3,r2
   4f6a4:	e0bfff03 	ldbu	r2,-4(fp)
   4f6a8:	18800035 	stwio	r2,0(r3)

  sp->address++;
   4f6ac:	e0bffe17 	ldw	r2,-8(fp)
   4f6b0:	108008c3 	ldbu	r2,35(r2)
   4f6b4:	10800044 	addi	r2,r2,1
   4f6b8:	1007883a 	mov	r3,r2
   4f6bc:	e0bffe17 	ldw	r2,-8(fp)
   4f6c0:	10c008c5 	stb	r3,35(r2)
   4f6c4:	00000106 	br	4f6cc <lcd_write_data+0xc4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
   4f6c8:	0001883a 	nop
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);

  sp->address++;
}
   4f6cc:	e037883a 	mov	sp,fp
   4f6d0:	dfc00117 	ldw	ra,4(sp)
   4f6d4:	df000017 	ldw	fp,0(sp)
   4f6d8:	dec00204 	addi	sp,sp,8
   4f6dc:	f800283a 	ret

0004f6e0 <lcd_clear_screen>:

/* --------------------------------------------------------------------- */

static void lcd_clear_screen(altera_avalon_lcd_16207_state* sp)
{
   4f6e0:	defffc04 	addi	sp,sp,-16
   4f6e4:	dfc00315 	stw	ra,12(sp)
   4f6e8:	df000215 	stw	fp,8(sp)
   4f6ec:	df000204 	addi	fp,sp,8
   4f6f0:	e13fff15 	stw	r4,-4(fp)
  int y;

  lcd_write_command(sp, LCD_CMD_CLEAR);
   4f6f4:	01400044 	movi	r5,1
   4f6f8:	e13fff17 	ldw	r4,-4(fp)
   4f6fc:	004f5500 	call	4f550 <lcd_write_command>

  sp->x = 0;
   4f700:	e0bfff17 	ldw	r2,-4(fp)
   4f704:	10000845 	stb	zero,33(r2)
  sp->y = 0;
   4f708:	e0bfff17 	ldw	r2,-4(fp)
   4f70c:	10000885 	stb	zero,34(r2)
  sp->address = 0;
   4f710:	e0bfff17 	ldw	r2,-4(fp)
   4f714:	100008c5 	stb	zero,35(r2)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   4f718:	e03ffe15 	stw	zero,-8(fp)
   4f71c:	00001b06 	br	4f78c <lcd_clear_screen+0xac>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
   4f720:	e0bffe17 	ldw	r2,-8(fp)
   4f724:	108018e4 	muli	r2,r2,99
   4f728:	10801004 	addi	r2,r2,64
   4f72c:	e0ffff17 	ldw	r3,-4(fp)
   4f730:	1885883a 	add	r2,r3,r2
   4f734:	01801444 	movi	r6,81
   4f738:	01400804 	movi	r5,32
   4f73c:	1009883a 	mov	r4,r2
   4f740:	00419e80 	call	419e8 <memset>
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
   4f744:	e0bffe17 	ldw	r2,-8(fp)
   4f748:	108018e4 	muli	r2,r2,99
   4f74c:	10800c04 	addi	r2,r2,48
   4f750:	e0ffff17 	ldw	r3,-4(fp)
   4f754:	1885883a 	add	r2,r3,r2
   4f758:	01800404 	movi	r6,16
   4f75c:	01400804 	movi	r5,32
   4f760:	1009883a 	mov	r4,r2
   4f764:	00419e80 	call	419e8 <memset>
    sp->line[y].width = 0;
   4f768:	e0ffff17 	ldw	r3,-4(fp)
   4f76c:	e0bffe17 	ldw	r2,-8(fp)
   4f770:	108018e4 	muli	r2,r2,99
   4f774:	1885883a 	add	r2,r3,r2
   4f778:	10802444 	addi	r2,r2,145
   4f77c:	10000005 	stb	zero,0(r2)

  sp->x = 0;
  sp->y = 0;
  sp->address = 0;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   4f780:	e0bffe17 	ldw	r2,-8(fp)
   4f784:	10800044 	addi	r2,r2,1
   4f788:	e0bffe15 	stw	r2,-8(fp)
   4f78c:	e0bffe17 	ldw	r2,-8(fp)
   4f790:	10800090 	cmplti	r2,r2,2
   4f794:	103fe21e 	bne	r2,zero,4f720 <__alt_data_end+0xfffdd720>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    sp->line[y].width = 0;
  }
}
   4f798:	0001883a 	nop
   4f79c:	e037883a 	mov	sp,fp
   4f7a0:	dfc00117 	ldw	ra,4(sp)
   4f7a4:	df000017 	ldw	fp,0(sp)
   4f7a8:	dec00204 	addi	sp,sp,8
   4f7ac:	f800283a 	ret

0004f7b0 <lcd_repaint_screen>:

/* --------------------------------------------------------------------- */

static void lcd_repaint_screen(altera_avalon_lcd_16207_state* sp)
{
   4f7b0:	defff704 	addi	sp,sp,-36
   4f7b4:	dfc00815 	stw	ra,32(sp)
   4f7b8:	df000715 	stw	fp,28(sp)
   4f7bc:	df000704 	addi	fp,sp,28
   4f7c0:	e13fff15 	stw	r4,-4(fp)
  /* scrollpos controls how much the lines have scrolled round.  The speed
   * each line scrolls at is controlled by its speed variable - while
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;
   4f7c4:	e0bfff17 	ldw	r2,-4(fp)
   4f7c8:	10800943 	ldbu	r2,37(r2)
   4f7cc:	10803fcc 	andi	r2,r2,255
   4f7d0:	e0bffc15 	stw	r2,-16(fp)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   4f7d4:	e03ff915 	stw	zero,-28(fp)
   4f7d8:	00006706 	br	4f978 <lcd_repaint_screen+0x1c8>
  {
    int width  = sp->line[y].width;
   4f7dc:	e0ffff17 	ldw	r3,-4(fp)
   4f7e0:	e0bff917 	ldw	r2,-28(fp)
   4f7e4:	108018e4 	muli	r2,r2,99
   4f7e8:	1885883a 	add	r2,r3,r2
   4f7ec:	10802444 	addi	r2,r2,145
   4f7f0:	10800003 	ldbu	r2,0(r2)
   4f7f4:	10803fcc 	andi	r2,r2,255
   4f7f8:	1080201c 	xori	r2,r2,128
   4f7fc:	10bfe004 	addi	r2,r2,-128
   4f800:	e0bffd15 	stw	r2,-12(fp)
    int offset = (scrollpos * sp->line[y].speed) >> 8;
   4f804:	e0ffff17 	ldw	r3,-4(fp)
   4f808:	e0bff917 	ldw	r2,-28(fp)
   4f80c:	108018e4 	muli	r2,r2,99
   4f810:	1885883a 	add	r2,r3,r2
   4f814:	10802484 	addi	r2,r2,146
   4f818:	10800003 	ldbu	r2,0(r2)
   4f81c:	10c03fcc 	andi	r3,r2,255
   4f820:	e0bffc17 	ldw	r2,-16(fp)
   4f824:	1885383a 	mul	r2,r3,r2
   4f828:	1005d23a 	srai	r2,r2,8
   4f82c:	e0bffb15 	stw	r2,-20(fp)
    if (offset >= width)
   4f830:	e0fffb17 	ldw	r3,-20(fp)
   4f834:	e0bffd17 	ldw	r2,-12(fp)
   4f838:	18800116 	blt	r3,r2,4f840 <lcd_repaint_screen+0x90>
      offset = 0;
   4f83c:	e03ffb15 	stw	zero,-20(fp)

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
   4f840:	e03ffa15 	stw	zero,-24(fp)
   4f844:	00004606 	br	4f960 <lcd_repaint_screen+0x1b0>
    {
      char c = sp->line[y].data[(x + offset) % width];
   4f848:	e0fffa17 	ldw	r3,-24(fp)
   4f84c:	e0bffb17 	ldw	r2,-20(fp)
   4f850:	1885883a 	add	r2,r3,r2
   4f854:	e17ffd17 	ldw	r5,-12(fp)
   4f858:	1009883a 	mov	r4,r2
   4f85c:	00408bc0 	call	408bc <__modsi3>
   4f860:	1009883a 	mov	r4,r2
   4f864:	e0ffff17 	ldw	r3,-4(fp)
   4f868:	e0bff917 	ldw	r2,-28(fp)
   4f86c:	108018e4 	muli	r2,r2,99
   4f870:	1885883a 	add	r2,r3,r2
   4f874:	1105883a 	add	r2,r2,r4
   4f878:	10801004 	addi	r2,r2,64
   4f87c:	10800003 	ldbu	r2,0(r2)
   4f880:	e0bffe05 	stb	r2,-8(fp)

      /* Writing data takes 40us, so don't do it unless required */
      if (sp->line[y].visible[x] != c)
   4f884:	e0ffff17 	ldw	r3,-4(fp)
   4f888:	e0bff917 	ldw	r2,-28(fp)
   4f88c:	108018e4 	muli	r2,r2,99
   4f890:	1887883a 	add	r3,r3,r2
   4f894:	e0bffa17 	ldw	r2,-24(fp)
   4f898:	1885883a 	add	r2,r3,r2
   4f89c:	10800c04 	addi	r2,r2,48
   4f8a0:	10800003 	ldbu	r2,0(r2)
   4f8a4:	10c03fcc 	andi	r3,r2,255
   4f8a8:	18c0201c 	xori	r3,r3,128
   4f8ac:	18ffe004 	addi	r3,r3,-128
   4f8b0:	e0bffe07 	ldb	r2,-8(fp)
   4f8b4:	18802726 	beq	r3,r2,4f954 <lcd_repaint_screen+0x1a4>
      {
        unsigned char address = x + colstart[y];
   4f8b8:	e0fff917 	ldw	r3,-28(fp)
   4f8bc:	d0a00e04 	addi	r2,gp,-32712
   4f8c0:	1885883a 	add	r2,r3,r2
   4f8c4:	10800003 	ldbu	r2,0(r2)
   4f8c8:	1007883a 	mov	r3,r2
   4f8cc:	e0bffa17 	ldw	r2,-24(fp)
   4f8d0:	1885883a 	add	r2,r3,r2
   4f8d4:	e0bffe45 	stb	r2,-7(fp)

        if (address != sp->address)
   4f8d8:	e0fffe43 	ldbu	r3,-7(fp)
   4f8dc:	e0bfff17 	ldw	r2,-4(fp)
   4f8e0:	108008c3 	ldbu	r2,35(r2)
   4f8e4:	10803fcc 	andi	r2,r2,255
   4f8e8:	1080201c 	xori	r2,r2,128
   4f8ec:	10bfe004 	addi	r2,r2,-128
   4f8f0:	18800a26 	beq	r3,r2,4f91c <lcd_repaint_screen+0x16c>
        {
          lcd_write_command(sp, LCD_CMD_WRITE_DATA | address);
   4f8f4:	e0fffe43 	ldbu	r3,-7(fp)
   4f8f8:	00bfe004 	movi	r2,-128
   4f8fc:	1884b03a 	or	r2,r3,r2
   4f900:	10803fcc 	andi	r2,r2,255
   4f904:	100b883a 	mov	r5,r2
   4f908:	e13fff17 	ldw	r4,-4(fp)
   4f90c:	004f5500 	call	4f550 <lcd_write_command>
          sp->address = address;
   4f910:	e0fffe43 	ldbu	r3,-7(fp)
   4f914:	e0bfff17 	ldw	r2,-4(fp)
   4f918:	10c008c5 	stb	r3,35(r2)
        }

        lcd_write_data(sp, c);
   4f91c:	e0bffe03 	ldbu	r2,-8(fp)
   4f920:	10803fcc 	andi	r2,r2,255
   4f924:	100b883a 	mov	r5,r2
   4f928:	e13fff17 	ldw	r4,-4(fp)
   4f92c:	004f6080 	call	4f608 <lcd_write_data>
        sp->line[y].visible[x] = c;
   4f930:	e0ffff17 	ldw	r3,-4(fp)
   4f934:	e0bff917 	ldw	r2,-28(fp)
   4f938:	108018e4 	muli	r2,r2,99
   4f93c:	1887883a 	add	r3,r3,r2
   4f940:	e0bffa17 	ldw	r2,-24(fp)
   4f944:	1885883a 	add	r2,r3,r2
   4f948:	10800c04 	addi	r2,r2,48
   4f94c:	e0fffe03 	ldbu	r3,-8(fp)
   4f950:	10c00005 	stb	r3,0(r2)
    int width  = sp->line[y].width;
    int offset = (scrollpos * sp->line[y].speed) >> 8;
    if (offset >= width)
      offset = 0;

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
   4f954:	e0bffa17 	ldw	r2,-24(fp)
   4f958:	10800044 	addi	r2,r2,1
   4f95c:	e0bffa15 	stw	r2,-24(fp)
   4f960:	e0bffa17 	ldw	r2,-24(fp)
   4f964:	10800410 	cmplti	r2,r2,16
   4f968:	103fb71e 	bne	r2,zero,4f848 <__alt_data_end+0xfffdd848>
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   4f96c:	e0bff917 	ldw	r2,-28(fp)
   4f970:	10800044 	addi	r2,r2,1
   4f974:	e0bff915 	stw	r2,-28(fp)
   4f978:	e0bff917 	ldw	r2,-28(fp)
   4f97c:	10800090 	cmplti	r2,r2,2
   4f980:	103f961e 	bne	r2,zero,4f7dc <__alt_data_end+0xfffdd7dc>
        lcd_write_data(sp, c);
        sp->line[y].visible[x] = c;
      }
    }
  }
}
   4f984:	0001883a 	nop
   4f988:	e037883a 	mov	sp,fp
   4f98c:	dfc00117 	ldw	ra,4(sp)
   4f990:	df000017 	ldw	fp,0(sp)
   4f994:	dec00204 	addi	sp,sp,8
   4f998:	f800283a 	ret

0004f99c <lcd_scroll_up>:

/* --------------------------------------------------------------------- */

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
   4f99c:	defffc04 	addi	sp,sp,-16
   4f9a0:	dfc00315 	stw	ra,12(sp)
   4f9a4:	df000215 	stw	fp,8(sp)
   4f9a8:	df000204 	addi	fp,sp,8
   4f9ac:	e13fff15 	stw	r4,-4(fp)
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   4f9b0:	e03ffe15 	stw	zero,-8(fp)
   4f9b4:	00001d06 	br	4fa2c <lcd_scroll_up+0x90>
  {
    if (y < ALT_LCD_HEIGHT-1)
   4f9b8:	e0bffe17 	ldw	r2,-8(fp)
   4f9bc:	00800f16 	blt	zero,r2,4f9fc <lcd_scroll_up+0x60>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
   4f9c0:	e0bffe17 	ldw	r2,-8(fp)
   4f9c4:	108018e4 	muli	r2,r2,99
   4f9c8:	10801004 	addi	r2,r2,64
   4f9cc:	e0ffff17 	ldw	r3,-4(fp)
   4f9d0:	1889883a 	add	r4,r3,r2
   4f9d4:	e0bffe17 	ldw	r2,-8(fp)
   4f9d8:	10800044 	addi	r2,r2,1
   4f9dc:	108018e4 	muli	r2,r2,99
   4f9e0:	10801004 	addi	r2,r2,64
   4f9e4:	e0ffff17 	ldw	r3,-4(fp)
   4f9e8:	1885883a 	add	r2,r3,r2
   4f9ec:	01801404 	movi	r6,80
   4f9f0:	100b883a 	mov	r5,r2
   4f9f4:	00472280 	call	47228 <memcpy>
   4f9f8:	00000906 	br	4fa20 <lcd_scroll_up+0x84>
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
   4f9fc:	e0bffe17 	ldw	r2,-8(fp)
   4fa00:	108018e4 	muli	r2,r2,99
   4fa04:	10801004 	addi	r2,r2,64
   4fa08:	e0ffff17 	ldw	r3,-4(fp)
   4fa0c:	1885883a 	add	r2,r3,r2
   4fa10:	01801404 	movi	r6,80
   4fa14:	01400804 	movi	r5,32
   4fa18:	1009883a 	mov	r4,r2
   4fa1c:	00419e80 	call	419e8 <memset>

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   4fa20:	e0bffe17 	ldw	r2,-8(fp)
   4fa24:	10800044 	addi	r2,r2,1
   4fa28:	e0bffe15 	stw	r2,-8(fp)
   4fa2c:	e0bffe17 	ldw	r2,-8(fp)
   4fa30:	10800090 	cmplti	r2,r2,2
   4fa34:	103fe01e 	bne	r2,zero,4f9b8 <__alt_data_end+0xfffdd9b8>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  }

  sp->y--;
   4fa38:	e0bfff17 	ldw	r2,-4(fp)
   4fa3c:	10800883 	ldbu	r2,34(r2)
   4fa40:	10bfffc4 	addi	r2,r2,-1
   4fa44:	1007883a 	mov	r3,r2
   4fa48:	e0bfff17 	ldw	r2,-4(fp)
   4fa4c:	10c00885 	stb	r3,34(r2)
}
   4fa50:	0001883a 	nop
   4fa54:	e037883a 	mov	sp,fp
   4fa58:	dfc00117 	ldw	ra,4(sp)
   4fa5c:	df000017 	ldw	fp,0(sp)
   4fa60:	dec00204 	addi	sp,sp,8
   4fa64:	f800283a 	ret

0004fa68 <lcd_handle_escape>:

/* --------------------------------------------------------------------- */

static void lcd_handle_escape(altera_avalon_lcd_16207_state* sp, char c)
{
   4fa68:	defff904 	addi	sp,sp,-28
   4fa6c:	dfc00615 	stw	ra,24(sp)
   4fa70:	df000515 	stw	fp,20(sp)
   4fa74:	df000504 	addi	fp,sp,20
   4fa78:	e13ffe15 	stw	r4,-8(fp)
   4fa7c:	2805883a 	mov	r2,r5
   4fa80:	e0bfff05 	stb	r2,-4(fp)
  int parm1 = 0, parm2 = 0;
   4fa84:	e03ffb15 	stw	zero,-20(fp)
   4fa88:	e03ffc15 	stw	zero,-16(fp)

  if (sp->escape[0] == '[')
   4fa8c:	e0bffe17 	ldw	r2,-8(fp)
   4fa90:	10800a03 	ldbu	r2,40(r2)
   4fa94:	10803fcc 	andi	r2,r2,255
   4fa98:	1080201c 	xori	r2,r2,128
   4fa9c:	10bfe004 	addi	r2,r2,-128
   4faa0:	108016d8 	cmpnei	r2,r2,91
   4faa4:	1000411e 	bne	r2,zero,4fbac <lcd_handle_escape+0x144>
  {
    char * ptr = sp->escape+1;
   4faa8:	e0bffe17 	ldw	r2,-8(fp)
   4faac:	10800a04 	addi	r2,r2,40
   4fab0:	10800044 	addi	r2,r2,1
   4fab4:	e0bffd15 	stw	r2,-12(fp)
    while (isdigit(*ptr))
   4fab8:	00000c06 	br	4faec <lcd_handle_escape+0x84>
      parm1 = (parm1 * 10) + (*ptr++ - '0');
   4fabc:	e0bffb17 	ldw	r2,-20(fp)
   4fac0:	10c002a4 	muli	r3,r2,10
   4fac4:	e0bffd17 	ldw	r2,-12(fp)
   4fac8:	11000044 	addi	r4,r2,1
   4facc:	e13ffd15 	stw	r4,-12(fp)
   4fad0:	10800003 	ldbu	r2,0(r2)
   4fad4:	10803fcc 	andi	r2,r2,255
   4fad8:	1080201c 	xori	r2,r2,128
   4fadc:	10bfe004 	addi	r2,r2,-128
   4fae0:	10bff404 	addi	r2,r2,-48
   4fae4:	1885883a 	add	r2,r3,r2
   4fae8:	e0bffb15 	stw	r2,-20(fp)
  int parm1 = 0, parm2 = 0;

  if (sp->escape[0] == '[')
  {
    char * ptr = sp->escape+1;
    while (isdigit(*ptr))
   4faec:	d0e01117 	ldw	r3,-32700(gp)
   4faf0:	e0bffd17 	ldw	r2,-12(fp)
   4faf4:	10800003 	ldbu	r2,0(r2)
   4faf8:	10803fcc 	andi	r2,r2,255
   4fafc:	1080201c 	xori	r2,r2,128
   4fb00:	10bfe004 	addi	r2,r2,-128
   4fb04:	10800044 	addi	r2,r2,1
   4fb08:	1885883a 	add	r2,r3,r2
   4fb0c:	10800003 	ldbu	r2,0(r2)
   4fb10:	10803fcc 	andi	r2,r2,255
   4fb14:	1080010c 	andi	r2,r2,4
   4fb18:	103fe81e 	bne	r2,zero,4fabc <__alt_data_end+0xfffddabc>
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
   4fb1c:	e0bffd17 	ldw	r2,-12(fp)
   4fb20:	10800003 	ldbu	r2,0(r2)
   4fb24:	10803fcc 	andi	r2,r2,255
   4fb28:	1080201c 	xori	r2,r2,128
   4fb2c:	10bfe004 	addi	r2,r2,-128
   4fb30:	10800ed8 	cmpnei	r2,r2,59
   4fb34:	10001f1e 	bne	r2,zero,4fbb4 <lcd_handle_escape+0x14c>
    {
      ptr++;
   4fb38:	e0bffd17 	ldw	r2,-12(fp)
   4fb3c:	10800044 	addi	r2,r2,1
   4fb40:	e0bffd15 	stw	r2,-12(fp)
      while (isdigit(*ptr))
   4fb44:	00000c06 	br	4fb78 <lcd_handle_escape+0x110>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
   4fb48:	e0bffc17 	ldw	r2,-16(fp)
   4fb4c:	10c002a4 	muli	r3,r2,10
   4fb50:	e0bffd17 	ldw	r2,-12(fp)
   4fb54:	11000044 	addi	r4,r2,1
   4fb58:	e13ffd15 	stw	r4,-12(fp)
   4fb5c:	10800003 	ldbu	r2,0(r2)
   4fb60:	10803fcc 	andi	r2,r2,255
   4fb64:	1080201c 	xori	r2,r2,128
   4fb68:	10bfe004 	addi	r2,r2,-128
   4fb6c:	10bff404 	addi	r2,r2,-48
   4fb70:	1885883a 	add	r2,r3,r2
   4fb74:	e0bffc15 	stw	r2,-16(fp)
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
    {
      ptr++;
      while (isdigit(*ptr))
   4fb78:	d0e01117 	ldw	r3,-32700(gp)
   4fb7c:	e0bffd17 	ldw	r2,-12(fp)
   4fb80:	10800003 	ldbu	r2,0(r2)
   4fb84:	10803fcc 	andi	r2,r2,255
   4fb88:	1080201c 	xori	r2,r2,128
   4fb8c:	10bfe004 	addi	r2,r2,-128
   4fb90:	10800044 	addi	r2,r2,1
   4fb94:	1885883a 	add	r2,r3,r2
   4fb98:	10800003 	ldbu	r2,0(r2)
   4fb9c:	10803fcc 	andi	r2,r2,255
   4fba0:	1080010c 	andi	r2,r2,4
   4fba4:	103fe81e 	bne	r2,zero,4fb48 <__alt_data_end+0xfffddb48>
   4fba8:	00000206 	br	4fbb4 <lcd_handle_escape+0x14c>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
    }
  }
  else
    parm1 = -1;
   4fbac:	00bfffc4 	movi	r2,-1
   4fbb0:	e0bffb15 	stw	r2,-20(fp)

  switch (c)
   4fbb4:	e0bfff07 	ldb	r2,-4(fp)
   4fbb8:	10c012a0 	cmpeqi	r3,r2,74
   4fbbc:	1800291e 	bne	r3,zero,4fc64 <lcd_handle_escape+0x1fc>
   4fbc0:	10c012c8 	cmpgei	r3,r2,75
   4fbc4:	1800031e 	bne	r3,zero,4fbd4 <lcd_handle_escape+0x16c>
   4fbc8:	10801220 	cmpeqi	r2,r2,72
   4fbcc:	1000061e 	bne	r2,zero,4fbe8 <lcd_handle_escape+0x180>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
   4fbd0:	00004a06 	br	4fcfc <lcd_handle_escape+0x294>
    }
  }
  else
    parm1 = -1;

  switch (c)
   4fbd4:	10c012e0 	cmpeqi	r3,r2,75
   4fbd8:	1800281e 	bne	r3,zero,4fc7c <lcd_handle_escape+0x214>
   4fbdc:	108019a0 	cmpeqi	r2,r2,102
   4fbe0:	1000011e 	bne	r2,zero,4fbe8 <lcd_handle_escape+0x180>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
   4fbe4:	00004506 	br	4fcfc <lcd_handle_escape+0x294>

  switch (c)
  {
  case 'H': /* ESC '[' <y> ';' <x> 'H'  : Move cursor to location */
  case 'f': /* Same as above */
    if (parm2 > 0)
   4fbe8:	e0bffc17 	ldw	r2,-16(fp)
   4fbec:	0080050e 	bge	zero,r2,4fc04 <lcd_handle_escape+0x19c>
      sp->x = parm2 - 1;
   4fbf0:	e0bffc17 	ldw	r2,-16(fp)
   4fbf4:	10bfffc4 	addi	r2,r2,-1
   4fbf8:	1007883a 	mov	r3,r2
   4fbfc:	e0bffe17 	ldw	r2,-8(fp)
   4fc00:	10c00845 	stb	r3,33(r2)
    if (parm1 > 0)
   4fc04:	e0bffb17 	ldw	r2,-20(fp)
   4fc08:	0080370e 	bge	zero,r2,4fce8 <lcd_handle_escape+0x280>
    {
      sp->y = parm1 - 1;
   4fc0c:	e0bffb17 	ldw	r2,-20(fp)
   4fc10:	10bfffc4 	addi	r2,r2,-1
   4fc14:	1007883a 	mov	r3,r2
   4fc18:	e0bffe17 	ldw	r2,-8(fp)
   4fc1c:	10c00885 	stb	r3,34(r2)
      if (sp->y > ALT_LCD_HEIGHT * 2)
   4fc20:	e0bffe17 	ldw	r2,-8(fp)
   4fc24:	10800883 	ldbu	r2,34(r2)
   4fc28:	10803fcc 	andi	r2,r2,255
   4fc2c:	10800170 	cmpltui	r2,r2,5
   4fc30:	1000061e 	bne	r2,zero,4fc4c <lcd_handle_escape+0x1e4>
        sp->y = ALT_LCD_HEIGHT * 2;
   4fc34:	e0bffe17 	ldw	r2,-8(fp)
   4fc38:	00c00104 	movi	r3,4
   4fc3c:	10c00885 	stb	r3,34(r2)
      while (sp->y > ALT_LCD_HEIGHT)
   4fc40:	00000206 	br	4fc4c <lcd_handle_escape+0x1e4>
        lcd_scroll_up(sp);
   4fc44:	e13ffe17 	ldw	r4,-8(fp)
   4fc48:	004f99c0 	call	4f99c <lcd_scroll_up>
    if (parm1 > 0)
    {
      sp->y = parm1 - 1;
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
   4fc4c:	e0bffe17 	ldw	r2,-8(fp)
   4fc50:	10800883 	ldbu	r2,34(r2)
   4fc54:	10803fcc 	andi	r2,r2,255
   4fc58:	108000e8 	cmpgeui	r2,r2,3
   4fc5c:	103ff91e 	bne	r2,zero,4fc44 <__alt_data_end+0xfffddc44>
        lcd_scroll_up(sp);
    }
    break;
   4fc60:	00002106 	br	4fce8 <lcd_handle_escape+0x280>
    /*   ESC J      is clear to beginning of line    [unimplemented]
     *   ESC [ 0 J  is clear to bottom of screen     [unimplemented]
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
   4fc64:	e0bffb17 	ldw	r2,-20(fp)
   4fc68:	10800098 	cmpnei	r2,r2,2
   4fc6c:	1000201e 	bne	r2,zero,4fcf0 <lcd_handle_escape+0x288>
      lcd_clear_screen(sp);
   4fc70:	e13ffe17 	ldw	r4,-8(fp)
   4fc74:	004f6e00 	call	4f6e0 <lcd_clear_screen>
    break;
   4fc78:	00001d06 	br	4fcf0 <lcd_handle_escape+0x288>
    /*   ESC K      is clear to end of line
     *   ESC [ 0 K  is clear to end of line
     *   ESC [ 1 K  is clear to beginning of line    [unimplemented]
     *   ESC [ 2 K  is clear line                    [unimplemented]
     */
    if (parm1 < 1)
   4fc7c:	e0bffb17 	ldw	r2,-20(fp)
   4fc80:	00801d16 	blt	zero,r2,4fcf8 <lcd_handle_escape+0x290>
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
   4fc84:	e0bffe17 	ldw	r2,-8(fp)
   4fc88:	10800843 	ldbu	r2,33(r2)
   4fc8c:	10803fcc 	andi	r2,r2,255
   4fc90:	10801428 	cmpgeui	r2,r2,80
   4fc94:	1000181e 	bne	r2,zero,4fcf8 <lcd_handle_escape+0x290>
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
   4fc98:	e0bffe17 	ldw	r2,-8(fp)
   4fc9c:	10800883 	ldbu	r2,34(r2)
   4fca0:	10803fcc 	andi	r2,r2,255
   4fca4:	108018e4 	muli	r2,r2,99
   4fca8:	10801004 	addi	r2,r2,64
   4fcac:	e0fffe17 	ldw	r3,-8(fp)
   4fcb0:	1887883a 	add	r3,r3,r2
   4fcb4:	e0bffe17 	ldw	r2,-8(fp)
   4fcb8:	10800843 	ldbu	r2,33(r2)
   4fcbc:	10803fcc 	andi	r2,r2,255
   4fcc0:	1889883a 	add	r4,r3,r2
   4fcc4:	e0bffe17 	ldw	r2,-8(fp)
   4fcc8:	10800843 	ldbu	r2,33(r2)
   4fccc:	10803fcc 	andi	r2,r2,255
   4fcd0:	00c01404 	movi	r3,80
   4fcd4:	1885c83a 	sub	r2,r3,r2
   4fcd8:	100d883a 	mov	r6,r2
   4fcdc:	01400804 	movi	r5,32
   4fce0:	00419e80 	call	419e8 <memset>
    }
    break;
   4fce4:	00000406 	br	4fcf8 <lcd_handle_escape+0x290>
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
        lcd_scroll_up(sp);
    }
    break;
   4fce8:	0001883a 	nop
   4fcec:	00000306 	br	4fcfc <lcd_handle_escape+0x294>
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
      lcd_clear_screen(sp);
    break;
   4fcf0:	0001883a 	nop
   4fcf4:	00000106 	br	4fcfc <lcd_handle_escape+0x294>
    if (parm1 < 1)
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
   4fcf8:	0001883a 	nop
  }
}
   4fcfc:	0001883a 	nop
   4fd00:	e037883a 	mov	sp,fp
   4fd04:	dfc00117 	ldw	ra,4(sp)
   4fd08:	df000017 	ldw	fp,0(sp)
   4fd0c:	dec00204 	addi	sp,sp,8
   4fd10:	f800283a 	ret

0004fd14 <altera_avalon_lcd_16207_write>:

/* --------------------------------------------------------------------- */

int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp, 
  const char* ptr, int len, int flags)
{
   4fd14:	defff304 	addi	sp,sp,-52
   4fd18:	dfc00c15 	stw	ra,48(sp)
   4fd1c:	df000b15 	stw	fp,44(sp)
   4fd20:	df000b04 	addi	fp,sp,44
   4fd24:	e13ffc15 	stw	r4,-16(fp)
   4fd28:	e17ffd15 	stw	r5,-12(fp)
   4fd2c:	e1bffe15 	stw	r6,-8(fp)
   4fd30:	e1ffff15 	stw	r7,-4(fp)
  const char* end = ptr + len;
   4fd34:	e0bffe17 	ldw	r2,-8(fp)
   4fd38:	e0fffd17 	ldw	r3,-12(fp)
   4fd3c:	1885883a 	add	r2,r3,r2
   4fd40:	e0bff815 	stw	r2,-32(fp)

  ALT_SEM_PEND (sp->write_lock, 0);

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;
   4fd44:	e0bffc17 	ldw	r2,-16(fp)
   4fd48:	00c00044 	movi	r3,1
   4fd4c:	10c009c5 	stb	r3,39(r2)

  for ( ; ptr < end ; ptr++)
   4fd50:	00009906 	br	4ffb8 <altera_avalon_lcd_16207_write+0x2a4>
  {
    char c = *ptr;
   4fd54:	e0bffd17 	ldw	r2,-12(fp)
   4fd58:	10800003 	ldbu	r2,0(r2)
   4fd5c:	e0bff905 	stb	r2,-28(fp)

    if (sp->esccount >= 0)
   4fd60:	e0bffc17 	ldw	r2,-16(fp)
   4fd64:	10800903 	ldbu	r2,36(r2)
   4fd68:	10803fcc 	andi	r2,r2,255
   4fd6c:	1080201c 	xori	r2,r2,128
   4fd70:	10bfe004 	addi	r2,r2,-128
   4fd74:	10003716 	blt	r2,zero,4fe54 <altera_avalon_lcd_16207_write+0x140>
    {
      unsigned int esccount = sp->esccount;
   4fd78:	e0bffc17 	ldw	r2,-16(fp)
   4fd7c:	10800903 	ldbu	r2,36(r2)
   4fd80:	10803fcc 	andi	r2,r2,255
   4fd84:	1080201c 	xori	r2,r2,128
   4fd88:	10bfe004 	addi	r2,r2,-128
   4fd8c:	e0bffa15 	stw	r2,-24(fp)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
   4fd90:	e0bffa17 	ldw	r2,-24(fp)
   4fd94:	1000031e 	bne	r2,zero,4fda4 <altera_avalon_lcd_16207_write+0x90>
   4fd98:	e0bff907 	ldb	r2,-28(fp)
   4fd9c:	108016d8 	cmpnei	r2,r2,91
   4fda0:	10000d1e 	bne	r2,zero,4fdd8 <altera_avalon_lcd_16207_write+0xc4>
   4fda4:	e0bffa17 	ldw	r2,-24(fp)
   4fda8:	10001826 	beq	r2,zero,4fe0c <altera_avalon_lcd_16207_write+0xf8>
          (esccount > 0 && !isdigit(c) && c != ';'))
   4fdac:	d0e01117 	ldw	r3,-32700(gp)
   4fdb0:	e0bff907 	ldb	r2,-28(fp)
   4fdb4:	10800044 	addi	r2,r2,1
   4fdb8:	1885883a 	add	r2,r3,r2
   4fdbc:	10800003 	ldbu	r2,0(r2)
   4fdc0:	10803fcc 	andi	r2,r2,255
   4fdc4:	1080010c 	andi	r2,r2,4
   4fdc8:	1000101e 	bne	r2,zero,4fe0c <altera_avalon_lcd_16207_write+0xf8>
   4fdcc:	e0bff907 	ldb	r2,-28(fp)
   4fdd0:	10800ee0 	cmpeqi	r2,r2,59
   4fdd4:	10000d1e 	bne	r2,zero,4fe0c <altera_avalon_lcd_16207_write+0xf8>
      {
        sp->escape[esccount] = 0;
   4fdd8:	e0fffc17 	ldw	r3,-16(fp)
   4fddc:	e0bffa17 	ldw	r2,-24(fp)
   4fde0:	1885883a 	add	r2,r3,r2
   4fde4:	10800a04 	addi	r2,r2,40
   4fde8:	10000005 	stb	zero,0(r2)

        lcd_handle_escape(sp, c);
   4fdec:	e0bff907 	ldb	r2,-28(fp)
   4fdf0:	100b883a 	mov	r5,r2
   4fdf4:	e13ffc17 	ldw	r4,-16(fp)
   4fdf8:	004fa680 	call	4fa68 <lcd_handle_escape>

        sp->esccount = -1;
   4fdfc:	e0bffc17 	ldw	r2,-16(fp)
   4fe00:	00ffffc4 	movi	r3,-1
   4fe04:	10c00905 	stb	r3,36(r2)
   4fe08:	00006806 	br	4ffac <altera_avalon_lcd_16207_write+0x298>
      }
      else if (sp->esccount < sizeof(sp->escape)-1)
   4fe0c:	e0bffc17 	ldw	r2,-16(fp)
   4fe10:	10800903 	ldbu	r2,36(r2)
   4fe14:	10803fcc 	andi	r2,r2,255
   4fe18:	108001e8 	cmpgeui	r2,r2,7
   4fe1c:	1000631e 	bne	r2,zero,4ffac <altera_avalon_lcd_16207_write+0x298>
      {
        sp->escape[esccount] = c;
   4fe20:	e0fffc17 	ldw	r3,-16(fp)
   4fe24:	e0bffa17 	ldw	r2,-24(fp)
   4fe28:	1885883a 	add	r2,r3,r2
   4fe2c:	10800a04 	addi	r2,r2,40
   4fe30:	e0fff903 	ldbu	r3,-28(fp)
   4fe34:	10c00005 	stb	r3,0(r2)
        sp->esccount++;
   4fe38:	e0bffc17 	ldw	r2,-16(fp)
   4fe3c:	10800903 	ldbu	r2,36(r2)
   4fe40:	10800044 	addi	r2,r2,1
   4fe44:	1007883a 	mov	r3,r2
   4fe48:	e0bffc17 	ldw	r2,-16(fp)
   4fe4c:	10c00905 	stb	r3,36(r2)
   4fe50:	00005606 	br	4ffac <altera_avalon_lcd_16207_write+0x298>
      }
    }
    else if (c == 27) /* ESC */
   4fe54:	e0bff907 	ldb	r2,-28(fp)
   4fe58:	108006d8 	cmpnei	r2,r2,27
   4fe5c:	1000031e 	bne	r2,zero,4fe6c <altera_avalon_lcd_16207_write+0x158>
    {
      sp->esccount = 0;
   4fe60:	e0bffc17 	ldw	r2,-16(fp)
   4fe64:	10000905 	stb	zero,36(r2)
   4fe68:	00005006 	br	4ffac <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\r')
   4fe6c:	e0bff907 	ldb	r2,-28(fp)
   4fe70:	10800358 	cmpnei	r2,r2,13
   4fe74:	1000031e 	bne	r2,zero,4fe84 <altera_avalon_lcd_16207_write+0x170>
    {
      sp->x = 0;
   4fe78:	e0bffc17 	ldw	r2,-16(fp)
   4fe7c:	10000845 	stb	zero,33(r2)
   4fe80:	00004a06 	br	4ffac <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\n')
   4fe84:	e0bff907 	ldb	r2,-28(fp)
   4fe88:	10800298 	cmpnei	r2,r2,10
   4fe8c:	1000101e 	bne	r2,zero,4fed0 <altera_avalon_lcd_16207_write+0x1bc>
    {
      sp->x = 0;
   4fe90:	e0bffc17 	ldw	r2,-16(fp)
   4fe94:	10000845 	stb	zero,33(r2)
      sp->y++;
   4fe98:	e0bffc17 	ldw	r2,-16(fp)
   4fe9c:	10800883 	ldbu	r2,34(r2)
   4fea0:	10800044 	addi	r2,r2,1
   4fea4:	1007883a 	mov	r3,r2
   4fea8:	e0bffc17 	ldw	r2,-16(fp)
   4feac:	10c00885 	stb	r3,34(r2)

      /* Let the cursor sit at X=0, Y=HEIGHT without scrolling so the user
       * can print two lines of data without losing one.
       */
      if (sp->y > ALT_LCD_HEIGHT)
   4feb0:	e0bffc17 	ldw	r2,-16(fp)
   4feb4:	10800883 	ldbu	r2,34(r2)
   4feb8:	10803fcc 	andi	r2,r2,255
   4febc:	108000f0 	cmpltui	r2,r2,3
   4fec0:	10003a1e 	bne	r2,zero,4ffac <altera_avalon_lcd_16207_write+0x298>
        lcd_scroll_up(sp);
   4fec4:	e13ffc17 	ldw	r4,-16(fp)
   4fec8:	004f99c0 	call	4f99c <lcd_scroll_up>
   4fecc:	00003706 	br	4ffac <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\b')
   4fed0:	e0bff907 	ldb	r2,-28(fp)
   4fed4:	10800218 	cmpnei	r2,r2,8
   4fed8:	10000b1e 	bne	r2,zero,4ff08 <altera_avalon_lcd_16207_write+0x1f4>
    {
      if (sp->x > 0)
   4fedc:	e0bffc17 	ldw	r2,-16(fp)
   4fee0:	10800843 	ldbu	r2,33(r2)
   4fee4:	10803fcc 	andi	r2,r2,255
   4fee8:	10003026 	beq	r2,zero,4ffac <altera_avalon_lcd_16207_write+0x298>
        sp->x--;
   4feec:	e0bffc17 	ldw	r2,-16(fp)
   4fef0:	10800843 	ldbu	r2,33(r2)
   4fef4:	10bfffc4 	addi	r2,r2,-1
   4fef8:	1007883a 	mov	r3,r2
   4fefc:	e0bffc17 	ldw	r2,-16(fp)
   4ff00:	10c00845 	stb	r3,33(r2)
   4ff04:	00002906 	br	4ffac <altera_avalon_lcd_16207_write+0x298>
    }
    else if (isprint(c))
   4ff08:	d0e01117 	ldw	r3,-32700(gp)
   4ff0c:	e0bff907 	ldb	r2,-28(fp)
   4ff10:	10800044 	addi	r2,r2,1
   4ff14:	1885883a 	add	r2,r3,r2
   4ff18:	10800003 	ldbu	r2,0(r2)
   4ff1c:	10803fcc 	andi	r2,r2,255
   4ff20:	1080201c 	xori	r2,r2,128
   4ff24:	10bfe004 	addi	r2,r2,-128
   4ff28:	108025cc 	andi	r2,r2,151
   4ff2c:	10001f26 	beq	r2,zero,4ffac <altera_avalon_lcd_16207_write+0x298>
    {
      /* If we didn't scroll on the last linefeed then we might need to do
       * it now. */
      if (sp->y >= ALT_LCD_HEIGHT)
   4ff30:	e0bffc17 	ldw	r2,-16(fp)
   4ff34:	10800883 	ldbu	r2,34(r2)
   4ff38:	10803fcc 	andi	r2,r2,255
   4ff3c:	108000b0 	cmpltui	r2,r2,2
   4ff40:	1000021e 	bne	r2,zero,4ff4c <altera_avalon_lcd_16207_write+0x238>
        lcd_scroll_up(sp);
   4ff44:	e13ffc17 	ldw	r4,-16(fp)
   4ff48:	004f99c0 	call	4f99c <lcd_scroll_up>

      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
   4ff4c:	e0bffc17 	ldw	r2,-16(fp)
   4ff50:	10800843 	ldbu	r2,33(r2)
   4ff54:	10803fcc 	andi	r2,r2,255
   4ff58:	10801428 	cmpgeui	r2,r2,80
   4ff5c:	10000d1e 	bne	r2,zero,4ff94 <altera_avalon_lcd_16207_write+0x280>
        sp->line[sp->y].data[sp->x] = c;
   4ff60:	e0bffc17 	ldw	r2,-16(fp)
   4ff64:	10800883 	ldbu	r2,34(r2)
   4ff68:	10c03fcc 	andi	r3,r2,255
   4ff6c:	e0bffc17 	ldw	r2,-16(fp)
   4ff70:	10800843 	ldbu	r2,33(r2)
   4ff74:	10803fcc 	andi	r2,r2,255
   4ff78:	e13ffc17 	ldw	r4,-16(fp)
   4ff7c:	18c018e4 	muli	r3,r3,99
   4ff80:	20c7883a 	add	r3,r4,r3
   4ff84:	1885883a 	add	r2,r3,r2
   4ff88:	10801004 	addi	r2,r2,64
   4ff8c:	e0fff903 	ldbu	r3,-28(fp)
   4ff90:	10c00005 	stb	r3,0(r2)

      sp->x++;
   4ff94:	e0bffc17 	ldw	r2,-16(fp)
   4ff98:	10800843 	ldbu	r2,33(r2)
   4ff9c:	10800044 	addi	r2,r2,1
   4ffa0:	1007883a 	mov	r3,r2
   4ffa4:	e0bffc17 	ldw	r2,-16(fp)
   4ffa8:	10c00845 	stb	r3,33(r2)

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;

  for ( ; ptr < end ; ptr++)
   4ffac:	e0bffd17 	ldw	r2,-12(fp)
   4ffb0:	10800044 	addi	r2,r2,1
   4ffb4:	e0bffd15 	stw	r2,-12(fp)
   4ffb8:	e0fffd17 	ldw	r3,-12(fp)
   4ffbc:	e0bff817 	ldw	r2,-32(fp)
   4ffc0:	18bf6436 	bltu	r3,r2,4fd54 <__alt_data_end+0xfffddd54>
      sp->x++;
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
   4ffc4:	00800404 	movi	r2,16
   4ffc8:	e0bff615 	stw	r2,-40(fp)
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   4ffcc:	e03ff515 	stw	zero,-44(fp)
   4ffd0:	00003706 	br	500b0 <altera_avalon_lcd_16207_write+0x39c>
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
   4ffd4:	00801404 	movi	r2,80
   4ffd8:	e0bff715 	stw	r2,-36(fp)
   4ffdc:	00001106 	br	50024 <altera_avalon_lcd_16207_write+0x310>
      if (sp->line[y].data[width-1] != ' ')
   4ffe0:	e0bff717 	ldw	r2,-36(fp)
   4ffe4:	10bfffc4 	addi	r2,r2,-1
   4ffe8:	e13ffc17 	ldw	r4,-16(fp)
   4ffec:	e0fff517 	ldw	r3,-44(fp)
   4fff0:	18c018e4 	muli	r3,r3,99
   4fff4:	20c7883a 	add	r3,r4,r3
   4fff8:	1885883a 	add	r2,r3,r2
   4fffc:	10801004 	addi	r2,r2,64
   50000:	10800003 	ldbu	r2,0(r2)
   50004:	10803fcc 	andi	r2,r2,255
   50008:	1080201c 	xori	r2,r2,128
   5000c:	10bfe004 	addi	r2,r2,-128
   50010:	10800820 	cmpeqi	r2,r2,32
   50014:	10000626 	beq	r2,zero,50030 <altera_avalon_lcd_16207_write+0x31c>
  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
   50018:	e0bff717 	ldw	r2,-36(fp)
   5001c:	10bfffc4 	addi	r2,r2,-1
   50020:	e0bff715 	stw	r2,-36(fp)
   50024:	e0bff717 	ldw	r2,-36(fp)
   50028:	00bfed16 	blt	zero,r2,4ffe0 <__alt_data_end+0xfffddfe0>
   5002c:	00000106 	br	50034 <altera_avalon_lcd_16207_write+0x320>
      if (sp->line[y].data[width-1] != ' ')
        break;
   50030:	0001883a 	nop

    /* The minimum width is the size of the LCD panel.  If the real width
     * is long enough to require scrolling then add an extra space so the
     * end of the message doesn't run into the beginning of it.
     */
    if (width <= ALT_LCD_WIDTH)
   50034:	e0bff717 	ldw	r2,-36(fp)
   50038:	10800448 	cmpgei	r2,r2,17
   5003c:	1000031e 	bne	r2,zero,5004c <altera_avalon_lcd_16207_write+0x338>
      width = ALT_LCD_WIDTH;
   50040:	00800404 	movi	r2,16
   50044:	e0bff715 	stw	r2,-36(fp)
   50048:	00000306 	br	50058 <altera_avalon_lcd_16207_write+0x344>
    else
      width++;
   5004c:	e0bff717 	ldw	r2,-36(fp)
   50050:	10800044 	addi	r2,r2,1
   50054:	e0bff715 	stw	r2,-36(fp)

    sp->line[y].width = width;
   50058:	e0bff717 	ldw	r2,-36(fp)
   5005c:	1009883a 	mov	r4,r2
   50060:	e0fffc17 	ldw	r3,-16(fp)
   50064:	e0bff517 	ldw	r2,-44(fp)
   50068:	108018e4 	muli	r2,r2,99
   5006c:	1885883a 	add	r2,r3,r2
   50070:	10802444 	addi	r2,r2,145
   50074:	11000005 	stb	r4,0(r2)
    if (widthmax < width)
   50078:	e0fff617 	ldw	r3,-40(fp)
   5007c:	e0bff717 	ldw	r2,-36(fp)
   50080:	1880020e 	bge	r3,r2,5008c <altera_avalon_lcd_16207_write+0x378>
      widthmax = width;
   50084:	e0bff717 	ldw	r2,-36(fp)
   50088:	e0bff615 	stw	r2,-40(fp)
    sp->line[y].speed = 0; /* By default lines don't scroll */
   5008c:	e0fffc17 	ldw	r3,-16(fp)
   50090:	e0bff517 	ldw	r2,-44(fp)
   50094:	108018e4 	muli	r2,r2,99
   50098:	1885883a 	add	r2,r3,r2
   5009c:	10802484 	addi	r2,r2,146
   500a0:	10000005 	stb	zero,0(r2)
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   500a4:	e0bff517 	ldw	r2,-44(fp)
   500a8:	10800044 	addi	r2,r2,1
   500ac:	e0bff515 	stw	r2,-44(fp)
   500b0:	e0bff517 	ldw	r2,-44(fp)
   500b4:	10800090 	cmplti	r2,r2,2
   500b8:	103fc61e 	bne	r2,zero,4ffd4 <__alt_data_end+0xfffddfd4>
    if (widthmax < width)
      widthmax = width;
    sp->line[y].speed = 0; /* By default lines don't scroll */
  }

  if (widthmax <= ALT_LCD_WIDTH)
   500bc:	e0bff617 	ldw	r2,-40(fp)
   500c0:	10800448 	cmpgei	r2,r2,17
   500c4:	1000031e 	bne	r2,zero,500d4 <altera_avalon_lcd_16207_write+0x3c0>
    sp->scrollmax = 0;
   500c8:	e0bffc17 	ldw	r2,-16(fp)
   500cc:	10000985 	stb	zero,38(r2)
   500d0:	00002e06 	br	5018c <altera_avalon_lcd_16207_write+0x478>
  else
  {
    widthmax *= 2;
   500d4:	e0bff617 	ldw	r2,-40(fp)
   500d8:	1085883a 	add	r2,r2,r2
   500dc:	e0bff615 	stw	r2,-40(fp)
    sp->scrollmax = widthmax;
   500e0:	e0bff617 	ldw	r2,-40(fp)
   500e4:	1007883a 	mov	r3,r2
   500e8:	e0bffc17 	ldw	r2,-16(fp)
   500ec:	10c00985 	stb	r3,38(r2)

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   500f0:	e03ff515 	stw	zero,-44(fp)
   500f4:	00002206 	br	50180 <altera_avalon_lcd_16207_write+0x46c>
      if (sp->line[y].width > ALT_LCD_WIDTH)
   500f8:	e0fffc17 	ldw	r3,-16(fp)
   500fc:	e0bff517 	ldw	r2,-44(fp)
   50100:	108018e4 	muli	r2,r2,99
   50104:	1885883a 	add	r2,r3,r2
   50108:	10802444 	addi	r2,r2,145
   5010c:	10800003 	ldbu	r2,0(r2)
   50110:	10803fcc 	andi	r2,r2,255
   50114:	1080201c 	xori	r2,r2,128
   50118:	10bfe004 	addi	r2,r2,-128
   5011c:	10800450 	cmplti	r2,r2,17
   50120:	1000141e 	bne	r2,zero,50174 <altera_avalon_lcd_16207_write+0x460>
         */
#if 1
        /* This option makes all the lines scroll round at different speeds
         * which are chosen so that all the scrolls finish at the same time.
         */
        sp->line[y].speed = 256 * sp->line[y].width / widthmax;
   50124:	e0fffc17 	ldw	r3,-16(fp)
   50128:	e0bff517 	ldw	r2,-44(fp)
   5012c:	108018e4 	muli	r2,r2,99
   50130:	1885883a 	add	r2,r3,r2
   50134:	10802444 	addi	r2,r2,145
   50138:	10800003 	ldbu	r2,0(r2)
   5013c:	10803fcc 	andi	r2,r2,255
   50140:	1080201c 	xori	r2,r2,128
   50144:	10bfe004 	addi	r2,r2,-128
   50148:	1004923a 	slli	r2,r2,8
   5014c:	e17ff617 	ldw	r5,-40(fp)
   50150:	1009883a 	mov	r4,r2
   50154:	00408380 	call	40838 <__divsi3>
   50158:	1009883a 	mov	r4,r2
   5015c:	e0fffc17 	ldw	r3,-16(fp)
   50160:	e0bff517 	ldw	r2,-44(fp)
   50164:	108018e4 	muli	r2,r2,99
   50168:	1885883a 	add	r2,r3,r2
   5016c:	10802484 	addi	r2,r2,146
   50170:	11000005 	stb	r4,0(r2)
  {
    widthmax *= 2;
    sp->scrollmax = widthmax;

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   50174:	e0bff517 	ldw	r2,-44(fp)
   50178:	10800044 	addi	r2,r2,1
   5017c:	e0bff515 	stw	r2,-44(fp)
   50180:	e0bff517 	ldw	r2,-44(fp)
   50184:	10800090 	cmplti	r2,r2,2
   50188:	103fdb1e 	bne	r2,zero,500f8 <__alt_data_end+0xfffde0f8>
   * (because active was set when the timer interrupt occurred).  If there
   * has been a missed repaint then paint again.  And again.  etc.
   */
  for ( ; ; )
  {
    int old_scrollpos = sp->scrollpos;
   5018c:	e0bffc17 	ldw	r2,-16(fp)
   50190:	10800943 	ldbu	r2,37(r2)
   50194:	10803fcc 	andi	r2,r2,255
   50198:	e0bffb15 	stw	r2,-20(fp)

    lcd_repaint_screen(sp);
   5019c:	e13ffc17 	ldw	r4,-16(fp)
   501a0:	004f7b00 	call	4f7b0 <lcd_repaint_screen>

    /* Let the timer routines repaint the display again */
    sp->active = 0;
   501a4:	e0bffc17 	ldw	r2,-16(fp)
   501a8:	100009c5 	stb	zero,39(r2)

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
   501ac:	e0bffc17 	ldw	r2,-16(fp)
   501b0:	10800943 	ldbu	r2,37(r2)
   501b4:	10c03fcc 	andi	r3,r2,255
   501b8:	e0bffb17 	ldw	r2,-20(fp)
   501bc:	18800426 	beq	r3,r2,501d0 <altera_avalon_lcd_16207_write+0x4bc>
      break;

    /* We need to repaint again since the display scrolled while we were
     * painting last time */
    sp->active = 1;
   501c0:	e0bffc17 	ldw	r2,-16(fp)
   501c4:	00c00044 	movi	r3,1
   501c8:	10c009c5 	stb	r3,39(r2)
  }
   501cc:	003fef06 	br	5018c <__alt_data_end+0xfffde18c>
    sp->active = 0;

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
      break;
   501d0:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);

  return len;
   501d4:	e0bffe17 	ldw	r2,-8(fp)
}
   501d8:	e037883a 	mov	sp,fp
   501dc:	dfc00117 	ldw	ra,4(sp)
   501e0:	df000017 	ldw	fp,0(sp)
   501e4:	dec00204 	addi	sp,sp,8
   501e8:	f800283a 	ret

000501ec <alt_lcd_16207_timeout>:
/*
 * Timeout routine is called every second
 */

static alt_u32 alt_lcd_16207_timeout(void* context) 
{
   501ec:	defffc04 	addi	sp,sp,-16
   501f0:	dfc00315 	stw	ra,12(sp)
   501f4:	df000215 	stw	fp,8(sp)
   501f8:	df000204 	addi	fp,sp,8
   501fc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_lcd_16207_state* sp = (altera_avalon_lcd_16207_state*)context;
   50200:	e0bfff17 	ldw	r2,-4(fp)
   50204:	e0bffe15 	stw	r2,-8(fp)

  /* Update the scrolling position */
  if (sp->scrollpos + 1 >= sp->scrollmax)
   50208:	e0bffe17 	ldw	r2,-8(fp)
   5020c:	10800943 	ldbu	r2,37(r2)
   50210:	10803fcc 	andi	r2,r2,255
   50214:	10c00044 	addi	r3,r2,1
   50218:	e0bffe17 	ldw	r2,-8(fp)
   5021c:	10800983 	ldbu	r2,38(r2)
   50220:	10803fcc 	andi	r2,r2,255
   50224:	18800316 	blt	r3,r2,50234 <alt_lcd_16207_timeout+0x48>
    sp->scrollpos = 0;
   50228:	e0bffe17 	ldw	r2,-8(fp)
   5022c:	10000945 	stb	zero,37(r2)
   50230:	00000606 	br	5024c <alt_lcd_16207_timeout+0x60>
  else
    sp->scrollpos = sp->scrollpos + 1;
   50234:	e0bffe17 	ldw	r2,-8(fp)
   50238:	10800943 	ldbu	r2,37(r2)
   5023c:	10800044 	addi	r2,r2,1
   50240:	1007883a 	mov	r3,r2
   50244:	e0bffe17 	ldw	r2,-8(fp)
   50248:	10c00945 	stb	r3,37(r2)

  /* Repaint the panel unless the foreground will do it again soon */
  if (sp->scrollmax > 0 && !sp->active)
   5024c:	e0bffe17 	ldw	r2,-8(fp)
   50250:	10800983 	ldbu	r2,38(r2)
   50254:	10803fcc 	andi	r2,r2,255
   50258:	10000826 	beq	r2,zero,5027c <alt_lcd_16207_timeout+0x90>
   5025c:	e0bffe17 	ldw	r2,-8(fp)
   50260:	108009c3 	ldbu	r2,39(r2)
   50264:	10803fcc 	andi	r2,r2,255
   50268:	1080201c 	xori	r2,r2,128
   5026c:	10bfe004 	addi	r2,r2,-128
   50270:	1000021e 	bne	r2,zero,5027c <alt_lcd_16207_timeout+0x90>
    lcd_repaint_screen(sp);
   50274:	e13ffe17 	ldw	r4,-8(fp)
   50278:	004f7b00 	call	4f7b0 <lcd_repaint_screen>

  return sp->period;
   5027c:	e0bffe17 	ldw	r2,-8(fp)
   50280:	10800717 	ldw	r2,28(r2)
}
   50284:	e037883a 	mov	sp,fp
   50288:	dfc00117 	ldw	ra,4(sp)
   5028c:	df000017 	ldw	fp,0(sp)
   50290:	dec00204 	addi	sp,sp,8
   50294:	f800283a 	ret

00050298 <altera_avalon_lcd_16207_init>:

/*
 * Called at boot time to initialise the LCD driver
 */
void altera_avalon_lcd_16207_init(altera_avalon_lcd_16207_state* sp)
{
   50298:	defffc04 	addi	sp,sp,-16
   5029c:	dfc00315 	stw	ra,12(sp)
   502a0:	df000215 	stw	fp,8(sp)
   502a4:	df000204 	addi	fp,sp,8
   502a8:	e13fff15 	stw	r4,-4(fp)
  unsigned int base = sp->base;
   502ac:	e0bfff17 	ldw	r2,-4(fp)
   502b0:	10800017 	ldw	r2,0(r2)
   502b4:	e0bffe15 	stw	r2,-8(fp)

  /* Mark the device as functional */
  sp->broken = 0;
   502b8:	e0bfff17 	ldw	r2,-4(fp)
   502bc:	10000805 	stb	zero,32(r2)
   * the BUSY bit in the status register doesn't work until the display
   * has been reset three times.
   */

  /* Wait for 15 ms then reset */
  usleep(15000);
   502c0:	010ea604 	movi	r4,15000
   502c4:	004e8b80 	call	4e8b8 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
   502c8:	e0bffe17 	ldw	r2,-8(fp)
   502cc:	00c00c04 	movi	r3,48
   502d0:	10c00035 	stwio	r3,0(r2)

  /* Wait for another 4.1ms and reset again */
  usleep(4100);  
   502d4:	01040104 	movi	r4,4100
   502d8:	004e8b80 	call	4e8b8 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
   502dc:	e0bffe17 	ldw	r2,-8(fp)
   502e0:	00c00c04 	movi	r3,48
   502e4:	10c00035 	stwio	r3,0(r2)

  /* Wait a further 1 ms and reset a third time */
  usleep(1000);
   502e8:	0100fa04 	movi	r4,1000
   502ec:	004e8b80 	call	4e8b8 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
   502f0:	e0bffe17 	ldw	r2,-8(fp)
   502f4:	00c00c04 	movi	r3,48
   502f8:	10c00035 	stwio	r3,0(r2)

  /* Setup interface parameters: 8 bit bus, 2 rows, 5x7 font */
  lcd_write_command(sp, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT | LCD_CMD_TWO_LINE);
   502fc:	01400e04 	movi	r5,56
   50300:	e13fff17 	ldw	r4,-4(fp)
   50304:	004f5500 	call	4f550 <lcd_write_command>
  
  /* Turn display off */
  lcd_write_command(sp, LCD_CMD_ONOFF);
   50308:	01400204 	movi	r5,8
   5030c:	e13fff17 	ldw	r4,-4(fp)
   50310:	004f5500 	call	4f550 <lcd_write_command>

  /* Clear display */
  lcd_clear_screen(sp);
   50314:	e13fff17 	ldw	r4,-4(fp)
   50318:	004f6e00 	call	4f6e0 <lcd_clear_screen>
  
  /* Set mode: increment after writing, don't shift display */
  lcd_write_command(sp, LCD_CMD_MODES | LCD_CMD_MODE_INC);
   5031c:	01400184 	movi	r5,6
   50320:	e13fff17 	ldw	r4,-4(fp)
   50324:	004f5500 	call	4f550 <lcd_write_command>

  /* Turn display on */
  lcd_write_command(sp, LCD_CMD_ONOFF | LCD_CMD_ENABLE_DISP);
   50328:	01400304 	movi	r5,12
   5032c:	e13fff17 	ldw	r4,-4(fp)
   50330:	004f5500 	call	4f550 <lcd_write_command>

  sp->esccount = -1;
   50334:	e0bfff17 	ldw	r2,-4(fp)
   50338:	00ffffc4 	movi	r3,-1
   5033c:	10c00905 	stb	r3,36(r2)
  memset(sp->escape, 0, sizeof(sp->escape));
   50340:	e0bfff17 	ldw	r2,-4(fp)
   50344:	10800a04 	addi	r2,r2,40
   50348:	01800204 	movi	r6,8
   5034c:	000b883a 	mov	r5,zero
   50350:	1009883a 	mov	r4,r2
   50354:	00419e80 	call	419e8 <memset>

  sp->scrollpos = 0;
   50358:	e0bfff17 	ldw	r2,-4(fp)
   5035c:	10000945 	stb	zero,37(r2)
  sp->scrollmax = 0;
   50360:	e0bfff17 	ldw	r2,-4(fp)
   50364:	10000985 	stb	zero,38(r2)
  sp->active = 0;
   50368:	e0bfff17 	ldw	r2,-4(fp)
   5036c:	100009c5 	stb	zero,39(r2)
   50370:	d0a72517 	ldw	r2,-25452(gp)

  sp->period = alt_ticks_per_second() / 10; /* Call every 100ms */
   50374:	01400284 	movi	r5,10
   50378:	1009883a 	mov	r4,r2
   5037c:	00409300 	call	40930 <__udivsi3>
   50380:	1007883a 	mov	r3,r2
   50384:	e0bfff17 	ldw	r2,-4(fp)
   50388:	10c00715 	stw	r3,28(r2)

  alt_alarm_start(&sp->alarm, sp->period, &alt_lcd_16207_timeout, sp);
   5038c:	e0bfff17 	ldw	r2,-4(fp)
   50390:	10c00104 	addi	r3,r2,4
   50394:	e0bfff17 	ldw	r2,-4(fp)
   50398:	10800717 	ldw	r2,28(r2)
   5039c:	e1ffff17 	ldw	r7,-4(fp)
   503a0:	01800174 	movhi	r6,5
   503a4:	31807b04 	addi	r6,r6,492
   503a8:	100b883a 	mov	r5,r2
   503ac:	1809883a 	mov	r4,r3
   503b0:	005042c0 	call	5042c <alt_alarm_start>
}
   503b4:	0001883a 	nop
   503b8:	e037883a 	mov	sp,fp
   503bc:	dfc00117 	ldw	ra,4(sp)
   503c0:	df000017 	ldw	fp,0(sp)
   503c4:	dec00204 	addi	sp,sp,8
   503c8:	f800283a 	ret

000503cc <altera_avalon_lcd_16207_write_fd>:
extern int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp,
  const char* ptr, int count, int flags);

int 
altera_avalon_lcd_16207_write_fd(alt_fd* fd, const char* buffer, int space)
{
   503cc:	defffa04 	addi	sp,sp,-24
   503d0:	dfc00515 	stw	ra,20(sp)
   503d4:	df000415 	stw	fp,16(sp)
   503d8:	df000404 	addi	fp,sp,16
   503dc:	e13ffd15 	stw	r4,-12(fp)
   503e0:	e17ffe15 	stw	r5,-8(fp)
   503e4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_lcd_16207_dev* dev = (altera_avalon_lcd_16207_dev*) fd->dev; 
   503e8:	e0bffd17 	ldw	r2,-12(fp)
   503ec:	10800017 	ldw	r2,0(r2)
   503f0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_lcd_16207_write(&dev->state, buffer, space,
   503f4:	e0bffc17 	ldw	r2,-16(fp)
   503f8:	10c00a04 	addi	r3,r2,40
   503fc:	e0bffd17 	ldw	r2,-12(fp)
   50400:	10800217 	ldw	r2,8(r2)
   50404:	100f883a 	mov	r7,r2
   50408:	e1bfff17 	ldw	r6,-4(fp)
   5040c:	e17ffe17 	ldw	r5,-8(fp)
   50410:	1809883a 	mov	r4,r3
   50414:	004fd140 	call	4fd14 <altera_avalon_lcd_16207_write>
      fd->fd_flags);
}
   50418:	e037883a 	mov	sp,fp
   5041c:	dfc00117 	ldw	ra,4(sp)
   50420:	df000017 	ldw	fp,0(sp)
   50424:	dec00204 	addi	sp,sp,8
   50428:	f800283a 	ret

0005042c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   5042c:	defff504 	addi	sp,sp,-44
   50430:	df000a15 	stw	fp,40(sp)
   50434:	df000a04 	addi	fp,sp,40
   50438:	e13ffc15 	stw	r4,-16(fp)
   5043c:	e17ffd15 	stw	r5,-12(fp)
   50440:	e1bffe15 	stw	r6,-8(fp)
   50444:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   50448:	e03ff615 	stw	zero,-40(fp)
   5044c:	d0a72517 	ldw	r2,-25452(gp)
  
  if (alt_ticks_per_second ())
   50450:	10003c26 	beq	r2,zero,50544 <alt_alarm_start+0x118>
  {
    if (alarm)
   50454:	e0bffc17 	ldw	r2,-16(fp)
   50458:	10003826 	beq	r2,zero,5053c <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   5045c:	e0bffc17 	ldw	r2,-16(fp)
   50460:	e0fffe17 	ldw	r3,-8(fp)
   50464:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   50468:	e0bffc17 	ldw	r2,-16(fp)
   5046c:	e0ffff17 	ldw	r3,-4(fp)
   50470:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   50474:	0005303a 	rdctl	r2,status
   50478:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   5047c:	e0fff917 	ldw	r3,-28(fp)
   50480:	00bfff84 	movi	r2,-2
   50484:	1884703a 	and	r2,r3,r2
   50488:	1001703a 	wrctl	status,r2
  
  return context;
   5048c:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   50490:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   50494:	d0a72617 	ldw	r2,-25448(gp)
      
      current_nticks = alt_nticks();
   50498:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   5049c:	e0fffd17 	ldw	r3,-12(fp)
   504a0:	e0bff617 	ldw	r2,-40(fp)
   504a4:	1885883a 	add	r2,r3,r2
   504a8:	10c00044 	addi	r3,r2,1
   504ac:	e0bffc17 	ldw	r2,-16(fp)
   504b0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   504b4:	e0bffc17 	ldw	r2,-16(fp)
   504b8:	10c00217 	ldw	r3,8(r2)
   504bc:	e0bff617 	ldw	r2,-40(fp)
   504c0:	1880042e 	bgeu	r3,r2,504d4 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   504c4:	e0bffc17 	ldw	r2,-16(fp)
   504c8:	00c00044 	movi	r3,1
   504cc:	10c00405 	stb	r3,16(r2)
   504d0:	00000206 	br	504dc <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   504d4:	e0bffc17 	ldw	r2,-16(fp)
   504d8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   504dc:	e0bffc17 	ldw	r2,-16(fp)
   504e0:	d0e00f04 	addi	r3,gp,-32708
   504e4:	e0fffa15 	stw	r3,-24(fp)
   504e8:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   504ec:	e0bffb17 	ldw	r2,-20(fp)
   504f0:	e0fffa17 	ldw	r3,-24(fp)
   504f4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   504f8:	e0bffa17 	ldw	r2,-24(fp)
   504fc:	10c00017 	ldw	r3,0(r2)
   50500:	e0bffb17 	ldw	r2,-20(fp)
   50504:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   50508:	e0bffa17 	ldw	r2,-24(fp)
   5050c:	10800017 	ldw	r2,0(r2)
   50510:	e0fffb17 	ldw	r3,-20(fp)
   50514:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   50518:	e0bffa17 	ldw	r2,-24(fp)
   5051c:	e0fffb17 	ldw	r3,-20(fp)
   50520:	10c00015 	stw	r3,0(r2)
   50524:	e0bff817 	ldw	r2,-32(fp)
   50528:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   5052c:	e0bff717 	ldw	r2,-36(fp)
   50530:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   50534:	0005883a 	mov	r2,zero
   50538:	00000306 	br	50548 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   5053c:	00bffa84 	movi	r2,-22
   50540:	00000106 	br	50548 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   50544:	00bfde84 	movi	r2,-134
  }
}
   50548:	e037883a 	mov	sp,fp
   5054c:	df000017 	ldw	fp,0(sp)
   50550:	dec00104 	addi	sp,sp,4
   50554:	f800283a 	ret

00050558 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   50558:	defffa04 	addi	sp,sp,-24
   5055c:	dfc00515 	stw	ra,20(sp)
   50560:	df000415 	stw	fp,16(sp)
   50564:	df000404 	addi	fp,sp,16
   50568:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
   5056c:	008000c4 	movi	r2,3
   50570:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   50574:	e0fffd17 	ldw	r3,-12(fp)
   50578:	008003f4 	movhi	r2,15
   5057c:	10909004 	addi	r2,r2,16960
   50580:	1885383a 	mul	r2,r3,r2
   50584:	100b883a 	mov	r5,r2
   50588:	0100bef4 	movhi	r4,763
   5058c:	213c2004 	addi	r4,r4,-3968
   50590:	00409300 	call	40930 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   50594:	100b883a 	mov	r5,r2
   50598:	01200034 	movhi	r4,32768
   5059c:	213fffc4 	addi	r4,r4,-1
   505a0:	00409300 	call	40930 <__udivsi3>
   505a4:	100b883a 	mov	r5,r2
   505a8:	e13fff17 	ldw	r4,-4(fp)
   505ac:	00409300 	call	40930 <__udivsi3>
   505b0:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   505b4:	e0bffe17 	ldw	r2,-8(fp)
   505b8:	10002a26 	beq	r2,zero,50664 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   505bc:	e03ffc15 	stw	zero,-16(fp)
   505c0:	00001706 	br	50620 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   505c4:	00a00034 	movhi	r2,32768
   505c8:	10bfffc4 	addi	r2,r2,-1
   505cc:	10bfffc4 	addi	r2,r2,-1
   505d0:	103ffe1e 	bne	r2,zero,505cc <__alt_data_end+0xfffde5cc>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   505d4:	e0fffd17 	ldw	r3,-12(fp)
   505d8:	008003f4 	movhi	r2,15
   505dc:	10909004 	addi	r2,r2,16960
   505e0:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   505e4:	100b883a 	mov	r5,r2
   505e8:	0100bef4 	movhi	r4,763
   505ec:	213c2004 	addi	r4,r4,-3968
   505f0:	00409300 	call	40930 <__udivsi3>
   505f4:	100b883a 	mov	r5,r2
   505f8:	01200034 	movhi	r4,32768
   505fc:	213fffc4 	addi	r4,r4,-1
   50600:	00409300 	call	40930 <__udivsi3>
   50604:	1007883a 	mov	r3,r2
   50608:	e0bfff17 	ldw	r2,-4(fp)
   5060c:	10c5c83a 	sub	r2,r2,r3
   50610:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   50614:	e0bffc17 	ldw	r2,-16(fp)
   50618:	10800044 	addi	r2,r2,1
   5061c:	e0bffc15 	stw	r2,-16(fp)
   50620:	e0fffc17 	ldw	r3,-16(fp)
   50624:	e0bffe17 	ldw	r2,-8(fp)
   50628:	18bfe616 	blt	r3,r2,505c4 <__alt_data_end+0xfffde5c4>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   5062c:	e0fffd17 	ldw	r3,-12(fp)
   50630:	008003f4 	movhi	r2,15
   50634:	10909004 	addi	r2,r2,16960
   50638:	1885383a 	mul	r2,r3,r2
   5063c:	100b883a 	mov	r5,r2
   50640:	0100bef4 	movhi	r4,763
   50644:	213c2004 	addi	r4,r4,-3968
   50648:	00409300 	call	40930 <__udivsi3>
   5064c:	1007883a 	mov	r3,r2
   50650:	e0bfff17 	ldw	r2,-4(fp)
   50654:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   50658:	10bfffc4 	addi	r2,r2,-1
   5065c:	103ffe1e 	bne	r2,zero,50658 <__alt_data_end+0xfffde658>
   50660:	00000d06 	br	50698 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   50664:	e0fffd17 	ldw	r3,-12(fp)
   50668:	008003f4 	movhi	r2,15
   5066c:	10909004 	addi	r2,r2,16960
   50670:	1885383a 	mul	r2,r3,r2
   50674:	100b883a 	mov	r5,r2
   50678:	0100bef4 	movhi	r4,763
   5067c:	213c2004 	addi	r4,r4,-3968
   50680:	00409300 	call	40930 <__udivsi3>
   50684:	1007883a 	mov	r3,r2
   50688:	e0bfff17 	ldw	r2,-4(fp)
   5068c:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   50690:	10bfffc4 	addi	r2,r2,-1
   50694:	00bffe16 	blt	zero,r2,50690 <__alt_data_end+0xfffde690>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   50698:	0005883a 	mov	r2,zero
}
   5069c:	e037883a 	mov	sp,fp
   506a0:	dfc00117 	ldw	ra,4(sp)
   506a4:	df000017 	ldw	fp,0(sp)
   506a8:	dec00204 	addi	sp,sp,8
   506ac:	f800283a 	ret

000506b0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   506b0:	defffe04 	addi	sp,sp,-8
   506b4:	df000115 	stw	fp,4(sp)
   506b8:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   506bc:	e03fff15 	stw	zero,-4(fp)
   506c0:	00000506 	br	506d8 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   506c4:	e0bfff17 	ldw	r2,-4(fp)
   506c8:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   506cc:	e0bfff17 	ldw	r2,-4(fp)
   506d0:	10800804 	addi	r2,r2,32
   506d4:	e0bfff15 	stw	r2,-4(fp)
   506d8:	e0bfff17 	ldw	r2,-4(fp)
   506dc:	10820030 	cmpltui	r2,r2,2048
   506e0:	103ff81e 	bne	r2,zero,506c4 <__alt_data_end+0xfffde6c4>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   506e4:	0001883a 	nop
   506e8:	e037883a 	mov	sp,fp
   506ec:	df000017 	ldw	fp,0(sp)
   506f0:	dec00104 	addi	sp,sp,4
   506f4:	f800283a 	ret

000506f8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   506f8:	defffe04 	addi	sp,sp,-8
   506fc:	dfc00115 	stw	ra,4(sp)
   50700:	df000015 	stw	fp,0(sp)
   50704:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   50708:	d0a00b17 	ldw	r2,-32724(gp)
   5070c:	10000326 	beq	r2,zero,5071c <alt_get_errno+0x24>
   50710:	d0a00b17 	ldw	r2,-32724(gp)
   50714:	103ee83a 	callr	r2
   50718:	00000106 	br	50720 <alt_get_errno+0x28>
   5071c:	d0a71904 	addi	r2,gp,-25500
}
   50720:	e037883a 	mov	sp,fp
   50724:	dfc00117 	ldw	ra,4(sp)
   50728:	df000017 	ldw	fp,0(sp)
   5072c:	dec00204 	addi	sp,sp,8
   50730:	f800283a 	ret

00050734 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   50734:	defffa04 	addi	sp,sp,-24
   50738:	dfc00515 	stw	ra,20(sp)
   5073c:	df000415 	stw	fp,16(sp)
   50740:	df000404 	addi	fp,sp,16
   50744:	e13ffe15 	stw	r4,-8(fp)
   50748:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   5074c:	e0bffe17 	ldw	r2,-8(fp)
   50750:	10000326 	beq	r2,zero,50760 <alt_dev_llist_insert+0x2c>
   50754:	e0bffe17 	ldw	r2,-8(fp)
   50758:	10800217 	ldw	r2,8(r2)
   5075c:	1000061e 	bne	r2,zero,50778 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   50760:	00506f80 	call	506f8 <alt_get_errno>
   50764:	1007883a 	mov	r3,r2
   50768:	00800584 	movi	r2,22
   5076c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   50770:	00bffa84 	movi	r2,-22
   50774:	00001306 	br	507c4 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   50778:	e0bffe17 	ldw	r2,-8(fp)
   5077c:	e0ffff17 	ldw	r3,-4(fp)
   50780:	e0fffc15 	stw	r3,-16(fp)
   50784:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   50788:	e0bffd17 	ldw	r2,-12(fp)
   5078c:	e0fffc17 	ldw	r3,-16(fp)
   50790:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   50794:	e0bffc17 	ldw	r2,-16(fp)
   50798:	10c00017 	ldw	r3,0(r2)
   5079c:	e0bffd17 	ldw	r2,-12(fp)
   507a0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   507a4:	e0bffc17 	ldw	r2,-16(fp)
   507a8:	10800017 	ldw	r2,0(r2)
   507ac:	e0fffd17 	ldw	r3,-12(fp)
   507b0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   507b4:	e0bffc17 	ldw	r2,-16(fp)
   507b8:	e0fffd17 	ldw	r3,-12(fp)
   507bc:	10c00015 	stw	r3,0(r2)

  return 0;  
   507c0:	0005883a 	mov	r2,zero
}
   507c4:	e037883a 	mov	sp,fp
   507c8:	dfc00117 	ldw	ra,4(sp)
   507cc:	df000017 	ldw	fp,0(sp)
   507d0:	dec00204 	addi	sp,sp,8
   507d4:	f800283a 	ret

000507d8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   507d8:	defffd04 	addi	sp,sp,-12
   507dc:	dfc00215 	stw	ra,8(sp)
   507e0:	df000115 	stw	fp,4(sp)
   507e4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   507e8:	00800174 	movhi	r2,5
   507ec:	1084b304 	addi	r2,r2,4812
   507f0:	e0bfff15 	stw	r2,-4(fp)
   507f4:	00000606 	br	50810 <_do_ctors+0x38>
        (*ctor) (); 
   507f8:	e0bfff17 	ldw	r2,-4(fp)
   507fc:	10800017 	ldw	r2,0(r2)
   50800:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   50804:	e0bfff17 	ldw	r2,-4(fp)
   50808:	10bfff04 	addi	r2,r2,-4
   5080c:	e0bfff15 	stw	r2,-4(fp)
   50810:	e0ffff17 	ldw	r3,-4(fp)
   50814:	00800174 	movhi	r2,5
   50818:	1084b404 	addi	r2,r2,4816
   5081c:	18bff62e 	bgeu	r3,r2,507f8 <__alt_data_end+0xfffde7f8>
        (*ctor) (); 
}
   50820:	0001883a 	nop
   50824:	e037883a 	mov	sp,fp
   50828:	dfc00117 	ldw	ra,4(sp)
   5082c:	df000017 	ldw	fp,0(sp)
   50830:	dec00204 	addi	sp,sp,8
   50834:	f800283a 	ret

00050838 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   50838:	defffd04 	addi	sp,sp,-12
   5083c:	dfc00215 	stw	ra,8(sp)
   50840:	df000115 	stw	fp,4(sp)
   50844:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   50848:	00800174 	movhi	r2,5
   5084c:	1084b304 	addi	r2,r2,4812
   50850:	e0bfff15 	stw	r2,-4(fp)
   50854:	00000606 	br	50870 <_do_dtors+0x38>
        (*dtor) (); 
   50858:	e0bfff17 	ldw	r2,-4(fp)
   5085c:	10800017 	ldw	r2,0(r2)
   50860:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   50864:	e0bfff17 	ldw	r2,-4(fp)
   50868:	10bfff04 	addi	r2,r2,-4
   5086c:	e0bfff15 	stw	r2,-4(fp)
   50870:	e0ffff17 	ldw	r3,-4(fp)
   50874:	00800174 	movhi	r2,5
   50878:	1084b404 	addi	r2,r2,4816
   5087c:	18bff62e 	bgeu	r3,r2,50858 <__alt_data_end+0xfffde858>
        (*dtor) (); 
}
   50880:	0001883a 	nop
   50884:	e037883a 	mov	sp,fp
   50888:	dfc00117 	ldw	ra,4(sp)
   5088c:	df000017 	ldw	fp,0(sp)
   50890:	dec00204 	addi	sp,sp,8
   50894:	f800283a 	ret

00050898 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   50898:	defffa04 	addi	sp,sp,-24
   5089c:	dfc00515 	stw	ra,20(sp)
   508a0:	df000415 	stw	fp,16(sp)
   508a4:	df000404 	addi	fp,sp,16
   508a8:	e13ffe15 	stw	r4,-8(fp)
   508ac:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   508b0:	e0bfff17 	ldw	r2,-4(fp)
   508b4:	10800017 	ldw	r2,0(r2)
   508b8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   508bc:	e13ffe17 	ldw	r4,-8(fp)
   508c0:	00420500 	call	42050 <strlen>
   508c4:	10800044 	addi	r2,r2,1
   508c8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   508cc:	00000d06 	br	50904 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   508d0:	e0bffc17 	ldw	r2,-16(fp)
   508d4:	10800217 	ldw	r2,8(r2)
   508d8:	e0fffd17 	ldw	r3,-12(fp)
   508dc:	180d883a 	mov	r6,r3
   508e0:	e17ffe17 	ldw	r5,-8(fp)
   508e4:	1009883a 	mov	r4,r2
   508e8:	0050f880 	call	50f88 <memcmp>
   508ec:	1000021e 	bne	r2,zero,508f8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   508f0:	e0bffc17 	ldw	r2,-16(fp)
   508f4:	00000706 	br	50914 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   508f8:	e0bffc17 	ldw	r2,-16(fp)
   508fc:	10800017 	ldw	r2,0(r2)
   50900:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   50904:	e0fffc17 	ldw	r3,-16(fp)
   50908:	e0bfff17 	ldw	r2,-4(fp)
   5090c:	18bff01e 	bne	r3,r2,508d0 <__alt_data_end+0xfffde8d0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   50910:	0005883a 	mov	r2,zero
}
   50914:	e037883a 	mov	sp,fp
   50918:	dfc00117 	ldw	ra,4(sp)
   5091c:	df000017 	ldw	fp,0(sp)
   50920:	dec00204 	addi	sp,sp,8
   50924:	f800283a 	ret

00050928 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   50928:	defffb04 	addi	sp,sp,-20
   5092c:	dfc00415 	stw	ra,16(sp)
   50930:	df000315 	stw	fp,12(sp)
   50934:	df000304 	addi	fp,sp,12
   50938:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   5093c:	d0a00617 	ldw	r2,-32744(gp)
   50940:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   50944:	00003106 	br	50a0c <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   50948:	e0bffd17 	ldw	r2,-12(fp)
   5094c:	10800217 	ldw	r2,8(r2)
   50950:	1009883a 	mov	r4,r2
   50954:	00420500 	call	42050 <strlen>
   50958:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   5095c:	e0bffd17 	ldw	r2,-12(fp)
   50960:	10c00217 	ldw	r3,8(r2)
   50964:	e0bffe17 	ldw	r2,-8(fp)
   50968:	10bfffc4 	addi	r2,r2,-1
   5096c:	1885883a 	add	r2,r3,r2
   50970:	10800003 	ldbu	r2,0(r2)
   50974:	10803fcc 	andi	r2,r2,255
   50978:	1080201c 	xori	r2,r2,128
   5097c:	10bfe004 	addi	r2,r2,-128
   50980:	10800bd8 	cmpnei	r2,r2,47
   50984:	1000031e 	bne	r2,zero,50994 <alt_find_file+0x6c>
    {
      len -= 1;
   50988:	e0bffe17 	ldw	r2,-8(fp)
   5098c:	10bfffc4 	addi	r2,r2,-1
   50990:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   50994:	e0bffe17 	ldw	r2,-8(fp)
   50998:	e0ffff17 	ldw	r3,-4(fp)
   5099c:	1885883a 	add	r2,r3,r2
   509a0:	10800003 	ldbu	r2,0(r2)
   509a4:	10803fcc 	andi	r2,r2,255
   509a8:	1080201c 	xori	r2,r2,128
   509ac:	10bfe004 	addi	r2,r2,-128
   509b0:	10800be0 	cmpeqi	r2,r2,47
   509b4:	1000081e 	bne	r2,zero,509d8 <alt_find_file+0xb0>
   509b8:	e0bffe17 	ldw	r2,-8(fp)
   509bc:	e0ffff17 	ldw	r3,-4(fp)
   509c0:	1885883a 	add	r2,r3,r2
   509c4:	10800003 	ldbu	r2,0(r2)
   509c8:	10803fcc 	andi	r2,r2,255
   509cc:	1080201c 	xori	r2,r2,128
   509d0:	10bfe004 	addi	r2,r2,-128
   509d4:	10000a1e 	bne	r2,zero,50a00 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   509d8:	e0bffd17 	ldw	r2,-12(fp)
   509dc:	10800217 	ldw	r2,8(r2)
   509e0:	e0fffe17 	ldw	r3,-8(fp)
   509e4:	180d883a 	mov	r6,r3
   509e8:	e17fff17 	ldw	r5,-4(fp)
   509ec:	1009883a 	mov	r4,r2
   509f0:	0050f880 	call	50f88 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   509f4:	1000021e 	bne	r2,zero,50a00 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   509f8:	e0bffd17 	ldw	r2,-12(fp)
   509fc:	00000706 	br	50a1c <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   50a00:	e0bffd17 	ldw	r2,-12(fp)
   50a04:	10800017 	ldw	r2,0(r2)
   50a08:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   50a0c:	e0fffd17 	ldw	r3,-12(fp)
   50a10:	d0a00604 	addi	r2,gp,-32744
   50a14:	18bfcc1e 	bne	r3,r2,50948 <__alt_data_end+0xfffde948>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   50a18:	0005883a 	mov	r2,zero
}
   50a1c:	e037883a 	mov	sp,fp
   50a20:	dfc00117 	ldw	ra,4(sp)
   50a24:	df000017 	ldw	fp,0(sp)
   50a28:	dec00204 	addi	sp,sp,8
   50a2c:	f800283a 	ret

00050a30 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   50a30:	defffc04 	addi	sp,sp,-16
   50a34:	df000315 	stw	fp,12(sp)
   50a38:	df000304 	addi	fp,sp,12
   50a3c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   50a40:	00bffa04 	movi	r2,-24
   50a44:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   50a48:	e03ffd15 	stw	zero,-12(fp)
   50a4c:	00001906 	br	50ab4 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
   50a50:	00800174 	movhi	r2,5
   50a54:	1088aa04 	addi	r2,r2,8872
   50a58:	e0fffd17 	ldw	r3,-12(fp)
   50a5c:	18c00324 	muli	r3,r3,12
   50a60:	10c5883a 	add	r2,r2,r3
   50a64:	10800017 	ldw	r2,0(r2)
   50a68:	10000f1e 	bne	r2,zero,50aa8 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
   50a6c:	00800174 	movhi	r2,5
   50a70:	1088aa04 	addi	r2,r2,8872
   50a74:	e0fffd17 	ldw	r3,-12(fp)
   50a78:	18c00324 	muli	r3,r3,12
   50a7c:	10c5883a 	add	r2,r2,r3
   50a80:	e0ffff17 	ldw	r3,-4(fp)
   50a84:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   50a88:	d0e00a17 	ldw	r3,-32728(gp)
   50a8c:	e0bffd17 	ldw	r2,-12(fp)
   50a90:	1880020e 	bge	r3,r2,50a9c <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
   50a94:	e0bffd17 	ldw	r2,-12(fp)
   50a98:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
   50a9c:	e0bffd17 	ldw	r2,-12(fp)
   50aa0:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   50aa4:	00000606 	br	50ac0 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   50aa8:	e0bffd17 	ldw	r2,-12(fp)
   50aac:	10800044 	addi	r2,r2,1
   50ab0:	e0bffd15 	stw	r2,-12(fp)
   50ab4:	e0bffd17 	ldw	r2,-12(fp)
   50ab8:	10800810 	cmplti	r2,r2,32
   50abc:	103fe41e 	bne	r2,zero,50a50 <__alt_data_end+0xfffdea50>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   50ac0:	e0bffe17 	ldw	r2,-8(fp)
}
   50ac4:	e037883a 	mov	sp,fp
   50ac8:	df000017 	ldw	fp,0(sp)
   50acc:	dec00104 	addi	sp,sp,4
   50ad0:	f800283a 	ret

00050ad4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   50ad4:	defffe04 	addi	sp,sp,-8
   50ad8:	dfc00115 	stw	ra,4(sp)
   50adc:	df000015 	stw	fp,0(sp)
   50ae0:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   50ae4:	01440004 	movi	r5,4096
   50ae8:	0009883a 	mov	r4,zero
   50aec:	0050eac0 	call	50eac <alt_icache_flush>
#endif
}
   50af0:	0001883a 	nop
   50af4:	e037883a 	mov	sp,fp
   50af8:	dfc00117 	ldw	ra,4(sp)
   50afc:	df000017 	ldw	fp,0(sp)
   50b00:	dec00204 	addi	sp,sp,8
   50b04:	f800283a 	ret

00050b08 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   50b08:	defffe04 	addi	sp,sp,-8
   50b0c:	df000115 	stw	fp,4(sp)
   50b10:	df000104 	addi	fp,sp,4
   50b14:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   50b18:	e0bfff17 	ldw	r2,-4(fp)
   50b1c:	10bffe84 	addi	r2,r2,-6
   50b20:	10c00428 	cmpgeui	r3,r2,16
   50b24:	18001a1e 	bne	r3,zero,50b90 <alt_exception_cause_generated_bad_addr+0x88>
   50b28:	100690ba 	slli	r3,r2,2
   50b2c:	00800174 	movhi	r2,5
   50b30:	1082d004 	addi	r2,r2,2880
   50b34:	1885883a 	add	r2,r3,r2
   50b38:	10800017 	ldw	r2,0(r2)
   50b3c:	1000683a 	jmp	r2
   50b40:	00050b80 	call	50b8 <__reset-0x3af48>
   50b44:	00050b80 	call	50b8 <__reset-0x3af48>
   50b48:	00050b90 	cmplti	zero,zero,5166
   50b4c:	00050b90 	cmplti	zero,zero,5166
   50b50:	00050b90 	cmplti	zero,zero,5166
   50b54:	00050b80 	call	50b8 <__reset-0x3af48>
   50b58:	00050b88 	cmpgei	zero,zero,5166
   50b5c:	00050b90 	cmplti	zero,zero,5166
   50b60:	00050b80 	call	50b8 <__reset-0x3af48>
   50b64:	00050b80 	call	50b8 <__reset-0x3af48>
   50b68:	00050b90 	cmplti	zero,zero,5166
   50b6c:	00050b80 	call	50b8 <__reset-0x3af48>
   50b70:	00050b88 	cmpgei	zero,zero,5166
   50b74:	00050b90 	cmplti	zero,zero,5166
   50b78:	00050b90 	cmplti	zero,zero,5166
   50b7c:	00050b80 	call	50b8 <__reset-0x3af48>
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   50b80:	00800044 	movi	r2,1
   50b84:	00000306 	br	50b94 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   50b88:	0005883a 	mov	r2,zero
   50b8c:	00000106 	br	50b94 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   50b90:	0005883a 	mov	r2,zero
  }
}
   50b94:	e037883a 	mov	sp,fp
   50b98:	df000017 	ldw	fp,0(sp)
   50b9c:	dec00104 	addi	sp,sp,4
   50ba0:	f800283a 	ret

00050ba4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   50ba4:	defff904 	addi	sp,sp,-28
   50ba8:	dfc00615 	stw	ra,24(sp)
   50bac:	df000515 	stw	fp,20(sp)
   50bb0:	df000504 	addi	fp,sp,20
   50bb4:	e13ffc15 	stw	r4,-16(fp)
   50bb8:	e17ffd15 	stw	r5,-12(fp)
   50bbc:	e1bffe15 	stw	r6,-8(fp)
   50bc0:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   50bc4:	e1bfff17 	ldw	r6,-4(fp)
   50bc8:	e17ffe17 	ldw	r5,-8(fp)
   50bcc:	e13ffd17 	ldw	r4,-12(fp)
   50bd0:	004e5180 	call	4e518 <open>
   50bd4:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   50bd8:	e0bffb17 	ldw	r2,-20(fp)
   50bdc:	10001c16 	blt	r2,zero,50c50 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   50be0:	00800174 	movhi	r2,5
   50be4:	1088aa04 	addi	r2,r2,8872
   50be8:	e0fffb17 	ldw	r3,-20(fp)
   50bec:	18c00324 	muli	r3,r3,12
   50bf0:	10c5883a 	add	r2,r2,r3
   50bf4:	10c00017 	ldw	r3,0(r2)
   50bf8:	e0bffc17 	ldw	r2,-16(fp)
   50bfc:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   50c00:	00800174 	movhi	r2,5
   50c04:	1088aa04 	addi	r2,r2,8872
   50c08:	e0fffb17 	ldw	r3,-20(fp)
   50c0c:	18c00324 	muli	r3,r3,12
   50c10:	10c5883a 	add	r2,r2,r3
   50c14:	10800104 	addi	r2,r2,4
   50c18:	10c00017 	ldw	r3,0(r2)
   50c1c:	e0bffc17 	ldw	r2,-16(fp)
   50c20:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   50c24:	00800174 	movhi	r2,5
   50c28:	1088aa04 	addi	r2,r2,8872
   50c2c:	e0fffb17 	ldw	r3,-20(fp)
   50c30:	18c00324 	muli	r3,r3,12
   50c34:	10c5883a 	add	r2,r2,r3
   50c38:	10800204 	addi	r2,r2,8
   50c3c:	10c00017 	ldw	r3,0(r2)
   50c40:	e0bffc17 	ldw	r2,-16(fp)
   50c44:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   50c48:	e13ffb17 	ldw	r4,-20(fp)
   50c4c:	004e7a40 	call	4e7a4 <alt_release_fd>
  }
} 
   50c50:	0001883a 	nop
   50c54:	e037883a 	mov	sp,fp
   50c58:	dfc00117 	ldw	ra,4(sp)
   50c5c:	df000017 	ldw	fp,0(sp)
   50c60:	dec00204 	addi	sp,sp,8
   50c64:	f800283a 	ret

00050c68 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   50c68:	defffb04 	addi	sp,sp,-20
   50c6c:	dfc00415 	stw	ra,16(sp)
   50c70:	df000315 	stw	fp,12(sp)
   50c74:	df000304 	addi	fp,sp,12
   50c78:	e13ffd15 	stw	r4,-12(fp)
   50c7c:	e17ffe15 	stw	r5,-8(fp)
   50c80:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   50c84:	01c07fc4 	movi	r7,511
   50c88:	01800044 	movi	r6,1
   50c8c:	e17ffd17 	ldw	r5,-12(fp)
   50c90:	01000174 	movhi	r4,5
   50c94:	2108ad04 	addi	r4,r4,8884
   50c98:	0050ba40 	call	50ba4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   50c9c:	01c07fc4 	movi	r7,511
   50ca0:	000d883a 	mov	r6,zero
   50ca4:	e17ffe17 	ldw	r5,-8(fp)
   50ca8:	01000174 	movhi	r4,5
   50cac:	2108aa04 	addi	r4,r4,8872
   50cb0:	0050ba40 	call	50ba4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   50cb4:	01c07fc4 	movi	r7,511
   50cb8:	01800044 	movi	r6,1
   50cbc:	e17fff17 	ldw	r5,-4(fp)
   50cc0:	01000174 	movhi	r4,5
   50cc4:	2108b004 	addi	r4,r4,8896
   50cc8:	0050ba40 	call	50ba4 <alt_open_fd>
}  
   50ccc:	0001883a 	nop
   50cd0:	e037883a 	mov	sp,fp
   50cd4:	dfc00117 	ldw	ra,4(sp)
   50cd8:	df000017 	ldw	fp,0(sp)
   50cdc:	dec00204 	addi	sp,sp,8
   50ce0:	f800283a 	ret

00050ce4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   50ce4:	defffa04 	addi	sp,sp,-24
   50ce8:	df000515 	stw	fp,20(sp)
   50cec:	df000504 	addi	fp,sp,20
   50cf0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   50cf4:	0005303a 	rdctl	r2,status
   50cf8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   50cfc:	e0fffc17 	ldw	r3,-16(fp)
   50d00:	00bfff84 	movi	r2,-2
   50d04:	1884703a 	and	r2,r3,r2
   50d08:	1001703a 	wrctl	status,r2
  
  return context;
   50d0c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   50d10:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   50d14:	e0bfff17 	ldw	r2,-4(fp)
   50d18:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   50d1c:	e0bffd17 	ldw	r2,-12(fp)
   50d20:	10800017 	ldw	r2,0(r2)
   50d24:	e0fffd17 	ldw	r3,-12(fp)
   50d28:	18c00117 	ldw	r3,4(r3)
   50d2c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   50d30:	e0bffd17 	ldw	r2,-12(fp)
   50d34:	10800117 	ldw	r2,4(r2)
   50d38:	e0fffd17 	ldw	r3,-12(fp)
   50d3c:	18c00017 	ldw	r3,0(r3)
   50d40:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   50d44:	e0bffd17 	ldw	r2,-12(fp)
   50d48:	e0fffd17 	ldw	r3,-12(fp)
   50d4c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   50d50:	e0bffd17 	ldw	r2,-12(fp)
   50d54:	e0fffd17 	ldw	r3,-12(fp)
   50d58:	10c00015 	stw	r3,0(r2)
   50d5c:	e0bffb17 	ldw	r2,-20(fp)
   50d60:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   50d64:	e0bffe17 	ldw	r2,-8(fp)
   50d68:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   50d6c:	0001883a 	nop
   50d70:	e037883a 	mov	sp,fp
   50d74:	df000017 	ldw	fp,0(sp)
   50d78:	dec00104 	addi	sp,sp,4
   50d7c:	f800283a 	ret

00050d80 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   50d80:	defffb04 	addi	sp,sp,-20
   50d84:	dfc00415 	stw	ra,16(sp)
   50d88:	df000315 	stw	fp,12(sp)
   50d8c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   50d90:	d0a00f17 	ldw	r2,-32708(gp)
   50d94:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   50d98:	d0a72617 	ldw	r2,-25448(gp)
   50d9c:	10800044 	addi	r2,r2,1
   50da0:	d0a72615 	stw	r2,-25448(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   50da4:	00002e06 	br	50e60 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   50da8:	e0bffd17 	ldw	r2,-12(fp)
   50dac:	10800017 	ldw	r2,0(r2)
   50db0:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   50db4:	e0bffd17 	ldw	r2,-12(fp)
   50db8:	10800403 	ldbu	r2,16(r2)
   50dbc:	10803fcc 	andi	r2,r2,255
   50dc0:	10000426 	beq	r2,zero,50dd4 <alt_tick+0x54>
   50dc4:	d0a72617 	ldw	r2,-25448(gp)
   50dc8:	1000021e 	bne	r2,zero,50dd4 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   50dcc:	e0bffd17 	ldw	r2,-12(fp)
   50dd0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   50dd4:	e0bffd17 	ldw	r2,-12(fp)
   50dd8:	10800217 	ldw	r2,8(r2)
   50ddc:	d0e72617 	ldw	r3,-25448(gp)
   50de0:	18801d36 	bltu	r3,r2,50e58 <alt_tick+0xd8>
   50de4:	e0bffd17 	ldw	r2,-12(fp)
   50de8:	10800403 	ldbu	r2,16(r2)
   50dec:	10803fcc 	andi	r2,r2,255
   50df0:	1000191e 	bne	r2,zero,50e58 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   50df4:	e0bffd17 	ldw	r2,-12(fp)
   50df8:	10800317 	ldw	r2,12(r2)
   50dfc:	e0fffd17 	ldw	r3,-12(fp)
   50e00:	18c00517 	ldw	r3,20(r3)
   50e04:	1809883a 	mov	r4,r3
   50e08:	103ee83a 	callr	r2
   50e0c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   50e10:	e0bfff17 	ldw	r2,-4(fp)
   50e14:	1000031e 	bne	r2,zero,50e24 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   50e18:	e13ffd17 	ldw	r4,-12(fp)
   50e1c:	0050ce40 	call	50ce4 <alt_alarm_stop>
   50e20:	00000d06 	br	50e58 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   50e24:	e0bffd17 	ldw	r2,-12(fp)
   50e28:	10c00217 	ldw	r3,8(r2)
   50e2c:	e0bfff17 	ldw	r2,-4(fp)
   50e30:	1887883a 	add	r3,r3,r2
   50e34:	e0bffd17 	ldw	r2,-12(fp)
   50e38:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   50e3c:	e0bffd17 	ldw	r2,-12(fp)
   50e40:	10c00217 	ldw	r3,8(r2)
   50e44:	d0a72617 	ldw	r2,-25448(gp)
   50e48:	1880032e 	bgeu	r3,r2,50e58 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   50e4c:	e0bffd17 	ldw	r2,-12(fp)
   50e50:	00c00044 	movi	r3,1
   50e54:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   50e58:	e0bffe17 	ldw	r2,-8(fp)
   50e5c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   50e60:	e0fffd17 	ldw	r3,-12(fp)
   50e64:	d0a00f04 	addi	r2,gp,-32708
   50e68:	18bfcf1e 	bne	r3,r2,50da8 <__alt_data_end+0xfffdeda8>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   50e6c:	0001883a 	nop
}
   50e70:	0001883a 	nop
   50e74:	e037883a 	mov	sp,fp
   50e78:	dfc00117 	ldw	ra,4(sp)
   50e7c:	df000017 	ldw	fp,0(sp)
   50e80:	dec00204 	addi	sp,sp,8
   50e84:	f800283a 	ret

00050e88 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   50e88:	deffff04 	addi	sp,sp,-4
   50e8c:	df000015 	stw	fp,0(sp)
   50e90:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   50e94:	000170fa 	wrctl	ienable,zero
}
   50e98:	0001883a 	nop
   50e9c:	e037883a 	mov	sp,fp
   50ea0:	df000017 	ldw	fp,0(sp)
   50ea4:	dec00104 	addi	sp,sp,4
   50ea8:	f800283a 	ret

00050eac <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   50eac:	defffb04 	addi	sp,sp,-20
   50eb0:	df000415 	stw	fp,16(sp)
   50eb4:	df000404 	addi	fp,sp,16
   50eb8:	e13ffe15 	stw	r4,-8(fp)
   50ebc:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   50ec0:	e0bfff17 	ldw	r2,-4(fp)
   50ec4:	10840070 	cmpltui	r2,r2,4097
   50ec8:	1000021e 	bne	r2,zero,50ed4 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   50ecc:	00840004 	movi	r2,4096
   50ed0:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   50ed4:	e0fffe17 	ldw	r3,-8(fp)
   50ed8:	e0bfff17 	ldw	r2,-4(fp)
   50edc:	1885883a 	add	r2,r3,r2
   50ee0:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   50ee4:	e0bffe17 	ldw	r2,-8(fp)
   50ee8:	e0bffc15 	stw	r2,-16(fp)
   50eec:	00000506 	br	50f04 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   50ef0:	e0bffc17 	ldw	r2,-16(fp)
   50ef4:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   50ef8:	e0bffc17 	ldw	r2,-16(fp)
   50efc:	10800804 	addi	r2,r2,32
   50f00:	e0bffc15 	stw	r2,-16(fp)
   50f04:	e0fffc17 	ldw	r3,-16(fp)
   50f08:	e0bffd17 	ldw	r2,-12(fp)
   50f0c:	18bff836 	bltu	r3,r2,50ef0 <__alt_data_end+0xfffdeef0>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   50f10:	e0bffe17 	ldw	r2,-8(fp)
   50f14:	108007cc 	andi	r2,r2,31
   50f18:	10000226 	beq	r2,zero,50f24 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   50f1c:	e0bffc17 	ldw	r2,-16(fp)
   50f20:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   50f24:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   50f28:	0001883a 	nop
   50f2c:	e037883a 	mov	sp,fp
   50f30:	df000017 	ldw	fp,0(sp)
   50f34:	dec00104 	addi	sp,sp,4
   50f38:	f800283a 	ret

00050f3c <atexit>:
   50f3c:	200b883a 	mov	r5,r4
   50f40:	000f883a 	mov	r7,zero
   50f44:	000d883a 	mov	r6,zero
   50f48:	0009883a 	mov	r4,zero
   50f4c:	00510041 	jmpi	51004 <__register_exitproc>

00050f50 <exit>:
   50f50:	defffe04 	addi	sp,sp,-8
   50f54:	000b883a 	mov	r5,zero
   50f58:	dc000015 	stw	r16,0(sp)
   50f5c:	dfc00115 	stw	ra,4(sp)
   50f60:	2021883a 	mov	r16,r4
   50f64:	005111c0 	call	5111c <__call_exitprocs>
   50f68:	00800174 	movhi	r2,5
   50f6c:	108d6a04 	addi	r2,r2,13736
   50f70:	11000017 	ldw	r4,0(r2)
   50f74:	20800f17 	ldw	r2,60(r4)
   50f78:	10000126 	beq	r2,zero,50f80 <exit+0x30>
   50f7c:	103ee83a 	callr	r2
   50f80:	8009883a 	mov	r4,r16
   50f84:	005129c0 	call	5129c <_exit>

00050f88 <memcmp>:
   50f88:	01c000c4 	movi	r7,3
   50f8c:	3980192e 	bgeu	r7,r6,50ff4 <memcmp+0x6c>
   50f90:	2144b03a 	or	r2,r4,r5
   50f94:	11c4703a 	and	r2,r2,r7
   50f98:	10000f26 	beq	r2,zero,50fd8 <memcmp+0x50>
   50f9c:	20800003 	ldbu	r2,0(r4)
   50fa0:	28c00003 	ldbu	r3,0(r5)
   50fa4:	10c0151e 	bne	r2,r3,50ffc <memcmp+0x74>
   50fa8:	31bfff84 	addi	r6,r6,-2
   50fac:	01ffffc4 	movi	r7,-1
   50fb0:	00000406 	br	50fc4 <memcmp+0x3c>
   50fb4:	20800003 	ldbu	r2,0(r4)
   50fb8:	28c00003 	ldbu	r3,0(r5)
   50fbc:	31bfffc4 	addi	r6,r6,-1
   50fc0:	10c00e1e 	bne	r2,r3,50ffc <memcmp+0x74>
   50fc4:	21000044 	addi	r4,r4,1
   50fc8:	29400044 	addi	r5,r5,1
   50fcc:	31fff91e 	bne	r6,r7,50fb4 <__alt_data_end+0xfffdefb4>
   50fd0:	0005883a 	mov	r2,zero
   50fd4:	f800283a 	ret
   50fd8:	20c00017 	ldw	r3,0(r4)
   50fdc:	28800017 	ldw	r2,0(r5)
   50fe0:	18bfee1e 	bne	r3,r2,50f9c <__alt_data_end+0xfffdef9c>
   50fe4:	31bfff04 	addi	r6,r6,-4
   50fe8:	21000104 	addi	r4,r4,4
   50fec:	29400104 	addi	r5,r5,4
   50ff0:	39bff936 	bltu	r7,r6,50fd8 <__alt_data_end+0xfffdefd8>
   50ff4:	303fe91e 	bne	r6,zero,50f9c <__alt_data_end+0xfffdef9c>
   50ff8:	003ff506 	br	50fd0 <__alt_data_end+0xfffdefd0>
   50ffc:	10c5c83a 	sub	r2,r2,r3
   51000:	f800283a 	ret

00051004 <__register_exitproc>:
   51004:	defffa04 	addi	sp,sp,-24
   51008:	dc000315 	stw	r16,12(sp)
   5100c:	04000174 	movhi	r16,5
   51010:	840d6a04 	addi	r16,r16,13736
   51014:	80c00017 	ldw	r3,0(r16)
   51018:	dc400415 	stw	r17,16(sp)
   5101c:	dfc00515 	stw	ra,20(sp)
   51020:	18805217 	ldw	r2,328(r3)
   51024:	2023883a 	mov	r17,r4
   51028:	10003726 	beq	r2,zero,51108 <__register_exitproc+0x104>
   5102c:	10c00117 	ldw	r3,4(r2)
   51030:	010007c4 	movi	r4,31
   51034:	20c00e16 	blt	r4,r3,51070 <__register_exitproc+0x6c>
   51038:	1a000044 	addi	r8,r3,1
   5103c:	8800221e 	bne	r17,zero,510c8 <__register_exitproc+0xc4>
   51040:	18c00084 	addi	r3,r3,2
   51044:	18c7883a 	add	r3,r3,r3
   51048:	18c7883a 	add	r3,r3,r3
   5104c:	12000115 	stw	r8,4(r2)
   51050:	10c7883a 	add	r3,r2,r3
   51054:	19400015 	stw	r5,0(r3)
   51058:	0005883a 	mov	r2,zero
   5105c:	dfc00517 	ldw	ra,20(sp)
   51060:	dc400417 	ldw	r17,16(sp)
   51064:	dc000317 	ldw	r16,12(sp)
   51068:	dec00604 	addi	sp,sp,24
   5106c:	f800283a 	ret
   51070:	00800034 	movhi	r2,0
   51074:	10800004 	addi	r2,r2,0
   51078:	10002626 	beq	r2,zero,51114 <__register_exitproc+0x110>
   5107c:	01006404 	movi	r4,400
   51080:	d9400015 	stw	r5,0(sp)
   51084:	d9800115 	stw	r6,4(sp)
   51088:	d9c00215 	stw	r7,8(sp)
   5108c:	00000000 	call	0 <__reset-0x40000>
   51090:	d9400017 	ldw	r5,0(sp)
   51094:	d9800117 	ldw	r6,4(sp)
   51098:	d9c00217 	ldw	r7,8(sp)
   5109c:	10001d26 	beq	r2,zero,51114 <__register_exitproc+0x110>
   510a0:	81000017 	ldw	r4,0(r16)
   510a4:	10000115 	stw	zero,4(r2)
   510a8:	02000044 	movi	r8,1
   510ac:	22405217 	ldw	r9,328(r4)
   510b0:	0007883a 	mov	r3,zero
   510b4:	12400015 	stw	r9,0(r2)
   510b8:	20805215 	stw	r2,328(r4)
   510bc:	10006215 	stw	zero,392(r2)
   510c0:	10006315 	stw	zero,396(r2)
   510c4:	883fde26 	beq	r17,zero,51040 <__alt_data_end+0xfffdf040>
   510c8:	18c9883a 	add	r4,r3,r3
   510cc:	2109883a 	add	r4,r4,r4
   510d0:	1109883a 	add	r4,r2,r4
   510d4:	21802215 	stw	r6,136(r4)
   510d8:	01800044 	movi	r6,1
   510dc:	12406217 	ldw	r9,392(r2)
   510e0:	30cc983a 	sll	r6,r6,r3
   510e4:	4992b03a 	or	r9,r9,r6
   510e8:	12406215 	stw	r9,392(r2)
   510ec:	21c04215 	stw	r7,264(r4)
   510f0:	01000084 	movi	r4,2
   510f4:	893fd21e 	bne	r17,r4,51040 <__alt_data_end+0xfffdf040>
   510f8:	11006317 	ldw	r4,396(r2)
   510fc:	218cb03a 	or	r6,r4,r6
   51100:	11806315 	stw	r6,396(r2)
   51104:	003fce06 	br	51040 <__alt_data_end+0xfffdf040>
   51108:	18805304 	addi	r2,r3,332
   5110c:	18805215 	stw	r2,328(r3)
   51110:	003fc606 	br	5102c <__alt_data_end+0xfffdf02c>
   51114:	00bfffc4 	movi	r2,-1
   51118:	003fd006 	br	5105c <__alt_data_end+0xfffdf05c>

0005111c <__call_exitprocs>:
   5111c:	defff504 	addi	sp,sp,-44
   51120:	df000915 	stw	fp,36(sp)
   51124:	dd400615 	stw	r21,24(sp)
   51128:	dc800315 	stw	r18,12(sp)
   5112c:	dfc00a15 	stw	ra,40(sp)
   51130:	ddc00815 	stw	r23,32(sp)
   51134:	dd800715 	stw	r22,28(sp)
   51138:	dd000515 	stw	r20,20(sp)
   5113c:	dcc00415 	stw	r19,16(sp)
   51140:	dc400215 	stw	r17,8(sp)
   51144:	dc000115 	stw	r16,4(sp)
   51148:	d9000015 	stw	r4,0(sp)
   5114c:	2839883a 	mov	fp,r5
   51150:	04800044 	movi	r18,1
   51154:	057fffc4 	movi	r21,-1
   51158:	00800174 	movhi	r2,5
   5115c:	108d6a04 	addi	r2,r2,13736
   51160:	12000017 	ldw	r8,0(r2)
   51164:	45005217 	ldw	r20,328(r8)
   51168:	44c05204 	addi	r19,r8,328
   5116c:	a0001c26 	beq	r20,zero,511e0 <__call_exitprocs+0xc4>
   51170:	a0800117 	ldw	r2,4(r20)
   51174:	15ffffc4 	addi	r23,r2,-1
   51178:	b8000d16 	blt	r23,zero,511b0 <__call_exitprocs+0x94>
   5117c:	14000044 	addi	r16,r2,1
   51180:	8421883a 	add	r16,r16,r16
   51184:	8421883a 	add	r16,r16,r16
   51188:	84402004 	addi	r17,r16,128
   5118c:	a463883a 	add	r17,r20,r17
   51190:	a421883a 	add	r16,r20,r16
   51194:	e0001e26 	beq	fp,zero,51210 <__call_exitprocs+0xf4>
   51198:	80804017 	ldw	r2,256(r16)
   5119c:	e0801c26 	beq	fp,r2,51210 <__call_exitprocs+0xf4>
   511a0:	bdffffc4 	addi	r23,r23,-1
   511a4:	843fff04 	addi	r16,r16,-4
   511a8:	8c7fff04 	addi	r17,r17,-4
   511ac:	bd7ff91e 	bne	r23,r21,51194 <__alt_data_end+0xfffdf194>
   511b0:	00800034 	movhi	r2,0
   511b4:	10800004 	addi	r2,r2,0
   511b8:	10000926 	beq	r2,zero,511e0 <__call_exitprocs+0xc4>
   511bc:	a0800117 	ldw	r2,4(r20)
   511c0:	1000301e 	bne	r2,zero,51284 <__call_exitprocs+0x168>
   511c4:	a0800017 	ldw	r2,0(r20)
   511c8:	10003226 	beq	r2,zero,51294 <__call_exitprocs+0x178>
   511cc:	a009883a 	mov	r4,r20
   511d0:	98800015 	stw	r2,0(r19)
   511d4:	00000000 	call	0 <__reset-0x40000>
   511d8:	9d000017 	ldw	r20,0(r19)
   511dc:	a03fe41e 	bne	r20,zero,51170 <__alt_data_end+0xfffdf170>
   511e0:	dfc00a17 	ldw	ra,40(sp)
   511e4:	df000917 	ldw	fp,36(sp)
   511e8:	ddc00817 	ldw	r23,32(sp)
   511ec:	dd800717 	ldw	r22,28(sp)
   511f0:	dd400617 	ldw	r21,24(sp)
   511f4:	dd000517 	ldw	r20,20(sp)
   511f8:	dcc00417 	ldw	r19,16(sp)
   511fc:	dc800317 	ldw	r18,12(sp)
   51200:	dc400217 	ldw	r17,8(sp)
   51204:	dc000117 	ldw	r16,4(sp)
   51208:	dec00b04 	addi	sp,sp,44
   5120c:	f800283a 	ret
   51210:	a0800117 	ldw	r2,4(r20)
   51214:	80c00017 	ldw	r3,0(r16)
   51218:	10bfffc4 	addi	r2,r2,-1
   5121c:	15c01426 	beq	r2,r23,51270 <__call_exitprocs+0x154>
   51220:	80000015 	stw	zero,0(r16)
   51224:	183fde26 	beq	r3,zero,511a0 <__alt_data_end+0xfffdf1a0>
   51228:	95c8983a 	sll	r4,r18,r23
   5122c:	a0806217 	ldw	r2,392(r20)
   51230:	a5800117 	ldw	r22,4(r20)
   51234:	2084703a 	and	r2,r4,r2
   51238:	10000b26 	beq	r2,zero,51268 <__call_exitprocs+0x14c>
   5123c:	a0806317 	ldw	r2,396(r20)
   51240:	2088703a 	and	r4,r4,r2
   51244:	20000c1e 	bne	r4,zero,51278 <__call_exitprocs+0x15c>
   51248:	89400017 	ldw	r5,0(r17)
   5124c:	d9000017 	ldw	r4,0(sp)
   51250:	183ee83a 	callr	r3
   51254:	a0800117 	ldw	r2,4(r20)
   51258:	15bfbf1e 	bne	r2,r22,51158 <__alt_data_end+0xfffdf158>
   5125c:	98800017 	ldw	r2,0(r19)
   51260:	153fcf26 	beq	r2,r20,511a0 <__alt_data_end+0xfffdf1a0>
   51264:	003fbc06 	br	51158 <__alt_data_end+0xfffdf158>
   51268:	183ee83a 	callr	r3
   5126c:	003ff906 	br	51254 <__alt_data_end+0xfffdf254>
   51270:	a5c00115 	stw	r23,4(r20)
   51274:	003feb06 	br	51224 <__alt_data_end+0xfffdf224>
   51278:	89000017 	ldw	r4,0(r17)
   5127c:	183ee83a 	callr	r3
   51280:	003ff406 	br	51254 <__alt_data_end+0xfffdf254>
   51284:	a0800017 	ldw	r2,0(r20)
   51288:	a027883a 	mov	r19,r20
   5128c:	1029883a 	mov	r20,r2
   51290:	003fb606 	br	5116c <__alt_data_end+0xfffdf16c>
   51294:	0005883a 	mov	r2,zero
   51298:	003ffb06 	br	51288 <__alt_data_end+0xfffdf288>

0005129c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   5129c:	defffd04 	addi	sp,sp,-12
   512a0:	df000215 	stw	fp,8(sp)
   512a4:	df000204 	addi	fp,sp,8
   512a8:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   512ac:	0001883a 	nop
   512b0:	e0bfff17 	ldw	r2,-4(fp)
   512b4:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   512b8:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   512bc:	10000226 	beq	r2,zero,512c8 <_exit+0x2c>
    ALT_SIM_FAIL();
   512c0:	002af070 	cmpltui	zero,zero,43969
   512c4:	00000106 	br	512cc <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   512c8:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   512cc:	003fff06 	br	512cc <__alt_data_end+0xfffdf2cc>
